Building Linux Distributions for Fun and Profit: JMNG-7770 - events@cncf.io - Friday, November 20, 2020 3:12 PM - 39 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello there.
00:00:00 [W] I'm delighted to be giving this talk at Q Khan today.
00:00:29 [W] Hello there.
00:00:30 [W] I'm delighted to be giving this talk at Q Khan today.
00:00:33 [W] I will be sharing with you my experience on building Linux distributions. And then I will try to distill some lessons learned and look into the future but before jumping into the contents of the TOC, let me introduce myself.
00:00:46 [W] My name is Mario Monti Allah. I'm a longtime open source developer.
00:00:51 [W] I work at Kinfolk a startup company based in Berlin that focuses on Linux and kubernative. This talk is the result of mlops.
00:00:59 [W] Experiences working with Linux over the past 20 years.
00:01:02 [W] It's been an interesting and exciting journey, and I'm thrilled to be sharing it with you today.
00:01:07 [W] I'll first tell you about how my career with Linux developed working at small and big companies as well as being a Debian developer for 15 years.
00:01:17 [W] Then I will try to summarize the lessons. I've learned throughout this time.
00:01:22 [W] These are my experiences and my opinions but I'm sharing them with you today. Hope it doesn't you will find them interesting and perhaps learn something new.
00:01:30 [W] So let's start at the beginning.
00:01:33 [W] I grew up in Buenos Aires Argentina.
00:01:35 [W] I installed my first Linux distro back in the year 2000 back then it was common to both our Linux boxes and just text mode and only start X when needed for a couple of years.
00:01:48 [W] worked at to shove a developer at a consulting company. I'm a
00:01:52 [W] Still convinced him to let me run Linux on my workstation, but I was feeling proprietary software and this made me unhappy So eventually I decided I didn't want to keep doing that anymore in 2003.
00:02:05 [W] I quit this job and showing the IT department at my family's company.
00:02:08 [W] This was my first job doing Linux this company.
00:02:13 [W] Anymore in 2003.
00:02:16 [W] I quit this job and showing the IT department at my family's company.
00:02:20 [W] This was my first job doing Linux this company.
00:02:24 [W] We were deploying Linux installations to all users replacing Legacy proprietary software with open source software.
00:02:31 [W] Our budget was pretty tight.
00:02:34 [W] So we had to make sure we spend as little as possible on new hardware to do this. We decided to deploy think lines. This were old use mlops.
00:02:43 [W] Machines, that would we consider useless by most people but we gave them a new life by running a very small Linux image on them. That would just control mouse keyboard video a network and run a local X server.
00:02:57 [W] This xserve ER then connected to another machine where all the X client applications were actually running that way. We only needed one powerful machine / 10 or so thin clients.
00:03:08 [W] This allowed us to quickly expand our network two more computers reaching more users after a few years of this.
00:03:16 [W] We had deployed some 350 computers and at the time this felt like a lot to me.
00:03:21 [W] me. I was really proud of how I was adding more Linux users to the
00:03:26 [W] World and I really cared about each and every one of those computers. We have started this team with two people and with time it grew up to five of us.
00:03:38 [W] So we had less than a hundred computers per team member.
00:03:42 [W] I knew all of these computers by name.
00:03:46 [W] I didn't feel like we had our own distro.
00:03:48 [W] We were just using Debian but looking back we had basically all the traits of a Debian derivative except for a cool name.
00:03:55 [W] We had our own internal Rebel where we kept ditional packages that we needed.
00:04:00 [W] This could be packages that were not yet in Debian or Fork packages with special patches applied to them or packages that we had developed specifically for our needs.
00:04:10 [W] We also maintain the configuration of the machines in the fleet using puppet keeping our customizations in sink through Version Control.
00:04:19 [W] so yeah, we were pretty much When painting our own derivative, even if we didn't own it at the time I call that earlier that I'm a Debian developers so you can imagine Debian has played an important role in my Linux Journey
00:04:35 [W] Being we're at the end of the year 2000 and as the years passed, I became more and more involved with the distro by 2003.
00:04:35 [W] I consider myself at IBM back reporter.
00:04:38 [W] I took great pride in creating good bug reports with clear reproduction instructions logs Etc.
00:04:45 [W] And for a while that was enough for me, but this change in 2004 when I attended the Debian conference in Brazil up until this Deb come for I consider the van.
00:04:57 [W] Developers to be some sort of elite Geeks that were kind of superhuman completely out of my league.
00:05:03 [W] I felt that maintaining packages was such a difficult and complicated tasks that I wouldn't be able to do it.
00:05:09 [W] I was already sending patches to bugs but I felt like that was the maximum of what I could do for Debian, but then I met all these awesome people.
00:05:20 [W] They made me feel welcome.
00:05:21 [W] They valued my input. They explain how things were not so complicated they became
00:05:26 [W] My friends and so when I came home, I was a different person.
00:05:31 [W] I wanted to become a Debian developer and I no longer thought that maintaining packages was reserved for elite hackers.
00:05:38 [W] So a few months later, I started maintaining my first Debian package and the following year. I officially became a Debian developer.
00:05:47 [W] Throughout the years.
00:05:49 [W] I've done a lot of different things for Debian not just maintaining packages.
00:05:52 [W] Explain how things were not so complicated.
00:05:45 [W] they became my friends. And so when I came home, I was a different person. I wanted to become a Debian developer and I no longer thought that maintaining packages was reserved for elite hackers.
00:05:59 [W] So a few months later, I started mounting my first Debian package and the following year. I officially became a Debian developer.
00:06:07 [W] Throughout the years.
00:06:09 [W] I've done a lot of different things for Debian not just maintaining packages.
00:06:12 [W] I particularly enjoy fixing bugs.
00:06:14 [W] So for a while, I spent a significant amount of my free time fixing release critical bugs on other people's packages.
00:06:21 [W] I also helped organize a few Deb comes in particular.
00:06:26 [W] I was part of the main organ team for debconf 8 in Argentina and they become 15 in Germany.
00:06:31 [W] I'm currently the chair of the Debian technical committee the body that helps resolve conflicts among Developers.
00:06:37 [W] first when they can't agree on their own
00:06:41 [W] sometimes I think back to those days days back at my first Davion conference when I felt like the only human being among a bunch of superheroes and it's pretty amazing how my journey has been
00:06:53 [W] anyway back to my professional life.
00:06:56 [W] I worked at my family's company in Argentina until 2012 when I moved to Munich to work for the team that maintains the internal Linux distribution used at Google.
00:07:06 [W] There's actually more than one internal Linux distribution at Google.
00:07:10 [W] My team was in charge of the one used by humans in their workstations not by containers running in servers in data centers.
00:07:19 [W] Obviously moving to Google was a huge change coming from my Scrappy company dealing with a tight budget.
00:07:26 [W] I was quite shocked by the brand-new beefy work stations that were deployed to all our Linux users.
00:07:33 [W] Were deployed to all our Linux users.
00:07:35 [W] But of course more mind-blowing was the size difference add Google my team of 12 people was in charge of tens of thousands of computers and while the team grew a bit over time the amount of hosts on our
00:07:50 [W] We're a lot faster at any point in time.
00:07:54 [W] We had more than five thousand computers per team member to care for this meant that it was no longer possible to know the host my name and more importantly that everything needed to be automated not just the obvious
00:08:09 [W] you were a jean with puppet and automatically upgrading packages to their latest version, but also other things like automatically checking the health of the machines and Reporting back when there were problems or automatically creating backups for our users and giving them
00:08:20 [W] Data when they needed it and not less important was our battery of automatic tests that helped us. Make sure our releases were healthy enough to be deployed to the fleet every week.
00:08:30 [W] Our team was small and a user base was huge.
00:08:34 [W] We couldn't possibly deal with all incoming user requests.
00:08:37 [W] So we provided a bunch of tools and documentation to help users deal with issues themselves without the need to contact us including being able to reinstall
00:08:47 [W] All their computer without having to feel a single prompt some of these automation was already in place before I arrived some of it. I helped build myself part of what my team did was keep on top of developing new
00:09:02 [W] Including being able to reinstall their computer without having to feel a single product. Some of these automation was already in place before I arrived some of it. I helped build myself part of what my team did was keep on top of
00:09:28 [W] ask needed
00:09:30 [W] at Google there's a lot of different teams containing different parts of the stack as I've said, my team was in charge of the Linux platform, but there were a lot of other teams providing software on that platform and an important part of what we did was
00:09:45 [W] To do that this meant that some changes need to be coordinated across many different people across many different time zones.
00:09:54 [W] And I'll admit this could sometimes be quite challenging finding agreement across stakeholders is not always easy, but what helped me was remembering that everyone was a capable engineer looking to find the best possible solution.
00:10:10 [W] Putting aside those differences there were many things that were the same when asked what I did before working at Google. I would reply that mostly the same just at the much much smaller scale in both cases.
00:10:24 [W] We were keeping a rep of packages on top of what the district provided managing the configuration with puppet keeping all our changes and configurations in Version Control.
00:10:33 [W] what the goal of enabling our users to do their jobs and all of it using a
00:10:40 [W] That was facing Debian.
00:10:41 [W] Well sort of the team a show in 2012 was called go Boon to it was a Linux distribution based on Ubuntu that followed long-term support releases every two years.
00:10:54 [W] We would migrate from the previous LTS to the new one as time passed and the fleet grew this meant more and more work for my team too. Many things change between releases which meant lots of issues needed to be fixed before
00:11:09 [W] Much smaller scale in both cases.
00:11:11 [W] We were keeping a ripoff packages on top of what the district provided managing the configuration with puppet keeping all our changes and configurations in Version Control. What the goal of enabling our users to do their jobs.
00:11:25 [W] And all of it using a distribution that was based on Debian. Well sort of the team I show in 2012 was called go Boon to it was a Linux distribution based on Ubuntu that followed long-term support releases
00:13:03 [W] Version out we spend so much effort getting the fleet updated only to have to do the whole thing again two years later.
00:13:12 [W] So after going through this painful migration twice, I convinced my teammates and other interested parties that we didn't want to keep doing that anymore instead.
00:13:22 [W] We should switch to a rolling release model where packages got updated progressively we would no longer have a huge jump every two years but rather small increases every week.
00:13:35 [W] And while there might have been some disagreement regarding which Target to follow I convince the powers-that-be that we should track Debian testing.
00:13:43 [W] So in 2017, we renamed our team and our product to jail Enix we migrated the fleet from Ubuntu trustee to Debian testing which is itself a moving Target the migration took several months and
00:13:58 [W] moving while we were migrating
00:14:01 [W] and I'm not going to lie.
00:14:03 [W] There was a lot of work involved here and not all of it was easy or fun but after years of working on the necessary tooling to make this possible we managed to keep the Fleet Tracking Debian testing in a rolling release fashion
00:14:18 [W] Really awesome.
00:14:11 [W] I learned a lot and I grew a lot in the almost eight years that I worked at Google but eventually it was time for a change.
00:14:18 [W] So earlier this year. I took on a position at Kinfolk as I mentioned Kinfolk is a start-up based in Berlin.
00:14:26 [W] It's a small company dedicated to working with open source software with a special focus on Linux and kubernative.
00:14:34 [W] In my case.
00:14:36 [W] I've been spending most of my time on the development of flatcar containerless. Enix flat car is a container optimized OS based on the now deprecated chorus, which was the first container optimized OS coredns was itself based on
00:14:51 [W] Switch is based on shantou.
00:14:50 [W] So yeah, I'm not currently working on a Debian derivative for now moving to keep fog was again a big change for me.
00:14:59 [W] The thing that impressed me the most was the speed at which one could get things done at Google whenever I started a new project.
00:15:06 [W] There was a long ramp up time of getting used to new technologies putting all the complex pieces together getting buy-in from all stakeholders and so on a medium size
00:15:17 [W] This project could easily take a year to get launched.
00:15:22 [W] Working at a startup. There's a lot less red tape less complexity.
00:15:26 [W] Let's stake holders to consider.
00:15:28 [W] So things just move faster projects usually take a number of weeks maybe a couple of months if they are large and sure timelines might sleep a bit but everything just go faster. The other big change was that while I was still doing Linux
00:15:43 [W] Let's stake holders to consider.
00:15:39 [W] So things just move faster projects usually take a number of weeks maybe a couple of months if they are large and sure timelines might sleep a bit but everything just go faster. The other big change was that while I was still doing Linux
00:16:04 [W] Working on a distribution used by humans to one used by containers.
00:16:10 [W] There are a lot of differences there a big one is how security ways against usability with any software out there.
00:16:18 [W] There's usually a struggle between security and usability.
00:16:21 [W] You need things as Lockdown as possible while still allowing you to get things done in a reasonable amount of time and when security and usability Clash you need to make some hard choices.
00:16:34 [W] I found that the choice is made for Jill Enochs. We're different than the ones made for flat car.
00:16:41 [W] One example of this is that read-only user partition in flatcar as in chorus and Chrome OS the slash user partition is read-only. You can't install new software in it.
00:16:53 [W] There's no package management of any kind.
00:16:56 [W] The OS image stays exactly as it was shipped.
00:17:00 [W] You can still customize things in Etsy and side load software via containers, but you can't install new programs in /user nor can you tamper with the prodyna?
00:17:11 [W] Atoms that are already installed for a human user.
00:17:15 [W] This might sound really limiting but for are no assets used to run containers on it as long as it has the necessary tools to run these containers. This might be exactly what you want.
00:17:28 [W] Alright, so here we are.
00:17:30 [W] A young inexperienced a key and through years of fun and effort. I became an old timer.
00:17:38 [W] Now that you know how I got here.
00:17:40 [W] I'd like to share with you some of the lessons I've learned through all of this and then perhaps peek into what the future might bring one thing that I've realized is that Linux distributions come and go the very first destroy install was
00:17:55 [W] It was intended to be a user-friendly distro and although it was not for me.
00:17:51 [W] It did have a number of users years later.
00:17:54 [W] It got renamed to mandriva when the development of manned rocket merged with the one from connect Eva, but eventually most users move away to other distros. It stopped being relevant and stop releasing new versions.
00:18:10 [W] f****** my first up golf in 2004. I was there for the talk by Mark shuttleworth where he presented the idea of what would become Ubuntu he explained how the distro would work and how it could integrate with Debian bug then
00:18:22 [W] Black magic many people were skeptical nobody could imagine how this would turn out and how successful of onto was going to be.
00:18:28 [W] So some distributions have succeed in staying around others have died or become a lot less popular.
00:18:35 [W] Why what let's a Linux distribution.
00:18:38 [W] Stay relevant or makes another one become obsolete.
00:18:41 [W] There's of course not a clear answer, but we can look at some signs that popular distribution scary different users have different needs. It's impossible to make a distro that will be exactly what everybody wants because
00:18:56 [W] different things the most successful distributions are those that are easy to customize by other users sysadmins or both and also to create derivatives from derivative distributions are a good thing
00:19:09 [W] And also to create derivatives from derivative distributions are good thing because they can Target a very specific use case making it easy for their users to achieve their goals and at the same time benefiting the whole
00:19:18 [W] And at the same time benefiting the whole District ecosystem by integrating their patches Upstream.
00:19:25 [W] All right, so it's important for a district that wants to stay relevant to be easy to customize but what about the actual contents of the distro?
00:19:32 [W] We should keep in mind that having good defaults helps users do the right thing.
00:19:37 [W] This is particularly important with everything security-related in general people will go with whatever is the default except for the specific things. They care about and sadly very few people care about security.
00:19:52 [W] So if your district has good security decisions baked in most users will then apply those defaults and have this good security practices in their devices. If they need to take action to have those security measures applied.
00:20:07 [W] Likely be left vulnerable.
00:20:10 [W] Similarly if there's something that users want to do but you don't think it's a good idea like say installed some cool plugins from random places on the internet making it easy to do the right thing.
00:20:23 [W] will have a lot more impact than making it hard to do what users want.
00:20:28 [W] Telling users that they are doing it wrong won't take you very far giving them a way to easily do it. Right.
00:20:36 [W] We'll make a much larger difference.
00:20:38 [W] Another interesting lesson that I've learned is that bickering over trivial rivalries with only cause Division and the end up in a loss for everyone.
00:20:48 [W] a program needs to be patched, it doesn't matter whether the patch was created by a maintainer from Ubuntu Fedora Arch or Chrome OS
00:20:59 [W] What matters is that?
00:21:00 [W] Everybody gets the patch code as soon as possible.
00:21:03 [W] The less complicated code the better depending on your own history this may or may not sound obvious.
00:21:11 [W] But I do think it's important to say we all have different tastes different goals different preferences and that's okay diversity of implementations is good because it allows more Innovation, but that doesn't mean that we can't help
00:21:26 [W] That we can't collaborate across these boundaries.
00:21:20 [W] We are all doing open source in the end.
00:21:23 [W] We can all work to try to make a better world together.
00:21:27 [W] Alright, so I've talked about the popularity and relevance of this Rose. I mentioned a few factors that might help make or break a distro and what we can do to help each other succeed.
00:21:38 [W] Unfortunately, there's some bad news coming for those of us building Linux distributions.
00:21:46 [W] The current tendency seems to indicate that Linux distributions are becoming less and less relevant over the past ten years or so installing libraries and modules outside the main OS became the norm rather than the exception
00:22:01 [W] UPS distributions
00:21:50 [W] the current tendency seems to indicate that Linux distributions are becoming less and less relevant over the past ten years or so installing libraries and modules outside the main OS became the norm rather than the exception
00:22:17 [W] Piru be has the shames distribution node.js ship separate packages for everything including to check if the number is even and it's not just about programming languages these tendency to ignore the underlying distro means that a growing number of
00:22:32 [W] I'm with their own package management system for extensions and plugins. This includes a wide array of programs like Firefox cinnamon and even beam which has like four of them.
00:22:46 [W] Including their own way of installing add-ons has two main advantages first. It avoids the bottleneck of packages getting ingested by the distribution new plugins will just be available when they are published and second it obstructs installing
00:23:01 [W] The underlying this row so it doesn't matter whether you're running Debian or gen2. You'll install your KDE plugins the same way, of course, there's a reason why Linux distributions exist in the first place.
00:23:11 [W] So by passing them also comes with disadvantages less or no quality control less or no security updates in particular for stable versions and no integration with the rest of the system.
00:23:26 [W] In other words by making it super easy for users to install the latest flashy thing.
00:23:31 [W] It also makes it super easy for them to install random buggy insecure or even malicious software but users want the flashy things so they will mostly ignore these concerns.
00:23:42 [W] the next step on this trend towards making the distributions less and less important is running some form of contained applications on top of a thin layer of os the contained applications could be Docker containers snaps flat
00:23:57 [W] But users one the flashy things so they will mostly ignore this concerns.
00:23:59 [W] the next step on this trend towards making the distributions less and less important is running some form of contained applications on top of a thin layer of os the contained applications could be Docker containers snaps flat
00:24:26 [W] Have you I remember back in 2015. I attended a talk by a Docker developer who showed how she run each of her graphical applications inside a separate container back Dame this
00:24:41 [W] The top today the sounds normal.
00:24:44 [W] I do this myself for applications that I don't trust.
00:24:49 [W] Running everything inside containers can also lead to some bad consequences.
00:24:52 [W] The thing that worries me. The most is security because many people forget to ensure that all the software inside those boxes is up-to-date and most systems are not configured to take care of that automatically so
00:25:07 [W] World, what's even the meaning of a Linux distributions will distributions Mater in a couple of years?
00:25:12 [W] In the server space it's looking like distributions will matter less and less if you are running containers on a VM or a kubernative cluster on a bunch of notes.
00:25:21 [W] You care very little about which destroys running on these machines.
00:25:25 [W] What you do care about is that this destroys a secure as possible and that it allows you to run your workloads on top.
00:25:33 [W] The less software you have running in the way. So as the less you'll have to worry about possible security issues.
00:25:38 [W] And if you don't need to think about keeping the small base installation up-to-date that's even better. So distributions with a minimal footprint on automatic upgrades are clearly going to be favored.
00:25:51 [W] Of course, we will still need to get the software installed on those containers. So it's not like distributions will stop existing at least not in the immediate future, but as more workloads,
00:26:03 [W] Become containers or containerized applications. The underlying OS will matter less and less in summary for service side applications distributions will either be a minimal layer to run containers or top
00:26:18 [W] Positively of packages to create the content of those containers.
00:26:19 [W] Now what about desktop and laptops for end user devices a general-purpose distribution still make sense today.
00:26:27 [W] We don't yet have the tooling to properly manage running each application in some container to keep all those programs up to date or to avoid wasting tons of fun with and disk space on re-downloading the same libraries and Frameworks for each application
00:26:43 [W] Tooling that will be the most relevant coming up something that helps us make sense of all these different origins of software things, like keeping our pie packages up to date one of chin our node.js libraries understanding what's
00:26:47 [W] And what's ship via container ensuring that our containers have their security issues botched and so on some of these utilities are being built today others are yet to come when these tools are mature
00:26:57 [W] That Linux distros will stop being relevant in the desktop and laptop space. They will become a thin layer on top of which we will run containers.
00:27:04 [W] If you're part of a community that's building a distribution, you might not like this perspective.
00:27:10 [W] I understand as a Debian developer.
00:27:13 [W] I'm also not a fun but I don't believe that closing our eyes to reality is the way to go.
00:27:19 [W] Instead we need to accept that the word of Linux distributions has changed and build the tools that we need to make sense of this Brave, New World.
00:27:29 [W] No, what about coordinate is as you almost certainly no Google created kubernative based on a similar piece of internal software called Borg a lot of the design decisions taken for kubernative were based on the lessons learned by
00:27:44 [W] Years that board had been in use at Google the good things were replicated. The bad things were corrected.
00:27:50 [W] This is of course good because it means that the design was quite polished but something to note is that when creating kubernative based on Borg only the container orchestration part was included into the new product at Google.
00:28:05 [W] Kubernative based on Borg only the container of prostration part was included into the new product at Google Borg is fully integrated with the internal load balancer the internal file storage the internal networking
00:28:11 [W] Integrated with the internal load balancer the internal file storage the internal networking layer and so on in kubernative instead, all of these are integration points where we need to provide our own load
00:28:26 [W] Our integration points where we need to provide our own load balancer file storage pot to pot connectivity etcetera. The upside of this is that we can experiment with different implementations. We can try out different behaviors
00:28:40 [W] Which one best fits our needs the downside is that we end up with the overwhelming image of the cloud native landscape that once in awhile goes viral on Twitter.
00:28:52 [W] Some Cloud providers have some or even all of these Integrations solve for us, which is nice we can just use the systems that are part of the providers offerings and we don't need to care about configuring them or making them work with our kubernative installation.
00:29:08 [W] Except of course. This means that we can't always easily move our workloads to a different cloud provider. If it turns out that we get better value somewhere else and this is even harder if we want to move our deployment to Bare Metal this means that
00:29:21 [W] To be truly independent of the provider.
00:29:20 [W] We need to run our own cluster with our own Integrations. And this is hard to make it easier for users to run platform independent clusters a few kubernative distributions have appeared in the past years when we use one of these
00:29:35 [W] This have already been made for us so that we can concentrate on running our workloads.
00:29:36 [W] It's good to have variety not everyone will want the same things. So having different kubernative situations for different targets make sense.
00:29:44 [W] What's not so good is to have so much duplication of work, but in the end that's just part of the reality in the world of Open Source.
00:29:52 [W] It's likely that in the long run a few of these distros will emerge as the most popular and there will be derivative distributions from those.
00:30:01 [W] Those but that's yet to come.
00:30:05 [W] As I said Linux distributions are becoming less and less relevant.
00:30:08 [W] The OS used in the Covenant kubernative nodes. Mostly doesn't matter because we just run kubernative on top a consequence of this is that some of the problems that were already solved for Linux distributions like handling.
00:30:23 [W] And configuration of software need to be solved again at the kubernative level.
00:30:23 [W] And we don't really have good and stablished solutions at this level yet.
00:30:27 [W] Say there's a security problem in one of the libraries that our software uses when you sing software from a Linux distro, we would just rely on the maintainers updating the necessary packages.
00:30:40 [W] We would upgrade our machines to the latest version as part of our routing automated upgrade.
00:30:46 [W] What do we need to do for our containerize applications running on kubernative. We will need to manually check.
00:30:53 [W] Chapel occasions are affected and then upgrade those that need upgrading maybe some of them take longer than others to apply the necessary patches. And so we either need to keep holding until they are available or patch our apps ourselves if it's something
00:31:08 [W] The package management provided by Helm Cal help us with that but it still has a way to go to really solve this problem today when you're managing a large Fleet. It can get really hard to keep track of what's installed in your
00:31:15 [W] To go to really solve this problem today when you're managing a large Fleet. It can get really hard to keep track of what's installed in your clusters and whether some stuff needs urgent upgrades.
00:31:20 [W] Right. Now we are at the dawn of the era of kubernative distributions.
00:31:24 [W] They are not well established, but I do believe that to come partly. It's a matter of time until using a kubernative distro instead of doing a deployment from scratch gets more adoption and partly we still need tools that don't exist or
00:31:39 [W] Established, but I do believe that's to come partly it's a matter of time until using a kubernative d straw instead of doing a deployment from scratch gets more adoption and partly we still need tools that don't exist or require
00:31:54 [W] What can we do as a community to help move this forward?
00:31:57 [W] I think it helps to look at the lessons learned from Linux distributions, and then try to apply the things that worked and avoid those that didn't have good defaults, but make it easy for users and the riveted
00:32:12 [W] Have relevant security decisions and practices baked in.
00:32:17 [W] Collaborate with others building similar tools and even competing distributions. The future ahead of us is exciting.
00:32:26 [W] We can all make a difference if we work together.
00:32:30 [W] And with that we come to the end.
00:32:34 [W] This was my presentation on building a Linux distributions for Fun and Profit.
00:32:38 [W] I hope you enjoyed it and that you learned something new.
00:32:41 [W] Thanks for listening.
00:32:48 [W] So hey there, I'm here to answer live questions for now.
00:32:53 [W] There's only one question.
00:32:54 [W] But if you're there and you have questions feel free to add them.
00:33:01 [W] So the first question is, what are your thoughts on this trellis images and on whether I think there will be widespread adoption of them in the near future in the next year or two.
00:33:12 [W] To why or why not and yeah, I think this serverless images are probably going to dominate in the future.
00:33:21 [W] I think it makes a lot of sense to have this released images because when you are running a binary in a container, you don't want the fault destroy in it.
00:33:31 [W] Software there to reduce the attack surface due to reduce the maintenance burdens and so on.
00:33:34 [W] So yeah, I think the serverless images for containers are definitely the way to go.
00:33:40 [W] The next question says what Linux distribution do you recommend for production environments, especially for chaplain gatien's I don't think I have a recommendation for
00:33:55 [W] I as I was saying in my talk, I think that Linux distributions in the server side are becoming less and less relevant.
00:34:01 [W] So if you are running applications on Garnet is it really doesn't matter that much of course, I'm working on flatcars. So if you're running kubernative zai would want to
00:34:16 [W] But car but I recognize that the actual innocence tribution doesn't matter that much and a lot of other things matter more like the security practices that you are implementing
00:34:22 [W] The security practices that you are implementing.
00:34:23 [W] Next question says is this a good time to get into this rural development?
00:34:29 [W] What technical knowledge is required to get started with Debian or any destroy in general?
00:34:35 [W] That's like a very long question to answer.
00:34:40 [W] Let's start with whether it's a good time to get into dress or development. I mean, I was saying that it's the districts are becoming less.
00:34:50 [W] It's relevant, but I don't think they will stop existing anytime soon.
00:34:54 [W] They will just be less relevant because other things are more relevant. So if you are using Debian and you want to contribute to Debian Shore, yes, it is a good time to get into contributing to Debian because Debian really can use more
00:35:09 [W] Missions. So for sure and what is the technical knowledge required to get started with Debian?
00:35:15 [W] It's it depends on what you're starting with.
00:35:20 [W] It's not the same if you're starting with like a job application and node.js application a Perl or python or go. Like each of those are different.
00:35:32 [W] their required different tools different technical knowledge and you can also get started with other things like I don't know.
00:35:39 [W] Communication documentation Etc.
00:35:41 [W] So it depends a lot on what you are trying to achieve. So next question asks from a support perspective.
00:35:52 [W] Do you prefer Alpine or Boon to full-blown image?
00:35:55 [W] So if I guess this is talking about the contents of a container and for the contents of a container, so for what is inside a container, I would want to have the least amount of software in it. So
00:36:09 [W] In this two options, I would choose Alpine and as I mentioned earlier these serverless and the least amount of software that you have there the better I think that in the future we might come to other ways of getting
00:36:25 [W] Like maybe we can create the image from Debian but then only ship the things that we want to be there. And this could be with tools that come from Debian or with like the distro list tools
00:36:33 [W] Says what do you think the future looks like for dependency management updating with all the module systems and I'm not sure I have an answer there.
00:36:32 [W] I think this is like a big problem to solve and I've been trying to think of solutions for this problem myself, but I think it's a problem big enough that it requires more than one person.
00:36:45 [W] So I think this is something that we need to tackle because it's becoming
00:36:52 [W] Unmanageable, but yeah, I don't have the answer of like how to solve it.
00:36:57 [W] I would love to have the answer but I don't next question says how was your learning path from the beginning for someone that would like to learn to code contributing to open source projects? So as I told my in my story I started
00:37:13 [W] From scratch like I knew nothing. I knew nothing about Linux but I heard about open source, and I found it interesting and I was like, oh I want to try linen. So I installed it on my computer and I started learning from there.
00:37:23 [W] And at first I was like just the user. I didn't know much I research staff on the internet how to do this how to do that.
00:37:33 [W] Then I started becoming more involved.
00:37:36 [W] I started reporting bugs. I was going to University so
00:37:40 [W] So I learned how to code at University.
00:37:43 [W] But of course, you don't need to learn at University.
00:37:46 [W] You can learn how to code in other places and I got involved little by little and in particular. I think something that was important for me was that I got involved in the things that I was using so I got involved in Debian because I was using Debian I got involved
00:38:01 [W] Meaning of the cinnamon desktop environment because it was the desktop environment that I was using and so on.
00:38:00 [W] So I think it's important that to find motivation to like to contribute to things that you use yourself and your to find interesting and important.
00:38:12 [W] How are we doing on time?
00:38:17 [W] Yeah, okay. I think we have time to for one more question.
00:38:22 [W] And the last question says kubernative tribution stand to be coupled to the underlying Linux distribution.
00:38:30 [W] For example, present of cloud in a tour our management tooling you think that we will see standardization interfaces between kubernative and Linux distributions.
00:38:41 [W] may be I think this is probably something that we do want to have
00:38:46 [W] Ben I think there is some work going on with things like yeah with cluster API, but I think there's still some work there and we do need
00:39:01 [W] Agree between the different Linux distributions that are used for kubernative and the different coordinate system visions and try to find some shared interfaces to make it a little bit less crazy.
00:39:07 [W] So that's it for the live questions.
00:39:10 [W] Thank you very much, and I will be in the cube con runtime slack workspace if you have any more questions, bye-bye.
