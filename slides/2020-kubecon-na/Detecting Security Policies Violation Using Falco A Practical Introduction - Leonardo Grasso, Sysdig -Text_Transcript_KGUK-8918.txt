Building security operators for Kubernetes with Falco and eBPF.: KGUK-8918 - events@cncf.io - Wednesday, November 18, 2020 3:02 PM - 30 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello everybody and welcome.
00:00:01 [W] The goal of this maintainers truck is to look at one of the main interesting part of Falco Falco is cncf incubated project that aims to provide Cloud native runtime security.
00:00:18 [W] We will see an introduction to Falco a demo about to create the custom of Falco rules me having fun with ASCII art.
00:00:31 [W] but first a bit of History
00:00:34 [W] Marco was created as an open source project by sysdig in 2016.
00:00:40 [W] It was donated to the cncf in 2018 about a year later the cncf promoted Falco to the incubation level Falco has been the first ever on time security project to
00:00:55 [W] the cncf version level
00:00:45 [W] before we start with the presentation.
00:00:47 [W] Let's introduce myself. My name is Leonardo Grasso and I am an open source software engineer at sysdig and a Falco maintainer.
00:00:57 [W] My daily job is to cut the Falco improve and evolve it and work with the community.
00:01:04 [W] I'm also the creator of the Prometheus metrics as partner for Falco altinity events, and I love to contribute to other Falco related project to in general.
00:01:15 [W] I love to contribute to open source project.
00:01:17 [W] By the way, you can find me on GitHub Twitter. But also in the Falco channel on the kubernative lek among other things.
00:01:27 [W] I love to present the Fantastic work the maintainers and the world Community continuously due to make Falco better. So here I am. Let's start explaining what Falco is
00:01:44 [W] in short Falco is a cloud native runtime security tool that makes it easy to consume Colonel events and a rich those events with useful information.
00:01:58 [W] The maintainers and the world Community continuously due to make Falco better.
00:02:04 [W] So here I am.
00:02:05 [W] let's start explaining what Parker is
00:02:13 [W] in short Falco is a cloud native runtime security tool that makes it easy to consume Colonel events and a rich those events with useful information.
00:02:33 [W] When an application when every application is going to need to communicate with another application or access to the network or for example, use the file system and so on
00:03:07 [W] need to communicate with another application or access to the network or for example use the file system and so on in general every time an application needs to access the kind of functionality
00:03:25 [W] Every time an application needs to access the kind of functionality.
00:03:29 [W] The application will use a system call.
00:03:34 [W] I'm talking about the system call because the system call is the fundamental interface between an application and the Linux kernel, so it is also a real source of proof for what is happening in a system.
00:03:51 [W] So Falco passes the content of those system calls at runtime read them and what argument were passed to them.
00:03:59 [W] Then Falcon reaches those events with information that decay that came from other sources since Falco focuses on the cloud and knative stacked can for example fetch information from the quote from
00:04:14 [W] 10 error and time layer and from kubernative
00:04:19 [W] Falco also called also games with a rich rule set of security rules built explicity for kubernative Linux and the cloud native stack.
00:04:29 [W] Those rules are asserted that runtime and when I rule is violated in a system Falco, we left the user of the violation. That's basically what Falco does.
00:04:46 [W] Why Falco?
00:04:48 [W] Change is a fundamental part of the cloud native.
00:04:53 [W] It is also part of the deploying software and it's part of the infrastructure everything changed, but sometimes unexpected things happen and we have to respond to that accurately,
00:05:08 [W] Expected event can affect the security.
00:05:02 [W] So for this reason Falco give us a set of eyes to protect our system against a noun or wanted the behavior. It can also detect the zero day vulnerabilities CVS.
00:05:18 [W] And treats Falco is about to detection but you can think of it as a utility that enable prevention tool. For example with Falco. You could also uncover future security policies
00:05:26 [W] Eight the mechanisms that take action during a security violation, but how can Falco do that? Let's see how our quirks.
00:05:38 [W] Well to understand how Falco works one of the first things to know is how it gets events from the system specifically how it just Remains the Linux kernel to receive system call.
00:05:54 [W] the Falco process runs in the user space in the same place where your application running to however, it also has a concept of the inputs that we usually call driver these dryers run at the canal level to strengthen the system so
00:06:09 [W] A they elotl Interceptor understand what is happening at the diagonal and bring the tap into the user space where Falco the Tran has a demon can continually assert that information against
00:06:22 [W] Basically these drivers act as producer producer of those events that are consumed by Falco symbiotes.
00:06:26 [W] Falco for this reason comes with a set of gyres by default one of which is implemented as a kernel module. And another one that uses the EBP F technology each of those
00:06:42 [W] And cons but both provide the same functionality, for example, you can use the candle model that is very efficient, but you maybe you can notice tal everywhere.
00:06:51 [W] You cannot sell it everywhere on the other end and BPF probe as the as some Advantage it can program the Cardinal without risking to bracket for example, but it requires a
00:07:06 [W] As the as some Advantage if the can program the caramel without risking to bracket for example, but it requires a newer Colonel finally it worth to mention that
00:07:19 [W] Finally it worth to mention that a new kind of driver as as a recently been introduced.
00:07:27 [W] It's a pit race-based producer that we call PD good which can run in the user space only but is lower than other drivers.
00:07:38 [W] Anyway, it is still beneficial since it's the only possible solution some environments like some managed kubernative cluster or
00:07:49 [W] Or in places where you cannot establish the kernel module either the ppf problems.
00:08:00 [W] So we are saying that Falco uses the kernel of the operating system as the source of true and takes this information but there is more it also reaches them with the meta data coming from other layers
00:08:15 [W] Stock for example how you can see in the slide the from the container and time and kubernative.
00:08:45 [W] And your deployment that is very important because when the when doing runtime electing runtime protection of the of your infrastructure you are typically
00:09:00 [W] much more interested in what service award deployment is showing a strange Behavior rather than just getting a containerd d or something like that is not easy to link and last button
00:09:11 [W] Stir It also important to know that the drivers are not the only input supported by farc for example, it already supports the kubernative audit logging as an even the source and future may be other inputs
00:09:26 [W] It's audit logging as an even the source and future may be other inputs may be added.
00:09:32 [W] Now we got an overview of how far could get security events as input.
00:09:38 [W] We can take a look at its architecture.
00:09:48 [W] Well Rama and high-level point of view Falco architecture seems to be relatively simple. We can see on the right in this light.
00:09:59 [W] There are inputs which are also which also include information on Richmond as I was saying before that's an essential part of the input mechanism at runtime all that information gets collected
00:10:14 [W] The right in this light there are inputs which are also which also include information on Richmond as I was saying before that's an essential part of the input mechanism at runtime all that
00:10:42 [W] Betting the security and which in the end arrives at the Falcon giant that we see in the middle then join continues matches events against the condition specified by the rules.
00:10:56 [W] We provide one of when one of these condition is violated, they enjoin triggers an alert and delivery receipt through the output channels now since we will discuss
00:11:11 [W] Loosened up later in this presentation.
00:11:13 [W] Let's put it aside for a moment and move on to the output channels.
00:11:19 [W] Parkour provides some output channels. We can see the standard output the syslog the file output. Basically it can write events to file the program out would eat can pass
00:11:34 [W] Pass the alerts to the standard output of a program and there is the HTTP output. For example, you can use the HTTP output to integrate
00:11:45 [W] Book or you can use other tool like Falco sidekick.
00:11:47 [W] That's by the way another open source project under the Falco security GitHub organization with Falco sidekick.
00:11:56 [W] You can forward alerts to lock teams elastic search for example, and many other destination.
00:12:06 [W] Finally, there is also a grpc output.
00:12:11 [W] You can enable grpc and connect to the Falco exporter. For example, that's an order that's again another open source project under the Falco cgroup GitHub organization, and I am the creator of it with
00:12:26 [W] Falco export there. You can export The Matrix to Prometheus. For example
00:12:32 [W] There is more there are sdks for golang rust and the python by using them.
00:12:41 [W] can consume a Falco outputs directly from your application. Essentially. There is a bunch of ways to consume Falco outputs.
00:12:58 [W] We have learned that we can monitor Cisco and other things and get usable information on the one hand on the other end when the runtime assertion 5 fails we can send alert with those
00:13:13 [W] Of information whether we want wherever we want.
00:13:13 [W] But that's kind of useless. If you don't have rules that make use of that.
00:13:18 [W] So let's see what the rules are and how you use them.
00:13:28 [W] I rule tells Falco which security policy we wanted to observe and the information we want to receive if the policy has been violated basically our rule 9 ly Define two things the
00:13:43 [W] Under which another two should be emitted and the message that should be output when a matching. Even of course.
00:13:50 [W] Some rule examples. First of all rules make use of specific of a specific syntax to express filtering condition that syntax aims to be as lean and as
00:14:05 [W] The same Bowl as possible, but at the same time allows you to create a sophisticated stuff in the first in the first example, we set the condition to detect when a shell is running a container as
00:14:14 [W] Addition says container ID is different than us name these mean that we are inside the container and there is a process called bash in this way.
00:14:23 [W] We express the session that will be evaluated at runtime to detect when someone is using he's using a bash inside the container.
00:14:34 [W] Next another example right below binary deer in this rule.
00:14:40 [W] We are using a macro that will see later.
00:14:43 [W] So the macro opener, right and the second part of the condition are basically saying I write operation in one of these directories then containerd namespace change
00:14:58 [W] Detects a container trying to escape each name space, but at the same time it is screw this processor that we know are allowed to death for example docker.
00:15:08 [W] Of course condition can become a more and more sophisticated how you can see in the last example.
00:15:15 [W] It's depend on how we use all the information provided by inputs for this reason Falco games, which a rich set of the security rules specifically built for kubernative.
00:15:38 [W] Does you need moreover you can customize those rules depending on your needs, but also more important you can easily create your own.
00:15:55 [W] So what's better than a demo to see how to create rules.
00:16:02 [W] Let's see Falco in action.
00:16:07 [W] By the way, Falco is really straightforward to install.
00:16:11 [W] I don't know that the package and struct it.
00:16:17 [W] And copy everything to my root filesystem one more thing since I used the binary package.
00:16:25 [W] I also have the to stall the dryer manually and the package provide a script for that, which is Falco.
00:16:35 [W] Falco driver loader
00:16:39 [W] This script is now building and installing the Falco kernel module via dkms.
00:16:45 [W] This script is also included in the installation script of the Debian package or the RPM package that we provide as other solution methods.
00:17:00 [W] this baggage you don't need to do that manually same thing if you use the docker image that we provide to
00:17:09 [W] okay done.
00:17:12 [W] Now that Falco has been installed.
00:17:15 [W] Let's see if it works.
00:17:21 [W] Okay, I'll call started and it loaded its default configuration file, which is less s***** C / Falco flash file Kudo TMO. I see that
00:17:36 [W] It also started to detect the some activity that my browser is doing right now, but this is not the goal of this demo.
00:17:35 [W] So to test if it works properly I am gonna run a simple command.
00:17:46 [W] That will create a file inside the Divine the bin directory and this should trigger a rule that's included into the default rule set of f***.
00:18:01 [W] Let's see.
00:18:04 [W] Okay.
00:18:07 [W] Falco as we expected emitted on alert
00:18:14 [W] with the common I typed before so in less than two minutes. We have Falco installed up and running awesome.
00:18:29 [W] All right, let me in this.
00:18:37 [W] Now I want to show you how to create a custom rule.
00:18:43 [W] I'll that can contain several types of elements.
00:18:44 [W] It can contain rules that we see below it can also contain macros that basically are Rook conditions knee pads that can be reused inside the rules or even another
00:18:59 [W] So contain lists lists our collection of items that can be used in rules Microsoft or even in other lists. The only difference is that list cannot contain filters.
00:19:05 [W] Now before going before moving forward, I want to explain you the example.
00:19:12 [W] I am going to use in this rule.
00:19:14 [W] I want to detect if my webcam is being used by some problem exactly.
00:19:21 [W] I want to know if some program is using my webcam.
00:19:28 [W] In Linux a webcam is a video device that is mapped to a file.
00:19:33 [W] For example slash Dev slash video 0 and we know that our program has to call a system call to open any file.
00:19:41 [W] So we are going to detect when some process opens a video device file.
00:19:47 [W] file. So let me fill this role first thing. We need a name this name Will uniquely identify the rule into the
00:19:58 [W] f*** rule engine, but also in output. Let's say video device open it.
00:20:05 [W] Muppet to a file for example slash Dev slash video 0 and we know that the program has to call a system call to open any file.
00:20:12 [W] So we are going to detect when some process opens a video device file.
00:20:18 [W] file. So let me feel these rule first thing. We need a name this name Will uniquely identify the rule into the vocal rule engine, but also in output
00:20:32 [W] it's a video device open it.
00:20:36 [W] We also need a longer description that explain what the rules detects. So the text that video device was opened.
00:20:55 [W] And now the most important part the filtering expression. This is protection is needed to filter those events that match our rules Falco provides a language for that. It's a very simple
00:21:25 [W] ice was opened
00:21:30 [W] and now the most important part the filtering expression. This is protection is needed to filter those events that match our rules Falco provides a language for that. It's a very simple
00:22:14 [W] At the same time.
00:22:16 [W] It's very powerful.
00:22:18 [W] Since we need to select those events that are opening a file so that are calling and openness is called we came right even type equal to open.
00:22:38 [W] But I know that this is not the only this called that open a file.
00:22:44 [W] I know there is another one that's very similar that is open at so let's add it to two.
00:22:54 [W] I equal.
00:22:57 [W] I'm not.
00:22:59 [W] Sorry, it should be or of a nut.
00:23:04 [W] The syntax is basically a chain of Boolean Expressions.
00:23:09 [W] There are operators moreover. We can also use the information received from the inputs. Now this condition is not enough because we are just saying
00:23:24 [W] Moreover we can also use the information received from the inputs. Now this condition is not enough because we are just saying select all those event.
00:23:38 [W] which are using Cisco open or a Cisco open it we also need to specify which file descriptor is used by these these
00:23:53 [W] These these Cisco course and we can do that because among other information.
00:23:57 [W] We also receive the values that are passed as argument to those skull. So let me add some parentheses and
00:24:14 [W] Description name equal to / the / video 0 in this way.
00:24:23 [W] We are saying select those event that are opening a file and the file is slash Dev slash video 0 but we can further
00:24:38 [W] Because in this way now we are just selecting only one video device. We can add more than one. So let me change this operator with another operator provider but provided by the syntax that see
00:24:52 [W] More than one so let me change this operator with another operator provider but provided by the syntax that see that is.
00:24:57 [W] Start with and remove the zero in this way.
00:25:02 [W] We are selecting all those files that starts with that video 0 and in this way, we should select all video device that we have in our system.
00:25:17 [W] And with this relative simple condition, we have a caved the goal of on my example.
00:25:23 [W] So let's move on on the message.
00:25:26 [W] The output message is also very important.
00:25:30 [W] We can write something inside it example for example at the deal.
00:25:38 [W] The device was open-ended, but we can also use place order to include all those useful information related to this event.
00:25:52 [W] All those information that we think are relevant for these rule.
00:25:59 [W] For example for sure. I want to know the the way the device name that was used. When was used by the program that triggered
00:26:15 [W] the equal
00:26:19 [W] In this way, the Falcon join will replace these with the actual file name, but we can do more.
00:26:31 [W] For example, I can add the command that generated the event and for that I can use Rock Dot.
00:26:44 [W] command line
00:26:48 [W] but we can do even more for example, if I wanted to know if the event was generated inside the container not I can add these containerd equal to
00:27:03 [W] Containerd e in this way, if the event was generated inside the inside a container. I will get the container ID.
00:27:12 [W] Otherwise, I will see just ask that means it was not generated inside the container.
00:27:20 [W] All right, and finally we have to assign a priority to our rule.
00:27:28 [W] Let's say that if someone open my webcam, it's critical. Okay.
00:27:35 [W] So let's do that.
00:27:39 [W] Okay, I am gonna run Falco with the - our option to specify the file the root file.
00:27:49 [W] I wanted to be loaded and now there are several ways to test this rule. But to be honest since the nude is the MU could be a bit boring I have opted for the funniest one. At least I hope so.
00:28:06 [W] And here we go.
00:28:11 [W] Okay, the alert was emitted and you can see me in ASCII art and now you can see me dancing
00:28:26 [W] And here we go.
00:28:23 [W] Okay, the alert was emitted and
00:28:31 [W] You can see me in ASCII art and now you can see me dancing.
00:28:38 [W] Okay, let's stop this. I think it's enough.
00:28:43 [W] And returned to series things.
00:28:48 [W] Marco send as to alerts maybe because the commander user called The Sims the system called two times and we can see that the
00:29:03 [W] you alerts maybe because the commander user called The Sims the system called two times and we can see that the priority the priority was critical
00:29:17 [W] It is a video device was open-ended and we also have all other useful information like the device name the common and so on.
00:29:28 [W] That's it.
00:29:37 [W] Well, we are about to finish and I hope you enjoyed this talk.
00:29:41 [W] But before closing, I'd like to give you some useful resources here. You can find our website and our GitHub organization and also other project I mentioned in this
00:29:57 [W] I would like to invite you to join our fantastic community.
00:29:58 [W] You can find us at the Falco channel on the kubernative lock. And by the way, feel free to contact me.
00:30:07 [W] Thank you.
00:30:09 [W] ciao
