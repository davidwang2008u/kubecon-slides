CNCF Serverless WG: CloudEvents and Serverless Workflow: NGKU-7916 - events@cncf.io - Friday, November 20, 2020 5:06 PM - 33 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] All right. Welcome everybody.
00:00:01 [W] I'm Doug Davis and we have team were on the call as well.
00:00:05 [W] First talk about what's going on with cloudevents.
00:00:09 [W] just very very quick update there. And then the bulk of the session will actually be the workflow specification and stuff. And that's the more exciting piece for you guys.
00:00:16 [W] Okay, so let's go and jump into the cloudevents stuff.
00:00:18 [W] So I'm not going to talk about cloudevents is I'm going to assume everybody already knows that instead of just want to bring you up to date on what's happening with it since the last time we've met which I guess is last coupon North America since then we've released version 1.0 of spec
00:00:33 [W] The specification but the transport bindings meaning how do you actually map the cloudevents metadata to the various protocols TCP amqp all the other good stuff.
00:00:23 [W] Also including the encoding I'm sorry also included are the encoding formats of how to encode the cloudevents metadata into Json and Avro as well. As a primer to give you some basic information about some of the decisions we made maybe some design or implementation guide and stuff like that.
00:00:38 [W] As well as a primer to give you some basic information about some of the decisions we made maybe some design or implementation guide and stuff like that.
00:00:42 [W] Now we also have a whole bunch of sdks out there and some of those are very very active.
00:00:46 [W] So in particular take a look at things like the Java one the goal line one JavaScript very very active.
00:00:52 [W] she served as well because there's a bit of a lot of activity in that space because these sdks are really the main starting point for people to pick up the stuff just makes your life a little bit easier for dealing with these cloudevents metadata things, okay.
00:01:05 [W] Because we're going to point out what's next for us.
00:01:07 [W] Well, the biggest thing is community feedback or customer feedback, right?
00:01:11 [W] We need to hear from other people who are actually using it to make sure we didn't miss anything getting things wrong and stuff like that and to be honest as of right now, we really haven't heard a whole lot which is really really good, but we're not just sitting back and waiting.
00:01:23 [W] We're also looking at sort of the next set of pain points related to the cloudevents itself.
00:01:28 [W] So let's go and go to the next slide. And what I want to do is quickly touch on the two bits of work that we're doing related to this now.
00:01:34 [W] Now if you understand what cloudevents is it's about how to help the producer get the cloudevents or the event to the consumer.
00:01:42 [W] So it sort of the tail end of the process here.
00:01:44 [W] So let's talk about the first spectro.
00:01:46 [W] We're going to be looking at in addition and that is going to the next slide and that's the discovery API spec. And with that's about is the consumer in essence as the name implies discovering who produces the events of interest to them or what events
00:02:01 [W] Does produce okay that because obviously if you're going to get events, you need to know who to subscribe to what events you can get from them and stuff like that.
00:02:08 [W] And additionally you need to figure out how you actually do the subscription itself.
00:02:13 [W] Right?
00:02:13 [W] Do they support HTTP, maybe amqp or did everything come across Kafka that kind of stuff right?
00:02:19 [W] So you have this discover step in the whole process.
00:02:21 [W] Next you then have this the subscription API itself.
00:02:24 [W] Okay, and that's how you actually do the subscription.
00:02:27 [W] Okay. Where do you send the description request to how?
00:02:30 [W] You tell it you what you want the advanced delivered over HTTP versus some other mechanism.
00:02:35 [W] What are the format of the messages?
00:02:36 [W] How can you filter the messages if they support filtering stuff like that it these are all things that you would naturally expect from discovering subscription API, but they're not really actually written down anyplace in an interoperable format.
00:02:48 [W] And so we want to try to address those concerns.
00:02:50 [W] And then finally, of course when you're all done go to the next slide you end up back at the cloudevents back, right and you use that to help get the the event from the producer to the consumer. Okay, and so that's
00:03:01 [W] What we're really focusing now in the cloudevents group itself is the Discovery spec as well as the subscription specification. Now these specs are relatively new but we are far enough along.
00:03:14 [W] We're actually planning on doing an interactive event in the November timeframe.
00:03:17 [W] All right.
00:03:10 [W] Thanks Doug.
00:03:10 [W] So serverless workloads is a cncf Sandbox sandbox project.
00:03:15 [W] It's part of the serverless working group.
00:03:16 [W] So the group that Doug works because also also it's open source and Apache 2.0 license.
00:03:23 [W] It's a community project.
00:03:24 [W] So here you can find some information about our GitHub repo website and the community chat and meeting information the serverless workloads defines a declarative and domain specific work of language declarative.
00:03:37 [W] It is not expressed in low-level code.
00:03:40 [W] However defines an abstraction that can be described in both Jason auriemma formats and domain-specific as it targets the domain of registration of event-driven and distributed services and just to show this as an example on the left hand side.
00:03:55 [W] We have two simple requirements written in natural language. And these are when for example patient has a bladder infection, we want to notify some doctor specific to his condition and the similar thing is for let's say a
00:04:08 [W] Hard because we want to notify a cardiologist in this case on the right-hand side. You guys see that serverless workloads does not express these requirements in terms of code, like if else statements and things like that.
00:04:20 [W] Neither, does it express it using terminology that does not fit its domain if you look on the bottom right hand corner will see that we can translate these requirements straight into things of our domain which are events such as
00:04:35 [W] Having a bladder infection or irregular heartbeat and services.
00:04:38 [W] They need to be invoked in those cases, which is notifying a particular doctor for those conditions.
00:04:45 [W] Now sorry serverless workloads based on standards.
00:04:49 [W] We use the cloudevents specification to Define events that can be either produced or consumed during workloads accusation.
00:04:56 [W] And also we Define correlations of the many events you might have in your systems using the cloudevents format.
00:05:02 [W] We use the open API specification to Divine services and India operations on the services, which need to be invoked during workloads acute finally the serverless workloads.
00:05:16 [W] Workflow patterns or control flow patterns dealing with the execution order error handling data management and things like that.
00:05:23 [W] that. Now the overall project goals is to define a language that can be used across multiple different runtime Services, which then can be deployed in many different situations. Some of them being container or Club, but forms,
00:05:40 [W] Now in order to start utilizing events within your workloads you first have to Define them, which of many we're interested in for our particular use case.
00:05:49 [W] Perform it and how you define them within your workload the finished and for event correlation in we said it was the same thing. We again use the cloudevents format specifically the context attributes to Define correlation between the many
00:05:49 [W] In your systems now, once we Define an event, we have to start interacting with it.
00:05:55 [W] So what can events due within workloads events can start workloads instances? They can continue existing work on instances.
00:06:01 [W] They can be like we said produced or consumed and they can be also used to make logical decisions and the right hand side.
00:06:07 [W] We see a very simple definition. We just says before we end the workflow we want to produce an event and in this case our event is a type of workflow.
00:06:17 [W] Pleated event and then this event which is produced by our workloads equation than can be consumed by their other workloads castration workloads or other different types of services. That might be interested.
00:06:30 [W] Similar is for services and evocation of services.
00:06:34 [W] We want to define the operations that need to be exit on the services. They need to be executed during workloads equation and the left hand side. We see a simple open API definition.
00:06:47 [W] And in this case, it's just a part of it which defines one particular operation get inventory, which is one operation one of many that could be available in this particular.
00:06:59 [W] Service when the right hand side we see how we actually defined this operation and disservice.
00:07:05 [W] It's basically we have an operation parameter which contains the URI or the path to the definition of the service.
00:07:13 [W] Need to be exact on the services. They need to be executed during workloads the fuchsia and the left hand side. We see a simple open API definition.
00:07:17 [W] And in this case, it's just a part of it which defines one particular operation get inventory, which is one operation. One of many that could be available in this particular service on the right hand side.
00:07:31 [W] We see how we actually defined this operation in the service.
00:07:36 [W] It's basically we have an operation parameter, which contains
00:07:39 [W] The URI or the path to the definition of the service the open API definition and also the unique identifier or the operation idea of the operation that needs to be invoked during workloads accuser so you don't
00:08:14 [W] Or the operation idea of the operation that needs to be invoked during workloads accusation.
00:08:20 [W] So you don't have to deal with things like authentication and putting things inside of your workflow definition.
00:08:25 [W] There is not really related to Aid the execution of your work for model. It is very specific to the invocation.
00:08:32 [W] actually amuse the openfaas specification for that as well.
00:08:37 [W] Now we understand that there is many different types of services and how dare you invoke. So with serverless workloads, you can evoke service restful types of services so services that are exposed in some particular end point, but you can also invoke
00:08:52 [W] Win, but you can also invoke event triggered services and services that are triggered by some particular events.
00:09:02 [W] The last part of defining your workload is the control flow of logic. So here we Define the state and the order in which these states are executed in serverless workloads States can be seen like a little black box.
00:09:15 [W] They it receives input either some data or an input event.
00:09:19 [W] does its control logic part of what is this particular needs to be done. And then he produces some sort of data output or an output event as the result of the execution of this particular.
00:09:31 [W] They're part of the control for launch.
00:09:34 [W] Now serverless work will be decided to go with explicit control blood flow, which means you clearly Define what you're building oftentimes in work clothes and control for logic.
00:09:47 [W] We do things in a very granular level which sometimes becomes ambiguous and what I mean by that is it's hard to figure out which part of your control flow fits together and which parts of your controlled flow or
00:10:02 [W] This work will be decided to go with explicit control blood flow, which means you clearly Define what you're building oftentimes in work clothes and control for logic.
00:10:13 [W] We do things in a very granular level which sometimes becomes ambiguous and what I mean by that is it's hard to figure out which part of your control flow fits together and which parts of your controlled
00:10:49 [W] The perform some particular piece of the solution of your business problem.
00:10:54 [W] So in the bottom we see that we have decided that each state has a type in the type really describes really the control flow of logic that this particular state does if a.type is for example event, you know that the control flow of logic which isn't
00:11:09 [W] For logic, which isn't inside of this state deals with events and the payloads and things like that.
00:11:16 [W] If the type is switch, for example, you know that we're making some sort of either database story vent based decisions and things like that.
00:11:23 [W] Now you can Define the whole bunch of different control flow patterns with serverless workloads who can Define sequences where you execute one piece to your workflow orchestration after another you can do looping
00:11:38 [W] Angela parallel execution decisions based on like we said here that are or events things like that. But we also deal with a little bit different things like for example human interaction during workloads accusation, which is sometimes might be very
00:11:53 [W] Sample human interaction during workloads accusation, which is sometimes might be very important in different use cases.
00:11:57 [W] Now, let's take a look at all the different project components of serverless workloads so far.
00:12:02 [W] We've been talking about this middle piece or the language there Stiller's work for language is defined via Json schema, which defines all the rules and things like that to how you actually what you can Define within the language around that we have a set of language extensions.
00:12:17 [W] Tensions do not influence workloads EQ schnoor the control flow of logic.
00:12:22 [W] However enhance it in order for runtime systems to be able to make some things like overall performance improvements in terms of cost and things like that in addition to that serverless workloads.
00:12:35 [W] So provides things like sdks, we have them in Java and go currently testing kits in order for runtime implementations to see their compliance level towards the specification.
00:12:46 [W] And we also have a set of plugins for IDE something's so let's take a quick just to look at for example, one of these language extension be K Pi or the key performance indicators is extension.
00:13:00 [W] This allows you to infer had information about the workflow which are the expected results during workloads runtime execution and comparing with the actual ones that you gather during actual
00:13:16 [W] So this little language extension can help us improve performance of your workflows to cost Effectiveness in cost and effectiveness.
00:13:25 [W] Let's take a look quick. Look at the Java SDK the features of this are parsing of both Jason and llamo serverless workflow language formats. You has a fluent API so you can basically create your workloads different nations using just
00:13:40 [W] includes validation against the specification and it also allows you to generate diagrams based on either your Json or yeah mlops your object model represents your workflows and the last thing we
00:13:47 [W] Here is the visual studio code plug-in that our project also provides. It has code hints and code Snippets.
00:13:52 [W] They're based again on the on the serverless workloads.
00:13:55 [W] Json schema or the language definition it again provides also validation for both Jason and llamo files and it allows you to visually preview your diagrams as so as you're modeling your diagrams in Visual Studio code you
00:14:11 [W] Review them at the same time.
00:14:12 [W] So now then with the introduction part that I wanted to do a demo it's a very small demo but I kind of wanted to see a show you guys help easy it is to get started with workloads castration.
00:14:25 [W] And also of course with with the serverless workloads self.
00:14:28 [W] So for this I just want to set this up a little when you start doing using workloads to work a straight things really you're solving business problems. So what you have to do is you have to first understand what is
00:14:42 [W] Business problem and then you want to see what kind of service is this you have available in your systems that you can utilize in using some sort of control for logic given provided to you by the workflow solution in order to solve your business problem.
00:14:57 [W] Really you're solving business problems.
00:14:50 [W] So what you have to do is you have to first understand.
00:14:53 [W] What is your business problem?
00:14:55 [W] And then you want to see what kind of service is this you have available in your systems that you can utilize in using some sort of control for logic given provided to you by the workflow solution in order to solve your business problem.
00:15:08 [W] for this simple example to kind of go back and slides are business problems is patient onboarding. So and now let's take a look at
00:15:18 [W] What services we have available yarder to solve our problem.
00:15:22 [W] So for this I'm going to exit out of the presentation.
00:15:26 [W] Sorry.
00:15:28 [W] And I'm gonna have the application running.
00:15:31 [W] This is running on localhost right now, and I'm going to look at my Swagger UI. So we now this application again is running my Local Host locally for the sake of the demo, but these services in real world scenarios of course
00:15:46 [W] And I'm gonna look at my Swagger UI. So we now this application again is running my Local Host locally for the sake of the demo, but these services in real world scenarios, of course would be deployed or in a container platform or
00:16:02 [W] Are distributed basically but here we see that we have two Services.
00:16:06 [W] We have a patient service. The service is responsible to to register a new patient into a system and then we have a scheduling service which then takes this new patient and given their conditions like we discussed before in the slide assigns the particular
00:16:22 [W] That can best treat their condition.
00:16:23 [W] Of course in a real world scenario.
00:16:24 [W] We would have a much bigger set of services and things like this.
00:16:27 [W] So for our sake of the demo is just too so to look back at our business problem, which onboarding a patient in order to unboard a patient for our demo.
00:16:38 [W] We want to First.
00:16:39 [W] invoke the patient service and then we want to invoke the scheduling service to assign a doctor to this particular patient. So it's kind of try it all together and do this.
00:16:50 [W] This I'm just gonna go ahead here and open up visual studio code and after I close like 50 million Windows like usual.
00:17:05 [W] All right.
00:17:02 [W] Now this is my application. We all have it's a little Java application that runs on quercus. You can really use any particular language that they use in a uses a Java runtime an open source Java runtime of the serverless workloads plantation. So we have
00:17:17 [W] Which represent their to Services now, what I wanted to do is to show you how to get started. The first thing I'm going to do is go to my vs code extensions and type in serverless
00:17:32 [W] And I'm going to download this extension. Now. This is the extension that we provide for more serverless workloads logic that we talked about earlier. Now, I already have this installed but this would be the first step. Once I have done this I can go ahead and start
00:17:46 [W] Be the first step. Once I have done this I can go ahead and start creating my workflow.
00:17:51 [W] So pretty much anywhere with John Boehner and mavin under resources.
00:17:55 [W] We want to go and create a new file.
00:17:58 [W] So this file is going to represent our workloads.
00:18:01 [W] So let's call it on boarding.
00:18:05 [W] And in this case we're going to just do a Jason definition. You can same thing to yambol. So one of the things that once you download it
00:18:14 [W] at the vs code extension for serverless workloads, you get code hints and code Snippets. In this case. We will see that it shows me all the different parameters that I can start using on the top level definition which are based on of course
00:18:29 [W] Of the of the underlying language.
00:18:31 [W] So in this case, I'm going to give my workflow a unique ID of onboarding make sure I spell that right.
00:18:38 [W] I'm gonna give it a name which let's say we say new patient onboarding.
00:18:46 [W] I'm going to give it a version.
00:18:47 [W] Let's say 1.0 and at this point I want to start defining the different functions that need to be executed what when this workflow is running so,
00:18:58 [W] So what I'm going to do is I'm going to define a function surae.
00:19:02 [W] This is real quick and I want to start defining my two functions the first function.
00:19:07 [W] I'm going to give a logical name of let's say register new patient and now I have to Define.
00:19:15 [W] How do I actually invoke this function? The only thing I have to do is create an operation parameter, which then points to my open API definition, which I have here and we can take a look at it also visually and bof
00:19:29 [W] So which is kind of cool.
00:19:30 [W] So in this open API definition a see my patient service and the post which means I want to create a new patient has an operation ID of add.
00:19:41 [W] So let's copy that go back to our workflow. So all I have to do is a relative path to / API slash open API the Json which is my open API definition and I have to give it a unique operation
00:19:56 [W] So I'm just going to copy that.
00:19:59 [W] And now we're going to Define our second service that we would like to invoke in. Its operation.
00:20:04 [W] Let's say assign doctor to patient and it's the same service big open API definition, but here we go down to schedule and we see that the one we want to call is has a unique idea of a sign.
00:20:19 [W] It's good to do this and that's it.
00:20:08 [W] So now that I've done I'm done with my service definition. So I want to start creating my control for logic.
00:20:16 [W] So for this we have an array called State and my I'm going to create a new state.
00:20:23 [W] I'm going to give it a name of let's say lights on board.
00:20:29 [W] And that's it.
00:20:30 [W] And now I have to give my state of particular type.
00:20:33 [W] Now. The extension is going to list you all the different types that you can choose here depending on you know, what you want to do. The one we're going to use it is a simple operation State.
00:20:45 [W] It's a state that runs one or many operations in this case evocations of our services either sequential or parallel.
00:20:52 [W] So I'm just going to give it a type. Now. I don't I have to say that this is the first state that
00:20:59 [W] It's invoked when my workflow instance is created.
00:21:02 [W] So I have a little star definition with a kind there is different ways to start the workflow.
00:21:08 [W] So in this case, we're just going to go ahead and start it without any extra information and I want to say my action mode here.
00:21:17 [W] I want to execute these two Services sequentially because we first have to unboard a patient before we assign a doctor do it. Otherwise, they could be some cases where you want to execute a pair.
00:21:28 [W] LL and now I'm just wanting to Define.
00:21:32 [W] To use is to invoke my register a new patient service.
00:21:37 [W] So for this I don't have to redefine my services here.
00:21:40 [W] I just referenced them but their logical name and after this.
00:21:47 [W] I want to call my assigned doctor service. Now. I have to tell the workflow that after the execution of this particular State. I want to finish workloads accusation. So I also have to give it
00:22:02 [W] And again, there's different ways of ending workflows.
00:21:56 [W] For example sending an event killing the entire all the processes running things like that. But we just want to Simply and it is this case and I have some oh, yeah.
00:22:08 [W] Yeah.
00:22:09 [W] Me and Jason get along this one.
00:22:12 [W] So you see just with 30 lines of code in yeah. Well, that would be probably about 20, of course. We have created a simple workflow. So let's now go ahead and see.
00:22:22 [W] See if I'm going to restart my application. So in addition to the services is we all have in running on localhost if it picks it up and let's see what happens.
00:22:33 [W] This is the start up in just a second while we wait.
00:22:38 [W] All right. So that's done. Now. One thing I wanted to show you guys is that workflows are not some weird thing that you have to use a special way of invoking or it's different than for example, how you define
00:22:53 [W] Workloads are really the same and here we have seen the definition of our to Services.
00:22:48 [W] They were writing on our system before we created the serviceworker. Now if I refresh this page, you will see an onboarding service. And what is this?
00:22:58 [W] Well, that is the workload. We have just defined We have basically taken our workflow definition and itself deployed it as a service and that has the advantage now and not only it's a restful service that we can call this endpoint version 1.0 which is
00:23:13 [W] the version of the work for the defined and onboarding which was the unique ID the identified by the re putting our workloads.
00:23:20 [W] We can actually interact with the service orchestration just like another service that we have defined pretty much anywhere.
00:23:27 [W] So in that this is really kind of what we wanted to do.
00:23:30 [W] We have a local host here at created a simple page and this first form allow us to enter some information about a new patient and when we click on board
00:23:43 [W] So you guys I'm not making this up.
00:23:45 [W] We have a little post HTTP post to our endpoint which actually will trigger a new workflow instances equation. And then on the bottom, we will see the results of the workflow orchestration,
00:24:00 [W] Patient and also the doctor assigned to the patient given the patient's condition.
00:23:57 [W] So I just give it simple some named John and this guy has unfortunately a bladder infection and is we see when we clicked on board. There are serverless workflow was executed it contacted the patient
00:24:12 [W] And this guy has unfortunately a bladder infection and is we see when we clicked on board.
00:24:09 [W] There are serverless workflow was executed it contacted. The patient service is stored the particular patient. You can take their scheduling Service as we have defined and assigned dr.
00:24:20 [W] Elizabeth to this particular patient.
00:24:22 [W] So that kind of really guys shows you how easy it is to get started these days with workloads. And also how it is is to get
00:24:30 [W] Arta doll. So with the serverless workloads specification and that's all I had for the demo.
00:24:36 [W] Let's go back to the presentation W want to do this or should I go for you're on a roll?
00:24:44 [W] It's gone. All right.
00:24:46 [W] Well, thank you guys very much.
00:24:48 [W] I hope you enjoyed our talk for more information, of course cloudevents great specification you cloudevents that I owe for serverless workloads.
00:24:57 [W] workloads. We have several serverless workloads that I owe.
00:25:00 [W] Hope to see you guys in the community. And if you need more Health, here's the context for Doug and myself. Thank you guys very much everybody.
00:25:11 [W] All right.
00:25:11 [W] we're live.
00:25:12 [W] Can you hear me?
00:25:13 [W] Okay.
00:25:17 [W] All right, you guys have any questions feel free to type in the chat?
00:25:21 [W] Otherwise just going to listen to team roomy ramble on back and forth. Although while we're waiting. I do have a question for you just to get the thing going here.
00:25:31 [W] What kind of collaboration teamwork be done with workloads spec relative to other specs or projects that are out there as I think you've had some conversations with other folks.
00:25:39 [W] Will this work will be a serverless serverless workloads that I owe we hope to see you guys in the community. And if you need more help here is the context for Doug and myself.
00:25:48 [W] Thank you guys very much everybody.
00:25:54 [W] All right.
00:25:54 [W] we're live.
00:25:55 [W] Can you hear me?
00:25:56 [W] Okay.
00:25:58 [W] here
00:26:00 [W] All right, you guys have any questions feel free to type in the chat? Otherwise just going to listen to team roomy ramble on back and forth.
00:26:09 [W] Although while we're waiting. I did a question for you just to get the thing going here. What kind of collaboration teamwork be done with workloads spec relative to other specs or projects that are out there as I think you've had some conversations with other folks.
00:26:23 [W] Yeah, we talked to some other cncf project. We talked to Argo specifically are the most and we're collaborating with them and seeing what they are doing and how we can relate to them as well.
00:26:36 [W] So, yeah, if we're always looking for more people to talk to and more projects.
00:26:43 [W] We also had some outside projects. They're working on some workflow runtimes and collaborated with them. But yeah, Argo is kind of like the main one weaveworks.
00:26:52 [W] We're working with at the moment obviously for your demo. You had a an implementation of this already written is that available for people to play with and you consider that to be sort of a reference implementation?
00:27:06 [W] Yeah, currently. We have a number of Open Source Java runtimes. They're trying to implement the specification.
00:27:12 [W] We also have a lot of people looking at it and and the biggest question is.
00:27:18 [W] Hey, do you guys also provide a runtime implementation and the answer from the project perspective or the specification perspective the answer is no we're defining the language and we're dependent on the runtime to a for adoption and implementation
00:27:33 [W] We're working with at the moment obviously for your demo. You had a implementation of this already written is that available for people to play with and you consider that to be sort of a reference implementation?
00:27:46 [W] Yeah, currently. We have a number of Open Source Java runtimes. They're trying to implement the specification.
00:27:52 [W] We also have a lot of people looking at it and and the biggest question is.
00:27:58 [W] Hey, do you guys also provide a runtime implementation and the answer from the project perspective or the specification perspective the answer is no we're defining the language and we're dependent on the runtime to a for adoption and implementation
00:28:32 [W] Meant to infer what we've seen on you time runtime implementation as well as existing ones as markup the specifically deals with orchestration of events and distributed service implications.
00:28:48 [W] That's propelling her project that's near and dear to my heart K native because I'm involved in that one.
00:28:52 [W] Have you seen anybody doing implementation of this on top of K native at all?
00:28:56 [W] I'm assuming we fit there because right it's just serverless function type stuff.
00:28:59 [W] Yeah, the language itself.
00:29:02 [W] It's Canadian as well.
00:29:03 [W] well. You can always translate the event definitions and the function definitions into K. Knative specific things like sinks and things like that, and we did also have
00:29:17 [W] Java demo with the cloud native Java implementation that we also run it on Kane knative and kubernative.
00:29:23 [W] So the language itself in really be used anywhere.
00:29:28 [W] It is just the time if you're looking if you have your architecture that targets the same domain is the language it really makes sense of using it. It does not try to replace other languages or other markups their existing for workflows, but
00:29:43 [W] Really a portable and language.
00:29:46 [W] I mean vendor neutral language specific for the Target domain they were looking at
00:29:52 [W] okay.
00:29:53 [W] Anyway got a question from Richard when you click on the onboard button in the demo exactly what code was executed is that generated code or handwritten?
00:30:00 [W] Okay, then.
00:30:02 [W] Yeah.
00:30:02 [W] Thanks for the question.
00:30:03 [W] It's a very good question. Most of the time this trip depends on Durant with implementation for the one we were using now the the runtime would translate the Json or DML workflow definition at compile time into runtime
00:30:19 [W] Runtime implementation can execute so at that point when I click the on boarding button, I would actually the runtime with execute generated code that know the translated or your workloads a finition into a runtime
00:30:26 [W] And that was actually triggered so we depends again on the runtime, but the best way to do it is is is do this at a compile-time level. So it's much faster and you don't have to do any translations Jason manipulation XML, you know was
00:30:37 [W] Only the best for larger processes took too long at that point. Once you trigger it you're running the executable either an image if you want to deploy this imagery whichever way we wanted a boy.
00:30:50 [W] Yeah, I got another one for you.
00:30:53 [W] So because I know our last time we actually this presentation together your get a slightly different demo.
00:30:57 [W] There is one step in there that you didn't have Kudo this time.
00:31:00 [W] So I want to make sure I pointed out that I thought was really cool feature.
00:31:04 [W] What if as part of the workflow you have to have some sort of human interaction.
00:31:08 [W] How do you guys handle that or can you handle that?
00:31:11 [W] Yeah, definitely there we deal with this with as far as what we call a callback.
00:31:17 [W] So a workflow definition has the way workloads.
00:31:22 [W] We defined wait state. So these are the parts or the steps during workloads equation where some dishes decision has to be made those decisions can be either arrival of some events or Precision by human.
00:31:37 [W] So the way we handle this in a language itself is we issue a call.
00:31:41 [W] That can be there ascending of an event or a specific call to a human task service that you might be running in your systems.
00:31:47 [W] And then the workflow is going to wait until a decision from the service comes back.
00:31:53 [W] So this is how we say okay at this point.
00:31:56 [W] I'll wait for the decision. Okay?
00:32:01 [W] All right, I guess I could think of is for you.
00:32:06 [W] No, that's okay any other questions from the audience?
00:32:19 [W] Everybody shy if not everybody towards Friday afternoon through early late.
00:32:26 [W] but
00:32:28 [W] Yeah, no Casey s maybe we just wrap it up here.
00:32:31 [W] here. I just remind everybody that we go with slack Channel and believe it's the maintainers like Channel you can will hang up there about 15 minutes. So if you guys have any final questions
00:32:49 [W] Other than that, yeah, I think team or anything else. You want to cover or shoe wrap it up.
00:32:54 [W] Yeah, we can wrap it up again.
00:32:55 [W] Thank you guys for joining.
00:32:56 [W] Thanks for listening to us. And we'll in Doug there was to come maintainers direct Channel.
00:33:03 [W] Yeah.
00:33:03 [W] Yeah.
00:33:03 [W] Yeah.
00:33:03 [W] Yeah.
00:33:03 [W] Yeah.
00:33:04 [W] I think it's too - koukin - maintainers to my phone and we'll be there if you guys can think of any questions later.
