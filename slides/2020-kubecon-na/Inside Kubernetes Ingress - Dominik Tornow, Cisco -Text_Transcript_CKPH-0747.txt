Inside Kubernetes Ingress: CKPH-0747 - events@cncf.io - Friday, November 20, 2020 5:07 PM - 27 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello and welcome to inside kubernative Ingress a cube Khan and Cloud native corn North America 2020 presentation.
00:00:09 [W] I am Dominic tour.
00:00:11 [W] no principal engineer at Cisco.
00:00:50 [W] Hello and welcome to inside kubernative Ingress a cube Khan and Cloud native corn North America 2020 presentation.
00:01:00 [W] I am Dominic tour.
00:01:02 [W] no principal engineer at Cisco.
00:01:04 [W] I focus on systems modeling specifically conceptual and formal modeling to support the development and the documentation of complex software systems this presentation focuses on the concepts behind Ingress for kubernative.
00:02:22 [W] Conceptual and formal modeling to support the development and the documentation of complex software systems this presentation focuses on the concepts behind Ingress for kubernative.
00:02:33 [W] It does not focus on it's possible implementations or it's possible set of features.
00:02:42 [W] Kubernative Ingress is related to kubernative services to Deep dive into kubernative Services visit inside kubernative Services a q Khan and Cloud native corn North America 2019 presentation.
00:02:59 [W] Is it inside kubernative Services a q Khan and Cloud Native knuth America 2019 presentation?
00:03:06 [W] What problem does increase for kubernative address?
00:03:11 [W] Ingress for kubernative enables the external consumption of a set of kubernative HTTP Services hosted on one cluster. We Are One HTTP endpoint
00:03:27 [W] How does in Greece for kubernative addresses problem?
00:03:31 [W] To enable the external consumption of a set of kubernative HTTP Services hosted on one cluster.
00:03:37 [W] We Are One HTTP endpoint in Greece for kubernative addresses two different concerns Network Ingress as well as kubernative Ingress.
00:03:47 [W] Network Ingress addresses the question of how to admit traffic into the cluster kubernative Ingress addresses the question of how to route traffic within the cluster
00:04:00 [W] a kubernetes cluster is typically defined as a set of kubernative nodes a set of physical or virtual machines.
00:04:07 [W] However, this presentation is not concerned with nodes.
00:04:11 [W] So we will reason about a cluster is a set of pots that Ren run or we'll run on the Clusters nodes.
00:04:19 [W] The first topic of this presentation will discuss Network Ingress the admission of traffic.
00:04:26 [W] Discuss only the bot not the how the second topic of this presentation will discuss kubernative Ingress the routing of traffic. We will discuss both the what and the how
00:04:40 [W] before we develop a definition of Ingress for kubernative.
00:04:44 [W] We will spend the next few minutes to develop an intuition of Ingress for kubernative.
00:04:51 [W] In order to develop an intuition of Ingress for kubenetes, we will develop an intuition of both Network Ingress and kubernative syngress first up Network Ingress the admission of traffic.
00:05:07 [W] Let there be two communicating and points a service consumer and the service provider.
00:05:13 [W] The service consumer is not hosted on the kubernative cluster.
00:05:17 [W] It is external the service provider is hosted on the kubernative cluster. It is internal.
00:05:25 [W] Network Ingress denotes the point or means of admission furthermore Network Ingress implies directionality Crossing from external to internal next up kubernative Ingress
00:05:40 [W] Was consumer and the service provider?
00:05:26 [W] The service consumer is not hosted on the kubernative cluster.
00:05:30 [W] It is external the service provider is hosted on the kubernative cluster. It is internal.
00:05:38 [W] Network Ingress denotes the point or means of admission furthermore Network Ingress implies directionality Crossing from external to internal next up kubernative Ingress
00:06:16 [W] of traffic
00:06:18 [W] previously there were two communicating and points a service consumer and the service provider.
00:06:25 [W] The service consumer has to learn the address of the service provider to actually consume the provided service.
00:06:33 [W] However, a persistent Trend complicates this picture one monolithic service provider is broken up into many service providers microservices.
00:06:45 [W] Now the service consumer has to learn the address of each service provider to consume the services.
00:06:55 [W] Kubernative Ingress is a proxy and API Gateway that exposes multiple service providers as a single endpoint. Therefore greatly simplifying consuming the services.
00:07:08 [W] putting both together
00:07:11 [W] Ingress for kubernative is the composition of network Ingress and kubernative syngress where Network Ingress is the admission of traffic into the kubernative cluster and kubernative Ingress is the routing of traffic within the kubernative cluster
00:07:27 [W] Kubernative Ingress is an API Gateway.
00:07:32 [W] With an intuition of Ingress for kubernative. We will spend the rest of the presentation to develop a set of related definitions of English for kubernative.
00:07:42 [W] In order to develop definitions for Ingress for kubernative.
00:07:46 [W] We will once again develop definitions for both Network Ingress and kubernative syngress. So first up Network Ingress the admission of traffic.
00:07:59 [W] In software engineering the distributed system is an unbounded set of components from here on out cold and points and points communicate by exchanging messages via a network the behavior of a distributed
00:08:15 [W] Is attributed to the behavior of its endpoints and the communication between them.
00:08:13 [W] The complexity of a distributed system is attributed to the autonomy of its importance and the intricacy of the communication between them without loss of generality.
00:08:23 [W] Let's focus this discussion on two endpoints E1 and E2.
00:08:31 [W] An endpoint is connected to the network via a channel.
00:08:36 [W] the network maintains an association between endpoints and addresses
00:08:43 [W] From here on out. We will graphically represent this Association as if the address is a property of the channel.
00:08:51 [W] We keep track of the sequence of send events and receive events in an end points history. If an endpoint wants to send a message. It will place that message in its Channel.
00:09:04 [W] An endpoint placing a message in its channel is represented by a send event.
00:09:11 [W] The network picks up the message from the sending end points chin and determines the receiving end points Channel and places the message in that channel.
00:09:21 [W] the network placing a message in on endpoints channel is represented by a receive event
00:09:28 [W] In the channel of the end point whose address matches the message Target address.
00:09:29 [W] This can also be represented graphically as a time-space diagram each time line represents an M Points history empty circles represents and events filled circles represent receive events.
00:09:45 [W] A pair or Tuple of corresponding send and receive events is called a flow so far.
00:09:52 [W] We have applied a global point of view.
00:09:55 [W] In this model, we are able to take the Viewpoint of the oil knowing Observer.
00:10:00 [W] We can observe both the channels of E1 and E2 at the same time conversely E1 or E2 cannot
00:10:13 [W] Eben can only observe its own channel.
00:10:17 [W] And in our model its own address it simply cannot reach beyond the same is true for E2 E2 can only observe its own channel and its own address.
00:10:32 [W] Eveyone to send a message to e 2 e Bond first has to learn the address of e to the same is true for E2 in order for E2 to send a message to E1 E2.
00:10:41 [W] the address of E1 a process called endpoint discovery
00:10:40 [W] moving towards the kubernative snyk Rook model in kubernative network addressable endpoints or parts the kubernative network model specifies that any part can communicate with all parts without
00:10:55 [W] elation
00:10:56 [W] The kubernative network model does not specify whether external endpoints can or cannot communicate with parts as a consequence, depending on your cluster Network Ingress may be trivial
00:11:11 [W] to implement
00:11:11 [W] as we discussed earlier, we separate the set of n points into external endpoints and internal endpoints who communicate across that line of Separation here.
00:11:24 [W] We consider n points 1 through 4 is being external end points and five through eight is being internal endpoints in effect quads.
00:11:37 [W] Given the separation of n points into external and internal endpoints.
00:11:41 [W] We can classify the communication between endpoints according to the membership of the source and target of the communication.
00:11:50 [W] There are four possible combinations.
00:11:54 [W] In the first combination sources a member of the set of external endpoints.
00:12:00 [W] And Target is a member of the set of external and points.
00:12:06 [W] This particular type of flow does not have a name.
00:12:11 [W] In the second combination source is a member of the set of external and points and Target is a member of the set of internal endpoints.
00:12:21 [W] This particular type of flow is called north-south traffic in addition given the directionality this combination constitutes Network Ingress in the third combination source.
00:12:36 [W] Member of the set of internal and points and Target is a member of the set of external and points.
00:12:43 [W] This particular type of flow is again called north-south traffic in addition given the directionality this combination constitutes Network egress.
00:12:57 [W] In the fourth and love combination source is a member of the set of internal endpoints and Target is a member of the set of internal endpoints.
00:13:07 [W] This particular type of flow is called West East traffic.
00:13:13 [W] So in conclusion Network Ingress can be defined as the set of all flows that originated outside the cluster and terminate inside the cluster.
00:13:25 [W] Next up kubernative Ingress the routing of traffic kubernative sysdig finds a kubernative syngress object in effect. The kubernative Ingress object defines a collection of HTTP
00:13:41 [W] Was that determine the target of that request?
00:13:33 [W] Ingress matches on HTTP requests path and host header against its routing rules to determine the target kubernative service to proxy the request to
00:13:47 [W] this example illustrates a kubernative syngress object in effect.
00:13:53 [W] This Ingress object defines a collection of four request level routing rules.
00:13:58 [W] In my personal opinion, these are best represented is a decision table.
00:14:05 [W] For example the first rule matches an HTTP request with the host header or footer torque and the path of / A2 proxy to a pod that matches a service named for a on port 8080 again.
00:14:20 [W] Presented as a role in the decision table.
00:14:16 [W] The third rule matches an HTTP request with a host header of Barda dork and a path of / A2 proxy to a pod that matches the service name or a on Port 80 90.
00:14:32 [W] And again represented as a role in the decision table.
00:14:39 [W] Represent it as a time-space diagram when the kubernative syngress proxy receives a request.
00:14:45 [W] It matches the request against the decision table and forwards the request so that a part that matches the target service receives the request
00:14:58 [W] Why do I say forward to request so that a pot that matches the target service receives the request and not simply forwards the request to the Target service because there are implementations that
00:15:13 [W] That Implement their own pot Discovery in accordance with kubernetes services, but do not rely on the Discovery implemented by kubernative n kubernative services.
00:15:14 [W] Next up the kubernative Ingress controller the control plane component.
00:15:22 [W] Kubernative centers around the notion of kubernative controllers and kubernative objects.
00:15:28 [W] kubernative controllers continuously read and write kubernative objects
00:15:34 [W] Or controllers interact exclusively with the API server to read and write a set of kubernative objects.
00:15:42 [W] Edge controller interact with the API server to read and write a set of kubernative subjects, but additionally communicate with other components in the data plane.
00:15:52 [W] Let's examine a few familiar examples.
00:15:56 [W] The kubernative replica set controller is a core controller. It interacts exclusively with the API server.
00:16:04 [W] The replica set controller with replica set objects and right spot objects.
00:16:11 [W] The cubelet is an edge controller. It interacts with the API server. And with the container runtime the kubelet reads part of objects and instructs the container runtime to execute containers accordingly.
00:16:26 [W] In points controller is a called controller. It interacts exclusively with the API server the endpoints controller read Service objects and part objects and rights and points objects.
00:16:40 [W] The queue proxy is an edge controller.
00:16:42 [W] It interacts with the API server, and with the Linux netfilter module the queue proxy reads endpoint objects and instructs the net filter module to create network address translation rules, so that a
00:16:58 [W] And with the Linux netfilter module the queue proxy reads endpoint objects and instructs the net filter module to create network address translation rules. So that a message sent to a service IP address.
00:17:11 [W] To to a service IP address will be forwarded to a pot IP address with the part being a member of the endpoints.
00:17:21 [W] Now onto the Ingress controller an Ingress controller is an edge controller it interacts with the API server and with an Ingress proxy.
00:17:31 [W] The Ingress controller reads Ingress objects and instructs the Ingress proxy to create routing rules according to the decision table specified in the English object.
00:17:45 [W] Lastly next up the kubernetes Ingress proxy the data plane component.
00:17:53 [W] As discussed earlier Network Ingress may happen before or after kubernative syngress.
00:18:00 [W] So there are two possibilities.
00:18:03 [W] The Ingress proxy maybe an external endpoint or the Ingress proxy may be an internal endpoint apart.
00:18:12 [W] But either way the task of the Ingress proxy is to accept the request match the request against the decision table specified by the English object and installed by the Ingress controller in forward the request
00:18:28 [W] Not that matches the target service receives the request.
00:18:32 [W] so in conclusion kubernative Ingress can be defined as the set of all flow paths so that the first flow terminates at the proxy the second flow terminates at a pod
00:18:47 [W] it's a rule in the decision table so that the request of the first flow matches the conditions of the rule and the part matches the target service of the rule truly not
00:18:51 [W] formula
00:18:53 [W] let's conclude Ingress for kubenetes encompasses two aspects Network Ingress the admission of traffic into the cluster and kubernative Ingress the routing of
00:19:08 [W] cluster
00:19:11 [W] kubernative Ingress is composed of three building blocks.
00:19:15 [W] The kubernetes Ingress resource kubernative English controller and the kubernative Ingress proxy.
00:19:24 [W] However, kubernative provides only the Ingress object Ingress controller and Ingress proxy of third-party components.
00:19:36 [W] In effect the kubernetes English object defines a collection of HTTP request level routing rules that determine the target of that request the Ingress controller reads in verse
00:19:51 [W] In effect the kubernative English object defines a collection of HTTP request level routing rules that determine the target of that request. The Ingress controller reads English
00:20:15 [W] Instructs the English proxy to create routing rules according to the decision table specified in the English object.
00:20:23 [W] The Ingress proxy accepts the request match the requests against the decision table specified by the English object and installed by the English controller and forward the request so that
00:20:38 [W] a Target service receives the request
00:20:41 [W] and finally
00:20:44 [W] What is the difference between kubernative Ingress and an API Gateway like the Ambassador API Gateway?
00:20:52 [W] That of course is a trick question in effect. The concept of kubernative Ingress is the concept of an API Gateway and in effect the kubernetes Ingress object is a standardized configuration for
00:21:08 [W] Popular API Kate ways like the Ambassador API Gateway can be installed to read the Ingress object and act as impressed controller and the Ingress proxy.
00:21:21 [W] If you are watching this presentation during the conference, I will be happy to answer your questions online. If you are watching this presentation after the conference, I will be happy to answer your questions via email, but either way, thank you for watching
00:21:36 [W] Ingress
00:21:49 [W] hello everyone.
00:21:50 [W] Thank you very much.
00:21:51 [W] Thanks again for watching the presentation and I got a few questions in the queue a that I am happy to answer first off the question.
00:22:02 [W] I got the most is where can I download the slides and need to apologize?
00:22:07 [W] I was not aware that I didn't upload the slide yet, and I will do so immediately after the presentation. Definitely.
00:22:13 [W] end of business day. You will be able to download the
00:22:18 [W] Presentation on skis.com and now to the actual questions to some of the content questions. So one question was what is the advantage to use English
00:22:34 [W] Routing the request using an nginx rules in a container running in the same cluster both we can achieve the same result in terms of routing.
00:22:39 [W] That is correct.
00:22:41 [W] And that is actually very close to how Ingress actually works.
00:22:47 [W] So the English object itself is a standardized configuration language for proxies like nginx and the presentation mentioned Ambassador, but the nginx
00:22:58 [W] Ingress property or the nginx reverse proxy is also a capable Ingress proxy. So the question is actually not either/or, but both because they're nginx fingers proxy is capable of reading the Ingress objects
00:23:14 [W] Configuring its forwarding rules accordingly.
00:23:07 [W] So then I got two questions that are I would think related unless I misunderstood one was so the decision table will be a union of all Ingress objects and the other related is what if
00:23:22 [W] Duplicating kubernative for some paths and different language objects.
00:23:09 [W] So it is correct the decision table conceptually, of course conceptually that this decision table is a union and the rules to take precedent, but the rules only take precedent within
00:23:24 [W] So if you have multiple objects, and they have conflicting rules indeed the behaviors and undefined which means that the individual fingers controller is the one that will make the final decision.
00:23:32 [W] But specification does not give you any guarantees of which configuration or which of the conflicting rules is going to win.
00:23:43 [W] And let me see a few more questions.
00:23:53 [W] So there is a question actually two questions.
00:23:57 [W] Is there an effort to get the Ingress working for non-http services and the other was I do not know if you plan to cover but maybe you can share the prospect prospect Ingress supporting multiple protocols it once UDP TCP on.
00:24:12 [W] Load balancer. So now this is a this is a I want to say a fairly involved question because kubernative as we all know provides a lot of flexibility. So the mission of UDP and
00:24:23 [W] TCP traffic under one.
00:24:15 [W] Let's say under one quote unquote load balancer is already a possible.
00:24:19 [W] If you look at kubernative Services of type either note port or type load balancer.
00:24:26 [W] Now, the the unique feature of kubernative Ingress is that it is able to bundle multiple Services under one one endpoint. So in that case Ingress would have
00:24:40 [W] to expand Beyond its routing rules or the expression of its routing rules Beyond just HTTP.
00:24:49 [W] So beyond the host header and Beyond the past two other properties of other traffic now that I do not know about the plans actually and that direction on the Ingress.
00:25:00 [W] However, if you look at different concrete implementations, they extend the Ingress specification and I do believe that for example nginx.
00:25:11 [W] English controller is capable of specifying additionally routing rules and also additional protocols.
00:25:19 [W] But remember that the configuration there is not a standardized configuration so you can then not just swap out nginx Ingress controller for example to the Ambassador English controller and it's just going to run their you have
00:25:34 [W] Have to adjust the you are only guaranteed to be able to swap out compatible implementations. As long as you only speak to the Ingress object specification.
00:25:42 [W] If I'm not mistaken.
00:25:47 [W] That are all the slides.
00:25:49 [W] I'm sorry that are all the question.
00:25:51 [W] Oh, no, there is one more question. And the question that are the end points represented in the graph the knative endpoint objects available in kubernative.
00:26:00 [W] So no they are not unfortunately. Also the term endpoints is highly overloaded.
00:26:06 [W] as a rule of thumb when whenever you hear in this context of my presentation whenever you hear endpoints I am talking about
00:26:17 [W] Network and points these are the the
00:26:23 [W] Entities Network and press these are the entities that can send and receive messages.
00:26:27 [W] So in kubernative pods and outside of kubernative any random process, but it's not kubernative and points that is a concept that is related to kubernative services and for that I would I would
00:26:42 [W] Presentation I did in the coupon North America 2019 inside kubernative Services there we discussed services and and points.
00:26:34 [W] And I do believe now actually that is it.
00:26:46 [W] Yes, that was the last question.
00:26:48 [W] Thank you very much.
00:26:49 [W] Thanks for attending and if any more questions come up, I will be hanging out in select Cube.
00:26:56 [W] kanban or one channel to answer more questions. And then of course if you think of anything else I am also available to answer the questions via email.
00:27:05 [W] Thank you very much.
