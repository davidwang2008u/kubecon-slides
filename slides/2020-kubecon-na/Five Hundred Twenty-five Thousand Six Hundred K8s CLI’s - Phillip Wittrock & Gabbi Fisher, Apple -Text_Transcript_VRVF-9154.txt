Five Hundred Twenty-five Thousand Six Hundred K8s CLI’s: VRVF-9154 - events@cncf.io - Wednesday, November 18, 2020 4:57 PM - 39 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hi everybody. My name is Gabby.
00:00:02 [W] Lies, you don't want to hear us sing the entire rent soundtrack in this talk. So we'll keep that part short, but that Jokes Aside were really excited to talk about the variety of kubernative Cl eyes out there today and to help
00:00:17 [W] While many of us are familiar with Cube cuddle Cube cuddle has a lot of company among kubernative CL eyes, whether you're getting started running your first poddisruptionbudgets. This ticketed applications in production.
00:00:26 [W] There are many see lies in the kubernative ecosystem that can help you describe.
00:00:30 [W] you run applications the some of these tools have become more popular than others. The number of distinct Solutions continues to grow.
00:00:42 [W] This means that staying on top of the latest developments in the most Innovative techniques is next to Impossible.
00:00:47 [W] Sometimes looking at the landscape of kubernative Cl is feels like looking at everybody's favorite cncf landscape chart. It's overwhelming and it recently changes.
00:01:01 [W] So rather than going through each CLI individually and telling you what it does.
00:01:07 [W] Really the goal of this talk is introduce a model for making sense of that vast landscape so that you can really navigate it on your own and we're going to identify a couple categories of problems that CLI is typically try to address and then the ways that they try
00:01:25 [W] So the first problem we're going to look at is you wanted to find your application in some higher level concept construct that maps to do some lower level apis.
00:01:34 [W] So for example, what you want to do is run a goaling program rather than saying I want to run this deployment service config map Etc.
00:01:47 [W] The second sort of problem we often see is you really want to run the same construct in varying ways across environments in the ways.
00:01:55 [W] They vary usually are at relatively low level.
00:01:58 [W] So for instance. Do you want to run your go program and staging Canary? Prod uswest prod u.s. East all with slightly varying values?
00:02:11 [W] And the third problem we're going to look at is really about taking high level supplemental concerns that are Loosely coupled to any specific abstraction or any specific invariant and really just cut across them.
00:02:25 [W] Right? So for instance you want to set up logging or some sort of
00:02:31 [W] sidecar container for all your applications whether they are golang or spring boot or rails or node.js or something else.
00:02:38 [W] I say I want to run my going application. I want to run it with Splunk logging and I want to run it and staging Canary and production all with slightly varying values.
00:02:43 [W] A firm understanding of how to select among the ecosystem CL is as well as combine them can help deliver substantial outcomes and these include architecting your first kubernative is application all the way to building comprehensive continuous
00:02:58 [W] The Firm understanding of how to select among the ecosystem CL is as well as combine them can help deliver substantial outcomes and these include architecting your first kubernative is application all the way to building comprehensive continuous
00:03:36 [W] lines
00:03:41 [W] So the CLI is the approach these problems in a couple of different ways and the way a CLI approaches a problem really has a big impact on what trade-offs it offers and how well it's able to address each one.
00:03:54 [W] So we're going to go through each of the kind of high level approaches that see lized used to tackle these problems and Show an example using a real tool.
00:04:07 [W] So Templeton is the first approach.
00:04:09 [W] we're going to look at templating is a relatively simple approach for solving abstraction.
00:04:14 [W] You have a template that accepts some predefined set of input values and then that produces a set of output resources.
00:04:22 [W] So for instance in our example, you would have some golang template that except some inputs and then produces a deployment service like that.
00:04:34 [W] All right. Let's hop into our first demo.
00:04:37 [W] We're going to deploy something a lot of people deploy to their kubernative clusters, which is Cube State metrics exposed via Prometheus the chart that you handle we have here is pulled from the Prometheus projects official Helm
00:04:52 [W] GitHub so looking at this chart that I am will file which serves as kind of the overarching document over this entire Helm chart.
00:05:00 [W] you'll notice that this file describes all of the applications that are actually going to be deployed as part of this chart as well as metadata about version as well as being painters.
00:05:14 [W] And another element I want to focus on here is the fact that this is a Prometheus project.
00:05:19 [W] Meaning that Cube state vetrix is actually not part of this chart itself and is pulled from another Helm chart. So we have an example of cross-cutting abstraction here.
00:05:30 [W] And finally you notice that we have a templates directory which includes templates for all of the animals that will be generated as part of this Helm chart.
00:05:42 [W] With and whose values we can actually modify using values dot yambol which just gives us a lot of variables for customizing what our settings are. Our configurations are in this Helm chart.
00:05:56 [W] So let's get started. Then I'm going to deploy all these Services through this chart to my local kind cluster. So let's install this. We'll name our application cubemetricks.
00:06:12 [W] Finally, it will pass in the directory, including our chart and all of its templates.
00:06:18 [W] Project meaning that Cube state vetrix is actually not part of this chart itself and is pulled from another Helm chart. So we have an example of cross-cutting abstraction here.
00:06:15 [W] And finally you'll notice that we have a templates directory which includes templates for all the animal that will be generated as part of this Helm chart with and whose values we can actually modify
00:09:25 [W] We have here corresponding to actually observing all of our Prometheus and Cube State metrics deployments and let's see if our deployments are there.
00:09:37 [W] And you can see they were all spun up and this required very little involvement from us.
00:09:43 [W] It was just all abstracted away and ready to use.
00:09:49 [W] And so God made a statement rated using Helm with templating some of the great things about Tim building. Our is a relatively simple approach.
00:09:59 [W] It's relatively easy to understand what's going on and it's relatively mature and instead of the limitations of Temple loading. Our that there's really only so much you can put into the template as inputs, right so you can't
00:10:15 [W] I'm Supply every field that you want to maybe set in the low-level types and it does the natively really tackle variance or cross-cutting concerns.
00:10:31 [W] The second sort of approach we're going to look at is llamo composition and so an example of this is customized with llamo composition the inputs specified by the user are still in the knative form of the API that the
00:10:47 [W] and so really it's about breaking up your camel configuration files into composable pieces in factoring out either like a common thing like a namespace from a bunch of different demo files so you can only specify by in one place or
00:11:02 [W] Out either like a common thing like a namespace from a bunch of different demo files so you can only specify it in one place or factoring out some common piece of configuration from a base where you can use that to apply to
00:11:04 [W] Now some common piece of configuration from a base where you can use that to apply to different very environments.
00:11:15 [W] In fact, you can layer customized on top of other CL is more focused on abstraction. Like Helm using customized you can post process Helm charts and create variants and out-of-the-box applications and even better.
00:11:29 [W] You can generate these variants instead of having to manually for can modify your application configuration.
00:11:37 [W] All right.
00:11:38 [W] So in our last example, we briefly covered how you could customize the configuration of your Helm chart application using the values that yam will file.
00:11:48 [W] But what about the case where you actually want to have two different variants of these Helm charts one verse aging and one for production cluster and just to dive into this example a little more.
00:12:00 [W] Let's say I wanted to have different metrics retention dates for my different Prometheus servers deployed.
00:12:07 [W] Staging versus production clusters so we can pull out their retention date.
00:12:11 [W] We currently have by default by just getting the appointment.
00:12:19 [W] And prepping out what retention is so you can see that we have a retention argument passed to one of our containers that is for 15 days.
00:12:28 [W] Because we don't care about staging metrics or tension as much but also set it to 30 days for production clusters.
00:12:36 [W] We can do this using customized and a concept called overlays and what overlays do is allow you to apply patches to create variance of a base source of configuration. And in this case
00:12:51 [W] As our as our base, so you can see that in this patch here. What we do is we just provide enough information for a customized to know how to map this patch to a
00:13:06 [W] In deployment, so you can see that we provide the necessary matching labels and we then provide an override for the argument that we want to set to 7 Days in our stage constants and likewise.
00:13:16 [W] We have a patch in our production overlay.
00:13:19 [W] That's for 30 days.
00:13:20 [W] So to run this we can create a small script around the customized CLI that allows us to supply these patches.
00:13:31 [W] whenever we want and we can invoke in this example, which patri want to use by using a environment variable to say what environment we're deploying to so we are going to set our deployment environment to staging
00:13:47 [W] And then we're going to run Helm install some more de last time.
00:13:51 [W] But we're going to add a new argument called post renderer.
00:13:56 [W] And what this does is it allows us to pass in our customized script to apply our desired overlay?
00:14:06 [W] So let's run this and apply this to our foster.
00:14:10 [W] You can see we got the same output as last time indicating that we got the expected deployment set up.
00:14:17 [W] Let's quickly go back and run see what our retention policy looks like that and you'll see that instead of 15 days earlier now, it's just seven days.
00:14:28 [W] So this overlay was applied as expected to our staging cluster.
00:14:34 [W] Thanks for the demo Gabby. And so as we saw that llamo composition is great for producing like a variant or factoring out some piece of yam mold from another piece variance or
00:14:49 [W] Allows multiple layers to be defined. So unlike templating which tend to be binary relationships. You can stack more and more layers on top of each other and they do stage prove to the underlying API so you can understand like how
00:14:54 [W] To the field.
00:14:43 [W] It's a relatively straightforward to understand how to set it up field.
00:14:46 [W] really their limitations are that one the cannot express higher level abstractions.
00:14:52 [W] You are operating at a low level and starting Snippets here and there.
00:14:56 [W] So if you just want to say set this field and then it goes and generates a bunch of different other stuff.
00:15:02 [W] That's not something you're going to get from Yamaha position and it can't express any sort of dynamic or reactive logic. So that means if you are patching another layer and that layer,
00:15:12 [W] Changes underneath you your patch is not going to be able to react to that.
00:15:16 [W] It's just going to be stay static and that can be brittle.
00:15:29 [W] Sorry, we pause for a sec.
00:15:34 [W] I just can't have that. I'm gonna have to turn on my do not disturb.
00:15:37 [W] There we go.
00:15:38 [W] Sorry, there was little pink.
00:15:39 [W] It's nice.
00:15:40 [W] nice. Okay and starting.
00:15:46 [W] A third approach we're going to look at our configuration domain-specific languages and configuration via cells are languages specifically designed for users to express configuration and solve problems related to configuration.
00:16:01 [W] Sorry, we pause for a sec.
00:16:07 [W] I'm gonna have to turn on my do not disturb.
00:16:09 [W] There we go.
00:16:10 [W] Sorry. There was a little pink.
00:16:12 [W] It's nice.
00:16:12 [W] Okay and starting.
00:16:18 [W] The third approach we're going to look at our configuration domain-specific languages and configuration.
00:16:25 [W] Your cells are languages specifically designed for users to express configuration and solve problems related to configuration.
00:16:31 [W] They're optimized for expressing and confirm composing in transforming configuration data, and they frequently use something like inheritance or unification as their primary technique.
00:16:48 [W] In this demo, we'll take a look at the be slq Lang and what queue length does is it allows you to create this notion of a patch that's applied to base deployments.
00:17:18 [W] primary technique
00:17:22 [W] In this demo, we'll take a look at the be slq Lang and what queue length does is it allows you to create this notion of a patch that's applied to base deployments.
00:17:37 [W] Look at this patch first and you can see that this patch is responsible for providing default values, but also imposing Types on certain fields that are supposed to be populated by the base
00:17:52 [W] That I'll show you above but you can see that replicas are meant to be integers and components and B strings and scrolling up here.
00:18:00 [W] We can see that we've actually been able to populate those typed values with the actual values of their own.
00:18:10 [W] So we have one for staging that has the 7-Day retention period where real familiar with and we also have a production run with the 30-day retention day.
00:18:20 [W] David so, let's take a look at running this.
00:18:28 [W] You can see that what is spat out our deployment manifests with our corresponding customer retention dates and just to show this typing in action.
00:18:40 [W] Let's set replicas up here to a string which it's not supposed to be and you'll see that week you was able to give us an error related to this mismatch between types.
00:18:55 [W] And so summarizing domain specific language. Is there really a One-Stop shop for expressing your configuration. You can do all your configuration stuff in them.
00:19:04 [W] Cons are that because they're different model than imperative programming languages.
00:19:07 [W] You need to learn how to use that particular DSL and you they really need to be standardized in an organization. If you have a different sorts of dsls and your organization in some DSL so used for one particular type of workload and another DSL.
00:19:22 [W] Is for another type of workload then that can be really difficult to.
00:19:25 [W] Build up a good set of libraries and then a tip with the SLS is because they are not general purpose languages that most folks are familiar with how to debug and I'll have all the debug tools that they're used to you really want to avoid doing like clever things
00:19:40 [W] With how to debug and I'll have all the debug tools that are used to you really want to avoid doing like clever things that can make the control flow hard to follow.
00:19:49 [W] All right, moving on to the general purpose language techniques.
00:19:53 [W] So this is kind of following in the idea of why don't we do configuration as code and instead of having a you know, kind of new thing that folks have to learn.
00:20:03 [W] And I trade that sort of customized model focused on configuration for a model that just uses a programming language people are familiar with it's often part of a framework, which can do
00:20:18 [W] Expressing configuration, but can also manage stuff like rolling out your configuration or solving other problems for you and oftentimes, these Frameworks are capable of pulling in configuration from other sources. You can use Helm
00:20:33 [W] Mais or a DSL tool with them as an input source.
00:20:37 [W] This example will briefly cover Pulu me which allows you to write go that is compiled into an executable that plumy runs to install whatever is defined in this executable to an actual kubernative cluster.
00:20:52 [W] Edible that plumy runs to install whatever is defined in this executable to an actual kubernative cluster. So you can see that we can provide configuration arguments such as what
00:21:03 [W] and provide configuration arguments such as what destination or type of cluster were deploying this to and then right imperative logic to change the value of certain variables,
00:21:19 [W] Where we're going to be using these variables and down here.
00:21:23 [W] You can see that the Prometheus server deployment that we've been using throughout. Our demos is now represented as a classic ghost truck that makes use of the variables we set imperative lie above
00:21:38 [W] Squawks like oh it looks like oh because it is go and that is one of the powers of Pulu me.
00:21:42 [W] So looking at general purpose languages the pros are there familiar approach because they have reusable libraries weasel patterns IDs in debug as folks are used to and they may come with a built-in support for
00:21:57 [W] Other problems and they can usually ingest configuration from other sources as well.
00:22:02 [W] Some of the limitations of general purpose languages is that the languages themselves are typically not optimized for expressing configuration.
00:22:10 [W] So it's a little more challenging than a DSL we provide there is complexity that comes with writing a program like the ability to just look at the program and know that this is going to Output the right thing is more challenging when
00:22:25 [W] Ins and you have 4 loops and branches in these sorts of things.
00:22:26 [W] And that when they are packaged with an orchestration solution that it may be difficult to tease the two apart and they may be tightly coupled enough that you can't just use the general-purpose SDK with your arbitrary orchestration solution
00:22:41 [W] Answer the Final Approach we're going to look at is modeling client-side configuration similar to server-side apis, right our service.
00:22:46 [W] I'd really configuration.
00:22:48 [W] And so the idea here is you right, you know modules are functions which look at the holistic state of the system.
00:22:57 [W] Someone would have controllers.
00:22:58 [W] Look at the holistic states to the system and are capable of reading infantry configuration generating new.
00:23:05 [W] In transforming configuration or validating configuration based on some desired Spectra vided to that function. And so like one thing you can do here that's different than has been shown so far is rather than trying to
00:23:20 [W] Take a high-level constructed for an abstraction in generate configuration from it.
00:23:21 [W] You can actually take in a low-level deployment and annotate that deployment to say okay turn this into a high level thing and then it can promote it by attaching configuration data to a resource you've already defined.
00:23:36 [W] All right time for our last demo where we're going to be showing off KP t + KP T is different then customize and even dsls because instead of patching a high-level resource with low level settings
00:23:51 [W] An approach in which it takes a low-level resource and populates and promotes it into a Prometheus deployment.
00:23:49 [W] So in this route deployment animal we provide information merely relating to what K pts reconciliation of sorts will match on to add four more fields
00:24:04 [W] Our deployment and we use something called a star Lark script to handle that in kpt land, but we won't tell them into that too much of this demo.
00:24:07 [W] Just know when we run kpt function run and then try to run it to get the animal and enable star so we can run that starlog script.
00:24:19 [W] You can see this deployment we have above is expanded out with the other fields like image arguments that we expected as in previous demos and here we again see our default of 17 days
00:24:34 [W] Of is expanded out with the other fields like image arguments that we expected as in previous demos and here we again see our default of 17 days now to watch KP T is variance support and action.
00:24:49 [W] PT's variants support and action uncomment the spec here which provides a different first argument and then run the same argument in his ear and previously and you'll see that the promoted deployment.
00:25:05 [W] It now includes our new custom retention time of just seven days. So that's just the taste of kpt and action.
00:25:17 [W] The pros of the sort of controller ask approach our that the architecture is similar to the kubernative say apis and controllers.
00:25:25 [W] And so you get kind of the same capabilities that you can get there. If you are consuming functions that this is a relatively flexible and composable approach just as controllers in the apis
00:25:40 [W] Deployments and horizontal polish killers in these sorts of things and do similar capabilities.
00:25:48 [W] The cons are one that writing a controller for instance is more difficult than writing a template and that's true here as well.
00:25:58 [W] You're evaluating a much broader set of inputs and reconciling the state of the system. So
00:26:05 [W] it's going to be more difficult to write those modules because they are more sophisticated and a second limitation here is that it is a really relatively new and experimental approach.
00:26:16 [W] It's really only been come about in the last year.
00:26:21 [W] And so there's not a lot of resources for what are the best practices in how do you best use this technology?
00:26:31 [W] Alright now that we've had a chance to go over five technique used techniques used by kubernative CL is we can evaluate how each teeth the type of seal. I can help us with certain objectives.
00:26:43 [W] So on the top two rows templating and ample and composition emerge as the ideal option for folks who want to keep their logic simple.
00:26:51 [W] They are useful for abstraction and variance respectively, but given their emphasis on Simplicity. They don't attempt to provide all of abstraction.
00:27:00 [W] Alright now that we've had a chance to go over five technique used techniques used by kubernative CL is we can evaluate how each teeth the type of seal. I can help us with certain objectives.
00:27:06 [W] So on the top two rows templating and the ample and composition emerge as the ideal option for folks who want to keep their logic simple.
00:27:15 [W] They are useful for abstraction and variance respectively, but given their emphasis on Simplicity. They don't attempt to provide all of
00:27:24 [W] Abstraction cross-cutting abstraction and variance at once. So as a result, you might not get all that you want from either of these options moving down the y-axis we can see that domain-specific languages and
00:27:58 [W] moving down the y-axis, we can see that domain-specific languages and general purpose languages offer similar functionality with the Simplicity traded for more customizability the choice between the two language based options
00:28:14 [W] Declared in versus imperative you want your logic to be dsls are also great. If you invest in your configuration system and can standardize on a single approach whereas general purpose languages are useful if you want to develop Solutions and language, you're
00:28:28 [W] Or want to ingest multiple input types into an orchestration system with some Last Mile changes.
00:28:34 [W] And finally our relative newcomer controller ask CL eyes allows you to layer and combine logic. So for folks looking to mix and match Logic on various types of inputs as well as try something kind of fun and new controller.
00:28:49 [W] a good fit for you
00:28:50 [W] on that note.
00:28:51 [W] We hope this talk successfully opened you up to something. You didn't know and empowered you to explore the diverse world of kubernative Cl is out there.
00:29:03 [W] Thank you for your time.
00:29:07 [W] Now we're going to take questions, right?
00:29:08 [W] Yes question time.
00:29:39 [W] Hi everyone.
00:29:40 [W] Thanks for watching our talk.
00:29:42 [W] You got to see some home editing and some kubernative CLI knowledge. So thank you for joining us.
00:29:48 [W] And I know we already have a couple of questions that will go through in order.
00:29:55 [W] I think we have time to address all of these Phil. Do you want to go with the first question? Which is how do you deal with secrets?
00:30:02 [W] Eating secrets from files and then rolling them out by updating the reference.
00:30:01 [W] This is what customized does as its approach.
00:30:05 [W] Another solution I've seen is pulling Secrets at the time that the container is started.
00:30:15 [W] I think there's some open source projects that use that approach. I'd say that there's a there is an agreement on
00:30:25 [W] where the secret should be put into the cluster from weather like this.
00:30:31 [W] So one solution right is you get the secret as part of your configuration, right?
00:30:37 [W] And it's shipped along with your deployment or what what not.
00:30:40 [W] Another approach is that the secrets are treated differently from from like your image for instance, and they're actually pushed into the cluster independently sort of like service account credentials for
00:30:55 [W] Ends are not stored as part of your configuration, but automatically just mounted in and the pods.
00:31:07 [W] All right.
00:31:08 [W] We have had.
00:31:09 [W] Oh, sorry, go ahead.
00:31:11 [W] Go ahead Gabby.
00:31:12 [W] Yeah. So another category of questions we got is, you know, what is your recommended option or what has worked best for you at Apple likes basically what CL is our Apple using
00:31:27 [W] Some open source ones we've used like Helm we also have other pre-existing template includes CL. Is that our inner Source at the moment, but they do follow the same kind of template engaging and
00:31:42 [W] That our inner Source at the moment, but they do follow the same kind of template engaging and overall overarching categories that we described in this talk, but those are all like inner source for now, but you know, they draw inspiration from some of the open source solutions that we discussed
00:31:56 [W] But those are all like inner source for now, but you know, they draw inspiration from some of the open source solutions that we discussed in this talk.
00:32:02 [W] We also have a question for whether there's a link for the slides and code in this talk the slides from this talk are linked on the sched dot co-listing for this talk and then I can modify the
00:32:18 [W] This talk and then I can modify the description of the top to add the GitHub repo where our example code is from this talk so you could take a look at the example code on my GitHub.
00:32:33 [W] All right.
00:32:33 [W] Should we do Reverend your controller asked Zach?
00:32:37 [W] Yeah.
00:32:37 [W] All right.
00:32:38 [W] So are the references for control a CL is the probably the CLI that most natively integrates these has kept which is let's kpt.
00:32:48 [W] It's a Google CLI, which is built on a lot of the customized libraries in the CLI based code.
00:32:58 [W] That's probably the most mature customized also.
00:33:02 [W] customized functions also fall into this category and customize is adopting more and more controller ask functionality as part of that if you were like interested
00:33:18 [W] Into you know, what does look like a deeply technical level the customized. There's a called Library called KML and I think there's a functions.
00:33:29 [W] These are that you can kind of look at the libraries of how these things are constructed if you want to look more like how would you consume these things the kept Comin tation?
00:33:39 [W] It's kpt if you Google that you should be able to find some stuff.
00:33:46 [W] Cool.
00:33:47 [W] We have a whole second page of questions if you want to tab through to that.
00:33:51 [W] So I think there's a couple of other questions that just are asking.
00:33:57 [W] You know, what if we use some production at Apple and I think we already did cover that. Another question is do we have experience with terraform and how it does that fit into this picture.
00:34:08 [W] I can't say I have touched terraform at least like in my day-to-day work recently. You have any opinions on this?
00:34:17 [W] Yeah, so I can come into play in a couple idea gloomy has integration with terraform.
00:34:23 [W] So that's one way of thinking about it.
00:34:24 [W] You can also tear form. Also I believe is I think it's HCL, although don't quote me on that but it uses its own sort of DSL for Predators finding infrastructure. So you can think of it as in the configuration is code
00:34:40 [W] A particular note about terraform is that it's not purely about configuration and invoking server side apis terrifying does a lot of State manipulation on the client side in orchestration on the client
00:34:46 [W] So it probably on the surface looks very much like, you know, Jason at or something like that potentially, but the architecture is a bit different.
00:34:45 [W] Here's one kubernative should be kubernative beginners stick the template name.
00:34:49 [W] Not necessarily.
00:34:51 [W] In fact, I'd say doing customized, you know starting very light with customized and maybe not doing anything crazy with it if like if we're talking day one might be a good approach because it can to really really close
00:35:06 [W] You know starting very light with customized and maybe not doing anything crazy with it if like if we're talking day one might be a good approach because it can to really really close to those apis if you're
00:35:23 [W] If your you moving on to templating, once you kind of have some notion of the abstraction you want to present and have some experience with using the underlying apis directly seems like a reasonable thing to
00:35:38 [W] Variance with using the underlying apis directly seems like a reasonable thing to move on too.
00:35:47 [W] All right.
00:35:48 [W] I think we have time for one more question before you hit that 35-minute cut off.
00:35:52 [W] Let's see.
00:35:54 [W] What do you think of things like continuous deploy systems is the way forward for manipulating these resources like gitops.
00:36:01 [W] I mean, I think that templating languages are extremely useful for managing like those last mile deployment changes and that's especially useful if you're managing kubernative is on number of clusters.
00:36:14 [W] not just one and you know, if they
00:36:17 [W] Discrete configurations.
00:36:20 [W] It's great to be able to express those as code as part of your deployment pipeline.
00:36:24 [W] I think like the intersection between templating and and gitops is one that we've used successfully and that at least makes it easier to track and
00:36:40 [W] If they have discrete configurations, it's great to be able to express those as code as part of your deployment pipeline.
00:36:48 [W] I think like the intersection between templating and and gitops is one that we've used successfully and that at least makes it easier to track and
00:37:17 [W] Justin see with what you expect to see for like plurk per cluster deployment configurations.
00:37:26 [W] Yeah, maybe I'll add to that that like templating is basically a way of generating configuration.
00:37:32 [W] The I think the more important pieces are like abstractions using abstractions to generate configuration, whether it's through a template or something else, but that making sure that you're able to review and
00:37:47 [W] Actual configuration that's being generated is probably the more interesting piece there.
00:37:51 [W] And so whether you use Json that generate configuration or a Helm chart or customize or some other thing the bit of the ability to death and see like one of my deleting what am I changing is probably the
00:38:07 [W] The be the ability to death in see like what am I deleting?
00:38:07 [W] What am I changing is? Probably the important piece there in my mind.
00:38:15 [W] And and once you move beyond the beginner stage, I think the the Crosscut the ability to compose cross-cutting things does become interesting.
00:38:24 [W] Like how do you enjoy the right side cars and make sure like all your workloads across your organization are set up to make sure like their whatever dependencies they have that cut across such as logging are configured consistently and correctly, which is
00:38:40 [W] Correctly, which is as more difficult to do through templating alone.
00:38:48 [W] That's all I guess we're at time.
00:38:51 [W] We have to make we haven't been cut off yet, but I think we're technically a Time.
00:38:56 [W] Yep, we've been cut off.
00:38:58 [W] All right.
00:39:00 [W] Thank you so much for joining us.
00:39:02 [W] We'll make sure to draw in the keep Consul. I can be there with you know answers to more questions.
00:39:07 [W] All right.
00:39:13 [W] Thank you.
