NATS Streams and Services: From Zero to Hero: RTXF-2591 - events@cncf.io - Thursday, November 19, 2020 5:42 PM - 30 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello everyone.
00:00:45 [W] Hello everyone.
00:00:46 [W] Welcome to the Nats session about the strings and services from Zero to Hero and it is valdemar Covello or cannot sign India Communications.
00:00:56 [W] And my name is Jaime Pena, and I also work at Canadian Communications.
00:01:01 [W] And in this talk, we're gonna we will give a quick intro into what is next.
00:01:06 [W] And so the things that we can do with next and also give you a fun and them of nats chat application where we're using some of the latest features like web sockets and the centralized authentication and a lot of
00:02:19 [W] and in this talk, we're gonna we will give a quick intro into what is Nats and so the things that we can do with Nats and also give you a fun and them of nats chat application where we're using some of the latest features like websockets
00:02:36 [W] examples to deploy on a kubernative glossary on digital ocean
00:02:41 [W] So what is Nats Nats think you're all right project.
00:02:46 [W] Actually it became a the first commit was in October 10 years ago.
00:02:52 [W] It is a cloud native missing system originally for cloud Foundry that has as its as its traits is that it seems to be very performance very simple and secure and provide an always available. Dial tone has over
00:03:07 [W] Implementations the clients are the protocol has not changed a lot in all in this decade.
00:03:13 [W] It has almost stayed the same just in this year.
00:03:18 [W] There are a couple of new additions actually but has been very stable protocol.
00:03:23 [W] We say that it is light weight because it is a single binary that has not extra dependencies.
00:03:30 [W] It's a very small Docker image. Its reasoning go. It doesn't take a lot of configuration to just have it.
00:03:36 [W] Running out of the box.
00:03:38 [W] And there and that's client only requires to be able to present the credentials and a single URL or two which from an ad server that it can connect to and after that we'll discover the topology of the
00:03:54 [W] Reconnect or failover to other clusters and has a very simple API that we're going to cover in this talk has many clients unlike with other projects. Most of these are
00:04:04 [W] How many clients unlike with other projects most of these are maintained by the official maintainers for Nats? So all of these Nats don't go which is the main implementation for Nats Nats wrote Ruby, which was the original one.
00:04:12 [W] Our almond maintained by the by the core team.
00:04:17 [W] So that's in a nutshell is about streams and services.
00:04:21 [W] What is this stream? We say that a stream is essentially a float of data some sequence of events that you either want to replay or consume their last the most up-to-date information, but not only can you do
00:04:36 [W] What is this stream we say that a string is essentially a float of data some sequence of events that you either want to replay or consume their last the most up-to-date information, but not only can you do a strange with
00:04:59 [W] Nats you can also use Services similar to help you are used to using HTTP endpoint so grpc endpoints for receiving a missing link request and sending our responses and you can do
00:05:14 [W] One-to-one communication with Nats as well. But thanks to that pops up DNA that from the project you can also for example get a request and the request and expect are multiple responses.
00:05:24 [W] So you have multiple communication patterns when using Nats and you also have load balancing so you need you don't need.
00:05:31 [W] I don't know who need to hear this but you don't need an extra servicemeshcon long balancing for making a request responses and distributing work and 4 News.
00:05:43 [W] Nats you're always interacting with subjects subjects something very simple like a fool or whether subjects where you can express different interest for example, using wildcards like food out bar, and you can also make a
00:05:58 [W] wild card that will match anything on that at that level of the subject namespace or you also have the greater than wild card that will tap into the traffic and receive all the events that you are allowed to receive because
00:06:11 [W] Define the permissions of what streams are you are able to consume.
00:06:11 [W] So those features from Nats translate into service extremes and services and in terms of the API from the clients.
00:06:21 [W] Are you say that we're using whenever using request and response?
00:06:25 [W] Those are we're talking about Services.
00:06:28 [W] Those are usually load balance with using the Q subscriptions, but you can use a cue subscription for either services or streams actually and whenever we do regular pops up publishing
00:06:41 [W] Broadcasting a message or having a stream of messages. We're of course talking about extremes.
00:06:50 [W] Publish as I mentioned, you can broadcast messages in this case publish on Foo anyone that is connected to Nats and receiving subscribe to fou will receive that message with request/response internally all this is all pops
00:07:05 [W] Unique in boxes to announce that you want to explore expecting a single response on your client in box so that you can get one to one communication that way and you can also do
00:07:17 [W] By yesterday accused subscriptions by defining a process of planning workgroup. So these set of subscribers are going to be able to load balance the work amongst them.
00:07:18 [W] And so those were featured the has been since the beginning with Nats V1 in Nats V to the project took a lip where we're not only talking about being the Nats within a single Silo now you are we're considering
00:07:33 [W] Speak to the project took a leap where we're not only talking about being the Nats within a single Silo. Now you are we're considering Nats as part of like a much larger much part of
00:07:45 [W] Nats as part of like a much larger part of a much larger system of connected devices and also workloads. For example now it has Nats V2 is a multi-tenant and multi-region you can
00:08:00 [W] And that's we do is a multi-tenant and multi-region. You can place crosses of clusters or just closes not a nose in the edge.
00:08:09 [W] And so it is a multi-tenant because each one of the services are streams are will belong to an account and all of them will be have different subject
00:08:24 [W] The will not overlap to each other so that it makes it very flexible to have for example different teams their own namespace or account for sending messages and then discuss be among them which services or streams they want
00:08:39 [W] To other accounts.
00:08:42 [W] So in this case have the Acme and cncf they are exporting and importing services from each other and from it is subscribe from Imports greater than you can receive all the messages that it is exporting from Acme
00:08:57 [W] Same with strength. So those services from let's say Acme account can be important mounted as an API within your own subject name space and interact in the deaf in your own local.
00:09:09 [W] Count with the service from another place.
00:09:10 [W] So there's a mini data sharing features parts of the Nats V to deploying so lat and also very interesting from that is that we have more availability.
00:09:25 [W] Network topologies so now you can have very complex Network topologies and using Nats Gateway connections for creating clusters of clusters to have like a high rate make a hybrid
00:09:39 [W] Time multi-region Super Nats cluster with different a kubernative and let's in different regions.
00:09:43 [W] You can also have a leaf nodes connected to with Edge connection to any part of those larger supercluster, and these can have its own of mechanisms that are different from the
00:09:58 [W] Part of the supercluster and they can be they see chain so you can have map better not supposed to how it fits your organization.
00:10:07 [W] So this has become Consolidated into a pattern that we now call the Nats Nats and that detects architecture.
00:10:15 [W] So we have seen something regularly.
00:10:17 [W] You have a Nats supercluster with has a that tends to be in the cloud.
00:10:23 [W] for example, or in this case with one very cool day money, which saw is that it's using the ground as the main cluster and then satellites have a leaf node connections connected to the
00:10:37 [W] Won't that be able to through the leaf node connections exchange messages to each other. But all of them are different correct disclosures different network domains, but just in Nats connections
00:10:53 [W] As the main cluster and then satellites have a leaf node connections connected to the ground and be able to through the leaf node connections exchange messages to each other, but all of them are different
00:11:24 [W] Forwards and routes makes the routing product possible between those different clients.
00:11:31 [W] So the rest of this talk we're going to go over how some of the internals of nats the chat application.
00:11:38 [W] This is like the third iteration that we have gone through these demo and versions of the latest features for Nats you familiar with all the previous thoughts from Nats.
00:11:50 [W] may you have seen the CLI UI that you can use to be able to talk to the other users which is all the latest features.
00:12:01 [W] Nats to do the same but with web sockets, so you have a websocket single page application that is going to give you a UI for the able to send messages and these are all streams each one of these
00:12:16 [W] others will have its own credentials provision to them on the Fly table to publish messages on one of the general rooms and also have its own DNS and we're using the unique
00:12:31 [W] And also have a its own DM and we're using the unique public key for each one of the users table to go get those and send some basic heart beating events for receiving the
00:12:38 [W] events for receiving the messages
00:12:45 [W] We'll also add a service to your to get those credentials in this case going to be chatbots Rec dot accents.
00:12:54 [W] So whenever you go to Nats dot chat, which is going to be a service that is available at the time of the conference as well. If you want to try it, so you pass a user name to this chat and under the hood.
00:13:08 [W] What is going to happen is that it's going to make a request through the websocket connection to Nats and expecting some
00:13:15 [W] Shelf unique rachelle's to for this cluster that are going to be coupled to the your discerning.
00:13:25 [W] And the way we have done this is by creating two different accounts.
00:13:28 [W] So actually all the users are going to be within this Cube gonna count essentially the chat account.
00:13:36 [W] So any user that we create is going to be part of this account.
00:13:40 [W] And the there's another account that is going to have the logic and the permissions to be able to do the creation from users that belong to this account. I'm going to show you
00:13:54 [W] Well, this is what I mean by this but the API itself is in under the admin account being important for the chat icon. Tanned be able to make requests through from account
00:14:09 [W] Imports and as we will show how we added an admin UI where you can do something Dynamic revoking of users.
00:14:19 [W] So let's get into the demo.
00:14:26 [W] and show
00:14:28 [W] how to get this done
00:14:31 [W] There is a readme at and within the Nats ano Cube con 2020 repo that you can follow the able to have a similar setup has we have we're showing this we're have a in this case.
00:14:46 [W] 20 this cluster that is running in digital ocean.
00:14:35 [W] The first step that we need to do is install NSC.
00:14:39 [W] So any see is the tool that you used to be able to create accounts and users in Nats. In this case. We have already created a couple of accounts one of the admin and the other the chat
00:14:54 [W] Is enough in this case we have already created a couple of accounts one of the athlean and the other the chat account.
00:14:59 [W] We have a simple installer for any c r so there's a it's another script able to get some initial setup of accounts. Have a directory Tree on the new folder.
00:15:16 [W] But we're actually not using those accounts. We have created a chatot count and admin account in this case.
00:15:22 [W] You can use any seed to describe the permissions.
00:15:28 [W] in this case, we can see that the chat account is able to it is exporting chatbots Q canonical Ein stream that this is more mostly for the UI to bacterial to display,
00:15:43 [W] Connected and for today the revoking so and Jaime is going to cover that in a bit.
00:15:52 [W] In also have the X importing the chat dot Red Dot access service table to create credentials.
00:16:02 [W] For themselves and as for the Nats at mean we have basically the reverse on the Imports and have the exports and imports to the other account.
00:16:15 [W] And something you can see from this output is that we have something that starts with a it's an account.
00:16:25 [W] And in this case, we have another signing key, which is used in case you don't want to be coupled to a lonely single pair of keys. You can have multiple signing keys and revoke them as you want to be able
00:16:40 [W] then you are revoked that signing key remove it from the generality definition and do the upload to the Nats server and that way you can perch that signing key and
00:16:51 [W] we using NSE we can create a users in this case.
00:16:56 [W] We only have two users as part of the admin account because we need a couple of one table to make those requests and mostly for the UI to get updates as well and
00:17:11 [W] credentials that you can use to make requests
00:17:04 [W] So these are credentials that you cannot do almost anything with them.
00:17:11 [W] The only thing you can do is to get credentials.
00:17:15 [W] So there's our other than that, they're very just useless credentials and does not in getting the way from their other users.
00:17:22 [W] So we do those imports and exports in the following the reading you can how to do it on your own.
00:17:32 [W] And once we have all that set up, we're going to create a configuration for the resolver. And this case when I via embedded Nats account server within Nats within that and we
00:17:48 [W] All that set up.
00:17:41 [W] We're going to create a configuration for the resolver. And this case when I via embedded Nats account server within Nats within that and we don't upload these configuration to kubernative so that
00:18:00 [W] Is of the kubernative so that all the Nats servers are can be able to kind of act as a decentralized authority of the jet abilities.
00:18:11 [W] So now as for running this on kubernative WE maintain hand charts for deploy and be able to have external connectivity
00:18:27 [W] Going to have to set up.
00:18:29 [W] Domain in this case. We're using as a forward Nats to chat and have a single IP.
00:18:36 [W] Map currently so the way this works is by using external DNS component B Nami maintains a very good chart for doing this.
00:18:50 [W] for managing an external DNS and it's very simple to use you just in case of digital ocean just point your and DNS servers to towards your digital ocean account and when you're at your in then deployed with your API token,
00:19:05 [W] map
00:19:02 [W] that's service to a public IP.
00:19:05 [W] And of course, we open the firewall for this and we are also going to be creating a web sockets load balancer.
00:19:13 [W] So one Nats is so one of the things with and Nats is that the PLS doesnt work with most load balancers unless they are end for load balancers because of the way that the TLs operate happens.
00:19:27 [W] So but we websockets now that that's no longer a problem because
00:19:32 [W] So web sockets are you can have a fronted a load balancer low mansoureh to the multiple Nats servers the web socket port and it should just work because it doesn't follow the same doesn't have the same protocol issues.
00:19:49 [W] So we have uploaded the Nats account.
00:19:53 [W] We set up a couple of fun Nats.
00:19:55 [W] Let's encrypt certificates and do the upload of some of these credentials that will be using to be able to provision then the Clusters.
00:20:07 [W] Do the upload of the need to do the upload to fit to the Nats ever? What is the latest state from some degenerates?
00:20:17 [W] So able to save some time.
00:20:19 [W] Discipline. That's the chat right now. I should get initial info line.
00:20:17 [W] To which Duke and I can start Nats connections. And if I do the same to the Nats the web socket port
00:20:29 [W] This case 43 I will get a similar info line but not for just for the web sockets and expecting for me if to send the credentials are going to disconnect me.
00:20:39 [W] So I'm going to
00:20:46 [W] Show you the little bit of the code of them how we are issuing the credentials which is actually quite straight forward in terms of the Nats API.
00:21:01 [W] So you're just exposing a new subscription to the subject able to get those requests.
00:21:09 [W] So let's try that real quick.
00:21:12 [W] And let's make some credentials to be able to use the Nats the chatter be questioned.
00:21:19 [W] So I'm going to have 5 let's say 23 and create some credentials.
00:21:31 [W] and whenever I make a request to
00:21:34 [W] It's an active subscription to the subject able to get those requests.
00:21:26 [W] So let's try that real quick.
00:21:28 [W] And let's make some credentials to be able to use the Nats the chatter because even so I'm gonna have five let's say 23 and create some credentials.
00:21:48 [W] and whenever I make a request to
00:21:52 [W] Using those bootstrapping credentials.
00:21:54 [W] I'm gonna get a new set of credentials that I can then use to want to load into the chat. Now. I'm going to log into the chat - SSS
00:22:07 [W] this new credentials my credits.
00:22:11 [W] So I'm connecting to the system and that's it.
00:22:16 [W] So this part of the provision there is trading the username generating new user credentials that have just use dynamically implemented by connecting system and announced the
00:22:31 [W] And that's it.
00:22:31 [W] So these part of the provision there is creating the username generating new user credentials that have just use dynamically.
00:22:41 [W] They wanted to connect the system.
00:22:44 [W] And announce the revoke or later on that you can that is there is a heartbeat from someone connected.
00:22:54 [W] And but even cooler is going to be that UI Jaime is going to show in a bit.
00:23:02 [W] So this is a Nats chat and are going to be able to interact with Jaime born from the CLI, but he's going to be doing the same through the websocket connection.
00:23:12 [W] So well, it just showed us the CLI version of nats chat. I'm going to give you guys a walkthrough of the what the front end.
00:23:24 [W] Application looks like so just a quick demo of what the front end looks like. So when you hit Nats dot chat you'll be taken to this.
00:23:34 [W] welcome page and you can register a user name.
00:23:37 [W] And so I'll go ahead and do that.
00:23:39 [W] And then you get taken into this place to this chat room, and you can send messages here.
00:23:47 [W] So how did we do this?
00:23:49 [W] Well, let's go look at the code now.
00:23:53 [W] So to start off there is a Nats websocket library that you can use in your projects Nats chat is a react app.
00:24:07 [W] That and then you get taken into this place to this chat room and you can send messages.
00:24:16 [W] Yeah.
00:24:16 [W] So how did we do this?
00:24:19 [W] Well, let's go look at the code now.
00:24:23 [W] So to start off there is a Nats websocket library that you can use in your projects Nats chat is a react app.
00:24:36 [W] So that's what I'm using here. The Imports is just three Imports one used to connect. The string codec is just used to translate between JavaScript string and a JavaScript you enter a and
00:24:52 [W] And you have the credentials Authenticator?
00:24:54 [W] So what does it look like when someone registers so I have this register callback gets invoked when you click the register button.
00:25:07 [W] So the first thing we do is use the restricted creds that while I had mentioned earlier and these crowds can only ask for full credit. So these are bootstrap creds so
00:25:22 [W] And we're connecting to the Nats server which Willie mentioned before. So once we have the initial bootstrap connection, we're going to ask a Nats server service
00:25:38 [W] Lee mentioned before so once we have the initial bootstrap connection, we're going to ask a Nats server service the provisioner that while I had mentioned earlier
00:25:53 [W] Can I get some credits for this username? And if that all works then we get a message back and then the message contains the upgraded or full user creds.
00:26:07 [W] I'm also closing the the previous connection just because we're done with it and we don't need it anymore. And finally once we have our new full user creds we call connect again, but this time with
00:26:22 [W] And this will authenticate us with the Nats server.
00:26:22 [W] So then if we were able to get into this then call that means we were able to authenticate the new credentials work and we are we can access the real chat room area
00:26:37 [W] We're saving the creds for example here in local storage, but you might be able to store them somewhere else. Also, I'm using the like promise syntax, but the Nats
00:26:48 [W] Fully supports a sink and a weight in case anyone was curious about that.
00:26:50 [W] So that's how we got here to this to this area.
00:26:54 [W] So now when we get to the this chatroom what happens next?
00:27:02 [W] Well the very first thing that happens is this is like when the page loads if you're not familiar with react JavaScript, basically we connect again, so using the full creds that we got from the welcome page.
00:27:16 [W] And then here's where we set up some streams while Keda mentioned these earlier as well.
00:27:23 [W] So we have a couple different streams.
00:27:26 [W] We have a stream of messages for the cube con channel.
00:27:29 [W] It's this channel right here. We also have the Nats channel in the general Channel.
00:27:34 [W] And additionally we have the online status.
00:27:38 [W] So every user when they log into the app will send us heartbeats and that's how we know who's online is
00:27:46 [W] To hear while he chose to use online and he sent a message.
00:27:49 [W] Yeah cool. So and then finally the last stream that we set up with websockets is the DMS Stream So This is where we can receive messages while they can send messages to my
00:28:05 [W] And the public is taken from the credentials file that the Nets are that the provisioner gave to us and that's where I can receive streams the heart beats.
00:28:11 [W] This is our happen here.
00:28:14 [W] So it's just the simple publish on an online topic and then I'm just sending people my info my public key and stuff like that the interesting part when that was going to show
00:28:29 [W] Is how we handle revoking is here?
00:28:18 [W] So we're going to be connected to the application.
00:28:23 [W] And as soon as Wally hits the revoke button this callback will be invoked which will mean that we've been revoked.
00:28:32 [W] So when a user is revoked from the system, they receive a notification and the application can handle them.
00:28:39 [W] So in our case, we're just throwing away the creds because they've been revoked and they're no good and then we get read.
00:28:44 [W] Erected back to the welcome page from before where Wally does a revoking is also a UI that we've made and so that's a special path
00:29:00 [W] is accessible but you won't be able to revoke anyone unless you have the right credentials and while he's going to show that in a bit, but how that works is I mean pretty much the same as we've seen so far we connect
00:29:11 [W] Charles Boyle show there. And again, we have a stream. We set up a stream to receive updates for provision users.
00:29:15 [W] So that way the screen gets populated with, you know, the current users of the system knows and then we have another Nats service where we just ask the system.
00:29:25 [W] This is when the page loads will ask the system, you know Kate L me everyone, you know about right now.
00:29:32 [W] And then we just save that data.
00:29:37 [W] And yeah, that's that's pretty much it for the code.
00:29:42 [W] It's not too difficult to just our nothing too complex.
00:29:46 [W] It's just connect and then you can set up your streams or you can do your services and that's it.
00:29:55 [W] it. So I think Wally is going to show us how to do revoking mixed. So I'll hand it back to him.
00:30:04 [W] excitement
00:30:05 [W] So, let's see make host.
00:30:12 [W] So I'm going to show you because I have the credentials time.
00:30:15 [W] It doesn't have the gunshots. I'm gonna do the disconnect.
00:30:22 [W] Currently active users have unconnected here on the console and send a message to Jaime in reply back.
00:30:31 [W] gonna
00:30:34 [W] then I'm going to just going to hammer it home first.
00:30:40 [W] And also I found myself and I saw these connect and and that's going to give me a user authentication revoked error.
