Kubernetes IoT Edge Working Group: Using Event Driven Architecture at Edge: OVWR-2505 - events@cncf.io - Friday, November 20, 2020 4:01 PM - 27 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hi, this session is presented by the kubernative is iot Edge working group.
00:00:04 [W] This is about using kubernative his forage applications.
00:00:08 [W] I'm Steve Wang a tech lead of the working group.
00:00:11 [W] I work on kubernative and a few other open source projects as an employee of VMware.
00:00:17 [W] my name is Diane I'm an engineer threat hits been doing a lot of iot and Edge Computing in the last couple of years and also a lead of the this working group
00:00:29 [W] we'll give contact information and a link at the end but here's the agenda we're going to start with a quick overview of what the exact definition is of edge applications for the purposes of this talk then we're going
00:00:44 [W] But here's the agenda.
00:00:28 [W] We're going to start with a quick overview of what the exact definition is of edge applications for the purposes of this talk.
00:00:36 [W] Then we're going to move on to an introduction to some techniques and open source tools that are really useful when using an event-driven architecture and inch hopefully you'll like this talk and if you do we'll wrap up with details
00:00:52 [W] In architecture at inch.
00:00:53 [W] Hopefully you'll like this talk. And if you do we'll wrap up with details on how you can become a member of The kubernative iot Edge working group where we host ongoing discussions on subjects like this talk.
00:01:08 [W] For the scope of this talk when we say Edge application.
00:01:11 [W] We're not confining ourselves to just the software that runs on the individual Edge devices sure their software there.
00:01:19 [W] But if you're interested in getting kubernative involved, we're going to assume that you've got multiple devices involved but are also using containerized software at some location perhaps multiple locations. That could
00:01:34 [W] Anyway Regional tears or even Global tear. Our definition of an edge application is the big picture where you've got software interacting from various locations simultaneously,
00:01:49 [W] If this is what you're setting out to deploy and manage you have a need for data and control plane communication from Edge devices up to higher level tears.
00:01:54 [W] And you might also want support for Edge node a genoud interaction as well.
00:02:01 [W] A lot of people have fallen in love with kubernetes lately and it is a great tool for orchestrating containerized apps, but it's also extensible as a control plane. The fact is that when it comes to some image use cases
00:02:16 [W] Simply have too little resource to run software in a container or as a kubernative worker node.
00:02:21 [W] Yes, if you've got pies with four gig or now, eight gig of memory, these are quite capable and you could turn these into kubernative worker nodes, but there are a lot of far tinier devices like Arduino
00:02:36 [W] Rudy and low single digits of megabytes.
00:02:33 [W] We're going to talk about a technique that can invite the little devices to the party while still supporting containerized software running in your higher level tears simultaneously.
00:02:49 [W] So in a simple form an event-driven architecture looks like this and event is a piece of information often used to communicate facts like measurements or commands like statements of intent functions
00:03:04 [W] Consume events and it's up to these applications to decide what to do with the event events can be ignored forwarded stored or transformed in a Time series of events whether the events are measurements or commands a newer one might
00:03:19 [W] Irrelevant, if a buildup of cure is somewhere in a queue analysis of events my team it new events based on a transformation.
00:03:24 [W] In a distributed system and event stream is a communication Fabric and when the apps and events flows are viewed together.
00:03:32 [W] This is actually a programming model event-driven architecture can be helpful because it encourages some good program development practices loose coupling independently maintainable components and separation of concerns.
00:03:47 [W] A distribution layer can help organize things and maybe even offload things you might otherwise have to write yourself an example here is a pub sub broker eliminating the maintenance of a distribution list from the duty of
00:04:01 [W] A pubsub broker eliminating the maintenance of a distribution list from the duty of an event publisher.
00:04:07 [W] This is a metaphor.
00:04:08 [W] This is how I restaurant often works in the real physical world.
00:04:13 [W] There are various people involved shouting out combinations of desired State and notifications of State changes you listen to what concerns you you ignore the rest.
00:04:24 [W] So in this example, I've got a customer who shows up asking for a table for one for lunch eventually getting assigned to a table making an order and the waiter.
00:04:37 [W] Passing along details on that order into the kitchen.
00:04:41 [W] Let's take a look at an alternative flow of what a restaurant would look like with a micro service implementation.
00:04:49 [W] Yes, I think you could get it to work.
00:04:53 [W] But at what long-term cost what if the menu or table layout changes what things have to get touched?
00:05:00 [W] understand that many Edge locations devices often have various uncoordinated life cycle.
00:05:07 [W] Al's and business operations might change maybe even seasonally the loose coupled nature of event-driven architecture with independently maintainable components and separation of concerns can really be attractive
00:05:22 [W] Alternative flow of what a restaurant would look like with a micro service implementation.
00:05:27 [W] Yes, I think you could get it to work.
00:05:31 [W] But at what long-term cost what if the menu or table layout changes what things have to get touched?
00:05:38 [W] Yeah.
00:05:39 [W] understand that many Edge locations devices often have various uncoordinated life cycles and business operations might change maybe even seasonally the loose coupled nature of
00:05:51 [W] then driven architecture with independently maintainable components and separation of concerns can really be attractive Edge. By the way. I want to show out out to Simon Aubrey of thought works for coming up with
00:06:31 [W] By the way, I want to show you shout out to Simon Aubrey of thought works for coming up with this nice restaurant metaphor for describing how we vent driven might work at Edge.
00:06:46 [W] So event-driven can can originate on devices below what I'm calling the kubernative.
00:06:54 [W] He's waterline.
00:06:55 [W] There are some very simple protocols like mqtt that can be implemented on things like Arduino.
00:07:16 [W] Within an individual system. So this concept is nothing new by skipping encryption.
00:07:23 [W] there is risk, but if you're connecting isolated devices that are not connected to the internet with some semblance of physical security.
00:07:31 [W] Maybe this is an affordable trade off. The bottom line here is that there are solutions for very low-end devices.
00:07:39 [W] And if you have larger devices, there are solutions with bigger feature sets at Gateway and higher tikv.
00:07:46 [W] Here's your likely to have plugins to support all the various open source, tooling available available for Eventing and you can probably afford to turn on full security.
00:08:03 [W] Here are a few words of advice that I've discovered out there with regard to designing an old an event-driven architecture for Edge view your when
00:08:18 [W] Events view them as a Persistence of a replayable stream history.
00:08:11 [W] You don't want the event consumers tied to specific producers view your events as a record of something that has happened.
00:08:20 [W] And so it can't be changed.
00:08:21 [W] You can't change history messages on common delivery platforms often have certain characteristics and there are certain things. You should do and shouldn't do rules can be different across.
00:08:36 [W] this latency boundaries so that if you've got a failure domain and a latency domain you can do things that maybe you should bow avoid when you're Crossing those boundaries synchronous might be okay within a boundary, but really
00:08:51 [W] Pattern when you're crossing a big latency Castle.
00:08:52 [W] Thank you Stephen.
00:08:53 [W] So one of the answers to serverless are chios to event-driven architectures in the kubenetes land is is K native Eventing specifically K native Eventing is all about
00:09:08 [W] Yeah, hooking up our community services. We did with appropriate event sources.
00:09:07 [W] So this diagram basically explains it in a you know, you know most simple way.
00:09:16 [W] basically we have a source of our events which have a sink and that's ink goes to to to appropriate service. Also one more important details here.
00:09:29 [W] Is our cloudevents and and cloudevents provides us structure to our events.
00:09:37 [W] So basically adding all the metadata that we need to describe our events and and to have some consistency within our serverless supplications. And from that consistency
00:09:53 [W] To to appropriate service. Also one more important detail here is our cloudevents and and cloudevents provides us structure to
00:11:03 [W] The because then we can create an API seen, you know in a lot of different different type languages and and you know Porter are our Solutions and our services or our functions to different different environments
00:11:18 [W] Can see see one of the example where cloudevents basically adds adds some metadata and the data to the picture.
00:11:30 [W] How this looks in practice is something that will demo at the end the end of this talk. So basically what we have here is
00:11:42 [W] An edge location which run in Steve's home, which contains a coredns qtt broker and a small devices that are connected to the broker and sending sending their Telemetry using mqtt.
00:11:58 [W] An edge location which run in Steve's home, which contains a park when Kitty broker and a small devices that are connected to the broker and sending sending their Telemetry using mqtt.
00:12:22 [W] what we will do we will use a comma K and then connect to the that broker basically getting all these mqtt messages converting them into the cloudevents and and and
00:12:38 [W] Pushing them to our sink. And in this demo the sink will be simple even display service which will log this cloudevents to the console gamma K originates from the
00:12:53 [W] Apache camel project which provides a very rich framework for doing Enterprise Integrations and the comma K is basically like a native implementation.
00:13:06 [W] Other station of all the chemical components and as we can see here we can use any of the available hundreds of chemicals connectors to connect to different external systems and and co-create convert
00:13:21 [W] Connectors to connect two different external systems and and con great convert them automatically 2 to the K native that preventing sources.
00:13:32 [W] if we go to the next slide we can see how the k-
00:13:39 [W] k- architecture evolves because you know hink hooking One Source to one service is easy enough, but but but not enough to support all the use cases.
00:13:51 [W] That's very we can bring in the the the the concept of channels and and with sending an event from the source to the channel we can now hear multiple multiple
00:14:06 [W] Subscribing to the channel and and receiving all these events channels can be backed by different sources different resistance techniques.
00:14:20 [W] in memory channels, we have traditionally often use Kafka channels back by the the Kafka broker which provides are really really good solution for
00:14:37 [W] for implementing
00:14:41 [W] Iot and kitty the solutions on serverless extending this concept even further on the next slide. We can see the concept of of
00:14:57 [W] Inventing Brokers, which basically function in a similar way as as as a channels. The only thing is that instead of the subscriptions now, we are defining
00:15:11 [W] For the broker that that will that will push events to different different services and the only difference is that for the triggers we can we can add different kind of filters so that that we can say that we are interested in only
00:15:21 [W] Of cloudevents while we doing what we doing this.
00:15:23 [W] and finally, if you take all this into the consideration on the next slide, we can see a little bit evolved scenario where we with with this
00:15:38 [W] architecture we can support multiple things so we can have a
00:15:43 [W] We can support scenario that we will demo soon where we have a small small embedded devices connecting over non TLS to the local park or broker on the edge side.
00:15:56 [W] Then he having having a camel mqtt converting subscribing to the broker converting those to the to the to the services and to the cloudevents and sending it to the channel
00:16:12 [W] Campbell mqtt converting subscribing to the broker converting those to the to the to the services and to the cloudevents and sending it to the channel, but we can also imagine that we can provide
00:16:24 [W] Also, imagine that we can provide new components naming mqtt broker source that would act to the external systems as an mqtt broker and where we can allow.
00:16:40 [W] Allow more powerful devices which can support TLS to connect directly to the cloud to this to this source, which will also transform this sympathy messages coming from the devices into appropriate cloudevents
00:16:55 [W] To the channel the channel could be backed by Kafka providing all the the persistence and reliability that we would need in such a solution and then push these two different different services.
00:17:10 [W] So even this place service which is like most basic one that we can imagine that can be used Just Adjust for debugging purposes. But most commonly, you will push these two some kind of in flux DB or Prometheus.
00:17:24 [W] the back by a griffon a dashboard to have more better observed ability and be able to create different there's ports where you can where you can see see all these data so
00:17:39 [W] This is a call for action on the next slide in something that we can we can try to solve in the in the in the working
00:17:54 [W] To make mqtt which is the default iot messaging protocol of a first class citizen in the community of inventing world.
00:18:01 [W] This is you know, all the examples shown here is just the tip of the iceberg Iceberg showing how things could work but there's lot of things that usually in these kind of systems needs to be so like device
00:18:16 [W] The sending commands back to devices we can provide a lot of integration with the existing RTF. What forms like Eclipse homo or AWS or offerings in this area provide an easy way to
00:18:31 [W] So using different sea lice and you eyes and and provide some of these Services out of the box that you know, people can get really really quickly get started with with the with iot on
00:18:41 [W] Like this and finally do something and extend standing a solution like this to to the mostly cloud or let's say h and nodes.
00:18:54 [W] environments using using girl something like like Scupper and if you're interested in that topic, I would suggest you two to take a look take a look at the recording of the video of the of
00:19:08 [W] some by my colleague debt, which is happening at the same time as this one which explains a little bit more of how how serverless workloads can be pushed from from The Edge
00:19:20 [W] two different clouds and different serverless deployments
00:19:25 [W] So for the end I would like to do to go back and do a simple demo of all this. So let me just quickly share my screen and and try to try to do it.
00:19:40 [W] Steve I'm not allowed to so here we are going going back to the to the original idea having one source and one sink and and connecting them via cloudevents.
00:19:55 [W] because they said
00:19:56 [W] our service is is a very simple.
00:20:00 [W] I think the simplest possible case knative series that we could have it's named camel event display and it uses the event display image.
00:20:09 [W] So what we what this image will do it will just receive events or on it serving serving and point and and log them to the console and our source will be
00:20:26 [W] Let me do this like this.
00:20:29 [W] So it's a bit.
00:20:30 [W] It's visible better.
00:20:32 [W] So we're using camel Source Community Eventing come with a lot of out of shelf sources and camel Source.
00:20:42 [W] He's one of them and as I explained earlier, once you have a camel Source, you can use different different chemical components to to to connect to different external systems.
00:20:54 [W] So right here we are using the Paco Paco component, which will Connect using the bar quantity client to a broker.
00:21:06 [W] This is just a template because we don't want to give Steve's MPT broker details to the public but it will connect to the Steve's MPD broker running. It is home
00:21:21 [W] Appropriate username and password and connect two to one in 50 Topic in this case topic is aw datastax datadog.
00:21:45 [W] You a definition of the of the sink and for the think we can see that we are directly calling the service and and the service will be the aforementioned camel event display display service.
00:21:59 [W] to not disturb demo Gods. I have all this running in in advance and
00:22:10 [W] What we can see in this other other window is that we can pick pick up now the the the logs from the from.
00:22:25 [W] the from the from our from the Pod serving serving this event and as we can see these events are encoded messages
00:22:28 [W] Change to different to appropriate cloudevents. We can see some of the metadata the headers of the cloudevents like type which meaning that it's generated by the
00:22:32 [W] from which source is coming the the time step of the event and then finally finally the data so the data now is 74 Point twelve Fahrenheit degrees, I assume and
00:22:45 [W] 12 foreign High degrees, I assume and
00:22:48 [W] if we go back to the to the definition of our source, what else you can see here is that I have commented out a different thing.
00:23:01 [W] So instead of going to directly to the service we could go to the in-memory Channel or Kafka Channel or or some kind of broker defined by the cane 18 infrastructure and Implement all these other
00:23:16 [W] architectures that we saw on the slides on the sides before
00:23:22 [W] so this is an example of another service. So basically reading the events coming from the Steve's and quickly broker pushing them to the to the inputs DB.
00:23:37 [W] And then having a griffon dashboard connected to that input BP and ensuring showing this this temperature in the real time.
00:23:43 [W] So if you find content like this useful, we want to invite you to become a member of The kubernative iot Edge working group.
00:23:51 [W] We're not really writing code on kubernative.
00:23:53 [W] He's but we are focused on applying kubernative with open source tools to educate iot use cases.
00:24:00 [W] We have online Zoom meetings. Every two weeks at alternating times to accommodate members in different time zones as shown here. There's one series earmarked for North America the other
00:24:13 [W] One for Eastern Europe and China. We encourage a member-driven agenda. So once you join you can nominate topics for presentations or discussions.
00:24:24 [W] Where also operating a group channel on the kubernative slack.
00:24:31 [W] So we can be contacted using our GitHub IDs that same ID is my Twitter handle it. Okay. So these are our GitHub candles and you can use that to reach out to us or we're also available on
00:24:46 [W] Lack you see her on this Slide the link in the skid site to get a copy of this presentation deck.
00:24:53 [W] Yeah, thanks for joining us for this and we're going to hang around for a few minutes to for QA. And at this point I'm going to turn it back over to the cncf ministry of staff.
00:26:31 [W] So I think Dion and I are here live if anybody's got any questions, there's also a channel dedicated to questions on this session over in the cncf slack.
00:26:56 [W] The honor you on the air. No.
00:26:58 [W] We're located in different cities. So that demo was based on a small temperature sensor running in my home in Los Angeles going Halfway Around the World to Dion where he was posting Griffon. Oh,
