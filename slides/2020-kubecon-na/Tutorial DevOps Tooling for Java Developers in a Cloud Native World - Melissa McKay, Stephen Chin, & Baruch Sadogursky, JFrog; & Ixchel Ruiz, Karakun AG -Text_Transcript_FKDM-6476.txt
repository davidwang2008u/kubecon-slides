Tutorial: DevOps Tooling for Java Developers in a Cloud Native World: FKDM-6476 - events@cncf.io - Friday, November 20, 2020 3:11 PM - 95 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Okay, so welcome everybody to devops tools for Java developers were very excited to be able to talk be able to talk to all the folks of Q Khan about how you can up level your development skills by adding in a bunch of cloud native kubernative use
00:00:15 [W] An uplevel your development skills by adding in a bunch of cloud native kubernative use and deployment skill sets to kind of extend what you're doing with continuously deploying to production environments.
00:00:28 [W] My name is Steven Chen. I run the developer relations group at jfrog have been a long time Java developer and was doing devops before we even had a cool name for the for the word.
00:00:41 [W] Basically.
00:00:42 [W] We were just figuring out how to do better automation to
00:00:45 [W] production it shall do you wanna go next?
00:00:49 [W] Yes.
00:00:50 [W] Thank you.
00:00:50 [W] Thank your staff.
00:00:52 [W] My name is Michelle Reese. I'm from Mexico live in Switzerland.
00:00:55 [W] I'm a software developer official title.
00:00:58 [W] It's principal consultant.
00:01:00 [W] I'm a Java developer most of the time but I also do full stack because you have to be flexible in this world Melissa. I'm Melissa McKay and I come from a developer background.
00:01:14 [W] well about 20 years now just recently I decided to become a developer advocate for a jfrog and I'm hoping that all of my development experience I'll be able to use that to share with you at talks virtually here
00:01:30 [W] The someday in the future physically, maybe we'll cross paths at a conference.
00:01:34 [W] I'm pretty excited to be here today.
00:01:37 [W] So yeah, so we're looking at Willow looking forward to bed to in-person keep coming back.
00:01:43 [W] My name is Barbara the gorske. I am the chief sticker officer of jfrog speaking about in-person conferences.
00:01:51 [W] I would love to be there with you and give you some awesome stickers of jfrog also head of developer advocacy and
00:01:59 [W] Being developer myself or more than almost 20 years now.
00:02:04 [W] I really love speaking to developers about devops.
00:02:09 [W] I mean, that's exactly what we're going to do to do now working with the company jfrog that does tools for developers can give you the perspective of Both Worlds and we're doing our best to share this
00:02:24 [W] Really love speaking to developers about devops.
00:02:17 [W] I mean, that's exactly what we're going to do to do now working with the company jfrog that does tools for developers can give you the perspective of Both Worlds and we're doing our best to share this
00:02:44 [W] Perspective with you today. Welcome.
00:02:47 [W] All right, before we get started here. We have a short demo that we want to get started.
00:02:52 [W] Are we we're starting with the very first. Yeah.
00:02:56 [W] I know.
00:02:56 [W] It's incredible little bit different.
00:02:58 [W] Anyway, I'm going to go ahead and click a button here so that you can see something start working.
00:03:05 [W] Okay, so we're not talking about that now just firing up the demo.
00:03:09 [W] We're just firing up the demo and then we'll talk about the demo later on in the talk. All right.
00:03:17 [W] Let's build something sugar in it to start running. What you see in front of you is just a simple pipeline.
00:03:24 [W] Cool.
00:03:25 [W] It looks like we have a 50% chance of this demo working.
00:03:28 [W] Yeah.
00:03:46 [W] Oh, well, you know what? Let's let's drop a bomb here.
00:03:50 [W] Let's let's ask the big questions.
00:03:54 [W] Why should developers care about themselves?
00:03:57 [W] And as I mentioned I come from developers perspective and I remember what developers care about and they care about code, right?
00:04:06 [W] Shoni to all the shareholders. We showed what we wrote to a product manager to a project manager obviously qqa to our team lead who checked for and they
00:04:21 [W] For all the stuff right? If the features of their non functional requirements the quad style and the code review the QA people checked for quality and and once all of those stakeholders
00:04:33 [W] And say it's good.
00:04:33 [W] This is where we are done. Our work is done.
00:04:38 [W] It's Friday.
00:04:39 [W] Let's go drink. Now the Ops people they are going to deploy it if our code is good.
00:04:47 [W] It will be deployed. Just fine.
00:04:49 [W] It will work just fine and we wish them the best of luck but it's really not our job to do all the devops stuff kubernative infrastructure as code servers Networks.
00:05:02 [W] This is not our headache.
00:05:04 [W] Why should we as developers care about devops?
00:05:10 [W] This is exactly the perspective I've had as a developer for most of my career.
00:05:15 [W] We were pretty siloed when it came to the actual deployment piece.
00:05:20 [W] I was never on call for a deployment or anything like that.
00:05:24 [W] It's very different atmosphere today.
00:05:27 [W] My most recent time in my career.
00:05:31 [W] I was on a devops team that really opened my eyes.
00:05:35 [W] I did not realize the pains that
00:05:39 [W] Takes to deploy the applications and once I started learning several, you know things some of that process I realized there were actually big decisions. I would have made differently about the writing and the organization of the app had
00:05:54 [W] I was never on call for a deployment or anything like that.
00:05:54 [W] It's very different atmosphere today.
00:05:57 [W] My most recent time in my career.
00:06:01 [W] I was on a devops team that really opened my eyes.
00:06:05 [W] I did not realize the pains that Ops takes to deploy the applications and once I started learning several, you know things some of that process I realized there were actually big decisions. I would have made.
00:06:20 [W] Differently about the writing and the organization of the app had I known all of this pain that they were going through.
00:06:27 [W] So I think this is a good move in the industry having these silos where you just you know, throw code over the wall, and then just let Ops handle it. I think it's just not the best way to do things anymore.
00:06:43 [W] Well, I understand how it helps the Ops people their life is much easier when we are their wisdom, but how it helps us helps us.
00:06:52 [W] So let me let me pitch in from a developer perspective.
00:06:58 [W] So I think if you if you look at this from from a very selfish perspective.
00:07:04 [W] What we all care about is how much we get paid as developers, right?
00:07:10 [W] And if you look at the stack Overflow survey, which was recently done, you know full-stack engineers and back end engineers and everyone gets paid, you know quite well.
00:07:19 [W] So I think even a bit of the current pandemic we're very lucky to have technology jobs, but devops engineers and site reliability Engineers are actually even higher paid than development positions and I think this this reflects
00:07:34 [W] the number of languages and Technologies the adding in additional Cloud native deploying the cloud environments or hybrid environments and learning all these skills and getting really good at it actually is a way of improving
00:07:49 [W] from a very selfish perspective
00:07:53 [W] What we all care about is how much we get paid as developers, right?
00:07:58 [W] And if you look at the stack Overflow survey, which was recently done, you know full-stack engineers and back end engineers and everyone gets paid, you know quite well.
00:08:07 [W] So I think even a bit the current pandemic we're very lucky to have technology jobs, but devops engineers and site reliability Engineers are actually even higher paid than development positions and I think this this
00:09:12 [W] And and getting paid more which you know, that's not too bad. Not too bad at all.
00:09:18 [W] Angela what is your take on it?
00:09:20 [W] Why developers should care about devops?
00:09:23 [W] Well, I agree with all of you actually first and the most interesting reason for me is as Steve mentioned this set of practices that were devops and agile are here to
00:09:39 [W] Outside there if you're looking for a new job, I better pay you up. These are the skills that you have are the concept that you have to know and use this reason is because there are good practices in there.
00:09:53 [W] There are good practices that will make your life easier. And when this whole concept of Double started probably the best book that describes
00:10:08 [W] The ideas behind it is the Phoenix project. If you have started with this topic in a more serious way you probably have been recommended this book. I do recommend this book.
00:10:23 [W] concept of Double started probably the best book that describes the ideas behind it is the Phoenix project if you have started with this topic in a more
00:11:05 [W] A novel so it's entertaining second of all it's going to give you a perspective from management when this book was written.
00:11:13 [W] It was the earliest to thousands and at this specific point in time all companies realize that they are they were or they are technology companies regardless of the
00:11:28 [W] realize that they are they were or they are technology companies regardless of the product and services they provide so and Steve mentioned other important thing right
00:11:43 [W] So and Steve mentioned other important thing right now with this the with Kobe the pandemonium.
00:11:50 [W] It is important that we react fast.
00:11:54 [W] We adapt fast with a liver fast.
00:11:58 [W] So this idea of going really really fast and also providing quality making the the user happy or providing new functionality.
00:12:09 [W] It's really important. So in this book they describe
00:12:13 [W] Exactly what Melissa said the miscommunication of the impedance between different silos inside the company that were preventing this particular company from delivering the software or whatever
00:12:28 [W] To the lever in time exhale costs and sometimes not meeting the expectations.
00:12:35 [W] So this is a really good book because for us developers it provide us with a glimpse of what were the management concerns and when you start learning the language of
00:12:50 [W] You can also talk back and probably you are so developer.
00:12:48 [W] I'm going to have my list of metrics see we reduce our whatever for 20% and then I go with management or the stakeholders and they are like, but what does that mean?
00:13:01 [W] Well now you have the language of management, you know, the concerns that you can translate whatever you are improving into their language this not our will
00:13:13 [W] And it's the companion I would like to call it the companion of the Phoenix project. Is that unicorn project?
00:13:20 [W] This is the same story again a novel but the main character it's a female developer and it's going to describe the working environment and also the only things that can go
00:13:35 [W] A software development teeth. So it's also interesting because it provides you a nice depiction or sometimes.
00:13:41 [W] I'm not so nice the picture but you also see that the principles or the concept or the practices that their webs is proposing will help you in your day-to-day life.
00:13:55 [W] So you're going to be at least annoyed or and hopefully a happy developer.
00:14:01 [W] And that's that's a great review of those two books and I would like to suggest if you wish an eternity of relationship between them and it's interesting both in terms of timing the Unicorn
00:14:16 [W] It released Ten Years After the Phoenix project and it's interesting to see how the views on devops progressed during this time.
00:14:19 [W] If we look at the Phoenix project, we see how the story of devops is actually a story of Ops people of it people winning with devops. You can see how the main.
00:14:34 [W] Of the story buildpacks mer he is a VP of it Ops and that's like a completely Ops concept and he is devops kind of invention is the solution to the exact problem.
00:14:43 [W] We spoke earlier of how the developers are done in there out of the building and now go ahead and deal with it and good luck. And this is kind of view of how devops came to be solving the problem of it Ops
00:14:58 [W] people now 10 years later.
00:15:01 [W] We see a completely different picture the Unicorn project as being an alternative timeline. If you wish the same company the same problem now solved from a completely different perspective Maxine the lead developer as
00:15:17 [W] Ten years later.
00:15:14 [W] We see a completely different picture the Unicorn project as being an alternative timeline. If you wish the same company the same problem now solved from a completely different perspective Maxine the lead developer as
00:15:41 [W] Israel is she solves her problems of a very bureaucratic Ranjit and and slow Organization for her needs her developer needs
00:15:56 [W] By adopting devops. So it's it's the same wind is the same company the same problems.
00:16:03 [W] It's the same solution in the end of the day, but it came to be from a developer perspective.
00:16:09 [W] And I think this is the ultimate answer to the question that I asked in the previous slide why the developers care about devops?
00:16:18 [W] Yes, they didn't have to care in the beginning. It was Ops people solving their problems, but this is not
00:16:26 [W] not to anymore nowadays the problems of developers the autonomy the mastering the purpose of developers are also can be solvent can be elevated through devils.
00:16:41 [W] Yeah, so what you have to keep in mind, what is the big picture in the software development cycle?
00:16:46 [W] And of course, we are one part we are I will argue the most important part, but that's me, but we're a part of this whole process and even if we speak different languages we express
00:17:01 [W] In different ways. We still have like main things we have to follow and this is something that devops practices and IL practices are very focus on for example speed Quality Security
00:17:15 [W] information feedback early feedback early failure, whatever you need to go at the speed at you need to go if it's fast super fast it all it all depends
00:17:22 [W] What do you use what metrics what are the benchmarks?
00:17:25 [W] What are your requirements?
00:17:26 [W] Why are your service level requirements?
00:17:29 [W] Those are the information that you need to pay attention when you are in any part of the software development cycle or process.
00:17:40 [W] So these are still the commonalities between the bulbs.
00:17:44 [W] Well between developers within Ops between management so it
00:17:50 [W] It's important and it's very useful at the end of the day solution.
00:17:55 [W] And now let's talk about the development cycle and the development cycle changed on the in the in the last year's you remember how it always been three-step diagram because everything
00:18:10 [W] Graham but the those three tabs were different the three steps that we kind of were were used to is write code build code and then deploy code that was
00:18:23 [W] Steps and today we still have three steps but they are different steps. And this is what you see in screw the sourcing part of finding the the building blocks that you are
00:18:31 [W] Of finding the the building blocks that you are going to integrate in. Your application is not a New Concept, but it matured to be a very important part of
00:18:46 [W] very important part of our development lifecycle and why is that because nowadays 80 to 90% of our application is taking someone else's code
00:19:02 [W] Of our application is taking someone else's code.
00:19:06 [W] is that the open source framework is the open source libraries that we use and most of our code is just glue around it and just integration code between those different libraries. So the process
00:19:21 [W] Alex so the process of sourcing and by sourcing I mean finding validating bringing physically the code to where we can use it and then cashing it so it will stay forever and won't disappear.
00:19:36 [W] And then cashing it so it will stay forever and won't disappear under on figures.
00:19:42 [W] This is something that is critical because 80 to 90% of our application will be this code.
00:19:49 [W] So sourcing is a very big deal.
00:19:52 [W] How do we find the libraries that we want to use?
00:19:55 [W] we want to use? How do we know that those libraries are good good in terms of the do want we need good in terms of their easy to use.
00:20:05 [W] User experience good in terms of they don't have bugs.
00:20:10 [W] They don't have security vulnerabilities and good in terms. We can actually go ahead and use it.
00:20:17 [W] How can we validate all those things?
00:20:21 [W] So how do we know if the user experience is good?
00:20:25 [W] We need to ask our peers and here is where the problem of you know, we never considered it this way come and kind of bites us if you look at mayadata.
00:20:36 [W] Then Central as being the primary source for your dependencies in the Java world.
00:20:42 [W] You have no metadata that can help you make this decision.
00:20:46 [W] It's a file server that you can grab the artifact and use them.
00:20:51 [W] You don't know anything about them. You might write some human to read some blogs.
00:20:56 [W] You might see some conference talks and then you might decide well, I heard that I don't know Jay unit is good. Let's use J unit and then you go to Miami.
00:21:06 [W] You know, we never considered it this way come and kind of bites us. If you look at Maven Central as being the primary source for your dependencies in the Java world.
00:21:18 [W] You have no metadata that can help you make this decision.
00:21:22 [W] It's a file server that you can grab the artifact and use them.
00:21:28 [W] You don't know anything about them. You might write some human to read some blogs. You might see some conference talks and then you might decide well I heard
00:21:36 [W] That I don't know Jay you need is good.
00:21:39 [W] Let's use J unit and then you go to my in Central and find genuine, but the aspect of ratings of popularity of user experience is just not there. We need to do our own research and that's research can be
00:22:14 [W] Popularity of user experience is just not there.
00:22:18 [W] We need to do our own research and that's research can be long can be a time-consuming and even can be wrong right not everything that has hype around. It is necessarily good for you.
00:22:33 [W] So what I'm saying is you need to invest your time you need to do your research. You need to be able to smartly pick what your application is going to build on and this is where we
00:22:44 [W] talk about what's good for you in terms of usability and maybe even quality Etc. Now the second problem is how do you validate that? They don't have security vulnerabilities and this is where tools
00:22:59 [W] The X-ray and aqua and sneak and white sauce and black Dock and there are tons of other tools that can help you validate those dependencies.
00:23:10 [W] Some of them are more rigid.
00:23:12 [W] They won't let you get this dependency to even to your build system or to your artifact if they have they have if they still think this Library have a vulnerability some is more
00:23:27 [W] To let you play with it and then fail in the build time, but in the end of the day automating this security concern is very important.
00:23:26 [W] Another concern is license compliance.
00:23:29 [W] Is this Library even allowed to be used in your organization.
00:23:34 [W] Maybe it has a viral open source license and it means that if you are going to use it then legally you have to open source all your development. Sometimes it's
00:23:46 [W] Zettabytes of the time it's not because you probably work chances.
00:23:50 [W] Are you working for profit organization that wants to make money from the software and it means that it has to be not free and not open source, right? That's like the default use case if you wish so all those questions there there in the sourcing
00:24:06 [W] Because you probably work chances. Are you working for profit organization that wants to make money from the software and it means that it has to be not free and not open source, right?
00:24:11 [W] That's like the default use case if you wish so all those questions there there in the sourcing and doing your research for want you cannot automate and automating what you can is critical now the second step is the
00:24:30 [W] Your research for want you cannot automate and automating what you can is critical now. The second step is the most if you wish to reveal one, this is what we do for years.
00:24:40 [W] We write code we build we test we validate our code.
00:24:45 [W] This is all we know how to do we use our bill tools Maven Gradle basil, whatever you use and then you just compiled the cord you get gyros you start promoting them through quality gates in our pipelines were going to talk about
00:25:00 [W] out that in a second and and then you're done right? You have your artifacts ready to be distributed all ready to get to your users. And then when the Third Kind of the third part
00:25:16 [W] Three steps diagram kick in and that's the distribute.
00:25:19 [W] What does it mean?
00:25:20 [W] Well Distributing is bringing into the runtime.
00:25:23 [W] What is the runtime everything right?
00:25:27 [W] So back in the day of like pure Java development in distribution.
00:25:31 [W] It was rebuilt a war file and you put it in your tommcatt or your other serverless container or you build your application archive and then you put it in.
00:25:41 [W] What was it web websphere. God forbid or or webassembly?
00:25:44 [W] Logic or or whatever it is. Right and but those those days well those scenarios are still out there, but there are other scenarios that those regions that are reason obviously here at kubeflow Lon.
00:25:58 [W] We are going to talk about and we're going to show you how you distribute to your kubernative cluster. And this is kind of that the cloud native use case, but there are others as well.
00:26:08 [W] How about Edge Computing?
00:26:11 [W] about iot, how about for computing?
00:26:15 [W] Or even other people's computers you have now a distributable application.
00:26:22 [W] I Minecraft the people download and play this distribution scenario is also as as distributions that are Versa is as a others.
00:26:31 [W] Gloucester and we're going to talk about that.
00:26:29 [W] Yes, I'll we just wanted to mention verbs. You're totally right.
00:26:32 [W] Oh, that's one of the things that are very active of devops and the practices and agile that now our code bases have exploded. Our deliveries are also exploded because we have a more
00:26:47 [W] That now our code bases have exploded our deliveries are also exploded because we have a more fragmented Market.
00:26:56 [W] It's very typical for me to go to a client and suddenly they asked you to deliver in different flavors the software that you are preparing and with different requirements.
00:27:09 [W] So now you have literally a combination Matrix of things that you have.
00:27:16 [W] Have to prepare configure test and promote in different ways.
00:27:21 [W] So it's this practices are really going to help us do a better job.
00:27:28 [W] So it's important of course.
00:27:32 [W] Okay, and I'm going to I'm going to dig in a little bit more on one of these practices which is how you manage your code that you're doing for developing and I kind of looking at the the history of software development.
00:27:46 [W] There have been a bunch of different approaches to this problem and just just a quick Paul from you know, of course our audience.
00:27:52 [W] We love to hear from you as well as the the other speakers here are so what?
00:27:55 [W] What was your first version control system?
00:28:03 [W] How about you exhale you want to go first?
00:28:05 [W] I'm very lucky I've started with Mercurial so yay. Okay, that's that's yeah. So that's a very modern Version Control System broke again.
00:28:18 [W] In the terms of your progression here from apes to people from clearcase first clear glaze and then CVS.
00:28:26 [W] Yeah clerk has would be the a peer have most aperture Mercurial and then scn primarily is what I started with.
00:28:36 [W] Okay, so so Mercurial and and get which I think what a lot of people are using today are actually considered the most modern Version Control Systems, but
00:28:48 [W] if you go back in history what we started with we're systems like s CCS RCS clear case Falls in this category to commercial systems tend to lag behind open source Solutions and
00:29:03 [W] Are the most modern Version Control Systems, but if you go back in history what we started with we're systems like s CCS RCS clear case Falls in this category to commercial systems tend to lag behind
00:29:25 [W] For locking Version Control Systems where you'd actually lock the files you'd say this.
00:29:31 [W] I'm working on this file.
00:29:32 [W] Nobody else can touch it.
00:29:33 [W] You would lock the file and then you make your changes and then you release the file when you're done making changes. And of course this is this is perfect because you don't have any conflicts.
00:29:42 [W] Mmm now CVS and subversion, of course, it doesn't work for large teams. If you had a refactoring and you change something across the entire code base like a package or something that is in every file.
00:29:54 [W] I'll you would you would lock the entire code base and nobody else feels get any work done.
00:30:00 [W] So CVS and subversion fix this with optimistic locking which essentially means that you let everybody change the files whenever you want to and if it turns out that two people change the same file you go back and you resolve a merge conflicts you
00:30:15 [W] Virgin and hopefully it can automatically resolve the changes.
00:30:18 [W] Sometimes you can't automatically result of changes in you have to manually resolve a merge conflict and this takes us to the third generation of version control system.
00:30:28 [W] So CVS and subversion. You are always thinking with a server.
00:30:32 [W] And get in Mercurial interested. It distributed concept.
00:30:36 [W] where now you're syncing with the local repository.
00:30:39 [W] You have your own version of the entire repository locally actually such kind of kind of ironically this is this this takes us back to the early version control system. So so RCS and CVS were actually initially designed
00:30:54 [W] Son made frames and so they also technically consider the repository to be local but what they were missing and and what of course server faces Version Control Systems are missing is they they're missing the capability to sync your
00:31:03 [W] Other repositories so distributed Version Control Systems, let you take your repository and do pull and push requests against other Repose either pure Repose or essential repo and give you a lot more control and flexibility and scalability on
00:31:13 [W] Repo and give you a lot more control and flexibility and scalability on your version control system.
00:31:19 [W] And if we look at the current trends in this of course get has taken over the industry and has become the de facto standard.
00:31:27 [W] It's a very fast. It's very efficient.
00:31:30 [W] It does a great job of merging and resolving conflicts and it's basically pushed other systems like, you know, CVS Mercurial and even serverless.
00:31:40 [W] Version 2 to be of very low Usage Now in the industry.
00:31:45 [W] Some folks are still using subversion for commercial purposes. But I think most of us have moved on and move to to get an accepted that distributed Version Control Systems are the the path forward and when you when you look at how distributed Version
00:32:00 [W] Ariel and even subversion to be of very low Usage Now in the industry.
00:32:05 [W] Some folks are still using subversion for commercial purposes, but I think most of us have moved on and and move to to get an accepted that distributed Version Control Systems are the the path forward and when you when you look at how distributed Version
00:32:35 [W] You have your own working copy of the code, which you're committing and updating to a local repository.
00:32:42 [W] So all that exists on your machine. And then when you're ready to push your code, then you push this to the remote repository.
00:32:52 [W] So you'll actually sync your code with a central repository and other people will pull and push from that Central repository and a lot of modern workflows like GitHub further introduce the concept of pull requests where
00:33:04 [W] Are you ask people to accept your change and then they'll pull from your repository to integrate the changes that you've made which actually makes it safer for for emerging and code control because you don't have random people pushing
00:33:19 [W] Reduce the concept of pull requests where you ask people to accept your change and then they'll pull from your repository to integrate the changes which you've made which actually makes it safer for for emerging and code control because you don't have random people.
00:33:49 [W] Build and then we all get well, this is favorite analogy a donut day.
00:33:56 [W] When the build breaks or there's various other ways of shaming people as well, but I think I think rewards are better than shaming.
00:34:03 [W] So don't Donuts are a nice reward.
00:34:07 [W] So distributed Version Control Systems make this much easier workflow wise to avoid having your entire build impacted by this and I think the de facto standard for distributed Version Control Systems has become systems like like
00:34:22 [W] Wise to avoid having your entire build impacted by this and I think the de facto standard for distributed Version Control Systems has become systems like like get and specifically
00:34:44 [W] Specifically Cloud systems like GitHub. So in the stack Overflow survey GitHub was the highest used tool by developers across the board.
00:34:57 [W] He flips next slide Melissa the of course, you know slope we are using slack and jeering other tools, but GitHub is used by over 80% of the developers and then there's a bunch of other tools going down the list which other folks
00:35:13 [W] I think that when you're looking at how you can manage your Source control work with large teams and efficiently create the source code pipeline to deploy to production.
00:35:24 [W] It makes sense to start with a solid foundation with a distributed version control system that kind of underlies your entire devops pipeline.
00:35:40 [W] So and now after we spoke about sources, let's see how we move past sources and the as a I mentioned previously this part we know really well, right we take sources from our Version Control and then
00:35:55 [W] And we can web them to binaries now.
00:35:54 [W] What are those binaries? Well, depending on the on your stack depending on the programming language that you use with Java.
00:36:00 [W] We obviously compile our Java sources to the class files and then pack them into those jar archives and then altinity plea or on top of that the warmth of the war files were the AR are
00:36:15 [W] Pack them into those jar archives and then ultimately or on top of that the war for the war files were the AR are are archives.
00:36:20 [W] whatever in different different other languages.
00:36:24 [W] It might be compiled to different files or not compiled at all.
00:36:29 [W] But in the end of the day, we will pack whatever those files into some kind of archive. It will be an archive or of our
00:36:39 [W] The files were archived or pythons python files, but in the end of the day the ci/cd ever takes sources and amit's binaries and once
00:36:54 [W] Is and amit's binaries and once it'll make binaries those binaries go to Binary to artifact repository and obviously majority of us here
00:37:09 [W] So we would recommend jfrog artifact repository that you probably heard about or tea Factory but there are others there are definitely worth your you checking them out. And for the measure of our story. It doesn't really matter.
00:37:22 [W] What matters is that you have your artifact repository, which is the where your pipeline actually happens. And this is where the pipeline kicks in what the pipeline actually means that you take the artifacts that you
00:37:37 [W] Is there where your pipeline actually happens? And this is where the pipeline kicks in what the pipeline actually means that you take the artifacts that you have your artifact repository you deploy them to the
00:37:53 [W] Repository you deploy them to the right environment for a certain maturity level. For example in Step. Number one, you will deploy your integration level artifact
00:38:08 [W] Raishin cluster and you will pack them obviously in Docker container also in ci/cd ever and this is you you will you will deploy the container to your integration kubernative environment.
00:38:19 [W] This is where you do your integration testing and if the quality requirements are heat if you are satisfied with the quality of your artifacts, you promote them through quality gates to
00:38:34 [W] To another staging area and what does it mean promote through quality gates in its most simplistic way you will just move them from one repository in your artifact repository manager to the next.
00:38:45 [W] We'll have a repository for integration for system testing for staging for production and your movement through quality Gates will be promotion of those artifacts from one repository to another in
00:38:54 [W] Now we promoted from integration repository to system testing. We again deploy those artifacts to a system testing cluster kubernative cluster on our example in system testing kubernative cluster we
00:39:08 [W] System testing cluster kubeedge cluster on our example in system testing kubernative cluster. We start doing our test again other tests now don't be system testing but also can be security performance
00:39:22 [W] Also can be security performance any anything that you care about in terms of what you can automatically test. And again if the if the tests are failing, well, you just discard those artifacts, but if
00:39:37 [W] That's cool.
00:39:37 [W] And the quality requirements are met you're going to promote it further to staging and in the end of the day to production.
00:39:45 [W] So our pipeline is you build the artifacts you build a jar files from java and then you build Docker Docker image from those Java archives. And then once you have this image
00:40:00 [W] Artifact you go ahead and you promote promote promote promote through the pipeline.
00:40:09 [W] So just to reiterate some of the points that Brooke has made about sources.
00:40:14 [W] I want to drill down into what actually happens at the very beginning which is the building of everything.
00:40:22 [W] They're not there may not be many times in your career that you're involved in a Greenfield project where you can start from scratch and you know where everything is coming from and you know, how everything is built on how everything is put together. In fact most of the
00:40:37 [W] There may not be many times in your career that you're involved in a Greenfield project where you can start from scratch and you know where everything is coming from and you know, how everything is built on the how everything is put together. In fact most of the time of my
00:40:57 [W] Career personally has been on already established software teams and my responsibilities are you know, we're around maintenance of an existing product or service out there.
00:41:08 [W] There was an existing code base.
00:41:10 [W] I may be responsible for fixing bugs that kind of stuff given that it's so super important when you're in that situation.
00:41:20 [W] you've just joined a team part of your ramping up process know your build get to know your build get to know the ins and outs.
00:41:27 [W] Out of it, you'll be able to work better and more efficiently. If you know where everything is coming from and how everything fits together one specific story I have for that early on in my career.
00:41:38 [W] I joined a software team and it happened to be a project that was pretty large. There were multiple Java modules all over the place at the time. I was using eclipse and in my in my IDE, and I had everything
00:41:53 [W] And and I was really excited to work on this. I was pointed to a particular module a particular bug that I needed to fix.
00:42:01 [W] So I got the code up and every time I made a change I would turn around and run Maven clean.
00:42:09 [W] Well after a while of doing that very inefficient way to work because I didn't understand what was going on behind the scenes at some point. One of my colleagues came over and was kind of watching over my shoulder to answer some questions
00:42:24 [W] I noticed that this is what I was doing and figure it out immediately it was because I had not taken that first step to really understand how this project was put together.
00:42:27 [W] I didn't understand how my sources were coming in how they were being cached how every time I did a maven clean.
00:42:34 [W] I was actually blowing away my cash and just spending a lot of time repeating work. That didn't need to be done.
00:42:41 [W] Come to find out you know, once I learned how everything was put together.
00:42:45 [W] I could focus on the module that I was working on and only you know build that module over and over again as I saw fit and I could save about 20 minutes of time every time I would build so this is something important to know and
00:43:00 [W] Even if you're an Ops person that you they need to know this too because building your pipelines out.
00:43:03 [W] You need to understand how long your builds are going to take. If you repeat building pieces every time over and over through your software cycle through the pipeline.
00:43:13 [W] It's going to take forever.
00:43:14 [W] So there's a lot of efficiency improvements that can be made there.
00:43:18 [W] The other part of this is where are your sources coming from so
00:43:26 [W] Now that we're in this new world where containers are really popular.
00:43:30 [W] This is the thing to do you you build a Docker file you put in you pull in a base image you write some stuff you you know, put everything together and now you have this image that you can send out there and provide as a service for everyone.
00:43:44 [W] Well, there are some specific things to look for these base images are actually coming likely from default Docker Hub, unless you are specifying a
00:43:57 [W] Particular registry that you have which I would recommend getting a private registry because you don't know how often these images are going to go away your base images may disappear.
00:44:10 [W] I was on a project once where we were we were all relatively new to Docker. It was pretty new for us.
00:44:18 [W] We're containers are really popular.
00:44:14 [W] This is the thing to do you you build a Docker file you put in you pull in a base image you write some stuff you you know, put everything together. And now you have this image that you can send out there and provide as a service for everyone.
00:44:28 [W] Well, there are some specific things to look for these base images are actually coming likely from default Docker Hub, unless you are specifying a particular register.
00:44:42 [W] Astri that you have which I would recommend getting a private registry because you don't know how often these images are going to go away your base images may disappear.
00:44:54 [W] I was on a project once where we were we were all relatively new to Docker. It was pretty new for us.
00:45:02 [W] I was just getting you know, getting it built and up and running was was awesome. We started the very beginning definitely the the
00:45:12 [W] Station on Docker so having something to start with was great.
00:45:16 [W] However, as time went on I came to realize when our build started breaking that our base image was coming from a repository that was managed by a contractor who was no longer employed by the company.
00:45:28 [W] Well eventually that quit working eventually That Base image disappeared.
00:45:33 [W] They were no longer responsible for it.
00:45:35 [W] probably had assumed that we had already moved it into a safe place that we managed. Obviously that didn't happen. So
00:45:42 [W] So there was some communication that had to be done to retrieve That Base image so that our builds would stop breaking.
00:45:48 [W] That's one thing to look at. Another is you don't know necessarily anymore where the if you haven't paid attention to what's going on inside your dockerfile. You could be pulling in external resources that you didn't realize
00:46:39 [W] Documentation on Docker so having something to start with was great.
00:46:44 [W] However, as time went on I came to realize when our build started breaking that our base image was coming from a repository that was managed by a contractor who was no longer employed by the company.
00:46:56 [W] Well eventually that quit working eventually That Base image disappeared.
00:47:01 [W] They were no longer responsible for it.
00:47:03 [W] probably had assumed that we had already moved it into a safe place that we managed.
00:47:08 [W] And obviously that didn't happen. So there was some communication that had to be done to retrieve That Base image so that our builds would stop breaking.
00:47:15 [W] That's one thing to look at. Another is you don't know necessarily anymore where the if you haven't paid attention to what's going on inside your dockerfile. You could be pulling in external resources that
00:47:31 [W] Actually pulling in an external script and then that script was being launched during the build not recommended to do that at the very least.
00:47:41 [W] We needed to retrieve that script from wherever it was from and also store that in a local repository so that we had access to it always and it wasn't constantly being pulled, you know over the over the
00:47:56 [W] Not to pull that thing down. The other was knowing what that script was actually doing.
00:48:02 [W] there may be security vulnerabilities being added that we weren't aware of there could be licensing issues. If there happens to be a third party applications or installations happening during your build that involve installing products that
00:48:17 [W] Do not have a license that is good for your company.
00:48:20 [W] So yes, so make sure you understand your build.
00:48:25 [W] That is the whole point of this slide here. Also note the bananas.
00:48:30 [W] I refuse to use shipping containers to represent containers anymore in any talks or any slides and I challenge anyone in the future to start moving away from shipping containers.
00:48:41 [W] There can be there can be two options here.
00:48:44 [W] First of all, we can start a movement of using bananas.
00:48:47 [W] As for everything containerd related or we can open a competition for whoever comes with the next best thing after shipping containers for talking about containers.
00:49:00 [W] I root for bananas.
00:49:02 [W] I like it.
00:49:03 [W] Well, I I like to work a lot of with containers because when we first started in our projects, I think the first time we use it was for developing purposes. For example, we in the product that I
00:49:17 [W] working on we need to support several databases and instead of installing in my local machine postgres and MySQL and then later on polluting my my system folder now we had the opportunity
00:49:32 [W] To create the image or download the image in if we needed to create the specific postgres version with our own configuration file even better.
00:49:45 [W] So that's why I support totally smell. This is a Dia of having your own at the at the company level your own repository because you can do the things like this later on when you are using them for integration
00:50:00 [W] Want to customize it because integration tests usually takes a long time.
00:50:05 [W] So there are expensive in bootstrapping the depending on how many services you have to test. Remember integration test is testing two components.
00:50:18 [W] You don't have to test your entire application. You can of course do it to end-to-end tests. But International tests you can have as many different configurations between components.
00:50:30 [W] And sometimes because of this you want to create as different customized versions to make this easier faster when I started with containers and and I heard
00:50:45 [W] Packaged ones deploy anywhere.
00:50:47 [W] I know under different circumstances.
00:50:49 [W] I remember.
00:50:51 [W] Oh, this is so like the job of promise right was from everywhere.
00:50:57 [W] So it's sold.
00:50:58 [W] Hmm.
00:50:59 [W] What was not to like?
00:51:01 [W] Yeah, but I think that the promise of java right ones right write once Run Anywhere actually didn't didn't fulfill and it didn't fulfill because dependencies because
00:51:14 [W] cuz our application cannot really be isolated from everything around it and this is why even in Java works on my machine a joke
00:51:29 [W] is actually a reality right I even with Java it might very well be that something that runs on my machine actually breaks in in any other environment obviously including production and and I think
00:51:44 [W] Containers are really the next step of minimizing the impact of external of external dependencies.
00:51:54 [W] It's almost like someone said works on my machine and then we said, you know, what fine we'll just ship your machine to production and that's exactly what and that's exactly what wooden containers. Are
00:52:09 [W] We take even more of those of those dependencies pack them even more with our application and this is how we ship so think about
00:52:24 [W] Play Anywhere when obviously run once Run Anywhere is a part of it.
00:52:29 [W] The other thing that I tracked me, it was a change of how we thought Marty powder and has snowflake server versus Phoenix server, and it's the same metaphor as the cattle versus
00:52:44 [W] Because in the past we had the servers that nobody knew how they came to be.
00:52:51 [W] Nobody knew how they were working.
00:52:54 [W] Nobody wanted to touch them because you cannot reproduce it.
00:52:59 [W] So they were like like so dear even if they were not working correctly.
00:53:06 [W] Nobody attempted to change it.
00:53:09 [W] it. So now we have to think in a different way.
00:53:13 [W] Nothing can die at any moment.
00:53:16 [W] Even we want to kill them at some point.
00:53:19 [W] So you have to start changing how you prepare things.
00:53:26 [W] how you package things how you make them run as they should how do reproducibility starts like being at thing. I really big thing.
00:53:39 [W] So yeah containers thumbs up.
00:53:43 [W] Alright, so in this new world of containers and everything in the context of delivering your application choosing your tools can be pretty overwhelming.
00:53:52 [W] There's a lot of stuff out there that you have to learn now as a developer in order to make this process efficient and get your stuff out into production.
00:54:02 [W] So something that I really recommend is make sure that you understand as a
00:54:09 [W] / And as your team that you understand what you need and what your goals actually are not just service oriented but business goals as well this means involving representatives from other parts of your company
00:54:24 [W] Come in and help to determine. What is most important for you?
00:54:29 [W] The first thing you need is the list the list of priorities your you know, is it fast?
00:54:35 [W] Is it efficient?
00:54:36 [W] Is it reliable should it be you know more economical?
00:54:39 [W] These are all just examples of goals that you have but make sure that you prioritize these so that across the company you're all on the same page working toward the same thing the same goal you won't have pockets of the company wondering
00:54:54 [W] and why on Earth are developers doing this when they should be doing that these are important things to make sure that you know up front.
00:55:02 [W] This picture is of my car.
00:55:05 [W] This is my actual car sitting in my garage right now.
00:55:08 [W] This is really is a good example of what I'm talking about, especially for legacy systems.
00:55:14 [W] This is a legacy car.
00:55:15 [W] It's about 18 years old and I've been Colorado the tires on this car right now are likely more expensive than I
00:55:24 [W] Get selling this car.
00:55:26 [W] So when I got into a little accident goodness more than a year ago. Now, I got a little dent on the side of the car and it was definitely not worth it to me to take it to a body shop and get that fixed instead.
00:55:41 [W] Ed I went to Amazon got a Band-Aid magnet and put it over the dent in my car.
00:55:46 [W] So sometimes this might be the right thing to do for some of your legacy applications just because that particular thing is not a priority for your business at the moment.
00:55:59 [W] So this was something I introduced to me recently and it was a value stream that your it value strain as in the context is applying it to your entire pipeline your software development Pipeline and this is interesting
00:56:14 [W] To me because so much of these things.
00:56:16 [W] We these metrics and these values we place on the final product the final product that's running in production.
00:56:23 [W] But what you also need to consider is every step that you took to get there.
00:56:28 [W] It would be it's really valuable to also come together as a team not just developers but with representatives from other departments as well come as a team and decide, you know, which part which steps are we taking?
00:56:43 [W] King that's your first thing whiteboard what you're actually doing to get your software into production and it doesn't have to be perfect and it likely won't be but you need to have that documentation of the actual steps that are taking place.
00:56:56 [W] You don't want to get in a situation where only one person knows step three of the process.
00:57:01 [W] They're sick on the day of you know, deploying a fix to production.
00:57:06 [W] Nobody knows what to do.
00:57:06 [W] You want to make sure to have that documentation and I don't care if it's a manual step write it down.
00:57:13 [W] Once you have this documentation in front of you then you can start going through each one and find out which which steps are the most costly for you right now as a team, which steps seem to be causing the most problems for you.
00:57:29 [W] Which steps can you improve one one idea is this was also something introduced to me recently.
00:57:37 [W] It was the whole idea of 1% Improvement pick one thing pick one thing in your development cycle and improve that one thing this this is a good transition.
00:57:50 [W] This was really brings back some memories for me how to fly.
00:57:58 [W] For me my first devops team and my first experience realizing what Ops goes through and actually deploying an application.
00:58:07 [W] This was amazing for me Ops I was it was a smaller team Ops and Dev was thrown together.
00:58:16 [W] We had very limited training at the time other than just learning the word devops and learning.
00:58:22 [W] That's what we're going to do now and we started the developers on the team started learning.
00:58:28 [W] process of offs and found a lot of complexities and the deployment that we had no idea what was going on one example is just opening the right ports making sure the right right ports are open, especially, you know
00:58:44 [W] I was it was a smaller team Ops and Dev was thrown together.
00:58:41 [W] We had very limited training at the time other than just learning the word devops and learning.
00:58:47 [W] That's what we're going to do now and we started the developers on the team started learning the process of offs and found a lot of complexities and the deployment that we had no idea what was going on one example is
00:59:32 [W] Hey nurse, make sure that you're exposing the right things.
00:59:35 [W] It was a big deal. If you got that wrong. There was an entire other team that dealt with infrastructure and if you needed to be able to get traffic through a particular load balancer, you needed to know that in advance.
00:59:47 [W] So, you know deploying a piece of software where we have fiddled with that that was unacceptable and unfortunately in this particular case, it might take a week to get that change in place and Mitty. So again the importance.
01:00:02 [W] Of communication between teams and understanding the pains that our teams are going through is super important for developer.
01:00:10 [W] You can't be flippant about that this particular project.
01:00:15 [W] I was working on there were a lot of little shell scripts running around on people's machines in various places various folders on a shared drive and these little strips were what we're used and they were patched
01:00:30 [W] Through is super important for developer.
01:00:33 [W] You can't be flippant about that this particular project.
01:00:38 [W] I was working on there were a lot of little shell scripts running around on people's machines in various places various folders on a shared drive and these little strips were what we're used and they were patched
01:01:11 [W] Actually deploy this service to various locations, whether it be a staging environment or a production environment and every time a deploy was done on this particular service.
01:01:23 [W] Now, this was back, you know, you always hear deploy fast to pull it off in this was not a service that follow those rules deployment was a big deal.
01:01:31 [W] We did not deploy very often and it's a good thing because every one of those little scripts you had to find them and fix the little hard-coded detail.
01:01:41 [W] Al's that may have changed between each deployment.
01:01:44 [W] Oh and you got to make sure that you make the script, you know that it is working for staging and for production make sure that you know, all the URLs are correct and blah blah blah.
01:01:56 [W] We had a situation where accidentally URL for a test.
01:02:03 [W] Amq sir was put into a production environment. So if you can imagine this was something
01:02:11 [W] That we experimented with we didn't know it at the time but we were creating our infrastructure as code. We started putting our deployment scripts all of those little scripts.
01:02:22 [W] We got them together.
01:02:23 [W] We put them into Source control and we started versioning them for each and every deployment so I don't advise going in and you know, making hard-coded changes every time however, that's what we started with and
01:02:38 [W] Blah, we had a situation where accidentally URL for a test.
01:02:45 [W] Amq sir was put into a production environment.
01:02:48 [W] So if you can imagine this was something that we experimented with we didn't know it at the time but we were creating our infrastructure as code. We started putting our deployment scripts all
01:04:04 [W] Better for us to be able to do that quickly get all of that stuff in Source control version it and then be able to apply variable based on whether it was a production environment or a
01:04:20 [W] I meant that kind of thing and then we were able we were able to deploy much faster and we avoided those silly mistakes of putting in the wrong URL and the wrong place the other advantage of doing that is that now you have the option
01:04:34 [W] Iot of of going back to a previous version if you need to for whatever reason it's going to happen.
01:04:40 [W] Nothing is ever perfect in life at some point. You're going to need to roll back a release as we get better and better at this rollbacks may not be as common as roll forwards but for a while I think
01:04:55 [W] To have that safety measure and place until you get a lot of these practices, you know, really down on your team.
01:05:02 [W] Right.
01:05:03 [W] Yes.
01:05:04 [W] I totally agree with you and Melissa you have to exert analyzed as much as the knowledge as possible reduce them magic happening because life happens and sometimes the person that knows the magic
01:05:19 [W] Chance and then it's chaos.
01:05:19 [W] So you have a bottleneck a dependency that it's not right or not needed checklists.
01:05:26 [W] Make sure that you have your checklist all over the place and people know where to find them. Another Point.
01:05:34 [W] I've been in situations where we didn't have the appropriate environment to work with to begin with you might be able to build it on your local machine you might have
01:05:46 [W] External resources to use to deploy something if you needed to just for testing.
01:05:51 [W] Maybe there was a staging environment.
01:05:54 [W] certainly there was a production but don't skimp on your environments.
01:06:01 [W] This is probably the worst thing you can do for your development team.
01:06:04 [W] I mean, you know, we need a place developers need a place to test things.
01:06:10 [W] Try things out experiment with things there also needs to be available for the benefit of everyone.
01:06:16 [W] An involved you need a staging environment.
01:06:18 [W] You must have a staging environment.
01:06:20 [W] Generally.
01:06:22 [W] This is an environment that matches production in every way possible.
01:06:25 [W] But it's the first environment that you would deploy a new version to when you're in ready in your cycle to deploy a new version very important to have a if you want to test
01:06:41 [W] Good luck to you you you're likely going to have some pretty miserable user experience doing that and a lot of you know downtime if you can imagine also a test environment
01:06:52 [W] Use your automation that you've built to deploy to various environments deploy to a testing environment Michelle mentioned before that, you know integration testing can be pretty expensive.
01:06:53 [W] I was in a situation where in order to an expensive in time specifically is what I was thinking something that we would do we would add to our unit tests, you know, the like interaction with the
01:07:08 [W] We would just use an in-memory database, you know, because it was faster, but the problem is is the in-memory database is not the same.
01:07:14 [W] It did not have the exact same syntax as what was used in production.
01:07:18 [W] So pretty ridiculous to have all of these tests and they all pass and they all run and then put your service into production and everything breaks because of a silly, you know, SQL mismatch or syntax difference.
01:07:34 [W] Um, so use test containers containers are everywhere containers are good for you.
01:07:37 [W] You can use them for your integration testing and test containers has a lot of available options for you. You can you know, grab your version of database that you're using and be able to deploy
01:07:52 [W] Hm vironment and be able to use that you will catch things like any API problems. You'll catch any, you know syntax problems any differences make sure that your integration environment actually matches
01:08:04 [W] environment and just avoid that mess
01:08:05 [W] so she'll week's test containers and I know she has a lot to say about them and why we like them, so I'm going to hand it over to her.
01:08:14 [W] Well full disclosure.
01:08:17 [W] I really like integration tests. One thing that Martin folder said wants is that iteration tenses Jeweler have to test the whole system.
01:08:27 [W] Sometimes any Direction test is testing the communication of the coupling of two modules so you can bridgecrew.
01:08:35 [W] Exaggerated decoration test as you seem fit, and if you increase the richness of this and just different configurations of your test is going to be even better for you.
01:08:46 [W] I love this project because I said I started with containers really early on so we were using containers for developer for developing like for example, the databases
01:09:01 [W] Postgres and MySQL because the production run with both of those databases and so you have your containers like that and you're happy and etcetera Etc when you start doing integration tests, you
01:09:14 [W] All this resources and run them turns out that at the time where I started doing that I'm a Gradle most of the time girl.
01:09:18 [W] Maybe I also work with Maven but at that time we have different plug-ins for cradled and they were fantastic.
01:09:26 [W] They allow you to bootstrap an automatic has everything but the functionality that they provide were very limited. For example, you cannot have
01:09:37 [W] Randomized boards.
01:09:39 [W] Yay.
01:09:39 [W] So not running the test integration tests concurrently, which is a Bad Thing certain time. It was there were so many limitations when I discovered test containers and ISO what
01:09:55 [W] And how powerful and flexible they are because they already have like pre created templates for databases even with their own weight strategies.
01:10:09 [W] Tuna specific type of container that ways or different other tools. They do have one kind of operation.
01:10:12 [W] It's called rebuke that make sure that your containers are well-behaved. This means that once they are running.
01:10:23 [W] they start up they run and then they are killed even if your tests are failing because in fact
01:10:31 [W] Here's back.
01:10:33 [W] I would usually get the call from the it guys.
01:10:37 [W] it shell you crush the machine because you have like 1000 zombie Docker containers and it was a lot and it was because sometimes the test failed and I we didn't
01:10:53 [W] The resources correctly there were some workarounds like before running the tests. You kill everything in the machine, but it's not. Okay. So if you need to work with integration and
01:11:07 [W] Even the simple ones or the very very complex ones.
01:10:57 [W] I totally recommend you to have a look into this project.
01:11:00 [W] It's going to word your while and it's easy to set up and it's as I said, it's flexible.
01:11:08 [W] There is already some predefined types of context of containers or test containers and you have the generic one.
01:11:18 [W] So totally recommend it.
01:11:22 [W] All right, so we're at a coupe con conference and I assume there are a lot of developers in this particular audience since we're speaking specifically to job Bella purrs, although this would apply to any developer.
01:11:36 [W] Really.
01:11:36 [W] what about kubernative? He's in my personal experience as a developer to on a development team before I was on a devops team.
01:11:45 [W] I had little exposure to the deployment itself.
01:11:49 [W] My life was all out. Just you know.
01:11:52 [W] In my IDE, I fix things check things in how it's done went home for the night and slept. Well now that I'm on a devops team.
01:12:02 [W] No, I'm just kidding now.
01:12:06 [W] absolutely more of a concern for me, like what exactly is going on in deployment world and along with the automation now that you have all the containers and everything is the bigger your project is.
01:12:21 [W] More likely, it's going to become difficult to manage all of that kubernative. Ziz an awesome orchestration tool if you may not get into the nitty-gritty of
01:12:35 [W] As a developer, in fact, you know, it's possible you may have an infrastructure team that deals with, you know, upgrading clusters that kind of stuff but it's important to understand how it works.
01:12:33 [W] There are also manage Solutions. So once you understand how it works, you might consider knowing knowing the big lift of managing kubernative clusters, you might want to consider the
01:12:48 [W] And how it works, you might consider knowing knowing the big lift of managing kubernative clusters.
01:12:54 [W] You might want to consider the manage Solutions available out there all of the big cloud providers of them as your Google.
01:13:02 [W] There are AWS.
01:13:05 [W] AWS. They're out there and are pretty. They're making them easier and easier to use day by day.
01:13:12 [W] If you are curious and you want to know more which you should as developer, there are a ton of good resources out there. Now lots of Articles blogs being written about kubernative.
01:13:22 [W] This one is my absolute favorite.
01:13:24 [W] It was it's provided by a genre called 50 days from Zero to Hero with kubernetes each of these it sounds overwhelming it takes 50 days to learn kubernative use, right, but each of these little points, you know,
01:13:40 [W] A single a blog or a little video.
01:13:43 [W] It's not going to take you all day, you know or all week for for each of these steps here day one is my absolute favorite in this process here.
01:13:58 [W] Processed here.
01:14:02 [W] It's I actually picked up a hard copy of these children's books.
01:14:06 [W] It's all about 50, which is a PHP app learning how to live, you know in kubernative land and it's basically a child's, you know written as a child's book to teach you the basics of kubernative Ace and
01:14:22 [W] Acute metaphors in there some of them might be a little forced but that's okay. We have Rook there's always a page that is more technical that describes, you know exactly what they're talking about if there is any question on how to
01:14:37 [W] Here it is.
01:14:36 [W] Definitively on page 12 of this children's book.
01:14:39 [W] This is how you pronounce kubeacademy.
01:14:45 [W] Another way to learn Kelsey high tower has a really good at GitHub repository called kubernative the hard way this really gets down into the details of kubernative A's and forces you to start at the beginning so that you learn
01:15:00 [W] Everything is put together and how everything works highly recommended directly from the readme here kubernative.
01:15:05 [W] The hard way is optimized for learning which means taking the long route to ensure you understand each task required to bootstrap the kubernetes cluster.
01:15:16 [W] So definitely go here to learn once you've learned. These are some of the things that you're going to need to consider when you're building your app or when
01:15:28 [W] modifying an existing existing app to behave the best in this new environment in this container and cluster environment.
01:15:36 [W] So this comes directly from a white paper available at jfrog.
01:15:41 [W] I have the link here.
01:15:42 [W] These are some of the tasks that you need to consider some of the questions to ask. For example, how many times have you witnessed a server falling over because the log directory filled up
01:15:59 [W] Happened to me everybody its and it's just a symptom of you know, you want to get something out there you want to get something working and we have this tendency to focus on best case scenarios and happy paths.
01:16:14 [W] These looking through these questions as a team kind of gives you a little bit of an idea of what can potentially happen in a production environment things that you should be concerned about and things to optimize on I like this one data
01:16:25 [W] Out and things to optimize on I like this one data persistency, you know don't don't persist everything persist what you need.
01:16:24 [W] I'm you kind of defeat the purpose of having a container is you know, make sure your persisting what you need, of course because your container can die and go away, but make sure that your you aren't Overkill here.
01:16:37 [W] Termination signals. This is one. I personally had a problem with it was something I added to one of our services because there really was no graceful way to shut it down.
01:16:47 [W] There was no end point.
01:16:49 [W] It was just, you know, kill it and be done.
01:16:51 [W] Well, if you killed it while it was actively being used in production. The only thing for your user to do is just, you know, try their process again, unfortunately this particular survey and it comes from the from the pet from the
01:17:06 [W] A to shut it down.
01:17:07 [W] There was no end point.
01:17:09 [W] It was just, you know, kill it and be done.
01:17:11 [W] Well, if you killed it while it was actively being used in production. The only thing for your user to do is just, you know, try their process again, unfortunately this particular survey and it comes from the from the pet from the
01:17:39 [W] Thank you. You couldn't kill your application instead you try to fix it and try to keep it alive as long as possible.
01:17:46 [W] One of the big changes are exactly that that you now need to be ready to kill your application and it should go down very fast in this is why you need the kill the kill monitoring exactly and gracefully
01:18:01 [W] As some of the processes we're very linked the amount of time.
01:18:04 [W] So having you know forcing a customer to redo their stuff was pretty painful and there are many reasons why you'd want to kill, you know, you may want to you need to work on an upgrade or you need maintenance of some kind.
01:18:19 [W] Are you know how you've deployed your cluster? You know, if it's possible to only kill, you know part of your cluster only some pods update those and then reroute traffic.
01:18:28 [W] This is something that is better for you to do than just to kill everything and be dead in the water the idea, you know, keep stuff alive like what Brooke said?
01:18:40 [W] Yeah. This is an interesting idea that I love from containers instead of fearing that you start like
01:18:48 [W] Like thinking it's going to happen.
01:18:51 [W] Sometimes I even going to cause it. So I need to think about what are the implications and the consequence of that so start thinking like that exactly and it is a different way of thinking it's exciting when you get something up and running
01:19:06 [W] push it out there, but you really need to think of these scenarios, you know, when it doesn't work and we're trained to do this in our you know our code when you get down to the details, you know, we're trained to look at a function for example and make sure that it
01:19:19 [W] trained to do this in our you know our code when you get down to the details, you know, we're trained to look at a function for example and make sure that it behaves the right way and we consider all the failure scenarios but bigger picture failure
01:19:42 [W] And we consider all the failure scenarios but bigger picture failure scenario sometime get sometimes those get overlooked. So definitely keep these questions in these tasks in mind when you're prepping your app or improving your existing app.
01:19:57 [W] Open your app or improving your existing app for the kubernetes and container world.
01:20:06 [W] All right.
01:20:07 [W] so let's go and see what our little pipeline is doing.
01:20:13 [W] Oh and we have so much stuff to be Scout to discuss now over our piping and yeah, it's it's oh, yeah actually worked look at that.
01:20:23 [W] Look at that.
01:20:25 [W] I Really Wanna gods are with us with that.
01:20:30 [W] Yeah.
01:20:31 [W] Yeah that never happened.
01:20:33 [W] I mean live demo and it worked.
01:20:35 [W] like the visual this provides that the actual pipeline when you know, the
01:20:43 [W] Just the term software pipeline can sometimes seem like magic. It isn't it is not magic. It is just the steps that you take to progress your software down the line.
01:20:54 [W] So in this particular pipeline, this is a development pipeline.
01:20:58 [W] We have a front-end application.
01:21:01 [W] This particular one is in p.m.
01:21:05 [W] We're using npm packages to build our front-end or back-end is built in Java.
01:21:11 [W] In the middle of this pipeline, we actually build a container with these two resources.
01:21:18 [W] No run it through integration tests that kind of thing when everything passes you promote your artifact promote your container image to the next step in your cycle.
01:21:31 [W] Which in this one is a staging repository. A lot of these tools operate in the same way this particular one integrates with various tools this particular pipeline gets triggered with a
01:21:46 [W] GitHub repository if either of there's actually three repositories here one is for the actual pipeline script which describes this whole process.
01:21:56 [W] The other one is the of course the front end repository and the third is the backend Java repository any changes to those repositories will trigger this pipeline to run at the appropriate place.
01:22:09 [W] So this makes it really easy for multiple teams to work together without stopping on each.
01:22:15 [W] Other too much, you know getting their latest changes that kind of thing really valuable thing to have Yama is I have a question that we saw.
01:22:27 [W] So what I see here, is that what do you triggered in? The beginning was the front end the front and built and there was like an August to committing a change into one of the npm files
01:22:42 [W] Generated like run number 11 when you when we look at the back end when we look at the maven build. It is run number seven.
01:22:47 [W] it mean that the now the Run number 11 the bill number 11 will reuse the outcomes of the build number seven in the back end.
01:23:00 [W] Yes, and that's great because we don't need to rebuild the maven project every time something changed in our front end.
01:23:09 [W] Yes, this will save so much time on your builds. A lot of time is spent rebuilding something over and over and also this is something I've seen to that Baruch. You've already touched on the whole promotion steps and
01:23:24 [W] A lot of time is spent rebuilding something over and over and also this is something I've seen to that Baruch you've already touched on the whole promotion steps and going through your quality Gates.
01:23:31 [W] I've seen ci/cd stems and pipelines like this where the whole container is built at every step.
01:23:40 [W] That's you know, or when you're ready to deploy its built again.
01:23:45 [W] Once you do that you've lost you don't have a guarantee that that's the same container or going to have the same behavior as what you tested.
01:23:55 [W] You kind of you lost all your effort there by rebuilding something. So this whole process of promoting or you know, moving the same make sure your artifact is built at the beginning of your pipeline and then as you promote
01:24:10 [W] And production you're using the same artifact the same build.
01:24:15 [W] Absolutely. I think let's let's look at some sources now.
01:24:20 [W] Let's look for example, maybe let's let's see the dockerfile or maybe we can start with the pipeline.
01:24:26 [W] Yeah. Okay, we can look at the the dockerfile here on a lot of these tools are using this wonderful language called llamo get used to it because it's not
01:24:40 [W] not going away. You find it everywhere in Ops tooling all over the place. This pipeline product also uses llamo and it just uses it to describe each and every step that we take as long as well as the resources where
01:24:55 [W] Get our source from our GitHub repos all of that.
01:25:00 [W] So this describes each step the packaging.
01:25:03 [W] There's also some you know, you can add conditionals.
01:25:07 [W] I don't have a lot of conditionals in here, but you can add conditionals something to consider what happens if at a certain step the build fails, what do you want to do really important to look at that failure scenario? Because
01:25:23 [W] End up with a lot of you know headaches fixing builds quickly because everyone stalled so make sure you that you have the, you know, good messaging alerts that kind of thing when a build fails.
01:25:32 [W] This particular product has a lot of built-in mechanisms and and you know like Jenkins. There's a lot of plugins you can use.
01:25:36 [W] It's kind of nice if you have stuff built in it makes it a little easier to read but you can always review no go back to just shell scripting if you need to do something special all of that is available to you.
01:25:50 [W] Yeah, but it's all right.
01:25:52 [W] Let me just reiterate that. This is just the our example and we're here just to show you that the concept of the of the pipeline and not necessarily this particular tool if you take Jenkins if you take Travis
01:26:07 [W] That is available to you.
01:26:06 [W] Yeah, but it's all right.
01:26:08 [W] Let me just reiterate that. This is just our example and we're here just to show you that the concept of the of the pipeline and not necessarily this particular tool if you take Jenkins if you take Travis
01:26:37 [W] So if you take circleci, I it will be the same principles maybe the syntax of the yamal file or if it's Jenkins is probably be like they're groovy DSL will be a little bit different but but the ideas the principles of the pipelines are exactly the same
01:26:52 [W] All right, and that you were interested in looking at a Docker file?
01:26:56 [W] Because I think this is where kind of everything happens right?
01:27:00 [W] This is where we see how we build all those parts together how we bring the maven build that obviously all the Java developers are familiar with and the npm build which doesn't matter how it works.
01:27:11 [W] It's all JavaScript magic but in the end of the day in in the dockerfile, this is where we bring everything everything together. Right, right.
01:27:22 [W] So here's the dockerfile what this file does is it builds an image using the sources from our repositories that we have?
01:27:29 [W] We've have some private repository set up we grab you know our back-end and our front end and then we put them together into our image. Now there is a lot that can be improved here in this particular Docker file as you can see
01:27:45 [W] You hard-coded values?
01:27:45 [W] Some things can should be passed in like for example, you might not want to hard-code your your registry that you're getting your artifacts from here.
01:27:55 [W] This is something that you might want to pass in because it's likely different / environment or per stage, you know, whatever stage you're you're building your Imogen.
01:28:06 [W] in. Yeah, another another idea that can you can Implement very easily and then have more
01:28:13 [W] Aditi is the versions of the dependencies that you use we use here 1.0 in 3.0 as kind of a snapshot if you like, right we are going to rear override them every time and this is obviously a very big
01:28:28 [W] And build your production pipeline spine for demo, but that's not how you actually should do stuff in real life instead.
01:28:29 [W] you can use and this is a very kind of popular practice and it's good. You can use the build number as your version and then your ci/cd Ever Knows the build number of the particular run
01:28:44 [W] as arguments to the docker image and that will be interesting to see how we pass arguments to the docker image in you see those argh argh instructions in line number 2 and 3 you can add another Arc voltage will be your bill number and then
01:28:53 [W] good instructions in line number 2 and 3 you can add another Arc voltage will be your bill number and then you can refer to your back-end and front-end components by those version numbers instead of hard-coded versions
01:29:06 [W] Those version numbers instead of our coded versions and that will obviously work every time because the numbers change together with that and this will provide you with the consistency that you do pull the right
01:29:21 [W] penances for your doctor build
01:29:27 [W] That makes sense.
01:29:30 [W] I'm sure you have strong opinions on this a lot of dr. Files out there. Do not specify versions. You can have base images.
01:29:39 [W] They just has the name of the base image other artifacts pulled in and there is no version specified and that means that you're pulling the latest whatever latest means sometimes you might even see the
01:29:54 [W] Specified latest latest is a pointer that is assigned to a particular version doesn't always mean that it's actually the latest so be careful when you are referencing artifacts,
01:30:06 [W] You are using you know that you have your head wrapped around your versions and what you actually want to pulled in what you want to build. But you know, it funny thing is it's not enough look at line for the from we specify a version we say we
01:30:17 [W] From openjdk 11 and it looks like we nailed the version down but we actually didn't because Docker tags are mutable and the maintainer of the Stag can decide
01:30:30 [W] I need time to change the content of what 11 jdk actually means they obviously have your best interests in mind.
01:30:35 [W] It will probably be security a patches and they want probably build break anything.
01:30:41 [W] But sometimes it might to avoid that what you need to do is actually not use what you have in line number 4, but instead use what you have in line number five, and this is bring the base image from yugabyte.
01:30:55 [W] your own registry and when you bring it from your honor registry, this is how you guarantee that it will always consistently resolve the save the same build a building which every time you
01:31:11 [W] This is actually even when you specify the version you need to make sure that you are the one controlling the artifact with this version and not someone else who can actually override the version whether from good intentions or orbit.
01:31:24 [W] Yes.
01:31:24 [W] Sure.
01:31:25 [W] I mean always aim for reproducible everything build on struction deployment.
01:31:33 [W] So be explicit and yes be careful of where you storageos.
01:31:39 [W] Or how you store and take the right decision for your space.
01:31:46 [W] One other comment I have about this particular pipeline.
01:31:50 [W] It's very good to show, you know, an example the possibilities what you can do, but one thing I would do differently probably is definitely use create images separately
01:32:05 [W] session for your space
01:32:04 [W] one other comment I have about this particular pipeline.
01:32:07 [W] It's very good to show, you know, an example the possibilities what you can do, but one thing I would do differently probably is definitely use create images separately
01:32:39 [W] In the back end because in this way, you can really take advantage of your scaling capabilities.
01:32:45 [W] You may want to scale your back-end server differently than your front-end application.
01:32:51 [W] There's some advantages to doing that. So based on load or you know other performance metrics you may notice some improvements by scaling those differently.
01:33:02 [W] So one reason to definitely separate them out into their own services, for example.
01:33:12 [W] Lastly this is just a single pipeline there in my mind.
01:33:18 [W] I don't maybe an ideal situation is that's you know, you only have one Pipeline and that's that's why you use from beginning to end, you know, and it's magic developer commits code and it goes flows all the way through to production likely though. You're going to have
01:33:35 [W] Lastly this is just a single pipeline there in my mind.
01:33:41 [W] I don't maybe an ideal situation is that's you know, you only have one Pipeline and that's that's what you use from beginning to end, you know, and it's magic developer commits code and it goes flows all the way through to production likely though.
01:33:56 [W] You're going to have multiple pipelines each team may have their own development pipelines. You also going to
01:34:03 [W] Of multiple deployment pipelines you may have a pipeline that is specific for deploying to your staging environment.
01:34:11 [W] For example pipeline that deploys to your production environment and those might be manually triggered, you know, if you don't if you aren't comfortable or don't have enough enough of a security blanket set up to protect you
01:34:26 [W] deploys to your production environment and those might be manually triggered, you know, if you don't if you aren't comfortable or don't have enough enough of a security blanket set up to protect you from mistakes
01:34:41 [W] Schedule your deployments in which case you would have a separate deployment pipeline.
01:34:47 [W] Absolutely.
01:34:48 [W] Well, this has been really informative.
01:34:50 [W] We've learned a lot.
01:34:52 [W] I love that the four of us have such diverse backgrounds and like we all have some good ideas and thoughts about how all of this should be pulled together.
01:35:00 [W] This has been an amazing experience.
01:35:03 [W] I hope that everyone in the audience has gotten something out of this that you can take back to your teams.
01:35:08 [W] Let us know if you have any questions.
01:35:12 [W] Yeah. It looks like we have some time for questions.
01:35:17 [W] And that will be that will be a great opportunity to talk about everything that we mentioned and more so please hit us up.
01:35:24 [W] up. We're all here and ready to answer was that thank you very much and bye.
01:35:31 [W] Bye.
01:35:31 [W] Yep.
01:35:33 [W] Thanks everybody.
