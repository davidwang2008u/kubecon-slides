Tutorial: Manage Apps and Cloud Resources in Unified Approach with Kubernetes: NODB-3157 - events@cncf.io - Wednesday, November 18, 2020 4:57 PM - 90 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello everyone and welcome to this tutorial manage apps and cloudbees forces in unified approach.
00:00:07 [W] I'm Andy see from Alibaba Cloud alongside with me virtually is Jared from upper bound and project cosplay.
00:00:17 [W] Colleague Jim bull was originally the co-host but he cannot make it today.
00:00:23 [W] So I am his double and that's why I'm showing my face here so you don't get confused but later we are going to switch to a screen recording since there are a lot of exercises to do.
00:00:36 [W] This is roughly the schedule for today. We will go through the prerequisites first and then I'm going to talk a little bit about Kavita and then we're
00:00:46 [W] Going to go to that one which is shipped the first car native application and then we're going to talk a little bit more on Kavita and then go to the next exercise extending kubelet Len
00:01:01 [W] going to talk more about cosplaying and then we're going to do the search exercise which utilizes cosplaying and could be the together and that's pretty much
00:01:00 [W] Today, let's talk about prerequisites.
00:00:56 [W] There's an instruction hosted on GitHub page. I would suggest you go there and check it out.
00:01:03 [W] out. Especially there are a couple of scripts that's going to be used. So I would suggest you clone the repo as well.
00:01:10 [W] Let's take a look at that GitHub page.
00:01:14 [W] So what are we going to need? We need a clean cluster kubernative cluster.
00:01:21 [W] I'm minikube and kind of fine, but the cluster has to be newer than 1.16 and please verify your cluster installation.
00:01:30 [W] On the sirdar last exercise we're going to be using cosplaying to provision a public Cloud database. So probably you're going to need an access key and secret to do so, but if you don't have one we can still go
00:01:46 [W] And please verify your cluster installation.
00:01:49 [W] On the third or last exercise we're going to be using cross playing to provision a public Cloud database.
00:01:56 [W] So probably you're going to need an access key and secret to do. So, but if you don't have one we can still go soothe the first two laps without using public Cloud resources.
00:02:10 [W] And also on the last lap we're going to be installing crossplane next.
00:02:16 [W] Let's install Villa.
00:02:17 [W] Oh cute Village release from this release page.
00:02:22 [W] The current release is 008.
00:02:25 [W] I would suggest you use this release as it is proven.
00:02:30 [W] It's been tested. So after you download one of these distributions, it's going to be
00:02:39 [W] Under the folder that's matching The Arc of your computer.
00:02:47 [W] So let's take a look.
00:02:49 [W] This is a binary now. Let's move this binary to use a local Bean.
00:02:55 [W] And after that we will be able to use the command.
00:03:01 [W] So now we have installed the binary on your local machine.
00:03:05 [W] What we need to do now is to install Vita onto your kubernative cluster.
00:03:11 [W] So let's do Vita install.
00:03:16 [W] And what that would do is going to install a Vedic or chart and a couple other cri-o DS?
00:03:25 [W] And we are done for the prerequisites.
00:03:28 [W] Now, let's move this binary to user local Bean.
00:03:32 [W] And after that we'll be able to use the command.
00:03:39 [W] So now we have installed the binary on your local machine.
00:03:43 [W] What we need to do now is to install Vita onto your kubernative cluster.
00:03:49 [W] So let's do Vita install and what that would do is going to install a Vedic or chart and a couple others yardies.
00:04:03 [W] And we are done for the prerequisites.
00:04:05 [W] So let me first give you some background information about project Vita.
00:04:12 [W] Who are we we are the platform Builders and Alibaba Cloud.
00:04:19 [W] We often call ourselves llamo Engineers because that's mostly what we do.
00:04:23 [W] But Jokes Aside, we do work on very interesting Technologies and we are dealing some of the very unique
00:04:32 [W] Challenges and one of them is that Ali Baba has probably the world's largest proven in this cluster more than 10,000 nodes.
00:04:41 [W] And also we are dealing with different customers both internally and externally so we get to experience a lot of the challenges that I think that's ahead of the community.
00:04:55 [W] As to why we build these application platforms. I think as the answer is that kubernative is not designed to be used directly.
00:05:04 [W] especially the yellow part right by users and just like we wouldn't expect users to directly interact with Linux the kernel or the posix.
00:05:16 [W] We need to build a platform or tools on top of kubernative and especially for the
00:05:25 [W] Vacations there are so many operational tasks that's relying on the kubernative or underlying platform.
00:05:34 [W] Kubernative his classroom more than 10,000 nodes.
00:05:37 [W] And also we are dealing with different customers both internally and externally so we get to experience a lot of the challenges that I think that's ahead of the community.
00:05:51 [W] As to why we build these application platforms. I think as the answer is that kubernative is not designed to be used directly.
00:05:59 [W] especially the yellow part right by users and just like we wouldn't expect users to directly interact with Linux the kernel or the posix.
00:06:12 [W] We need to build a platform or tools on top of kubernative and especially for the car knative.
00:06:21 [W] Vacations there are so many operational tasks that's relying on the kubernative or underlying platform.
00:06:28 [W] It is very important to provide that app Centric view or epsagon trick abstraction.
00:06:35 [W] So that developers don't feel like overwhelmed and they don't have to keep track of all those resources that's provisioned and they don't have to deal with all those fields in the API that they have no clue loodse about so our focus
00:08:12 [W] And they don't have to keep track of all those resources that's provisioned and they don't have to deal with all those fields in the API that they have no clue loodse about so our focus a lot of them is diverted into
00:08:32 [W] Is diverted into creating apps entry kpis abstractions and user interfaces. If we look at these three different products will notice that they have a lot in common
00:08:47 [W] Canary deployment auto-scaling aggressive surgery, but why is it that they have to redo all those features themselves while we believe that's because people tend to match their apis kubernative zp is
00:09:03 [W] He was a user interfaces. And in this process of creating very opinionated template or schema.
00:09:10 [W] They eliminate the possibility of them being reused because people will notice though this feature comes from that Pipeline and we don't need this user experience.
00:09:21 [W] So everyone is Reinventing the wheels and that's what we want to avoid because that's really creating fragmentation is
00:09:32 [W] causing silos and really stretching the engineering capabilities very soon.
00:09:38 [W] So what we are proposing is adding layers in between just like in application work. We have data modeling we add abstractions. We create building blocks and people can
00:09:53 [W] experience on top of those building blocks by reusing those building blocks just like when you're building houses you buy lumber You by bricks and they're all coming at a similar sizes, but the
00:10:03 [W] Ventually look different because you create your own unique user experience on top of it.
00:09:59 [W] So that's where the idea of QV decaying from.
00:10:04 [W] So right now cute Visa is already used in Alibaba. We have this unified application platform engine that's utilizing cubillas design.
00:10:16 [W] And also we are open sourcing it hoping that it's going to help the community to solve this.
00:10:23 [W] Problem of silos. So I guess we all agree a lot of us agree on the same problem because from day 0 we have contributors from several different organizations.
00:10:36 [W] They all come to help us to bootstrap. Our basic features. Another point I want to make is that currently Kavita is still under om community and that's because
00:10:51 [W] Follows the OEM spec and its beauty on top of OEM runtime, but eventually we want to be an independent project facing developers.
00:11:02 [W] So we intend to donate this project to a neutral foundation and we would do it very soon.
00:11:09 [W] So if you have concerns that this project is owned by one of those companies that don't worry we will be into a foundation.
00:11:20 [W] The goal of cube. Theta could be the of course is designed to serve developers.
00:11:26 [W] We want to provide the developers with a nap Centric user experience.
00:11:31 [W] So the developers can concentrate on their own code and would take care of the rest.
00:11:38 [W] On top of that. We also want to help our fellow platform Builders because as platform Builders, especially in the kubernative community this community being so vibrant and active we on the daily
00:11:54 [W] He being so vibrant and active we on the daily basis are seeing new features coming out.
00:11:50 [W] So we are struggling with the idea.
00:11:52 [W] Do we need to catch up?
00:11:54 [W] If so, how do we do that?
00:11:55 [W] And it's day in day out we are struggling with all those pressure.
00:12:02 [W] So we are saying why don't we use these capabilities?
00:12:06 [W] Why do we have to serve customers in the day and then writing new code during the night?
00:12:13 [W] Why can't we have a better life and that's also the goal of kublr?
00:12:29 [W] Well, you might ask they are so many other projects claiming to be application-centric as well.
00:12:35 [W] So, how can you be that be better?
00:12:38 [W] Well, that's because Kudo Vida is built upon openebs equation model or OEM. This allows us to decouple the kubernative apis from its UI now for those who have viewed pipelines
00:12:53 [W] Forms, we always worry about when building this opinionated pipeline.
00:13:00 [W] We're going to lose some use cases.
00:13:02 [W] For example, there are ten fields in one kubernative.
00:13:06 [W] Ladies API, if you expose all of them that's going to be very hard to use but let's say we would feel seven of them and these three now what happens when the user asks for the for the
00:13:21 [W] Us but let's say we would feel seven of them and these three now what happens when the user asks for the for the Force One or fifth one.
00:13:21 [W] We're going to lose those use cases Vita on the other hand is built upon OEM and we don't have to use even one field from that API.
00:13:33 [W] So it totally decouples from the API itself. So that's why we can be efficacious.
00:13:39 [W] Asian Centric
00:13:41 [W] now the next principle is we want Kavita to be capability oriented what that means is we would like to have something like a repository or market for all those building blocks that we talked about
00:13:57 [W] Building blocks that we talked about and then we can simply build our you is or user experience is based on those building blocks and those building blocks can be
00:14:12 [W] And they can be reused by other projects as well.
00:14:14 [W] So currently we have a couple I think three traits that's installed when you install Kit Vela and we're going to see them in a minute for the rollout trait.
00:14:28 [W] We use Flagger for auto scaling. We use Kita for those who are familiar with these traits with these projects. I would challenge you when I'm using that we will see.
00:14:41 [W] In the lab, you will not notice at all.
00:14:46 [W] And the last principle we have is to be highly extensible.
00:14:51 [W] Now what that means is really under user interface side.
00:14:56 [W] We have this technology called temp F5 and it's built on top of qu template.
00:15:04 [W] this technology allows us to modify or to customize user interface without rebuilding or recompiling or reinstalling.
00:15:16 [W] Vita and that's one very important feature that we believed to have.
00:15:21 [W] So in today's that we're going to see all three of these principles.
00:15:27 [W] Second is to add a new feature or new capacity to our existing Vita system, and we're going to use it.
00:15:36 [W] And the third one is we're going to go through the details of F5 and use F5 to install a fairly complicated Cloud native application.
00:15:48 [W] Exercise 1 ship the first Crown native application which QP de in this exercise.
00:15:54 [W] We mainly to get used to the Vita commands and see how application is treated as a first class citizen.
00:16:03 [W] Now, let's go to the instructions.
00:16:07 [W] First we do as Vita system update.
00:16:14 [W] It is very important to keep this habit since Lila is a client and truster is a server we need to sync with the server from time to time, especially after any changes you're making on the cluster
00:16:29 [W] You sink to the time next this command V the workloads.
00:16:33 [W] Wish you all the workloads as available for us to use So currently we have the three building workloads coming with The Vedic or the templates and the definitions are all here.
00:16:45 [W] We don't have to do anything to use them and they're very straightforward to understand.
00:16:51 [W] the next command
00:16:53 [W] it's Villa tricks.
00:16:59 [W] Trades are operational tasks.
00:17:01 [W] So right now again, there are three of them that's installed and we can use them right away Matrix route and scale.
00:17:11 [W] They will be attached to workloads next.
00:17:15 [W] Let's create an application.
00:17:16 [W] This is a very simple application called Lab One.
00:17:19 [W] It has two components the back end and the front and the back end is using the back end workloads.
00:17:34 [W] Let's create the back end first.
00:17:42 [W] All right.
00:17:43 [W] So right now again, there are three of them that's installed and we can use them right away Matrix route and scale.
00:17:46 [W] They will be attached to workloads next.
00:17:50 [W] Let's create an application.
00:17:51 [W] This is a very simple application called that one. It has two components the backend and the front-end the backend is using the backend workloads.
00:18:09 [W] Let's create the back end first.
00:18:17 [W] All right.
00:18:25 [W] Okay, so we have created this app that I've won it has two components. Now, let's take a look at the app definition or status.
00:18:39 [W] It is a very simple print out but it actually shows efficacious Centric View for the navigation the components and the traits.
00:18:52 [W] There's no deployments know any other kubernative resources.
00:18:56 [W] It's just your application.
00:18:59 [W] And that's our lap one at fire in our lap one.
00:19:05 [W] We used see I and that's it's fine because those are very simple commands for any complicated or production-grade applications. Probably we need to have a more complicated way
00:19:45 [W] let's take a look at the app definition or status
00:19:53 [W] it is a very simple print out but it actually shows application Centric view for then application the components and the traits
00:20:06 [W] there's no deployments know a any other kubernetes resources it's just your application and that's our that one app file in our lab one we used CI
00:20:24 [W] It so F5 is something to satisfy that requirement.
00:20:30 [W] If you look at it at first glance, it looks like a Docker compose file and that's our goal is to have this F5 as the docker compose for kubernative and what it has is
00:20:46 [W] Far as the docker compose for kubernative and what it has is also somewhat similar to what dr.
00:20:54 [W] Campos can do is we allow users to specify at the docker image on or even to build in your file and create the docker image for you.
00:21:06 [W] you. And also I want to say that it's fairly extensive meaning that each section you see here.
00:21:15 [W] Maps to a different capability definition.
00:21:19 [W] So the first section of course is the buildpacks.
00:21:43 [W] And the third feature about F5 is that it's based on keulen template, which is a very powerful tool.
00:21:53 [W] So this format is totally customizable using a template file. And once you define the template, it's effective right away.
00:22:05 [W] There's no intermediate steps to customize your cri-o or to add new things to your GUI know it.
00:22:14 [W] Available right away. For example, if we import a new workload on you trade.
00:22:20 [W] Gooey, and you can use it you can right away use it in your app file as well.
00:22:25 [W] So this Q template give us the its capability to customize the look and feel and to extend it.
00:22:35 [W] How does F5 work on?
00:22:38 [W] let's take a look at this diagram.
00:22:40 [W] So there are two concepts include Vida one is called workloads.
00:22:50 [W] Workloads treats operation on tasks attached to workloads.
00:22:55 [W] So when we are defining the work of types, we can define a template that's decoupling the workloads itself from the presentation layer of the workloads.
00:23:05 [W] So remember workloads And Trades are still kubernative apis, but they are already simplified or somewhat Twisted apis from its original contributors or crd S like weaveworks.
00:23:20 [W] We see at the bottom that but we create another layer of abstraction, which is the Q template and when you write your app file its going to be evaluated against those templates.
00:23:35 [W] Defined in UEFA.
00:23:26 [W] Let's say you say I'm gonna write an F5 for this workflow type deployment.
00:23:33 [W] It's going to be evaluated against that work that time. So that's how F5 works.
00:23:41 [W] For example, if you have defined a template for the trade route and then in your F5 you declare to use that route rate. It's going to be evaluated against the template you wrote.
00:23:55 [W] wrote not the route API itself.
00:23:59 [W] We talked a lot about not Reinventing the wheels. But how do we actually do it?
00:24:05 [W] Well, basically you are you got to do is to create a definition file.
00:24:09 [W] And in this case, we are creating a treat definition for Matrix and look at this definition file basically on the top of it.
00:24:19 [W] It's kubernative API based on OEM and then at the bottom of it you see the
00:24:28 [W] template so there's extension and then tempted and underneath it is attempted this template once you apply it and it's synced on your local Vita system will
00:24:43 [W] In fact right away so you can write your F5 and it's going to be evaluated against it or it's going to show up on your CI and also on your GUI.
00:24:43 [W] Exercise to add the new capability to Kavita.
00:24:48 [W] So in this exercise, we're going to add a new capability cut Cube. Watch Cube watch is a community project.
00:24:54 [W] Basically, it's going to watch the events on the API level and it's going to send the notifications to your channel in our case.
00:25:05 [W] It's going to be a stack channel.
00:25:07 [W] So let's go through the instructions.
00:25:12 [W] First we need to create a stack bot.
00:25:15 [W] Let's do that.
00:25:16 [W] I'm going to do it quickly.
00:25:23 [W] Make sure we use the right snack and we're going to pick incoming web hosts. That's a sink list.
00:25:41 [W] And it has successfully configured now, let us add the capacity.
00:25:49 [W] So this is your D is hosted in the catalog Repository.
00:25:57 [W] And the idea is that many other developers can also contribute to this registry and we will be able to have something like node js repositories or Java maven.
00:26:11 [W] repositories things like that
00:26:14 [W] so that the platform Builders don't have to reinvent the wheels all the time.
00:26:19 [W] So let's create capability Center first.
00:26:30 [W] And next let's take a look at the capability.
00:26:37 [W] It's not installed.
00:26:39 [W] So we need to install that.
00:26:46 [W] enough
00:26:51 [W] Okay. Now you can see that this Cube watch has been installed.
00:26:57 [W] Next we're going to be creating component just to try out this new capability.
00:27:07 [W] And it's the same as the previous one that one except that this one this application has only one component and the next we will be attaching this capability.
00:27:23 [W] The component now looking at the structure of the command line. It is Vida and then it's the trade name and by to the component name and then application name and
00:27:23 [W] Vita and then it's the trade name and by to the component name and then application name and then your is are the environmental variables.
00:27:28 [W] Let's copy that.
00:27:36 [W] So this is the web profile URL.
00:27:40 [W] We just be copying this.
00:27:49 [W] Okay. Now it's successful.
00:27:52 [W] Let's take a look. Do we see any events?
00:27:55 [W] Yes now, it keeps populating events.
00:28:02 [W] Okay, so that's a simple example of how to add a new capability from the community into your Vita system.
00:28:12 [W] This is a simplified diagram of QV Le from the users perspective.
00:28:16 [W] It is dealing with the workloads and traits and through the UI the UI consists of the ci/cd GUI and F5 all of which are
00:28:32 [W] Occasion is a first-class citizen or the main API the entry point of Kavita, of course under the hood. We have the capabilities from the community and we also have the
00:28:46 [W] Discovery and management system like any repository we need to be able to manage our assets. So that's basically could be the in a nutshell.
00:28:57 [W] This is the overall architecture of Q Vita system.
00:29:01 [W] I would say it provides more details or more comprehensive views of all the logical systems with seeing the Kavita system from the bottom.
00:29:13 [W] We see that all the capabilities are coming from the community.
00:29:17 [W] So that's the first takeaway out of this diagram.
00:29:22 [W] We've talked about key that we've talked about Flagger, but now I want to talk about
00:29:27 [W] About cross-play so crossplane does two things for us one, of course it Provisions cloudbees sources on different clouds.
00:29:36 [W] And the second is that project cross playing also includes the OEM kubernative runtime this away am runtime will shape the Rossi RDS into the building blocks that can be reused by
00:29:51 [W] And all the other projects that leads to the second takeaway that is Cuvee. The system actually has two layers of abstractions one is through the OEM runtime Which shapes
00:30:04 [W] Which shapes up the Rossi Rd is into building blocks and once you import those building blocks as trades and workloads the queue template and add file will do another
00:30:08 [W] Of abstraction to present the user interface.
00:30:12 [W] So that's two layers of abstractions and this gives us great flexibility in designing the best user experience for application Centric application platform on kubernative
00:30:27 [W] A couple references to Cross Plains so far in this presentation, but let's take a quick second to introduce it a little further.
00:30:33 [W] So the easiest way to explain what crossplane does is that it handles the infrastructure for your applications.
00:30:39 [W] It does this by extending the kubernative control plane with a set of CO2 using controllers that essentially allow you to provision in manage infrastructure resources.
00:30:52 [W] Those could be cloud provider Maynard services. Like I am
00:30:56 [W] Amazon Dynamo database or they could be on premises infrastructure, but crossplane allows you to control them and manage them etcetera from Insider kubernative use.
00:31:07 [W] It is now a cncf Sandbox project.
00:31:10 [W] We donated it in June of this year, and it's from the same creators of The Rook project, which is also a cncf project and recently graduated this year.
00:31:20 [W] So happy about that news. There's three main feature areas to crossplane the first one we kind.
00:31:26 [W] Already talked about there where you can provision infrastructure in a declarative way from inside of kubernative, but then you can build on top of those infrastructure Primitives to essentially create your own infrastructure API
00:31:41 [W] That you can then offer up to your teams for them to be able to consume that API and Self Service provision their infrastructure when they need it and then third it allows you to run and deploy applications that will
00:31:54 [W] for structure
00:31:42 [W] Okay, so now let's do the last lap which is managing a cloud resources and applications in application Centric way.
00:31:50 [W] So in this lab what we're going to do is we're going to deploy a very complicated cloudevents occation.
00:31:58 [W] So this application has six different components.
00:32:03 [W] One of them is a cloud resources Etc database, which we are going to be provisioning using cross-play and
00:32:12 [W] Others are just regular microservices. And before we get started we would have to install cross-play. So in this lab we have verified with
00:32:27 [W] And 0.13 and that's why we have also provided the helm chart locally.
00:32:31 [W] So the first step is to create a namespace.
00:32:40 [W] And the next would be installing the cross bearing charts.
00:32:50 [W] All right, it's done and the third one is to install the crossplane cri-o, which I have done already, but we need to keep in mind that we need to move this or we need to add the
00:33:05 [W] As I could have got there cannot execute it.
00:33:00 [W] So the next couple steps would configure a cloud provider in this case. It's Alibaba cloud.
00:33:17 [W] Okay, and this step is to create.
00:33:23 [W] A secret using your access key and secret so access key secret. So make sure that you change these strings here.
00:33:34 [W] So I'm going to do mine and I'm going to edit this part out.
00:33:38 [W] All right coming back.
00:33:40 [W] We're going to create I'll configure a provider.
00:33:51 [W] Okay, explain a little of what we have done so far.
00:33:56 [W] I think Jared would do a much better job so up to now up to this part the cloud provider part.
00:34:04 [W] We have created a CRT or controller in our own cluster that's going to control the life cycle of the remote country source, and the second part is configuration part, which will change different resources
00:34:19 [W] In our case, we are provisioning a database but also the storage of that database so it's two things together.
00:34:23 [W] It's got a composite this configuration is a composite configuration. Now keep in mind who should be doing this it is the platform Builders job to provide these to the customers or to developers
00:34:39 [W] Since we are self-serving ourselves, so we have to do it. And also let's reflect back on where we are right. Now. Remember in the last system diagram that we have at the bottom of those raw resources.
00:34:44 [W] And then still the OEM kubenetes runtime it because they became the building blocks.
00:34:49 [W] So that's where we are. Now.
00:34:50 [W] We have the building blocks and the next step is to make a definition of those building blocks and import them into Vita system to become trades and components.
00:35:03 [W] So in our case, we are going to create definition for this database and it's going to become a workloads. Let's do that.
00:35:11 [W] at
00:35:18 [W] Okay, that's done one important thing.
00:35:21 [W] This is created on the cluster. So we need to synchronize back with our local Vita system.
00:35:30 [W] And let's take a look.
00:35:36 [W] The RBS that's what we call it.
00:35:38 [W] Remember, we have a template so we are going to cut it a different name.
00:35:43 [W] So it's RDS. I'm just using a simple words here.
00:35:49 [W] That's all the prep work actually and let's do a Vida up and we're going to just shoot up this application.
00:35:59 [W] All the previous steps. Now this deployment takes a long time because we actually have to provision the database on Alibaba cloud.
00:36:10 [W] So let's take a look at this video that llamo file which is F5.
00:36:16 [W] F5. There are six different components and the use web service and RDS.
00:36:23 [W] To workloads types these workloads pipes again. The the template was viewed in the definition so you can change it it can negotiate with your platform building because they resemble nothing
00:36:39 [W] Kubenetes API underneath for the web UI I actually created a route.
00:36:44 [W] This is a trait.
00:36:45 [W] So look at this.
00:36:47 [W] We simply added a domain.
00:36:49 [W] Do you recognize Flagger?
00:36:52 [W] Probably not right?
00:36:53 [W] So this is a beauty of using the templating and also the OEM runtime to basically model the data Price. Look at how many environmental variables we have for just one.
00:37:08 [W] Component of service. If you do this, you see I obviously it's going to give you a hard time and also given so many different components.
00:37:15 [W] It's really hard to keep track of. So F5 really is a practical way of keeping your application together of providing the app Centric user experience. Now, let's take a look
00:37:30 [W] Components it's really hard to keep track of. So F5 really is a practical way of keeping your application together of providing the app Centric user experience. Now,
00:38:09 [W] Resources that actually is generated by kubernative.
00:38:16 [W] Yes, see, there are so many of them now imagine you have to keep track of all those resources.
00:38:27 [W] All right.
00:38:28 [W] Let's take a look at the database.
00:38:31 [W] So.
00:38:36 [W] Okay, I think the database is ready.
00:38:39 [W] Let's take a look at the UI that's access the UI.
00:38:45 [W] So as I mentioned that I have created route straight onto the web UI but my cluster might local cluster is a is a kind cluster that I didn't install Ingress. I cannot do that, but if you do have
00:39:00 [W] Time cluster that I didn't install Ingress. I cannot do that. But if you do having less most public Cloud will have
00:39:09 [W] you can use the get Ingress command and get the IP address and see this is UI web UI trade and then normally we would have the IP address
00:39:25 [W] and next week what you're going to do is you're going to do VI of your hosts file and
00:39:36 [W] and then you can add that host here.
00:39:39 [W] So you can access by hostname.
00:39:46 [W] But for us since I don't have Ingress configured, I'm just going to use port forward.
00:39:56 [W] And it's also very straightforward.
00:40:05 [W] We're going to use this pod the web UI poddisruptionbudgets.
00:40:14 [W] And the port is 8080.
00:40:30 [W] Okay, this is a dashboard. So let's refresh some data.
00:40:38 [W] Okay.
00:40:38 [W] Alright. So let's take a look at the flights.
00:40:45 [W] And this is earthquake information.
00:40:48 [W] Yes. So these are other earthquakes that's happening recently.
00:40:56 [W] And lastly it's the weather.
00:41:02 [W] Okay, so I guess that is the demo app.
00:41:07 [W] So we need to give credits to the folks who actually build this demo now. That's all right.
00:41:14 [W] Let's recap what we did.
00:41:15 [W] So basically we just used one Vida up command.
00:41:22 [W] And of course we have this F5 written prepared that's developer's job, but overall I think over
00:41:32 [W] Three laps, I think for the first dive we created two components. And then for the second one, we just added one trait to the component. And then the last one we just
00:41:47 [W] F5 so totally for different commands.
00:41:51 [W] That's really what has to be done by the developers to have all the things we did.
00:41:57 [W] And if you think that's impressive, please come and join us and that concludes this demo. Thank you.
00:42:05 [W] Now that we've seen a little bit of crossplane in action.
00:42:09 [W] Let's go ahead and dive down a little bit deeper into the architecture and some of those three functional areas. We were talking about earlier.
00:42:16 [W] So let's start with the first one about being able to provision infrastructure using the kubernative API.
00:42:23 [W] So as we mentioned earlier cloud cloud provider mated services and on-premises infrastructure can be represented with crossplane as crd s so this lets you decode
00:42:35 [W] narrative Lee configure a crd to capture the desired state that you want for your cloud provider be under services or other infrastructure and so controllers inside across plane will be watching for a Vince on those crd S and
00:42:50 [W] Sure, the desired state that you want for your cloud provider me under services or other infrastructure and so controllers inside across plane will be watching for events on those crd S and then reconciling the desired State on them with
00:43:02 [W] Link the desired State on them with the actual state within the cloud provider or other infrastructure.
00:43:09 [W] And so, you know, this enables you to use Cube control or any other tool that talks to the kubernative API to provision and manage the infrastructure that is actually outside of kubernative
00:43:24 [W] Stances, so in the diagram at the bottom of the slide here.
00:43:30 [W] we're going to use an example of Amazon RDS and so on the left here, we've got a CRT that captures all the configuration that you may want for your Amazon relational database service your RDS database there and you'll use Q control
00:43:45 [W] To send that over to the curb and kubernative say Pi server and then inside of the control plane there. We've got across Maine has a RDS controller that's watching for events via the API server on that are dscr
00:43:59 [W] And it sees that are DSC ready was created and then it will call out over the network to the AWS API using AWS restful apis to provision and make
00:44:14 [W] That actual sorry the desired state that was captured in this year D to make that an actual State inside of Amazon's Cloud over there.
00:44:23 [W] So on the screen now is basically just an example sticking with AWS of some of the CRTs that represent services and infrastructure inside Amazon.
00:44:35 [W] You can see this on the dock that Sea-Doo use that Dev site which captures the documentation and the specs and all the fields and everything their help and everything for all the CRTs that are offered by crossplane right now, but basically we see a bunch
00:44:51 [W] Drds that are in the AWS dot cross planed iot namespace and they capture a whole bunch of different types of services and resources inside of AWS.
00:45:01 [W] So, you know networking and caches database kubernative clusters themselves Etc.
00:45:06 [W] Etc. All those you can create instances of crd s inside of kubernative use using crossplane to creates and provision configure manage Etc real-life instances of those infrastructure resources.
00:45:20 [W] Sources inside of Amazon and that's just an example right?
00:45:23 [W] You can do that with Google cloud and Azure and Alibaba and packet and others as well, too.
00:45:31 [W] The second feature area that will focus on and crossplane here is around offering declarative infrastructure apis for your application teams to consume.
00:45:41 [W] So we do that by composing together some of the infrastructure Primitives that we saw previously, you know that the cloud provider major services on from on premises infrastructure and so we can compose those
00:45:56 [W] Is into higher level API abstractions of infrastructure and then offer that to our application teams to consume to make an example of this here.
00:46:08 [W] Let's think about a my SQL resource that an application team might want you know, they might want my SQL database to use for their app.
00:46:16 [W] And so one way to do that would be to compose that MySQL abstraction of underneath the covers some Azure resources like the azure.
00:46:25 [W] my SQL a resource Group for it to live in and I firewall rule to open up some access to it so we can compose those Azure resources together and then offer it to our application teams as a MySQL abstraction
00:46:40 [W] a MySQL infrastructure API that they can then consume on demand when they need it and so a nice part about this is that it hides some of the complexity of the infrastructure and environment details away from the application teams and
00:46:55 [W] Even better.
00:46:56 [W] It's allows the infrastructure owners to encode some of the policy and best practices and configuration that's important to their organization and only expose this simplified.
00:47:11 [W] Infrastructure abstraction this API to their application teams to get the infrastructure they need when they need it, but in a safe safely configured and secure way and this is all done with no code writing at all.
00:47:24 [W] It's done declaratively by the infrastructure owners to surface this API to their teams.
00:47:31 [W] So let's look at a diagram here that kind of shows a little bit further what I'm talking about. So and the top left we've got our application are
00:47:41 [W] developers their application team and they want to consume a mySQL database, right? So we as infrastructure owners here have composed together a MySQL instance API and abstraction there
00:47:57 [W] That represents my SQL and so one of my application teams.
00:48:00 [W] They want the AWS flavor and another application team wants the Azure flavor, but to both those teams, they're pretty much exactly the same thing, right?
00:48:10 [W] They are dealing with the exact same my SQL instance that is a infrastructure abstraction that we've offered up to them.
00:48:16 [W] They're just kind of setting a little config knob to tweak which flavor they get so underneath the covers that selects a specific composition that weaveworks.
00:48:26 [W] Put together to represent an Amazon or an Azure SQL.
00:48:31 [W] So some of these infrastructure Primitives like Amazon RDS database and a subnet group and a security group.
00:48:39 [W] Those are composed together to form a specific implementation of this simplified my SQL API that we've exposed to the team and likewise we could do something similar with Azure,
00:48:54 [W] So note that we're making different compositions to fill the MySQL abstraction with different Cloud providers and this example, but you could do the same thing with different classes of service.
00:49:07 [W] So for instance, you could do a composition that represents a high performance database or you can make a separate composition for the same infrastructure API that represents a low-cost version, but either way
00:49:22 [W] A you as infrastructure operator have control of the policy the configuration.
00:49:28 [W] You know what Primitives are composed into this abstraction here in order to give the team what they need, but with the policy that you're in control of and then at the bottom of the diagram, once again, we have the providers that are
00:49:43 [W] Are you know reconciling the infrastructure Primitives with their with the cloud provider apis to make that an actual state in the in the clouds represents what the what the team has requested for their
00:49:57 [W] Structure and the third feature area of cross plane is around running in deploying applications as well.
00:50:05 [W] It does it through its support and implementation of the open application model the OEM spec which is definitely a focus of this presentation today as well.
00:50:16 [W] But it allows you to deploy the applications along side of the infrastructure that they need to run on as well and it allows you to do that in a standardized.
00:50:27 [W] used way where you can deploy your sorry declare your applications in a very similar way to how you're declaring your infrastructure as well cross plane is in the kubernative implementation of the OEM spec and it's a very good fits together
00:50:43 [W] Because they both employ a model of a strong separation of concerns where you've got a few personas that play where you've got the infrastructure operators, the people that are the owners and in charge of the infrastructure and services of the platform.
00:50:58 [W] Concerns where you've got a few personas that play where you've got the infrastructure operators, the people that are the owners and in charge of the infrastructure and services of the platform, but then the top layer you've got the application developers that are building the application
00:51:26 [W] In the top layer, you've got the application developers that are building the application components and don't really need or have much insight into the specifics of the environment.
00:51:38 [W] They'll be running in they want to express their needs for their applications in a and the infrastructure in a very general way and then you got your application operators that are kind of the runtime deployers and Builders of the of the
00:51:53 [W] Marrying the infrastructure and the applications together. So that strong separation of concerns are supported in both the OEM spec and with crossplane as well, you know and being able to declare your applications and
00:52:08 [W] Infrastructures in a single standardized way is a very nice fit.
00:52:11 [W] So let's put all those three functional areas of crossplane together. Now with final diagram here that summarizes the architecture and so your application team at the top there. They can use the open application model they can use some of the kubernative score
00:52:27 [W] Directly, you know to declare their application and the infrastructure that they need as well from the layers below of the infrastructure apis and abstractions that you as the infrastructure owner or operator
00:52:42 [W] Defining for them and you know exposing to them with some simple configuration that they need but enabling them to self-service on-demand get the infrastructure that they need for their applications in a standardized way
00:52:55 [W] to how they Define the applications themselves and then those infrastructure abstractions there that you're exposing they are composed of
00:53:06 [W] infrastructure Primitives underneath and so using Cross Plains composition feature to pull together and set policy and configuration on a number of infrastructure Primitives all composed together to form this infrastructure API, and then
00:53:21 [W] Or to pull together and set policy and configuration on a number of infrastructure Primitives all composed together to form this infrastructure API.
00:53:26 [W] And then on the bottom, those are talking to the cloud provider apis to make that infrastructure happen in reality as well too.
00:53:35 [W] So application teams are getting the getting their applications deployed.
00:53:39 [W] They're getting the infrastructure that they need through a simple abstraction.
00:53:43 [W] They're doing that all in a consistent way the infrastructure operators.
00:53:46 [W] Are putting together these platform or infrastructure apis.
00:53:50 [W] They're getting to encode the organizational policy and best practices and configuration.
00:53:57 [W] that's important.
00:53:58 [W] They're enabling the application teams to get that infrastructure when they need it but in a safe and secure way and everybody's happy at the end there.
00:54:07 [W] Okay, let's go ahead and start exercise for now the final exercise of this tutorial in this exercise.
00:54:13 [W] We're going to be building an offering an infrastructure API to our application teams.
00:54:19 [W] And this is this API here is going to focus on making some infrastructure resources in AWS available for application teams to consume.
00:54:30 [W] You can follow along with everything because it is all published and made available.
00:54:36 [W] On GitHub at the link provided there.
00:54:38 [W] It's under the upbound organization and it's called platform - ref - AWS.
00:54:43 [W] So basically we're going to be making some network resources a kubernative cluster and a postgres database.
00:54:51 [W] Then so we're going to offer this.
00:54:53 [W] we're going to push this configuration up to a registry and the boy were going to install this configuration into a crossplane instance control plane that we have and then we'll go ahead and publish it or offer it
00:55:09 [W] the claims that we make available in this configuration of an offer those to our application team and then will allow the application teams to go ahead and provision their infrastructure self-service Seen On Demand whenever they want to and it's going
00:55:15 [W] Of the policy and configuration that we declare inside of this configuration that we kind of built together.
00:55:19 [W] Alright, let's get started.
00:55:21 [W] The easiest way to get started here is to go to upbound Cloud up Bounds at I/O and get started with creating a hosted crossplane instance and also some nice UI to
00:55:37 [W] Kind of watch the platform and infrastructure API that we're going to be building come up together.
00:55:43 [W] All right, so I am at up on that I owe I already have a Q Khan staging platform here. But I'm going to go ahead and create a new one here for Kube gone production and this is my prod Cube con environments.
00:55:58 [W] It's about that.
00:56:00 [W] So let's just go e and B, right and let's kick this off.
00:56:03 [W] So that's going to be running here now, and that doesn't take a very long time for our crossplane instance to come up. But let's go ahead and start talking about the configuration and platform infrastructure apis.
00:56:18 [W] The first thing we're looking at here at the root of the repo is just a simple metadata file. Basically the crossplane Dottie mlperf is saying that we are building a crossplane configuration and it's the AWS reference platform
00:56:29 [W] By me and you know just some simple metadata that says what version of cross Planet runs on and what its dependencies are and things like that.
00:56:35 [W] So more interesting content though is in some of these folders here, so I've got the repo organized here.
00:56:42 [W] by resource or infrastructure type.
00:56:45 [W] So let's first dig into the network type and we're going to see a similar pattern here for each one of these types here for network and for also for cluster and databases well,
00:56:56 [W] but we're going to have two main files there the definition of that API and then its composition.
00:57:02 [W] What is it made of so the definition for the network infrastructure API were building we're going to see that is a composite resource definition.
00:57:13 [W] We like to call these X RDS in crossplane. And so it's got some UI metadata which will help influence how it shows up in the UI if you wanted to create one from the UI the configuration.
00:57:26 [W] Litmuschaos up etcetera, but another important part here is that basically we're defining a network API for our app teams to consume and we're defining the shape of that API.
00:57:40 [W] we're defining. So what are the configuration knobs that the application team will get to turn when they want to create a network self-service on their own right?
00:57:53 [W] That API and then its composition.
00:57:55 [W] What is it made of so the definition for the network infrastructure API, we're building we're going to see that is a composite resource definition.
00:58:06 [W] We like to call these X RDS in crossplane.
00:58:09 [W] And so it's got some UI metadata which will help influence how it shows up in the UI. If you wanted to create one from the UI the configuration feels that would show up etcetera, but another important
00:58:22 [W] Part here.
00:58:23 [W] Is that basically we're defining a network API for our app teams to consume and we're defining the shape of that API.
00:58:32 [W] We're defining sort of what are the configuration knobs that the application team will get to turn when they want to create a network self-service on their own right?
00:58:45 [W] So there's not too much for giving them here.
00:58:47 [W] We're kind of giving them the name of what they want the network to be in then what class
00:58:52 [W] You're the this network will belong to so we're not really giving them a lot of configuration here at all. Right and then under the covers for this this definition of an infrastructure API.
00:59:07 [W] We're building under the covers is the composition.
00:59:09 [W] What what is the underlying infrastructure Primitives that will make up this network API that we're building and so here we go is a composition across my composition.
00:59:23 [W] That matches back to that Network API that were defining and there's a whole bunch of infrastructure Primitives that belong in here, right?
00:59:33 [W] So this is a bunch of AWS resources. So if you PC and internet gateway some subnets multiple subnets that were building here route table and Security Group, and I think that's the end of them. Right? So basically this is
01:00:20 [W] Name of what they want the network to be and then what cluster the this network will belong to so we're not really giving them a lot of configuration here at all. Right and then under the covers for this
01:01:07 [W] Gather a bunch of different it WS networking Primitives and all of those will be instantiated when the application team self-service asks for a network, right?
01:01:22 [W] So all this configuration information and the policy and everything.
01:01:26 [W] This is all a set of basic infrastructure Primitives capturing that configuration policy, but behind underneath the API line that we're building together.
01:01:37 [W] The right so we'll see a very similar pattern for the other types of infrastructure apis that were building.
01:01:47 [W] So we're also building a database API to so let's look at that.
01:01:51 [W] So we're building another composite resource definition underneath the database postgres folder.
01:01:58 [W] And so this xrd, this composite resource definition is going to be for postgres and the shape of this postgres a petabyte-scale.
01:02:08 [W] Is going to have a couple of configuration knobs for the application team to twirl and spend as well too. So for instance, we have a Storage storage GB field that were defining here.
01:02:21 [W] It's an integer type and vit that field there will basically be used to determine how big of a database they keep get.
01:02:28 [W] We're not exposing much them here at all.
01:02:31 [W] Once again, you know, just how big do you want it?
01:02:34 [W] Is going to be for postgres and the shape of this postgres API is going to have a couple of configuration knobs for the application team to twirl and spend as well too.
01:02:48 [W] So for instance, we have a Storage storage GB field that were defining here. It's an integer type and that that field there will basically be used to determine how big of a database they keep get. We're not exposing which them here at all.
01:03:32 [W] Definition of the database and postgres infrastructure API will be exposing to our users and then underneath the covers again here underneath the API line. The dis dis postgres. API is
01:03:47 [W] Of a couple of different ad of AWS resources again, right?
01:03:51 [W] here's a composition. Once again that is for postgres or postgres that we defined the infrastructure API for postgres and it will have a DB subnet group and it will have an Amazon RDS instance.
01:04:06 [W] So here is some policy and configurations being captured here of you know, what size we want it to be or type instance type that is and here's a very interesting or important part of these compositions that were authoring here.
01:04:21 [W] Bur that in the definition we exposed a storage gigabytes or GB field. And so inside the composition underneath the API line. We're going to do a patch and we're going to take
01:04:34 [W] gee be filled from the user from the application teams request for a postgres database and we're going to map that down into the RDS instance AWS infrastructure primitive, and we're going to map it down into
01:04:43 [W] Students AWS infrastructure primitive and we're going to map it down into a particular field there.
01:04:48 [W] That's inside the Amazon API.
01:04:50 [W] So the allocated storage field there will be a recipient of our storage GB field.
01:04:57 [W] So this is a way that we give configuration to the exposed to the application team, but without exposing the entire surface area of the Amazon RDS database or whatever.
01:05:11 [W] / other infrastructure primitive that we are exposing for them.
01:05:15 [W] So remember that, you know, you can have multiple compositions for each infrastructure API, you're exposing.
01:05:25 [W] So for instance, we could have a fast or high performance database with a certain set of configuration parameters here, like maybe a beefier instance type and then we could also have a cheap.
01:05:40 [W] Version or flavor of the infrastructure API as well to that.
01:05:44 [W] Maybe he uses a smaller lower cost instance type. So through those means they're we can expose different classes of service for our application teams, but without giving them the entire surface area or the
01:06:00 [W] Eight these instances in the in the cloud providers apis directly. We're putting this API line in front of them that makes sure that they use that are configuration or policy that as an infrastructure owners were okay with
01:06:14 [W] okay, so then we're not going to go too deep into the cluster 1 2 but cluster is a self service infrastructure API for the application team to get their own kubernative cluster when they want one
01:06:29 [W] Figuration Fields here to of like what sighs cluster the they want small medium or large.
01:06:24 [W] How many nodes do they want in the cluster Etc.
01:06:27 [W] But this is an interesting one because its composition is actually a nested composition where underneath the top level cluster API that were exposing its composed of an ich esse pi and then a Services API
01:06:43 [W] It will install a bunch of platform services like Prometheus and you know tracing and things like that.
01:06:43 [W] So not only can we put together infrastructure Primitives, like cloud provider managed services and networking and stuff like that, but we can also put together other composite resources to creates kind of a nested tree of them as well
01:06:58 [W] abstractions that were exposing to our application teams
01:06:56 [W] Let's go ahead and build and packaged up this configuration that we built together this set of infrastructure apis.
01:07:03 [W] Let's build and package it up and push it up to a registry here.
01:07:08 [W] So we're going to use the crossplane cube control plugin.
01:07:12 [W] we're going to do a cube control crossplane build and we're building this configuration together and we're just going to say ignore the examples directory and go ahead and call it a package that XP XP kg. So let's do that buildpacks.
01:07:26 [W] They're real quick.
01:07:27 [W] That was easy.
01:07:28 [W] And then now we should have that package that X PKG sitting there on disc here which we do and now let's go ahead and Hoops accidentally.
01:07:40 [W] Copy that didn't mean to so next Commander want to run is going to go ahead and use the Q control crossplane plug-in to push the disk configuration up to the up and Cloud the up rounds at I/O registry that we are using right now.
01:07:55 [W] You crossplane keep control plugin.
01:07:53 [W] So we're going to do a cube control crossplane build and we're building this configuration together and we're just going to say ignore the examples directory and go ahead and call it a package that xpy xpy kg.
01:08:06 [W] So let's do that build their real quick.
01:08:08 [W] that was easy. And then now we should have that package that X PKG sitting there on disk here which we do and now let's go ahead and Hoops accidentally.
01:08:21 [W] Copy that didn't mean to so next command you want to run is I'm going to go ahead and use the cube control crossplane plug-in to push the disk configuration up to the up and Cloud the up rounds at I/O registry that we are using right now.
01:10:25 [W] Going to tag it as a 0.023 version there and I'm going to push it up to my repo here this platform reference AWS platform here.
01:10:37 [W] And so let's push that and that should push it up to the registry.
01:10:41 [W] So let's head on over to about cloudevents.
01:10:55 [W] And so let's go ahead and take a look at our platform that finished quite a while ago and let's go ahead and install this configuration into the platforms. Then I can start exposing it and making it available for my application teams.
01:11:13 [W] Okay, I've got my cue control pointed to that hosted crossplane instance.
01:11:18 [W] I have and I found Cloud Keep Calm production there and here we go.
01:11:22 [W] And so now I'm going to use the cube control crossplane plug-in while pointed at that hosted crossplane instance and up on cloud to install this configuration that we had pushed up to the registry there.
01:11:37 [W] One reference AWS to be 0.023. I'm going to go ahead and control crossplane install it.
01:11:43 [W] So it's kick Cloud that's good. And so now we can do things like cupid troll get PKG to get all the crossplane packages that are installed here.
01:11:53 [W] And so it is just our reference platform. AWS is now installed.
01:12:00 [W] That's great.
01:12:01 [W] good good and so once our now that that in-toto
01:12:06 [W] It is available here.
01:12:09 [W] We can go ahead and see that as the the infrastructure owner here or the administrator of this platform for my team.
01:12:19 [W] I've got all the raw composite resources here exposed. Right? So I've got the composite clusters a composite Network cks Services all that stuff, but it's not quite ready for my team still so I want to go ahead
01:12:34 [W] Create a workspace for my team to use. So let's go ahead and create a team for Team One.
01:12:30 [W] Let's create team one workspace.
01:12:32 [W] Okay, let's go ahead and create that so that will be the place in my Cube calm production environment there that team one will work.
01:12:43 [W] And so what I want to do now is enable some apis here, right? Because there's nothing available yet.
01:12:52 [W] yet so I'm wanting the team won to be able to on their own self service create clusters when they want to and create networks when they want to and create postgres instances when they want to so
01:13:07 [W] Now that that is done. I am going to log in as a team one.
01:13:06 [W] member and they will get a different view here where when they log in they will see a custom Cloud control panel basically, which is a visual or a view of all the apis that I have
01:13:21 [W] Published for them it made aware for them.
01:13:17 [W] So let's go ahead and do that, too.
01:13:22 [W] Okay, so I am logged in as a member of team one here.
01:13:26 [W] And basically I am looking at a custom Cloud Patrol panel or a console that my infrastructure team has essentially built for me using the configuration in everything that we defined
01:13:41 [W] Run in this exercise.
01:13:40 [W] So I log in here and I'm looking at all of the infrastructure API and abstractions that I have been enabled or allowed to create similar to when you log in to the AWS console
01:13:55 [W] you console and you see all the services you can create I'm seeing essentially a custom one that was defined by my infrastructure owners my infrastructure team, so I come in here and I'm allowed to create a cluster
01:14:02 [W] Or postgres instance. So I want to start off by creating a network and so I will click in here in this UI is generated by the Declarations
01:14:15 [W] Definition the schema that we defined earlier on when we were playing the role of infrastructure owners. And so I create create that Network and that will start getting ready for us.
01:14:24 [W] Okay. Our Network infrastructure resource is ready to go done being created.
01:14:31 [W] And as a member of my app team here team one.
01:14:35 [W] I keep creating more infrastructure resources and much the same way. So now that we have an underlying Network fabric created we could go ahead.
01:14:43 [W] And also create a cluster or a database for my application to use, you know, we're rolling out a new service and it needs database and so I could create my own or on demand a postgres instance for it as well.
01:14:58 [W] Like it specify the size that I want for it. You know, that's part of the configuration that my infrastructure team has configured or enabled for me to be able to set.
01:15:08 [W] I could go ahead and create a whole cluster in order to
01:15:13 [W] All out some some containers or other services that are my app team needs to run I could space a how many nodes I want in it what sighs I want those nodes to be but essentially here the infrastructure team
01:15:28 [W] the an API that this console is built on top of and you know generates the UI so that I as an app developer for team one can on demands create the infrastructure that I
01:15:42 [W] My job done and to roll out my applications more easily and with less friction.
01:15:26 [W] So let's review everything we did here right?
01:15:29 [W] So we started with creating a an infrastructure API basically as a verb structure owner. We created a network definition.
01:15:40 [W] We created a database definition and we created a cluster definition is well and we Define the schema for these infrastructure resources is infrastructure.
01:15:55 [W] Guy with it. We're going to make available for our team.
01:15:58 [W] We defied the Define the configuration knobs that we want the application teams to be able to set and configure and we encoded all of our policy and our configuration that we think is important in to into this API that we're building.
01:16:13 [W] You defined the infrastructure Primitives that these these infrastructure apis should be composed of we use composition to put together infrastructure Primitives specify how they should be rolled out and what their policy
01:16:26 [W] And then we built in we published this package a package of these configurations together up to the up on cloud registry and then we created a basically a running instance
01:16:32 [W] In for the application team and all of these infrastructure apis and abstractions that we defined for them with all the configuration and policy baked in underneath the API.
01:16:42 [W] We exposed that API to the team.
01:16:46 [W] So the team could then self-service get the infrastructure that they need with a nice UI and custom cloudbees troll console basically to do it and now they can create the infrastructure they need when they need it to keep.
01:16:59 [W] Their application development rolling and be be basically empowered or enabled to get the infrastructure they need without creating a ticket and coming back to us while that infrastructure will still have all the policy and keep the duration that we baked into.
01:17:15 [W] If structure abstractions that we defined for them.
01:17:18 [W] Let's talk about the community. Currently OEM could be the are together.
01:17:24 [W] So for OEM we have the specification that's getting stabilized.
01:17:30 [W] We are moving to Beta which would be Backward Compatible and for kudo Vida.
01:17:37 [W] It's still in working progress not ready for production yet, but we plan to have 1.0 was released in December. So currently we have
01:17:49 [W] The features such as F5 iot the CI and dashboard we have the traits like go out route and scaling and they are all coming from the community.
01:18:00 [W] We didn't do anything ourselves and also the included or the default workloads. Our web services tasks and back end and we have a active community and
01:18:15 [W] Snake Channel and get it for both OEM and Kavita.
01:18:16 [W] If you're interested, please come and join us.
01:18:20 [W] And here are some links for how to get involved in the crossplane community as well too. So, you know, we mentioned it's a cncf Sandbox project and its open and very welcoming to new contributors and adopters
01:18:35 [W] Crossplane Community as well too. So, you know we mentioned it's a cncf Sandbox project and its open and very welcoming to new contributors and adopters. And anybody who wants to get involved.
01:18:36 [W] So crossplane dot IO is the main website to jump into everything and all the links to everything else can be pretty much found from there.
01:18:44 [W] But we're also Super Active on slack and really, you know, welcoming and talkative there too. So join us at slack dot crossplane dot IO as well, too.
01:18:54 [W] And you can check out the rest of the links on the page here, but we would love to have you join the project and a quick look at our roadmap. The big news here is the we are working towards a V1 dot over lease for the end of this year and then
01:19:09 [W] Black and really, you know welcoming and talkative there too.
01:19:13 [W] So join us at slack dot cross brain-dead iot as well too and you can check out the rest of the links on the page here, but we would love to have you join the project and a quick look at our roadmap. The big news here is the we are working towards a
01:20:04 [W] Is well too many good things and exciting things that roadmap but basically a big Focus here is getting to V1 dot 0 and that means some hardening moving are graduating some of our apis to get to a stable place as well,
01:20:19 [W] I won't be breaking changes and you can upgrade between versions with minimal headaches and hassles.
01:20:27 [W] They're definitely some exciting features around composition itself and our package manager as well to a big investment will be making as well is around the providers for all the cloud providers to to greatly expand
01:20:42 [W] That they have so our goal is to get to 90% coverage of all the services offered by each of the cloud providers and we'll do that by working with the cloud writers and selves to do some code generation and kind of get hooked into those pipelines there
01:20:57 [W] Is will come out very quickly and with minimal maintenance effort there.
01:20:58 [W] It's very excited about that and we know we have some investment still into ohm as well too to get that one to a view 1 beta 1 level with some new features as well too.
01:21:10 [W] So a lot of exciting things on the road map. There's we get to AV 1.04 crossplane by the end of the year and further Beyond into 2021.
01:21:19 [W] So that's everything we got for the presentation and tutorial today.
01:21:23 [W] We definitely are really appreciative of you joining us and following along and we will have some time for some questions now as well, too. So, thank you everybody.
01:21:34 [W] Really? Appreciate it.
01:21:44 [W] All right.
01:21:45 [W] awesome. So thanks everybody for attending today.
01:21:49 [W] We do have a couple questions that we can go ahead and answer live in this session here.
01:21:55 [W] So I'll take the first one and then maybe Andy can also address some other questions or things of note for you know for the kubeflow Le and own projects as well, too. So the first one here
01:22:10 [W] In the QA is around how does crossplane authenticates to the cloud provider apis?
01:22:17 [W] The path of least friction and what you'll see in our documentation is well is is storing those credentials as Secrets inside of the kubernative cluster.
01:22:25 [W] So, you know in a namespace secrets you can put a service accounts credentials like for gcp or for AWS.
01:22:34 [W] can put that into a secret and then the across think controllers are the providers that talk to the cloud provider apis will read the credentials from the secrets.
01:22:44 [W] That's one way low friction way to do it, but that does not work for everybody who aren't comfortable or don't want to store it initials in Secrets inside a cluster. And so another way is that we have support for things like irsa the I am
01:22:59 [W] Accounts that idea AWS has where you know essentially the service account that the Pod is running as inside of saying eks cluster has integrates with I am roles and I am authentication on Amazon's back
01:23:05 [W] Has integrates with I am roles and I am authentication on Amazon's back end.
01:23:06 [W] So the Pod will be executing in that context or with those roles granted to the service account.
01:23:12 [W] And so your credentials never get put into cross planar into the kubernative cluster at all.
01:23:17 [W] It's all managed, you know in a consistent way inside of Amazon's, you know, I am system. So that's a more secure way perhaps and so we kind of it's nice and consistent.
01:23:30 [W] The rest of the way that you may be managing your permissions and roles and users in AWS.
01:23:35 [W] So, you know, I am in roles and stuff like that. And then one more thing to note too is that the credentials that you offer to the providers to do infrastructure cloud provider API calls, they could be lower privileged as well to they don't
01:23:50 [W] The kingdom but a huge part of the design and architecture here is that you know, the credentials need to have access to certain Primitives in the cloud service cloud provider apis, and then you can build these composition these
01:24:05 [W] Best abstractions on top of that where your end users never even get to see those they don't have access to the secrets and have access to those credentials.
01:24:12 [W] They're just going through an S simplified API with a lower amount of privilege that only gets to touch the small set of configuration you exposed to them. So that's another aspect there too.
01:24:23 [W] Indeed. You want to take a stabber mentions anything more about develop and some of the work you guys are doing.
01:24:28 [W] Yeah.
01:24:30 [W] So basically I got a lot of questions.
01:24:34 [W] Adam recall of demo. I'm not sure if everyone can see and I posted on the question here publish it and also on the right side is a chat.
01:24:44 [W] I also I think publish their but then if you cannot see them, please go to the snyk channel.
01:24:51 [W] There's a q Khan tutorial Channel we can discuss here.
01:24:56 [W] I can shoot more information there as well because I'm not quite familiar with this portal yet and
01:25:04 [W] So I would like to add to what Garrett said. So for me I was using only one more clouds.
01:25:10 [W] So the API keys and stuff. They have very strict rules on what you use so I created a an API key is that for development purposes only and it doesn't have really meeting but it also
01:25:25 [W] Privileges and if you look at the demo that on the creating providers step I put those credentials into a secret that adds stored under cosplaying link space and
01:25:38 [W] Create your resources for you later.
01:25:30 [W] So that's little get additional points. And that's it for me.
01:25:35 [W] Cool.
01:25:36 [W] We have a few more minutes here.
01:25:37 [W] So we'll take another question or two from the queue a box there.
01:25:42 [W] One thing I wanted to Note 2. I remembered is that when I was looking at that I lack of Decor behind me here is that we're doing a raffle for a green screen like an actual physical green screen you can use to do
01:25:57 [W] Ugly Decor you have in your background. If you're on camera in Virtual meetings and zooms, we have business these days.
01:25:59 [W] So it's startup Hall a if you go to the upbound booth we're doing the raffle for a green screen.
01:26:05 [W] I'm going to probably enter that myself so I can you know have cover up some of this back here. But the question another question we had was around terraform and so crossplane and how it relates to terraform is a great question.
01:26:16 [W] We get that one a lot.
01:26:16 [W] So a couple differences here.
01:26:19 [W] Well actually start the similarities.
01:26:22 [W] Provisioning infrastructure is something that terraform does and crossplane does this? Well, right. So it's a huge similar to their you can use these tools to provision infrastructure for yourself.
01:26:32 [W] The Crossman architecture diverges though as it's built natively in kubernative.
01:26:38 [W] So it's you know entirely composed of controllers talk to the kubernative CPI and running active reconciliation to ensure that the desired state of the infrastructure is always in agreement with the actual States.
01:26:52 [W] As the cloud provider or services or in cluster Services Etc.
01:26:56 [W] So, you know these that could kubernative use declarative configuration Act of reconciliation architecture is something that crossplane takes from from square one.
01:27:06 [W] Another important thing I think to is that you know, a big focus of the Cross paint project being this idea of composition and being able to build your own infrastructure you guys your own abstractions so that you can offer infrastructure and
01:27:21 [W] Reconciliation to ensure that the desired state of the infrastructure is always in agreement with the actual States, you know, the cloud provider services or in cluster Services Etc.
01:27:29 [W] So, you know these that could kubernative use declarative configuration Act of reconciliation architecture is something that crossplane takes from from square one.
01:27:39 [W] Another important thing I think to is that you know, a big focus of the Cross paint project being this idea of composition and be able to
01:27:47 [W] build your own infrastructure you guys your own abstractions so that you can offer infrastructure and services Etc as an API as so your to application teams can Self Service on demand get
01:28:20 [W] As an API as so your to application teams can Self Service on demand get the infrastructure they need but all the configuration and policy that's important to your organization is behind
01:28:35 [W] Line so you can let it or application teams do it get the infrastructure they need but it'll be you know very much in line with the configuration that you specify in policy that you specify as if structure owner, which I think is really
01:28:50 [W] It's there in Cross Plains.
01:28:55 [W] And I think one more perhaps that we yeah, we got about one minute.
01:28:59 [W] So one more I can grab here and we'll try to be on the cncf slack channels as well to I think there's a channel for tutorials specific.
01:29:07 [W] I think it's maybe number two to - tutorials will be on that as well too for more QA but last quick question here is around through Cloud resources to deleted or modified in the cloud.
01:29:18 [W] How does crossplane respond and because crossplane is the set of kubenetes controllers doing active reconciliation if
01:29:24 [W] It's changed on the cloud resource itself.
01:29:26 [W] Crossplane will continuously Drive the actual State towards the desired state. So it will prevent any sort of configuration drift of you know, things changing on the cloud that differ from the spec that you have specified as how you want to configure
01:29:41 [W] You know that the activities reconciliation always make sure that the it goes back to the state. The originally intended now includes deletions as well to wear something deleted outside.
01:29:53 [W] It can be created if there's backups in place to then, you know, you see Trevor did air controller they could do two operations that would be able to restore from backup as well to get the resource pack in place.
01:30:05 [W] Any other final words Andy?
01:30:09 [W] No, that's it.
01:30:10 [W] All right cool. And then confirmation is that we have the psyche General is to - Cube Khan - app Dev on D cncf slack so we'll head over there and if people want to ask ask more questions
01:30:25 [W] In there for a little bit now and we really appreciate everybody coming to the talk today.
