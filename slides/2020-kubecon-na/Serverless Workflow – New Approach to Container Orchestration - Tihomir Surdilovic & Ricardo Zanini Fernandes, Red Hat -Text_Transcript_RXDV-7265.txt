Serverless Workflow – New Approach to Container Orchestration: RXDV-7265 - events@cncf.io - Friday, November 20, 2020 3:11 PM - 39 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hi, welcome everyone.
00:00:01 [W] My name is Dick Amir and I have regarded here with me.
00:00:05 [W] Hello guys.
00:00:07 [W] Yeah in this talk. We will present to you guys the serverless worthwhile project.
00:01:00 [W] Hi, welcome everyone.
00:01:01 [W] My name is Dick Amir and I have regarded here with me.
00:01:06 [W] Hello guys.
00:01:07 [W] Yeah in this talk. We will present to you guys the serverless work for project.
00:01:13 [W] We will give an introduction to the project.
00:01:15 [W] Look there's some of its use cases and then record is going to present us is really cool demo on how serverless workloads fits within a container orchestration environment using kubernative + K native.
00:01:30 [W] All right. So serverless workplace that cloud native Foundation sandbox project.
00:01:35 [W] It is part of its serverless working group.
00:01:37 [W] It is open source and Apache 2.0 license is a community project in here.
00:01:42 [W] You can find our information for our GitHub repository website and Community chat and meeting information.
00:01:52 [W] All right, serverless workloads defines the declarative and domain-specific work for language declarative is is not expressed in low-level code.
00:02:01 [W] However defines an abstraction language which can be defined in both Jason and Gamble formants domain-specific.
00:02:07 [W] as it does Target specifically the domain of orchestration of event-driven and distributed services and to give an example of that here on the left hand side. We have two simple requirements written in a natural language the first
00:02:21 [W] I'm being when a patient has for example a bladder infection. We want to notify urologist, dr.
00:02:28 [W] Dealing with that type of issue and the same thing with the second one with a patient has irregular heartbeat.
00:02:34 [W] We want to notify cardiologist for that type of issue on the right hand side.
00:02:46 [W] And then regard is going to present.
00:02:48 [W] this is really cool demo and how serverless workloads fits within a container orchestration environment using kubernative Sandking knative.
00:02:58 [W] All right. So serverless workplace is a cloud native condition.
00:03:02 [W] sandbox project. It is part of its serverless working group.
00:03:06 [W] It is open source and Apache 2.0 license is a community project and here you can find our information for our GitHub repository website and Community chat and meeting information.
00:03:21 [W] All right, serverless workloads defines a declarative and domain-specific workloads language declarative is is not expressed in low-level code.
00:03:30 [W] However defines an abstraction language which can be defined in both Jason and Gamble formants domain-specific.
00:03:36 [W] is it does Target specifically the domain of orchestration of event-driven and distributed services and to give an example of that here on the left hand side. We have two simple requirements written in a natural language the first
00:03:50 [W] On being when a patient has for example, a bladder infection. We want to notify urologist, dr.
00:03:57 [W] Dealing with that type of issue and the same thing with the second one with a patient has irregular heartbeat.
00:04:03 [W] We want to notify cardiologist for that type of issue on the right hand side.
00:04:09 [W] We see that serverless workloads does not express it.
00:04:13 [W] It's language in code or if else statements and things like that. Neither. Does it express it using terminology?
00:04:20 [W] Gee, that does not fit the specific to my domain it Targets on the bottom right hand side.
00:04:26 [W] You can see that this type of requirements. We can translate directly into events and services for so for example, a patient having a bladder infection or irregular heartbeat. We can look at it and translate it into events that could be produced by
00:05:01 [W] Eight minutes and things like that.
00:05:02 [W] Neither. Does it express it using terminology?
00:05:05 [W] that does not fit the specific to my domain in Targets on the bottom right hand side.
00:05:11 [W] you can see that this type of requirements. We can translate directly into events and services for so for example, a patient having a bladder infection or irregular heartbeat. We can look at it and translate it into events that could be produced by
00:05:52 [W] Okay, some different Hospital systems and notifying a doctor in this case. The particular doctor deals with the patient issue can be translated into vocation of distributed services.
00:06:07 [W] All right, serverless workplace based on standards for event definition.
00:06:12 [W] We use the cloudevents specification to Define events events that can be produced or consumed and also defined correlations between many different events that could be happening in your systems.
00:06:23 [W] We use the open API specification to Define operations and services.
00:06:29 [W] They need to be invoked during workloads EQ ssion, the serverless workloads specification and defines different workflow patterns.
00:06:37 [W] Controlled patterns which then Define execution order are handling and data management. And those are all based on widely known and used workloads patterns.
00:06:48 [W] Thanks.
00:06:52 [W] The overall project goals of the serverless work for project are to Define our language which again can be expressed in both Jason and Jama format and to focus on portability and vendor neutrality.
00:07:04 [W] So we want to defeat be able to define a language which you can then execute on many different runtime services and those runtime Services can be deployed in many different environments including container and Cloud platforms.
00:07:19 [W] Events within your workloads. You have to first start defining and like we said events can be either consumed or produced during workloads effusion with serverless workloads.
00:07:29 [W] You can see here that we have a direct one-to-one mapping between how events are actually expressed within the cloudevents specification format and how you're actually defining an with the new workflows.
00:07:42 [W] So here you also can see that for event correlation. We also use the cloudevents format specifically
00:07:49 [W] It's context attributes.
00:07:54 [W] Next.
00:07:55 [W] All right. So, how can you now what now that you define your events?
00:07:59 [W] How can you now interact with them?
00:08:01 [W] So as we said events can either start workflow execution, they can continue workloads equation in some way points that can be either consumed or produced and they can be used also to make logical decisions on the right hand side.
00:08:15 [W] We see a very simple and definition of the serverless workloads language, which says okay at this point, we're going to end the workloads effusion.
00:08:23 [W] But before we ended we were actually going to produce an event of type War for workloads completed event this event. Then can be consumed by other different services in your systems. For example other workloads or pretty much anything else that is listening to this type of event.
00:08:40 [W] Thanks.
00:08:43 [W] Similar to events.
00:08:46 [W] Service that we want to invoke during workflow exact ution.
00:08:38 [W] And as we said for this serverless worker project using utilizes this open API specification on the left-hand side here in the Box.
00:08:47 [W] We see a simple open API definition in this case written in llamo and it shows one particular operation of this service that we want to invoke during workloads Fusion on the right hand side.
00:09:00 [W] We see that there is again a one to one mapping. So in order to
00:09:04 [W] to Define this particular operation in the service that you want to invoke during workloads effusion.
00:09:11 [W] You basically have an operation parameter, which is a combination of the path or the URI to the open API definition of the service and the unique operation ID, which gives you unique one to one mapping. So your runtime should
00:09:26 [W] What the preparation needs to be executed on the service whenever the workflow request for it.
00:09:25 [W] Now that we have defined the services we want to be able to evoke it and we understand that there is many different types of services that you might want to invoke during workloads accusin with serverless workloads your have the ability to Define and invoke
00:09:40 [W] Services we see on the left hand side and example, but also your have the ability to Define invocation of services.
00:09:40 [W] They're not restful. They're not probably exposed at some endpoints, but how however a triggered by events so that is also possible.
00:09:53 [W] The last part of defining the workflow is actually the control flow logic here.
00:09:58 [W] We want to Define States and the order in which they're executed with serverless workloads states are kind of like a black box that does want some particular control flow logic type states can receive in either
00:10:14 [W] can they receive events they perform their particular type of control for logic that they're supposed to do and then they produce that output or can produce events that can be consumed by other states
00:10:21 [W] control for watch
00:10:21 [W] serverless workflow specifies explicit control flow logic, which means that we want to clearly Define allow you to Define what you want to build a lot of times control for logic can be very
00:10:36 [W] In which means that it becomes at some point ambiguous ambiguous. And what we wanted to do is kind of try to eliminate that it is often very hard to see during control flow even visually what parts kind of fit together.
00:10:49 [W] Which part in combination Define a control for logic block that makes sense on a domain specific or a logical level on the bottom. We see that each state within serverless workflow has a
00:11:02 [W] Level on the bottom.
00:10:59 [W] We see that each state within serverless workflow has a specific type and this types are somewhat clear.
00:11:07 [W] For example, we have an event type or a which basically okay at this point.
00:11:12 [W] We're dealing dealing with a control for logic that has to do with the events the same thing for example switch type.
00:11:18 [W] It is clear that this particular state is going to deal with logical decisions based on either data input or the event payloads.
00:11:27 [W] So that is what we mean by explicit control logic not saying that one is better than the other.
00:11:33 [W] However, this is how we the approach that we have taken within the service work language.
00:11:39 [W] next
00:11:44 [W] you can't express many different types of control flow patterns with serverless workloads.
00:11:49 [W] You can Define either sequences of execution. You can do database looping parallel execution.
00:11:55 [W] You can make decisions. Like we said based on either data or some sort of events.
00:12:00 [W] you can deal with are handling for example issue retries or Define how errors are handled during your work legs abuse in addition to that serverless workloads allows you to deal.
00:12:12 [W] With control flow that has to do with human interactions, which is sometimes very important during execution of your workflows.
00:12:20 [W] And there's some other things in there all specified within our specification documents.
00:12:25 [W] rules work language
00:12:28 [W] next
00:12:33 [W] you can't express many different types of control flow patterns with serverless workloads.
00:12:38 [W] You can Define either sequences of execution. You can do database looping parallel execution.
00:12:45 [W] You can make decisions. Like we said based on either data or some sort of events.
00:12:49 [W] you can deal with are handling for example issue retries or Define how errors are handled during your work legs effusion. In addition to that serverless workloads allows you to deal with
00:13:02 [W] For flow that has to do with human interactions, which is sometimes very important during execution of your workflows.
00:13:10 [W] And there's some other things in there all specified within our specification documents next. Now, let's take a look at the overall project components or what is all included within the serverless workloads project so far
00:14:43 [W] the project so far we have been talking about the serverless work for language, which is described as a Json schema in this Json schema really defines all the rules and and the patterns that you can use when defining your language in
00:15:11 [W] The patterns that you can use when defining your language in addition to that the project also defines a set of language extensions and these extensions do not control execution or the control for logic or how what happens when the
00:15:26 [W] The provides more information about the the workflow that you write that can be consumed by different runtime systems in order to overall improve the performance of your Workhorse in terms of you'll see cost and things like that.
00:15:41 [W] Some of the language extensions that we provide our kpi or key performance indicators extensions for tracing simulations and we're adding more as we go another part of the serverless work for project is things like
00:15:55 [W] Development kits we have in currently in both for both the Java and the go languages testing tck or this is a compatibility kit for runtime implementations where they can compare their implementation
00:16:06 [W] Compatibility kit for runtime implementations were d****** compare their implementation to to the requirements of the serverless workloads specification.
00:16:14 [W] And in addition, we provide a set of plugins for widely use IDs.
00:16:24 [W] So let's take a look at some of these or one of these language extension. The serverless work will provides in this case.
00:16:32 [W] Let's take a look at the kpi extension and this particular language extension allows you to basically compare expected versus actual data of your runtime.
00:16:44 [W] or information produced during the runtime of your work clothes and it helps you really try to improve your work clothes in terms of performance cost and its effectiveness.
00:16:54 [W] The right hand side you can see a small example of the definition of this kpi extension again, all the extensions just like the actual serverless workloads language can be expressed both in Json or gamble. So you have the choice to do that but here
00:17:09 [W] To to Define some expected metrics they have to deal with what do you expect to happen?
00:17:18 [W] How many times you think that some Services should be invoked?
00:17:22 [W] What is the overall cost that you expect from from running your workloads during a certain period of time and then you can compare them with the actual results and see if those metrics are met or not.
00:17:40 [W] The next thing we want to take a look at is the Java SDK in this particular SDK provides features, like parsing of Json or llamo didn't runtime implementations can easily use and don't have to build with that you provides a fluent API. So it allows you
00:17:55 [W] Your workflow different nations just using programming language rather than dealing with with the adjacent or yeah mlops.
00:18:19 [W] two diagrams that you can then visualize
00:18:27 [W] One more thing we're going to take a look at here is the serverless workloads visual studio code plug-in and this is a plug-in that's available on the visual studio code Marketplace.
00:18:39 [W] You can download it now and start using it and it's feature. Sorry provides code hints and code Snippets for both Jason and llamo files again against the serverless workflow. Json schema, it provides validation and
00:18:55 [W] In the same time you also provides diagram generation. So as your modeling work Flows In Visual Studio code, you can easily preview the diagram of your particular workload. Make sure that you visually also make sense.
00:19:09 [W] Yeah, let's let's let's see.
00:19:05 [W] What do we have prepared for you guys today?
00:19:07 [W] So first thing is just when we was worth were thinking about the demo. We started thinking how you supposed to fit a particular use case with the serverless workflow scenarios and how that
00:19:22 [W] So as developers, we have this very particular use case that I wish to open up.
00:19:24 [W] He are against a project on GitHub project and I wish to have my PR being labeled exactly with what this supposed to be labeled and I wish to have you know, my poor request be reviewed by someone so would be nice to have like
00:19:39 [W] What's that could label my request and maybe you know also add the correct viewer from for Michael request.
00:19:44 [W] So having this in mind we draw a pose workflow for that.
00:19:51 [W] So imagine that we could receive an event change like PR has been open or change it.
00:20:00 [W] we received this event on our system and based on that event. We can analyze
00:20:06 [W] the context of the poor Quest and understand what have you been changed so we can understand by these by the context by the files that have been changed and based on that.
00:20:18 [W] we can call the GitHub API to apply the correct labels and also to add the required viewers and and the end they work flow we can create and publish a new event saying to the platform.
00:20:32 [W] Hey, the pier has been verified and you can do whatever you want with.
00:20:36 [W] Is this event? So having this work for me mine, we prepared implementation with some tech knowledge around kubernative k- the serverless workflow and sometimes some runtime is implementation of the serverless
00:20:52 [W] Once we receive a pull request would like to know to receive this event on a broker.
00:20:54 [W] So in this case in on our canine teeth broker, and then this broker will broadcast this event for anyone interested in in this case.
00:21:05 [W] We have our serverless workflow runtime running a nice platform and we'll listen to this event of this pull request event and we're going to do everything that we the rear explain the lessons eyes like analyzing the poor request.
00:21:19 [W] Going on with this poor Quest and one of the things is to query the GitHub API for the files that have been changed in this PR and also apply the labels applied reviewers. So for that we need this GitHub API
00:21:34 [W] Also deployed on our platform and our kubenetes platform that we are going to call like GitHub API functions. So we have the auto scale knative servant functions deployed in there that we can
00:21:39 [W] Of those k- servant functions deployed in there that we can consume using our workflow engine and also is the workflow is finished. We will publish
00:21:48 [W] Your annual event to the broker and the broker can also and I'll broadcast this event for any interest part of this event. And in this case the pull request verified event will
00:22:02 [W] Our notification service. So this nutrition service can be anything.
00:22:06 [W] Okay and not five you may owe you guys like is telegram or whatever other channels that we have out there in your company.
00:22:15 [W] So that's the the main architecture, you know, the implementation of what we have and then we basically have this broker implemented with Kennedy venting system. So can you do a painting wheel now delegate the broadcast events around the kubernative namespace.
00:22:30 [W] Of this workflow runtime implemented with our own time limitation of this Rose workflow. We have this notification service also aware of the of the service of the events that are
00:22:43 [W] Workflow runtime and we'll do the notification with that and what kind of technology that we use like that we have the serverless workflow implementation that we re are working on that. It's called coach the project.
00:22:54 [W] We have k- to serve the platform to be the infrastructure for us for the serverless infrastructure to handle cloudevents for us in the in the queue mirantis namespace you.
00:23:06 [W] have low our functions in there. We also have some the job of functions that you saw the GitHub functions. They are all implemented in Java with quercus could be implemented in any language actually. So use Java because we are more uses to that.
00:23:21 [W] And we have K Modi Creme of framework.
00:23:24 [W] That is an integration framework for
00:23:29 [W] communicate with this like API to Jamaica a nice notification to giving like Channel.
00:23:35 [W] So I'm going to change my screen now to the fun part like to homicide.
00:23:43 [W] So first of all, we are going to just watch the pods on our namespace. So for now you everything that we have here in this is the application in this case is the workflow engine running and
00:23:58 [W] four
00:24:00 [W] communicate with this like API to going to make a nice notification to giving like Channel.
00:24:06 [W] So I'm going to change my screen now to the firm part like Jehovah said, so first of all, we are going to just watch the bolts on our namespace. So for now you
00:24:50 [W] Operator running there as well. This operator will is
00:24:57 [W] why'd the service and is controlling the service and how things should be and the state of the the workflow should be so that's why there's a part of the operator in there and here in the bottom in my project. So
00:25:12 [W] Given a no-good door serverless workflow demo project in GitHub. So I'm going to start creating a new Branch.
00:25:23 [W] Let's say cubicle and let's create a Super Bass 5 here.
00:25:32 [W] And with some information here in here like hello world. I Mundo and whatever other things that you are doing might have and
00:25:47 [W] of this file
00:25:46 [W] We're going to add in each committee that.
00:25:51 [W] like you test file
00:25:55 [W] Hello them.
00:25:56 [W] commit message.
00:26:03 [W] All right, so I'm going to push that to my project.
00:26:27 [W] I finished in my service in there.
00:26:30 [W] So GitHub is nice and he's saying oh, hey you push a new Branch here like to open book who request of course. I want to open up your request.
00:26:40 [W] So this is my new test fire coach will demo and let's say Cube calm.
00:26:48 [W] Hello demo.
00:26:51 [W] also an open a pull request, you know, a new event will come to my to my kubernative namespace and can every we handle that and we'll start, you know, the operation of over the overall operation inside the namespace
00:27:06 [W] The broker the broker will take this vent and we broadcast to our code you to work flowmill to our runtime workflow engine.
00:27:13 [W] let's see how it goes.
00:27:17 [W] After opening the pool requests, you can see that in the in the top of my screen that we are receiving the event.
00:27:24 [W] So we have this GitHub event listener. That is a gay knative Source kind of component. You also see the GitHub service that has all the functions that will be required to know how to interact with the GitHub.
00:27:39 [W] Our runtime workflow engine.
00:27:30 [W] So let's see how it goes.
00:27:34 [W] After opening the pull request you can see that in the in the top of my screen that we are receiving the event.
00:27:41 [W] So we have this GitHub event listener. That is a gay knative Source kind of component. You also see the GitHub service that has all the functions that will that require to know how to interact with the GitHub.
00:29:48 [W] API and honestly part is scaling to to one because know we are using a serverless platform.
00:29:57 [W] So we supposed to do all this kind of stuff. You will see that the pull request just added the the workflow added to the correct label and then the correct guy here,
00:30:12 [W] They work for added to the correct label and that the correct guy here to review our PR and as well, the notification service was no waking up.
00:30:28 [W] To receive a notification here. So you see that we receive some notifications about the changes that we made in the pr so that's it for the demo.
00:30:40 [W] Let's go back to your presentation.
00:30:44 [W] You have any other things to say but um, you know, this is really cool.
00:30:48 [W] Thanks for doing this.
00:30:49 [W] That's great. Okay, let's continue then.
00:30:57 [W] Okay, so I guess that's it right to Homer. We finished our beliefs.
00:31:03 [W] Yeah, and I know you do dish to you know to share some more information about the circles workflow project or no, we're good.
00:31:12 [W] I think here you can find more information.
00:31:14 [W] Definitely our website at Ciro's workloads that IO again, like regard and I where community members of the project and we would like to also invite everybody that's watching to
00:31:26 [W] And we have like we said Community bi-weekly meetings there. You can just join them and see how it goes and here you can also find their GitHub repository with specification project in there has all the details and the
00:31:41 [W] Station including examples use cases and things like that that you can go ahead and check out and and learn more about the project.
00:31:49 [W] Yeah and and everything about the demo you can see in this row here you reach the you know of the serverless workflow files that we used in this demo the how
00:32:04 [W] Create your own namespace on come on kubernative and use all these scripts in their in their the applications. The service everything is in this in this dress and you be able to round this actual demo in
00:32:02 [W] I think that's it.
00:32:02 [W] Yeah. All right.
00:32:04 [W] Thanks.
00:32:05 [W] Everybody. Nice.
00:32:12 [W] Hello, everyone.
00:32:20 [W] You get behind me.
00:32:24 [W] Yeah, I can hear you very well and we can you can you hear me?
00:32:26 [W] All right?
00:32:27 [W] Let's see. If your other question please we got it going to go ahead and put your things.
00:32:37 [W] Yeah, maybe.
00:32:39 [W] You might talk about some of the struggles Rook floating. And what is this serverless know I guess we have some questions regarding serverless in general and so goes workflow then how this thing's gonna help
00:32:55 [W] We're looking through his work are really new has been described in the presentations of domain.
00:32:58 [W] We're targeting we're targeting to define a work for language specifically Target the domain of serverless architecture.
00:33:06 [W] Now, we know that is your buzz word, but it really means we're dealing with Rook estrangement of event and orchestration of distributed services that might be revolted at the same theoretical rotation or we are renting from
00:33:21 [W] That's really similar to another name.
00:33:18 [W] And look at right now.
00:33:21 [W] We have some Joseph Zhang here how its stress ability Define a service workflows back.
00:33:32 [W] Okay, I see.
00:33:33 [W] Yeah, that's a good question of departments traceability goes we did defining our
00:33:40 [W] Yeah, that's a good question.
00:33:35 [W] So as far as is regarding tracing write the correct.
00:33:50 [W] Yeah, so in so Trey's thing is not part of the extra workloads accusin as part of the core language that defines like we said the control flow majak the event definition. So the service implication definitions that we will provide we
00:34:01 [W] Extensions are we slowing the in the slides and also working on the trace them extension which is hands is the language and then on the right time, whatever you're tracing for example Jaeger, whatever you might be using.
00:34:10 [W] Will you easily read that extra information additional information about your workflow and work with your runtime to to describe the tracing the runtime level and I think some of the questions for you guys. Yeah. I'm just trying
00:34:25 [W] Yeah answered and right now hey, yeah just answered a node.
00:34:30 [W] They asked about the coveted occasionally token inside the so as you guys saw in the demo, we have this GitHub service functions and those functions. They are is smart enough to generate a token each time.
00:34:45 [W] Have a pi.
00:34:43 [W] I just shared the link of the examples. You can see the all this stuff called in there and how you're doing all this stuff, you know, creating a knative resources deploying the runtime that implements
00:34:58 [W] Going to the kubenetes. So I have all these grapes and a ruling that you know that you're going to need to have this example running on your machine.
00:35:04 [W] And if you have any questions, please reach out to me over the internet.
00:35:11 [W] There is all my contacts are in that GitHub page. So if you are having any questions about the demo itself and how to run it I'll keep it and he's already how to use Along Came knative just not like me know.
00:35:26 [W] I don't know if we have a lot of other Christian work, you know, I wanted to address this is a good question here is like who is the commander of this workflow is where do they run inside of corrector outside of plaster? And that is really up for your architecture
00:35:41 [W] About workloads nowadays that are just wanted to bring out from the start of your dinner as well as the workloads are usually thought of as this monolithic things where you have to download a whole suit and and and work with
00:35:54 [W] Your services today, it's not like that.
00:35:51 [W] We're closed and your code and everything that you could Floyd.
00:35:53 [W] I really wanted the same thing with the I dunno that's all together can solve your business problems.
00:36:00 [W] So in this case, you saw so we break up Ricardo's demo.
00:36:03 [W] kick it around the service inside of a kubernative cluster.
00:36:07 [W] You can deploy the service outside for example, or even your local host and expose it as a resting service. If you wanted to you can test it. Just like any other
00:36:17 [W] Our functions or thing that you're deployed alongside your source code. So nowadays, the really workloads are part of your application and assist you in solving business problems rather than being something is typically thought of as different or
00:36:32 [W] Out of development efforts.
00:36:35 [W] Is there anything else you want to add for that right now now he lays our dear little girl.
00:36:41 [W] I haven't anything to add and I just like to invite you guys to our is like channels at Cloud native.
00:36:50 [W] native, you know that cncf we have this too - kill cam - serverless channel that we would be there in. Oh answering questions, you know any remaining questions you guys.
00:37:01 [W] Guys don't have and we can you know talk a lot about anything that you guys want to know regarding the specification itself. And also we have our struggle has - workflow also in cncf as like channel that we know
00:37:17 [W] All sorts of questions about the service will for specification that walkmans and how things are doing in there and enough till you'd like to bring any more information about the specs of this exhibition itself there. We are looking for contributors
00:37:26 [W] Environment enough till you'd like to bring any more information about the specs of this exhibition itself though. We are looking for contributors for instance.
00:37:30 [W] Yeah, definitely.
00:37:31 [W] So we're we shall part of the serverless working group.
00:37:35 [W] We work both with with the cloudevents project as well. And really like we're community-driven. So we are depending on the community for this project to be successful in the future.
00:37:47 [W] is welcome. Of course we have been decoded.
00:37:50 [W] Conductor we have 2 by 4 by cncf, but are in that just you know, anybody can drive this project forward anybody has the capability to step in and contribute and and and that is really makes it really interesting.
00:38:05 [W] So, yeah, if you want to be part of this if you want to help service work for growing and have and and push its direction.
00:38:11 [W] Feel free to join us will be great.
00:38:15 [W] Yeah, I don't know if we have more time.
00:38:17 [W] I believe we have I have what this one question that I missed lunch at Oklahoma.
00:38:24 [W] He asks he or she has what kubenetes methods to deploy for the demo Kennedy generate the kubernative used for Smith passed from serverless workloads my past yeah actually can't in this runtime. Actually, we
00:38:39 [W] resource to make fast from serverless workloads my past yeah actually can't in this runtime actually we take the work for the finish line and we transform that into a Meek microservices using wire cutters and then the
00:38:54 [W] Deployed using our operator and the operator takes care of, you know, generating clean knative resources since it understands that the the microservices the the workflow requires cloudevents to start so it will
00:39:09 [W] For you craz, subscriptions and then triggers and everything that you do that again lead from the candidate event infrastructure for your service to run.
00:39:16 [W] yeah, if you came from work for definition in Json file and you come up with on microservices deployed on your kubernative cluster using the operator and this one time agent.
00:39:31 [W] I hope I ask you a question.
00:39:36 [W] Let me see.
00:39:39 [W] three. Heavenly said anything else.
00:39:41 [W] No, I don't know.
00:39:43 [W] I guess we are good.
00:39:48 [W] Thank you, everybody and again will be unlocked through there. It's grouped on vessel is Channel 4 after this to get any more questions.
