Eating Your Vegetables: How to Manage 2.5 Million Lines of YAML: PANG-6855 - events@cncf.io - Thursday, November 19, 2020 3:47 PM - 40 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hi everyone.
00:00:02 [W] Thank you for attending our Toc eating your vegetable how to manage 2.5 million lines the animal.
00:00:09 [W] My name is Danny Thompson.
00:00:34 [W] Hi everyone.
00:00:36 [W] Thank you for attending our Toc eating your vegetable how to manage 2.5 million lines the ammo.
00:00:43 [W] My name is Danny Thompson.
00:00:45 [W] This is my colleague Jesse soon, and we're really excited to get this talk before we dive into it.
00:00:51 [W] Just a brief intro.
00:00:52 [W] So like I said earlier, I'm Dean Thompson.
00:00:55 [W] I'm a software engineer at Stitch. If you haven't heard of stitch stitch is a platform for simple client.
00:01:03 [W] User authentication through password list lockets, but before that I was working at Intuit on into its platform team and part of my responsibilities were
00:01:24 [W] Really control? So like I said earlier, I'm Dean Thompson.
00:01:28 [W] I'm a software engineer at Stitch. If you haven't heard of stitch stitch is a platform for simple flying user authentication through password list Loggins, but before that I was working at into it
00:01:43 [W] Deploy, your applications onto keeper Nettie's and I'll let Jesse now introduce himself.
00:01:50 [W] Hi everyone.
00:01:52 [W] My name is Jesse suin.
00:01:53 [W] Thanks for joining our talk.
00:01:54 [W] I am a principal software engineer at into it as part of the into it platform team and primarily I work on the Argo project which is a suite of kubernative.
00:02:07 [W] He's tools and controllers focused on application delivery. Great. Thanks, Jessie. So why don't we dive into it? So let's start with just a single.
00:02:20 [W] Going to be slaughtered before we get to 25 per sorry 2.5 million.
00:02:26 [W] So what we have here is a deployment and this deployment has a anti finiti bowl that guarantees that the pods within this deployment won't be scheduled on the same nodes.
00:02:42 [W] And so what's really great about this is that there's no code.
00:02:48 [W] you need to write all of it is configured through.
00:02:52 [W] Yeah mlops.
00:03:06 [W] However, that being said this yeah mole is also very verbose.
00:03:11 [W] Link the stack and the other part is its pretty long. This animal is in even complete you might notice that we left out parts of the selector because you couldn't fit
00:03:27 [W] Parts of the selector because you couldn't fit the entire, you know Milan this slide. And so while it is challenging that kubernative eyes yellow is for posts. It's almost
00:03:32 [W] It necessary for kubernative used to kind of solve all the different use cases.
00:03:37 [W] It's trying to address and so as a result us as developers have to have a challenging problem with managing kubernative files, and this is just
00:03:52 [W] File it's when you run a cluster. You're going to need more than just one deployment.
00:03:58 [W] You're going to install a bunch of add-ons just as an example of that.
00:04:02 [W] Here's a slide a bunch of really popular open source projects that are installed across a wide variety of clusters, and these add-ons are adding new functionality to kubernative.
00:04:18 [W] It's not already there and helps you run a production great cluster.
00:04:22 [W] And this list is in even exhaustive either and so which with each of these add-ons they generally require modifications to get them to fit into your cluster.
00:04:35 [W] And so that is in addition just to for these add-ons you need to layer on your own tweets do it.
00:04:45 [W] And so this as a cholesterol operator makes it challenging to kind of run a production great cluster as you have to manage all of these add ons and then if you think about what once you get to a certain scale
00:05:01 [W] Please terminally lean towards breaking up their clusters into multiple clusters.
00:04:57 [W] And then this problem is compounded because you need to configure each of these different add-ons for each cluster with that the point I'm trying to highlight
00:05:13 [W] That editing kubernative. Zmo on a micro scale of one file is challenging or has its challenges but also then managing all of your kubernative html's across
00:05:22 [W] And multiple clusters is also challenging.
00:05:23 [W] And so this makes it kind of challenging for organizations to adopt kubernative and we're going to talk about different approaches.
00:05:38 [W] You kind of helped me manage this large subset a camel with that before we dive into this approaches.
00:05:45 [W] I think it's important to touch on the different considerations for the different approaches or at least what you need in a configuration management system configuration management
00:06:00 [W] Such a very much for problem.
00:05:59 [W] that's kind of unique to each organization. So each approach that you take doesn't necessarily mean it will work in every organization and what you need to think about are the things that are kind of unique to your org. What is your culture?
00:06:14 [W] And what you need to think about are the things that are kind of unique to your org. What is your culture?
00:06:18 [W] What is the responsibility of your teams?
00:06:23 [W] And this will help inform.
00:06:26 [W] What is the appropriate approach to take? So great place to start would be with the different personas. Generally we see this as kind of to you have your operators
00:06:41 [W] Developers so operators are in charge of running your cluster.
00:06:48 [W] They generally take off the shelf software and install it into the cluster.
00:06:55 [W] They generally want stable and controlled updates and use semantic versioning to help understand kind of what each change is bringing in on the other side.
00:07:09 [W] We have developers who are focused on building this Pope applications.
00:07:13 [W] These applications are generally focused on business logic Consulting business needs and don't necessarily have as much of a focus on
00:07:27 [W] compared to operators they will deploy as needed and don't necessarily need semantic versioning to version their applications and so
00:07:42 [W] With each of these four phone has they actually have very different needs and you might decide that actually it's better to take two different use two different approaches with configuration management
00:07:57 [W] Solve their compare their needs and for this talk, we're going to focus more on the developer experience.
00:08:07 [W] diving a little bit deeper on the developer persona.
00:08:13 [W] Developers generally have wide array of experience and comfort level with kubernetes.
00:08:21 [W] You might have some power users who have previously run clusters and know the ins and out of paradise or you might have users who have no interest in Cooper Nettie's and just want to earn your business application.
00:08:34 [W] And so you need to be able to kind of cater to both ends of the spectrum and the way you do that is totally dependent on how you exposed your platform to them.
00:08:49 [W] For example, if you extract everything away, you solved the zero interest use case, but you might alienate some power users who might have a special use case.
00:09:01 [W] They're trying to solve and the other end of the spectrum if you just give developers wrong ammo.
00:09:06 [W] This is your interest developers or zero interest in kubernative developers will want will be confused by the animal and will necessarily understand but the highly the power users
00:09:21 [W] to them
00:09:21 [W] For example, if you extract everything away you solve the zero interest use case, but you might alienate some power users who might have a special use case.
00:09:32 [W] They're trying to solve and the other end of the spectrum if you just give developers wrong ammo.
00:09:38 [W] Is your interest developers or zero interest in kubernative elvers will want will be confused by the animal and will necessarily understand but the highly the power users
00:10:20 [W] and so
00:10:23 [W] you need to kind of take this into consideration what your organization culture is like with your abstraction?
00:10:34 [W] Okay to that end.
00:10:36 [W] Another thing that's important to point out is kind of control of the configuration. You want to find a balance between centralized control and developer control?
00:10:49 [W] Centralized control enables things like standard patterns and best practices, which allow you to have easier maintenance of your cluster and also more security concerns.
00:11:02 [W] by developer control allows you to kind of enable your developers to do what they need to kind of deploy their application whether that's on boarding a new environment or choosing a different employer strategy
00:11:17 [W] balance between these two where you want developers to be able to do what they need without having to go to the control team or the centralized platform team to do
00:11:32 [W] You the control team or the centralized platform team to do to get them to do it. They need versus you also want the centralized control team or to be able to deploy changes out
00:11:38 [W] To be able to deploy changes out and not have to go bother a hundreds or thousands of developers to kind of go merging of PR.
00:11:49 [W] And so
00:11:51 [W] with all of these considerations in mind this is where you need to kind of evaluate what's important to your organization?
00:12:00 [W] And so at this point, I think we're ready to kind of evaluate what are the different approaches and how the pros and cons of each of them. So, let's start with an easy one
00:12:16 [W] Ryan mlops
00:12:45 [W] one environment but not have a carry over to another and so this is generally seen as kind of just a stepping stone. And this next approach we're going to talk to you is kind of seeing usually as like
00:13:00 [W] Sir, I am almost like okay if that right knee level why don't you use templates?
00:12:58 [W] So templating is where you take a list of parameters that you inject into the predefined template and that output is your configuration an example of
00:13:13 [W] on the end and Json it and the image we have here is a Helm chart that we have listed and what you'll notice is that it allows you to list kind of different values that you can fill in and another
00:13:22 [W] Walter would provide so the advantages here is that it's simpler configuration and it's very flexible. Like you might notice we have like an if statement with within this deployment template,
00:13:34 [W] Advantages here where generally these types of its start to grow in complexity as time goes on and you start to parameterize everything and so maintaining these templates and understanding what's going
00:13:47 [W] I was really challenged.
00:13:46 [W] So that's templating in a nutshell and the next one I'm going to touch on is kind of a little bit of a different approach.
00:13:54 [W] And so that's using overlays you can think of overlays as defining a common base that you share across environments. And then for each environment you define a file that has the
00:14:10 [W] It changes that you want to make to that environment.
00:14:10 [W] So then when you want to deploy you take your base and apply those environment specific changes on top of that base an example of this would be customized the image we have here
00:14:25 [W] Image in the background would be a defined base Define a car which is a tenth deployment. And then we have environment specific changes.
00:14:32 [W] So for the staging environment, we only want two replicas. And so when you create the staging configuration, the two replicas is going to override the one
00:14:47 [W] So the advantages of overlays is that it's very readable. It encourages configuration you reuse and it's mostly flexible that being said
00:15:01 [W] Reuse and it's mostly flexible. That being said some disadvantages to the overlay approach is that it's not always immediately intuitive to developers.
00:15:10 [W] Let's kind of going on it takes a bit for it to click sometimes and a lack of parameterisation makes things.
00:15:19 [W] that should be easy hard.
00:15:22 [W] And so that is overlay in a nutshell and the next
00:15:26 [W] approach I'm going to talk about is kind of a little bit more of a pivot and that is abstractions.
00:15:33 [W] So an abstraction is where you hide the underlying details of the configuration with a simple little simpler interface.
00:15:43 [W] examples are plumy cd8 cells and also how kind of checks this box. So here we have at least the image we have here is like an example of an abstract.
00:15:56 [W] Where the developer when only kind of provide the things that they care about like, okay.
00:16:02 [W] I'm running a web service.
00:16:05 [W] This is the DNS name. I want this is how I want to upgrade it and I want it to be on the mesh and so user only has to list these fields and then that is translated into
00:16:20 [W] All the different communities manifests that kind of come along with that and so you can see this is much simpler configuration and allows organizations to implement standards that can be
00:16:36 [W] Across the Oregon and the way that's done is by changing implementing those standards in the underlying abstraction.
00:16:24 [W] However, there are some disadvantages where you're giving up flexibility.
00:16:32 [W] The developer is getting up flexibility and usually most of these abstractions tend to kind of start to leak the underlying details and so kind of as a result we found that there really hasn't been
00:16:45 [W] then the right abstraction found for kubernative yet.
00:16:51 [W] And that kind of just abstraction in a nutshell.
00:16:54 [W] The last approach we're going to talk about is co defying your configuration and spit and this one's pretty simple.
00:17:04 [W] You just use a programming language to generate your configuration.
00:17:09 [W] so some examples of that would be Cas baloney Jay sonnet and this image we have here is from
00:17:19 [W] Um CD k8s and what it's doing is it's importing a couple different like well known structures and passing in kind of like the different configuration that a user would want to apply.
00:17:34 [W] The benefits that we get there is you get everything that comes with a programming language like Loops conditionals functions unit testing and it also really gets the same benefits of an abstraction.
00:17:46 [W] As it's in a sense, it is kind of a bit of an in destruction. That being said you get all the disadvantages of a code base.
00:17:40 [W] So this is another code base you have to manage and you have to so like you might have bugs and you have to kind of figure out how to debug this and it can be a challenge for your developers to figure out
00:17:56 [W] Figure out how to debug this and it can be a challenge for your developers to figure out how does this chart that we have listed here translate to our final result.
00:18:06 [W] So with all of that, those are all of the common approaches. We've seen two configuration management for Cooper Nettie's and so at this
00:18:21 [W] All of the common approaches we've seen two configuration management for Cooper Nettie's and so at this point I'm going to hand it off to Jesse and he's going to give an example of how into it has done.
00:18:37 [W] Uncle Jesse and he's going to give an example of how Intuit has done configuration management for all its Developers.
00:18:46 [W] Thanks, Annie.
00:18:48 [W] So now we'll get into a bit of a case study of into its approach to configuration management.
00:18:54 [W] And for this section will focus actually on the developer experience that we provided as a platform team. So little bit of a background are use cases that we have 4,000 Developers.
00:19:09 [W] Thousand developers at playing mostly SAS applications. These developers are managing multiple environments and for us environment equates to a kubernative namespace and these environments are mostly
00:19:24 [W] They have site variations in the in their config.
00:19:28 [W] So maybe the difference is our that they have different DNS names they use different a diverse resources and they have may be different. I am roles and privileges.
00:19:41 [W] Into it promotes a devops culture of you build it you rent it.
00:19:46 [W] So those developers who are building. The application are the same ones who operate it and are responsible for the uptime and maintainability.
00:19:57 [W] and so with that we came up with set of requirements and as a platform team, we wanted to provide a standard set of patterns and best practices what we refer to as the paved road, but
00:20:12 [W] and so with that we came up with set of requirements and as a platform team, we wanted to provide a standard set of patterns and best practices what we refer to as the paved road, but
00:20:34 [W] We also want to empower developers and provide them the flexibility so that they would be unblocked in the event. They need more capabilities that aren't provided by a default. Even if this came at the cost of
00:20:49 [W] City and so we made the conscious decision to actually expose our developers to kubernative CMO and and so they can leverage all the power and benefits of kubernative
00:21:04 [W] power and benefits of kubernative and finally any approach that we took it needed to be gitops friendly gitops is extremely important to into it because of a lot of compliance and security requirements
00:21:15 [W] It's and and so whatever solution we took had to fit into our strategy.
00:21:22 [W] And so the solution we came up with actually after years is actually to use customized and with customized since you're exposing your users to actually kubernative.
00:21:35 [W] He's a resource and manifest your preserving all the full power and capabilities of kubernative and because customizes kubernative native.
00:21:47 [W] It's well supported and documented our users our developers are
00:21:52 [W] the neighborhood to get help from open source documentation and not always rely on the the platform team because it's it's just kubernative I more than a day readability is
00:22:07 [W] Clear there's you just again looking at manifest and this is actually both important for the developers. But the platform team who is supporting that service. So if say there's some problem with
00:22:22 [W] The bug in the llamo.
00:22:15 [W] It's it's very clear where the problem is rather than some abstraction possibly hiding that away and customize overlay pattern really fits in with our use case of mostly identical
00:22:30 [W] Really fits in with our use case of mostly identical environments with with slight variations.
00:22:38 [W] And so that promoted a lot of configuration reuse and maintainability and finally what I think is probably customizes best feature is its ability to reference a central or remote base of git repository
00:22:53 [W] And that allows us to do that distribution of standard patterns across our organization.
00:23:02 [W] So yeah, it's a central remote base is how we leverage customized basically as a platform team. We provide what I call a catalog of generic starter llamo and so in a simple example that developer
00:23:17 [W] Something like a web service which is comprised of a deployment service and the Ingress in later. If the developer wants some to leverage some of the more advanced capabilities of kubernative. They can then include
00:23:32 [W] HP a base or a canary analysis based as part of their service and we semantically version this remote base so that developers they can upgrade to newer future at their own pace.
00:23:43 [W] This is too kind of gives us this standard distribution of patterns best practices and things like, you know, setting Padre ninis Gates and resource limits and Ingress and notations.
00:23:55 [W] Uppercuts is they actually get their own git repository that derives from the central remote base and the developers own this requires. Either free to make the changes in this repository to suit the needs of their service.
00:24:09 [W] So when we have here is is actually a Ingress that we as a platform team came up with that suits our use case as you can see we use the lp Ingress controller and if you use it will be English controller.
00:24:24 [W] You'll know that it just has a ton of different annotations to control the underlying load balancer and most of these details are things that you don't want to expose to your developers. They don't need to know or care about
00:24:40 [W] How these things affect the load balancer but a couple of things they do need to know such as in this case the external DNS name that they want to use and also the certain a RN for their service.
00:24:56 [W] And so what the developer gets is this git repository and it's structured like this the top level they have an application base directory that is serves as the common definitions that they want to
00:25:11 [W] Take the load balancer, but a couple of things they do need to know such as in this case the external DNS name that they want to use and also the certain a RN for their service.
00:25:22 [W] And so what the developer gets is this git repository and it's structured like this the top level they have an application based directly that is serves as the common definitions that they want to
00:25:56 [W] I meant and then they get a list of environment directories and each of these environment directly correspond to a criminis namespace and it only includes the changes specific for that environment.
00:26:12 [W] If you look at that top level of customization, you'll see that here.
00:26:17 [W] It's referencing that centrally managed remote base that I referred to. This one's referencing our 4.0 version.
00:26:25 [W] And then if you look at the customization in an environment, you'll see that it then derives from the top level at base of their own git repository.
00:26:37 [W] so with this approach developer can leverage that same.
00:26:42 [W] Configuration reuse that they get what by also in hearing from that Central Repository.
00:26:50 [W] finally, if you look at say the Ingress for a specific environment, you'll see that it has those two specific annotations that developer cares about they want to reference the specific certificate as well as a
00:27:05 [W] This name for that environment.
00:27:10 [W] Okay. So, let's see how that this scale and work out for into it.
00:27:15 [W] So if you think about a single environment at least in our case for us this renders out to be about 250 lines of llamo and if
00:27:30 [W] case for us this renders out to be about 250 lines of GMO and if it's if a service has for environments and we have 2500 Services
00:27:35 [W] It has four environments and we have 2500 surfaces.
00:27:39 [W] Then the amount of deployed Jama lands up to be roughly 2.5 million lines of yellow and then when you consider actually how much of that GMO is being managed by humans in git
00:27:54 [W] It's kind of a little bit differently, but you have a base of 90 lines of um, oh and for overlays 1 / environment and each of those overlays are about let's say 45 lines that equates to two
00:28:10 [W] Those overlays for about let's say 45 lines that equates to two inches and sending lights up you animal per service you multiply that by 2500 services and you get
00:28:21 [W] That by 2500 services and you get 675 thousand lines of um, oh, this is roughly about a little over 25% of the deployed llamo.
00:28:35 [W] So this has been working well for us but it hasn't been without its challenges.
00:28:41 [W] And so these are some of the challenges that you'll come across should you take a approach like this and the number one is actually user support.
00:28:48 [W] And as I mentioned we chose to expose our users to kubernative easy Mo and so by making that decision. We also gave our users a lot of loaded foot guns, you know people
00:29:03 [W] With may not be as familiar with kubernative can make lots of mistakes.
00:29:07 [W] Similarly you have advanced users who want to leverage a lot of the advanced kubernative features and they end up falling off the paver because they're doing things unexpected and it becomes harder and harder to
00:29:23 [W] It's you know people who may not be as familiar with kubernative can make lots of mistakes.
00:29:28 [W] Similarly. You have advanced users who want to leverage a lot of the advanced kubernative features and they end up falling off the paver because they're doing things than expected and then becomes harder and harder
00:29:58 [W] class of users
00:30:01 [W] the second challenge that we had was just the automation necessary to support this, you know 2500 services equates to 2500 git repositories and so in order to
00:30:16 [W] Build a lot of automation to do things like automatically send poor equest in the vents a we want to deprecate like a certain API.
00:30:29 [W] And then finally the last challenges with the tool customized itself. You know, when we you depend so much on this tool, which is responsible for rendering out the yeah mold that you end up deploying any change
00:30:44 [W] Tool can impact a lot of your services. So if we were to say upgrade customizing it had it rendered llamo a bit differently, which it has then we have potentially are breaking all at
00:30:57 [W] and different applications
00:30:56 [W] And another thing you should know about the customized is its support for crd S is a bit limited.
00:31:03 [W] It has great support for knative kubernative kinds, but when it comes to sear these you aren't able to leverage some of the convenient features, like strategically emerge patching your resources.
00:31:16 [W] We actually ended up forking customized in order to run a version of customized natively understands the CRTs that we use are into it.
00:31:28 [W] It's a with that Danny. I have some final thoughts that we have about, you know, the current state of configuration management, but also like where we think it needs to go in the future.
00:31:43 [W] Yeah, so hopefully as you could tell that we really think there's no perfect solution with configuration management no matter what you do.
00:31:55 [W] you're going to have kind of certain cases or Road bumps that are going to be a challenge and it's kind of the nature of the problem.
00:32:08 [W] He's and just the general culture.
00:32:06 [W] And so what we've kind of taken away is that at a certain scale just act managing them Elias is a lot of work and so it's hard for developers to fully understand it
00:32:21 [W] It's also hard to kind of maintain millions of lines of e mo.
00:32:27 [W] And so with that what we've been thinking is that there needs to be kind of a better abstraction.
00:32:34 [W] We think kubernative camel is super powerful and it's here to stay but we need a better way of kind of abstracting away a lot of the nitty-gritty details of yemalog away from the users because they don't need to know about it necessarily.
00:32:50 [W] And one way, it's we could potentially do this is through a UI assisted configuration management tool that can allow our developers to kind of easily edit
00:33:05 [W] Need to know about it necessarily and one way it's we could potentially do this is through a UI assisted configuration management tool that can allow our developers to kind of
00:33:34 [W] in a way that kind of gives them more insight into what changes they're actually making but also kind of enforce those organizational standards that we want to see and so with that
00:33:50 [W] A good example of that would be Spinnaker as project one thing they do really well is they make it really easy to create a ec2 instance.
00:34:00 [W] So they walk you through all the different fields you need to provide and kind of show you an opinionated way of bringing up a nice T to instance and it's easy GUI to follow and so we're hoping we could find something similar
00:34:15 [W] These with that.
00:34:17 [W] thank you for attending our talk.
00:34:20 [W] Here's a list of resources that we have. And please feel free to reach out. We're excited to see what we can kind of do with the configuration management portion of kubernative.
00:34:33 [W] He's have a great day and enjoy the rest of the conference. Thanks, everyone.
00:34:50 [W] Hi, everyone. Looks like we're live and I'm trying to get to all questions but there's a lot so one of the questions I didn't it's always a popular question is how do we
00:35:05 [W] The questions are is it's always a popular question is how do we handle secrets?
00:35:06 [W] And you know, there's actually this is very opinionated different opinions on this approach. But the way into it handles Secrets is that we already had this built
00:35:21 [W] And so when we move to kubernative, he's we continue to use it. And so no matter if it's a VM or if it's a container running in communities. Both mechanisms are retrieving Secrets at runtime
00:35:36 [W] using like a knit container and that container has I am privileges to reach that energy that secret and but you know, that's that's not going to work for everyone other people prefer to encrypt their secrets
00:35:49 [W] You know to that works for some and not others.
00:35:56 [W] Let's see we okay.
00:36:00 [W] So there's another question about how did we scale this like tooling to scale the for developer service and mentioned in the
00:36:14 [W] Just 2500 repo get repositories. And so yes, there was a ton of
00:36:26 [W] You send updates for example and like when such update was we were migrating from extensions V 1 beta went to apps V1.
00:36:35 [W] And so basically there's a whole team that kind of provides developers experience and they had to send out a bunch of pull requests to serve Repose in order to get people to upgrade to the new API version.
00:36:54 [W] You see any question any I think there's
00:37:02 [W] So another question is if we keep the git repository separate.
00:37:48 [W] Star their bases about versioning them. And yeah, so that catalog that I mentioned is semantically versions. And so when there is a new version that new pattern we have to go and
00:38:03 [W] To tell people announce the availability of those things and then developers child git repositories out there on time.
00:38:04 [W] They can upgrade to a new semantic version or except the pr that we might have sent them.
00:38:19 [W] Okay, so and then there's there's actually several questions about the to like different tools like ytt.
00:38:25 [W] Kpt.
00:38:27 [W] There's stuff that I haven't even heard of and I think part of Detroit decision and choice is like we got burned by case on it.
00:38:37 [W] it. So initially we started with case on it and as you may or may not know that tool no longer exists. So the next tool when we're designing what to do next
00:38:48 [W] you wanted to make sure we could choose something that had long-term support that was weld updated and supported in the community and so customized among other reasons was a great fit because we felt that there would be
00:39:03 [W] Like readability and amongst many other things. It was a good fit for us. But although there is it hasn't been without its challenges.
00:39:12 [W] And let's see.
00:39:18 [W] Okay, so there's a another question about the customized changes back to obtain customized. So the
00:39:27 [W] so actually we are running on quite an old version of customized because we are afraid of the the recent changes like we tried to go forward which broke a lot of apps and into we have to go back and so right now I think we're on like a 3.0 version of customized that
00:39:42 [W] That way he forked and had to teach it about our custom resources and I always customize alone will not know how to strategically it strategically merge patch cri-o is and so
00:39:50 [W] Ends some of the a lot of the CRT is that we use I am in into it in order for it to know how the patch those custom resources.
00:39:55 [W] There is a customized issue that I've been tracking to have better support for custom resources, and I'm really hoping there's some traction can get on to that issue so that you know, we don't have
00:40:11 [W] Fork
00:40:12 [W] let's see, okay.
00:40:19 [W] And I think actually we're just out of time, but please join the cncf suck.
