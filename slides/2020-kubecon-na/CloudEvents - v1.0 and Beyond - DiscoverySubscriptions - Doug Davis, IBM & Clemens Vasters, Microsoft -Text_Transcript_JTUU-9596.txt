CloudEvents - v1.0 and Beyond - Discovery/Subscriptions: JTUU-9596 - events@cncf.io - Wednesday, November 18, 2020 3:01 PM - 33 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] All right, welcome everybody today Clemens and I are going to be talking to you about cloudevents in particular the the status of cloudevents project and where we're headed in the future.
00:00:08 [W] Hopefully we'll have time for questions at the end.
00:00:31 [W] All right, welcome everybody today Clemens and I are going to be talking to you about cloudevents in particular the the status of cloudevents project and where we're headed in the future.
00:00:39 [W] Hopefully we'll have time for questions at the end.
00:00:43 [W] So let's go ahead and jump right into it. Was there a lot of material here?
00:00:45 [W] So first of all quick agenda give you a quick update on where we are with cloudevents project and then very quickly jump over to some of the new work that we're doing here.
00:00:54 [W] let's start with cloudevents itself. So not going to go into too deep detail here, but for those of you
00:01:00 [W] Well cloudevents is it is a specification for defining common metadata for events. And where that metadata appears in the messages that are transporting those events. Now, it seems very simple than high very high level and it is but we're really doing this mainly
00:01:16 [W] To some of the new work that we're doing here.
00:01:17 [W] So let's start with cloudevents itself.
00:01:19 [W] So not going to go into too deep detail here. But for those of you don't know cloudevents is it is a specification for defining common metadata for events and where that metadata appears in the messages that are transporting those events now, it seems
00:01:35 [W] Going to dance from point A to point B.
00:01:37 [W] This is not about defining yet. Another common event for mentoring like that. I'll show you an example in a minute.
00:01:42 [W] This is simply about aiding in the delivery of events across middleware to its final destination and most importantly to enable people to do that without having to understand or parse the business logic of the event itself.
00:01:54 [W] Okay.
00:01:55 [W] So let's jump into a quick example to show you what that actually means.
00:01:58 [W] means. So let's say you have this event flowing over HTTP right? Nothing in here to special looks like a normal HTTP event in order to
00:02:05 [W] To turn this into a cloudevents though. You add a couple of bit of extra metadata as HTTP headers in this case and you can see just for little bits of metadata.
00:02:13 [W] And these are the only four that are required the spec version to see the cloudevents version that is the type of the event. So this tells you for example, whether it's a create versus the Gleek type of event where the event came from, you know, what is the entity that is sending out the events
00:02:29 [W] Identifier.
00:02:30 [W] Okay now obviously look at that.
00:02:31 [W] It doesn't seem too exciting. But with that basic information middleware can now route the message appropriately to make its way to its final destination much in the same way.
00:02:42 [W] You can actually see the HTTP headers doing that pray for the hdp there.
00:02:46 [W] Okay.
00:02:47 [W] Let's said it's actually very very simple concept. But with that one little extra bit of information middleware can now be Eventing agnostic in terms of understanding the business logic. All they need to do is look for these componentconfig.
00:02:58 [W] Amin bits and metadata to Route the event appropriately.
00:03:01 [W] Okay, very very simple concept, but we're hearing lots of Kudos from the community how this is making life easier because they no longer have to have specialized middleware for every type of event that flows through the system now, obviously the final destinations.
00:03:13 [W] We need to understand the event and the business logic to get a job done. But in terms of routing this is the type of information that should be the bare minimum that people need to get their job done.
00:03:21 [W] Now this example right here is what we call the binary format.
00:03:25 [W] format. Just ask couple TCP header. So your your original message should remain buildpacks.
00:03:28 [W] Unchanged however, there are some people who wanted to have everything encapsulated inside the body as for those particular cases.
00:03:35 [W] We actually defined some Syntax for example here in this Json version where we actually put everything into the body itself, but you can see it's the exact same data right?
00:03:42 [W] You got the same for piece of metadata the content type of the data attribute and data you can hold the business logic right all the exact same information.
00:03:50 [W] That's how you can distinguish between the left hand side, which is just application Jason which is binary and the structure side on the right hand side, which is application status, Json or / out of its last station. Okay, so that's it at very very high level very simple thing, but we gained lots
00:03:59 [W] Events that station, okay.
00:03:52 [W] So that's it at very very high level very simple thing. But we gained lots of Kudos about it and lots of different people are picking it up across the industry in terms of the deliverables.
00:04:02 [W] This is the big news. We did go 1.04 the recently.
00:04:05 [W] So yay for that and here's what we're actually producing. We have different specifications.
00:04:10 [W] Not just the spec itself in terms of what the metadata is, but also how it appears in different formats, right?
00:04:16 [W] H-tpa versus amqp that kind of stuff different encoding right? Well, so do the Jason we also a bro,
00:04:20 [W] whoa, and we also included a primer because then there are a lot of technical decisions we made which don't really go into a spec itself, but we wanted to understand why they made the decisions we made so we create a primer as a background for people understand some of the students we made
00:04:35 [W] Choices now we do have some sdks out there with the whole bunch different languages which see on the screen.
00:04:40 [W] Most of them are very very active in particular the go one of the C sharp and JavaScript and Java are very very active.
00:04:46 [W] So, please take a look at those and get a chance.
00:04:48 [W] They're not that complicated.
00:04:49 [W] They're just mainly their help you to serialize and deserialize these cloudevents.
00:04:53 [W] Okay.
00:04:54 [W] So what's next for us? Obviously more customer feedback now that it's out there people tend to wait until things go 1.04 they adopted so we're hoping to get more feedback from there and we have been getting a lot of Kudo so far they said
00:05:05 [W] and how are beyond that though?
00:05:07 [W] We're not just sitting back and waiting for that feedback.
00:05:09 [W] We are starting to look at what additional pain points the community has relative to the inventing space not just for functions and services stuff like that. But in general what are the pain points people are experiencing?
00:05:21 [W] Okay, and with that let me then turn it over to Clements going to talk about some of these additional work items are doing specifically aimed at addressing some of those pain points.
00:05:29 [W] yes, and for those we have two areas Discovery in the subscription API is in the schema registry which I'm going to discuss both and what's important to note is that we in cloudevents we
00:05:44 [W] I've been core specification where we were set of specifications where we have transport bindings and in codings.
00:05:46 [W] we're really mostly focusing on on delivery of cloudevents, but that's just the end of the story because before you can deliver a cloudevents you obviously have to indicate your interest in that cloudevents and then you also have to find
00:06:02 [W] Publishing that cloudevents and that's the thing that we're tackling in this next round of specifications that we're working on.
00:05:56 [W] So the first element is how to discover which cloudevents are available for subscription today. What you do is you read read documentation typically so you go on on the
00:06:12 [W] Site and you find a list of events that's being raised and for that to be automatable. We need to have a way to learn about Services be able to filter those Services based on some
00:06:24 [W] and then learn about which Services exposed with which events or reversely allow a knowing about some events that you can handle and then learning which services in your vicinity
00:06:36 [W] You know some other criteria are supporting those events.
00:06:37 [W] So question is questions that we have is who produces the events which are present events are produced which subscription options are available.
00:06:46 [W] How do I get the events deliver to it to me?
00:06:49 [W] And then where and how do I subscribe?
00:06:53 [W] Next so what we've done here is we're not very prescriptive. And that's a theme in cloudevents overall is the principle that we're not prescriptive about how you really how we should Implement your
00:07:08 [W] There's no the maybe if some reference implementations of these things down the road, but ultimately what we're defining here interfaces. So we are defining this abstract Lee a data model that defines for instance here in this
00:07:21 [W] service is for Discovery and also defines and that's obviously leaning on the core specification that we have cloudevents the defines what a type is and then in based on this
00:07:30 [W] Fine a HTTP and a grpc API that we have today in the draft and we might have further protocols such as HTTP later.
00:07:40 [W] So we Define an interface and when you implement that interface, then you have a discovery service the notion of service.
00:07:50 [W] That's the concept inside of the discovery service.
00:07:52 [W] It's very simple. It's just some software entity that the mint's events so that gets registered in the discovery service.
00:07:59 [W] That service since it emits events maintains the subscription and points and really what the service description here.
00:08:06 [W] Does it just enumerated types of events that are available for subscription with some further information and then we have a type collection type collections really for the reverse lookup of which services are available and
00:08:22 [W] Events maintains a subscription and point and really with the service description here.
00:08:24 [W] Does it just enumerated types of events that are available for subscription with some further information and then we have a type collection type collections really for the reverse lookup of which services are available and
00:08:52 [W] This is an interface that can be implemented in one place or can be implemented in multiple places and it's obviously also allowed to Federate those Discovery services. So you can really create a catalogue of services and you can make those
00:09:07 [W] Create a catalogue of services and you can make those kind of catalog available everywhere with the same interface. You can imagine having a local cache that exists somewhere near your consumers and
00:09:22 [W] cash that exists somewhere near your consumers and makes those available and of course Discovery mechanism will also allow the the catalog to be adjusted to the circumstances
00:09:36 [W] Our the the catalogue to be adjusted to the circumstances that you have, you know near your endpoints if it's required to subscribe via a different subscription manager, we're going to get to that in
00:09:51 [W] Be able to deliver those events into your into your perspective and point that you have then that sort of translation can also be done in that Discovery models now Express.
00:10:04 [W] It's not it's not expressed.
00:10:06 [W] their explicitly because the interface is kept very simple, but the flexibility is there to allow this next Once you have discovered which events are available then you want to be able to
00:10:21 [W] To subscribe to them and again today in cloudevents in the base cloudevents PEC.
00:10:26 [W] That's something that we've made a matter of of out of bands agreement some protocols for instance amqp or mqtt or
00:10:42 [W] Already have built in facilities to subscribe.
00:10:44 [W] So if you are designating a subscription manager that is a cue or sorry or topic inside of a message broker, then it's implied effectively what that subscription protocol is if
00:10:59 [W] For instance, but for other for HTTP, for instance, HP doesn't have a built-in subscription notion.
00:10:59 [W] So in even though those subscription services are fairly common or these consumption patterns are fairly common with with webhooks. It's something that we have not seen being sufficiently standardized so we have
00:11:14 [W] Web hooks, it's something that we have not seen being sufficiently standardized.
00:11:17 [W] So we have to find a way to go and create a specification that acknowledges the existence of these existing protocols like HTTP and impurity which have built-in subscription oceans and then at the same
00:11:32 [W] built-in subscription Notions and then at the same time add a ability to for protocols that don't have that like HTTP to also allow you to do a subscription gesture and that's why we wrote the subscription API the subscription API specification
00:11:47 [W] acknowledges those or enumerates tufin subscription to use of exist in those other protocols supported by cloudevents and then explicitly introduces an API, which can then be implemented
00:12:02 [W] and then explicitly introduces an API, which can then be implemented using HTTP or can be implemented using grpc or implemented any other protocol that specifically needs this to go and effectively
00:12:15 [W] To go and effectively manage subscriptions and for that we've introduced the notion of a subscription manager next.
00:12:25 [W] So the subscription manager is the one that implements a subscription API in the subscription manager might act on behalf of itself.
00:12:34 [W] So it may really be the The Entity that emits those events but it also made may act on behalf of others.
00:12:41 [W] So you have that very often in larger setups where you are with very very many producers and those many producers produce events into a middleware of sorts and then if you are interested in
00:12:55 [W] Events from a particular publisher or a group of Publishers. Then you are subscribing on that middleware on behalf of those producers.
00:13:03 [W] So one of the obvious examples here is sources iot we have sometimes thousands and or hundreds of thousands of devices looking into a cloud endpoint and if you're interested in specific events
00:13:19 [W] On that middleware on behalf of those producers. So one of the obvious examples here is sorts of iot.
00:13:26 [W] We have sometimes thousands and or hundreds of thousands of devices looking into a cloud endpoint and if you're interested in specific events is emitted by those devices. You would not subscribe to every single device, but you
00:13:46 [W] Are those devices you would not subscribe to every single device but you really would go and go to the subscription manager which has the pool of events to go and pull out the events that you need for those subscription for the subscription manager as said we're in humor
00:14:01 [W] Seems of existing protocols that we have defined this HTTP API to help with the cases where more API and API abstraction to help with the cases where that is not available.
00:14:14 [W] We also have two delivery Styles and that is the push delivery at the pull deliveries were we're just distinguishing between those two we're typically for cloudevents as we've defined it today.
00:14:30 [W] At the pull deliveries were were just distinguishing between those two.
00:14:33 [W] We're typically for cloudevents as we've defined it today most mostly the delivery is assumed to be push which means the producer or the subscription manager acting on its behalf pushes those events
00:14:48 [W] the subscription manager acting on its behalf Torres has those events by establishing connection and sending the event along or this can also now the definition here allows for pull delivery style where you are
00:15:02 [W] Your house will pull delivery style where you are effectively having the subscription manager maintaining a queue for instance on behalf of the producer. So both of those things are possible next.
00:15:17 [W] Were effectively complimenting the the the mechanisms that we have today in cloudevents by closing the loop. We have delivery something that's defined now, and now we have Discovery and subscription that we're adding to it.
00:15:29 [W] a really important further element this schema registry next
00:15:36 [W] every cloudevents can carry a payload with event details mostly you for more structured data structure data, if you're sending a sending it to another party will require often for that other party to be able to validate
00:15:51 [W] A load with event details mostly you for more structured data structure data, if you're sending a sending it to another party will require often for that other party to be able to validate whether that's structured data is correct
00:16:10 [W] Your data is correct based on some syntactic rules that can be expressed in a schema. And then there's often also need for serialization where you want to have an in-memory data structure
00:16:25 [W] Out using an efficient format and those efficient formats often leave the structural metadata out like you familiar with what Jason looks like.
00:16:37 [W] Jason is very repetitive and puts all the metadata elements and type information kind of into the document itself.
00:16:44 [W] And there's a number of far more efficient serialization formats, which don't do that and they keep that information outside in schema documents. But then once you use that the question is
00:16:55 [W] Where do you put those documents?
00:16:57 [W] So the goal of the schema registry is to allow store these documents and Axle access those documents in a consistent way so that you can go and pro and build software elements a sterilizer and a validator that
00:17:12 [W] schemas and on hints that come with the event and then can go and do you see realize that structure data or serverless that structure data and the goal is for that to be project neutral and vendor neutral so that that works
00:17:22 [W] Cloudevents but that also works for other messaging and Eventing infrastructures because we often see that things get born as cloudevents but then get forwarded through other messaging infrastructures as well. And so we don't want to constrain this to the case of cloudevents and
00:17:28 [W] Is just using in the the binary format is just using a message payload, like any other message or events and use case would so it would it doesn't simply doesn't make sense to constrain the registry just
00:17:41 [W] Use cases next so that's one of the principles that we have is at the bottom what I just said that it's should be scenario neutral.
00:17:46 [W] It should also be protocol neutral.
00:17:48 [W] So the registry data model is abstractly defined and the HTTP binding that we have so setting and receiving messages schemas via HTTP that's well-defined right now with an open API document but the the
00:18:03 [W] The data model is abstract find and we allow it allows for local bindings and we certainly anticipate to have a name QP binding for this and hopefully more Bindings that somewhat depends because it's a request
00:18:16 [W] Unrequited depends on the capabilities of the respective protocols, but grpc is also certainly in the cards.
00:18:16 [W] And of course you want to keep this as simple as possible.
00:18:20 [W] We don't want to turn this into a massive mayadata store with super powerful capabilities. So there's no goal here to rival the capabilities of patchy Atlas or something like this but really
00:18:35 [W] you should be able to implement this registry a pi over a plain file system workloads blobstore and it's just there to store those store those schemas and manage those schemas in the simplest possible way while
00:18:48 [W] The core capabilities we need next so this complements the event delivery model that I just talked about.
00:18:52 [W] by allowing you the producers to manage and validate or someone on behalf of the producers to manage Mobility the schemas and then really think about the data field in the cloudevents it how the that can be serialized and
00:19:07 [W] Model here.
00:19:04 [W] what's in the green works for cloudevents as we have to find it but also works for other Eventing scenarios as well.
00:19:15 [W] So this is kind of you for you to get visualize what this is about is really for sterilization decentralizing or validation on either side and it really pertains to the data element that sits inside of the cloudevents next.
00:19:30 [W] Finally the structure of the skins of this schema registry.
00:19:34 [W] We've structured this such that there is a notion of groups the group they can group. So a schema registry is split up into groups.
00:19:42 [W] Those groups can be by application or by some other criteria.
00:19:46 [W] They're really also there as an anchor for Access Control. So you may want to go and limit access to schemas by groups because they may carry important secrets so you don't want to make them accessible to
00:19:59 [W] Everybody then within that you have schemas, which really are containers four sets of schema documents that represent the same data structures.
00:20:07 [W] And then of course those those scheme has evolved and so the documents are really the leaves of this.
00:20:14 [W] We have various schema version starting with schema version one where if you're adding fields or if you making feels absolutely but you don't remove them. Then you're still within the same backwards compatible schema of
00:20:28 [W] So a schema registry split up into groups those groups can be by application or by some other criteria.
00:20:32 [W] They're really also there as an anchor for Access Control. So you may want to go and limit access to schemas by groups because they may carry important secrets. So you go on to make them accessible to everybody then within that
00:22:37 [W] Schema version we have some rules for how to add and manage those schema. So it's a very simple structure to manage effectively schema documents next.
00:22:51 [W] And that's where we are.
00:22:53 [W] We will take some live questions in at the end of this presentation following now, if you want to learn more about cloudevents go to cloudevents IO our specification repository is
00:23:08 [W] The cloudevents / spec that's where you'll also find the latest versions of all of those things. And we also have loo weekly called Thursdays at 12 p.m.
00:23:16 [W] Eastern time us or 1800 you Central European Time and in the repo is also the dial-in information and then you can also follow dog and myself on Twitter or send us email if you have any further
00:23:31 [W] Michael Collins.
00:23:31 [W] All right, thank everybody will stop the recording here and take questions live.
00:23:34 [W] Thank you all.
00:23:42 [W] right now Clemens
00:23:47 [W] All right.
00:23:48 [W] So let me questions. Please enter them into the chat.
00:23:50 [W] Oh, I'm not come on. Can you hear me?
00:23:53 [W] Because I couldn't hear you.
00:23:57 [W] Because I'm not able to hear you.
00:23:58 [W] I see your mouth moving though.
00:23:59 [W] Now I'm starting to we need to speak up.
00:24:04 [W] Okay. So are you
00:24:09 [W] Nope. Now you're gone again.
00:24:16 [W] All right. Yeah, I can't hear you.
00:24:17 [W] All right.
00:24:16 [W] I think we answered most of the questions in the chat already, please if you have any other questions, please go ahead and add them to the chat.
00:24:31 [W] Yeah.
00:24:41 [W] There's anything in a hearse.
00:24:42 [W] I think existing protocols to add extra metadata and in particular well defined metadata.
00:24:44 [W] So everybody knows what a metadata to expect and where to find them at a bit in the existing transports.
00:24:50 [W] So I think if you go back and look at the the charts on the HP example, right? It shows it shows with HTTP headers might appear, you know, the syntax of them stuff like that.
00:25:00 [W] That way you don't have to guess where they're going to pee right in the body versus in the header and what their names are stuff like that but that's the point that they it's not trying to
00:25:08 [W] fine a brand new transport and it certainly is not trying to find yet another common event format trying to leverage or augment the existing stuff dirty out there want to make sure we understand that.
00:25:20 [W] Let's see.
00:25:21 [W] how the questions you can surmise describing you to know the producer events system like Kafka.
00:25:27 [W] Cummins you want to try to take that one and we can hear you?
00:25:35 [W] subscribing
00:25:38 [W] if you cut out again Cummins
00:25:42 [W] if we can't hear you.
00:25:44 [W] Okay, I'll take it you can Services just do subscribe and consumers need to understand that the reason Kafka know basically.
00:25:54 [W] You obviously need to know the transfer is being used.
00:25:57 [W] So, you know how to do subscribe operation properly and stuff like that. But from a cloudevents respective the transport itself is pretty much agnostic.
00:26:03 [W] Seen it over transport things are going to come over. So you know how to actually do the Subscribe itself.
00:26:07 [W] The next question is do cloudevents respond to is hosted apps on premise compared to EBS event.
00:26:14 [W] Grid mention you then grid Clemens we want to try to take that one.
00:26:17 [W] That sounds like a Microsoft type question.
00:26:22 [W] You hear me?
00:26:25 [W] Audio issues with Clemens again. Okay.
00:26:30 [W] I'm going to wait till he gets back online.
00:26:32 [W] He looks and sounds that sounds like Microsoft specific question or the currently any existing proof of concepts implementations of the pub subscriber registry.
00:26:40 [W] So we are working on an interactive event as we speak around testing out the new specifications if you're interested if you're interested, go ahead and look at the working group agenda doc.
00:26:55 [W] Can find out more information about the interop event or scenario that we're actually working on.
00:27:00 [W] We are actually working on testing those beyond that. I'm not aware of any other proof of Concepts that are out there yet.
00:27:07 [W] Clemens you back online yet.
00:27:09 [W] Am I you are I can hear you.
00:27:12 [W] congratulations you want to think about of Ingrid number seven number seven do cloudevents response is oh snap some firms as compared to he's be even greater.
00:27:25 [W] Basically, what we're doing with cloudevents is we both have a format for how to express events and then we have ways to bind those to transport.
00:27:26 [W] So if you are binding it to http, then you can obviously send an event to an HTTP endpoint using a post and event grid does event current in our in our case.
00:27:41 [W] Send an event to an HTTP endpoint using a post and event great does event occurred in our in our case.
00:27:28 [W] does that it delivers events with opposed to to an end point so and then from a from a handling perspective whether you handle that an IAS or way you handle that on another form or in any other web
00:27:44 [W] Laughter court or in any other web server.
00:27:48 [W] It's really up to you.
00:27:49 [W] we're trying to stay away from concrete infrastructure elements and how those Implement and really try to stay on the on the sender database on the protocol standards and try to not invent anything but really use the entire infrastructure that you already have.
00:28:05 [W] All right, cool.
00:28:06 [W] Thank you.
00:28:07 [W] Let's see Joseph asked the question where cloudevents be useful as an adapter layer, for example, adapting Kafka events source to a consumer as its as an HTTP endpoint to me.
00:28:18 [W] Yes, but I think it's important to distinguish their tufin bits here.
00:28:21 [W] One is the conversion from a Kafka transport to any speed transport cloudevents per se doesn't actually help on that part, right you need to that's you know, understanding the definition of Kafka HTTP and mapping things across where cloudevents comes into play.
00:28:35 [W] This to me is saying or is is understanding that the how the cloudevents data will get mapped or the common metadata get map between the cough core layer and the hdp layer and that's where hcp I'm sorry.
00:28:48 [W] That's where cloudevents comes into play because it's saying, you know, we don't really care which transport to actually use.
00:28:53 [W] Here's this common metadata and here's how it's going to appear in both of the different transports. So cloudevents definitely plays a layer there or a role there in terms of that mapping of where that common metadata appear in the two transports as you go back and
00:29:05 [W] Earth you do want to add anything to that Clemens?
00:29:09 [W] Yeah, it sounds right.
00:29:10 [W] Uppercut scenario, he may have been asking around you is and and the vinegar things that make any sense to you at all.
00:29:15 [W] I'm not quite sure.
00:29:16 [W] sure. I understand what the question is if it's a standard one.
00:29:22 [W] As I said, it's a universal.
00:29:25 [W] It's a Universal Event format for for on-premise consumers in a hybrid Cloud scenarios.
00:29:32 [W] There's various ways to go and make this work for instance. You can take a cloudevents that's formulated as a Json message. We have to Jason binding and the Json structure or the Json format and the Json structure of mode and if you want to go and send that
00:29:48 [W] That's been open Brian and on-premises systems, you can use that if you have attached the on-premises system using a VPN, then you can certainly go and post from the cloud into preferences environment through that VPN tunnel.
00:29:56 [W] No restrictions here.
00:29:52 [W] We're not inventing anything new in terms of what the protocols are it with the protocol options.
00:29:57 [W] Are we simply giving you a way to standardize the the event format and then some interactions around the in event from it, but that's all kind of grounded on the basic mechanisms that you're had that you already have.
00:30:14 [W] All right.
00:30:15 [W] Let's Emmanuel. Ask the question if there are events coming from the same Source but with different schema, I guess during the translation period how is the client service ingesting the events correctly?
00:30:25 [W] So from my perspective, there are two different ways to look at that one is if they're different schemas.
00:30:31 [W] It's also very possible that the different event types.
00:30:34 [W] So the type property from cloudevents will probably be different and you can almost do dispatching or processing differently based on that.
00:30:41 [W] But if they actually are the same type
00:30:44 [W] There is a scheme of field in cloudevents that allows you to actually point to different schema.
00:30:48 [W] So you can use that URL to basically go get the schema for the different events and process it correctly.
00:30:54 [W] So you have two different options there Yakima's anything you want to add on that one.
00:31:01 [W] Yeah, the the main the main discriminator we have between different kinds of events is the event type and then you will typically and we also and then with data schema in the the schema registry then we let you kind of differentiate
00:31:16 [W] What what the payload of that event is and then there's we leave you we leave your room like we're not we're not particular perspective about for instance a versioning strategy. Like there's you can choose to
00:31:30 [W] a event type where the append the version the version number to the to type per se or you can leave that off and you can just version your payload schemas if you want to that's something that really depends on
00:31:32 [W] Application and it doesn't affect interoperability and that's why we're not prescriptive about those things and how those work. So we have enough dispatch criteria for you enough metadata for you to go and
00:31:45 [W] Of whether you want to go left or right with a particular message in your or event in your application, then sort of another questions. I will repeat one of them.
00:31:54 [W] That was actually the very first question. They are asking why do we call these cloudevents?
00:31:58 [W] Because doesn't seem like it's actually specific to Cloud processing or anything like that can be used for any generic venting infrastructure. And that's exactly right. It actually can be you can think of it as we jumped on the cloud bandwagon, you know, whatever terminology you going to throw around that it you're right. It's
00:32:13 [W] It's not a class specific thing any of its infrastructure could benefit from cloudevents, but we are part of the cncf. So, you know use the terminology that's out there. You can you can run you can run run Cloud native infrastructure on premises.
00:32:28 [W] What does that mean so-called? So in that case, I think the right answer is yes.
00:32:34 [W] It's marketing and the thing needed to name and cloudevents sounded fine.
00:32:40 [W] Yes the cool name out. There we go.
00:32:43 [W] Alright any other questions we're getting a little bit near the in there are times we have time for one more question or so.
00:32:52 [W] Checking to make sure we go all the main ones covered.
00:33:00 [W] All right, not seeing any other questions great.
00:33:03 [W] Here we go. Sorry bit of that bit of a nail-biter here with the network connection, but he keeps your heart pumping, you know a little bit of faster than normal.
00:33:14 [W] So terrible that minutes we survived. Anyway, it's a
00:33:26 [W] Please if you're interested, obviously as we talked about before we have weekly calls very interested and and especially around the interop and implementation of the new respects.
00:33:35 [W] We'd love to get additional people involved.
00:33:37 [W] So, please look at the conjoining that if you are interested and thank you all for joining.
00:33:41 [W] Appreciate it. Thank you.
