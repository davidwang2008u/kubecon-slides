Project Tye: Building Developer Focused Tooling for Kubernetes and .NET: FUSG-8827 - events@cncf.io - Wednesday, November 18, 2020 5:47 PM - 31 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hi, my name is David Feller.
00:00:01 [W] I'm an architect on the.net team and hi.
00:00:04 [W] My name is Justin.
00:00:05 [W] I'm a developer on the Hispanic or team today. We're going to talk about prototype.
00:00:09 [W] When people are developers are trying to build micro service applications several questions tend to come up when you're developing these applications. Like how do I build and run multiple Services locally?
00:00:20 [W] I may have a microservice that rely that consists of multiple services like a front-end and the backend API dynatrace on on a single machine.
00:00:29 [W] Similarly.
00:00:31 [W] I may need to run things like reddish or some of the dependency late mongodb locally as well.
00:00:35 [W] How do I run those things together and have the all workloads?
00:00:39 [W] Easily, how do I do about those Services when I'm running one service is pretty pretty easy to run my application and attach debugger.
00:00:47 [W] What if I'm running two or three services?
00:00:50 [W] How do I get that whole end-to-end working so I can debug these Services while running locally?
00:00:55 [W] Also, how do I do this or service Discovery?
00:00:58 [W] Say imagine. I am trying to I have Services a b and c locally or back in the front end and a cash.
00:01:05 [W] How do I get the address of those Services when they run on my local machine?
00:01:09 [W] How do I view logs free service logging is super important in micro service applications and I want to be able to test my logs and see what they log in development.
00:01:20 [W] so that when when I'm in production, I can look at an outage and figure out what's going on.
00:01:26 [W] And these are just a couple of questions, but there's several more that tend to come up when you're developing these microservice based applications.
00:01:32 [W] People who will get you to who will try to get you to use a cluster look either locally or remotely for development because the idea is that that cluster try to mirror your production environment locally.
00:01:43 [W] So that is pretty involved because it means that to do any kind of development with my microservices.
00:01:50 [W] first step is to spin up a cluster either locally using something like my micro k8s Docker desktop comes with kubernetes or you can use some other distribution of kubernative.
00:02:02 [W] He's that is shrunk down to run on a single machine or I can provision my cluster in one of the clouds I ge ge ge ke-yah Mazon and I can use kubevirt. I can use my remote cluster as my development environment
00:02:17 [W] Microservices. So once I do that I figure out how to get a cluster right?
00:02:05 [W] It's all the cluster.
00:02:06 [W] I have to get darker and learn how to write.
00:02:07 [W] Dr. Files.
00:02:08 [W] This is the member.
00:02:09 [W] I'm trying to actually develop my application and run it locally to test these various things.
00:02:14 [W] I need to get a container registry.
00:02:16 [W] I need to learn how to write the kubernative Manifest because I can't even I have to deploy a tendency to even run a simple application and then if he's I can use a tool like scaffold which actually tries to automate and build the building and pushing a container images.
00:02:31 [W] And applying that change to kubernative.
00:02:36 [W] So the the barrier here is really high because it requires me to before I can do any kind of like development with multiple Services.
00:02:44 [W] I need to provision the cluster. So I actually have an environment that can actually give me features like service Discovery and those those things that I require, but I'm trying to build microservices.
00:02:57 [W] Our solution is product.
00:02:58 [W] I tie is a tool chain that basically tries to give you enough of the features of kubernative use not all of them, but but enough to do development so provides a local orchestrator for development time.
00:03:12 [W] This is to offer offer things like service Discovery and a couple of other features that will show you as we as we go by it also makes deploy microservices kubenetes pretty pretty easy. So
00:03:26 [W] My application to kubernative should be easy and there are a lot of boilerplate and things we can infer from your project types without you having to describe in a manifest kind of a similar concept of a service in a deployment.
00:03:25 [W] We believe we can automate kind of the the getting started ninety percent of those cases and then it allows done it developers to use the existing tools.
00:03:36 [W] So you have to learn anything new.
00:03:37 [W] I don't have to learn Docker to run applications locally. I can kind of
00:03:44 [W] run my applications like normal look leave without having to worry about a cluster or any new tools and I only have to learn new tools when I opted in to trying to trying to learn more of the stack.
00:03:56 [W] So let's get into a demo of tie. The application were using today is a simple app that has a front end and a back end.
00:04:03 [W] This is like a hello world scenario. We can come up with that has to microservices the front end will call in to the backend to get some forecast information from the backend about some upcoming.
00:04:12 [W] Other now at the command line in the root of the directory we can see there are app consists of these two Services a front end and a back end.
00:04:20 [W] These are two simple dotted apps that we created from basic.net templates.
00:04:23 [W] Really nothing special going on here, except a few things that will describe in a bit.
00:04:27 [W] These are two simple download apps that we created from basic.net templates.
00:04:19 [W] Really nothing special going on here, except a few things that will describe in a bit.
00:04:23 [W] We'd like to be able to run this app and its entirety without having the deal with Docker containers just two processes running locally.
00:04:29 [W] Typically people solve this problem in the.net World by their having a script that runs all your apps or by like configuring Visual Studio or vs code to have multiple startup projects tie instead solves this with a single command called tie run.
00:04:43 [W] This will run all of the services here and also do a few additional things.
00:04:48 [W] As you can see both the front end and the back end. I running also tie will start up a dashboard for you to look at all of your applications.
00:04:57 [W] The dashboard shows the entire topology of the application as some binding information as logs it also mentions how many replicas and how many times each of these replicas have restarted and also mentioned some extra information.
00:05:08 [W] There's logs here the show the output of the application for both the front end and the back end.
00:05:14 [W] This is just showing The Binding information.
00:05:17 [W] Now if you actually click on one of these bindings you actually go to the app.
00:05:20 [W] So the app here is the front-end app and its front end is actually calling in to the backend to get this weather information to prove that we can go to the box the back end and if we go to the right URI weather for cast
00:05:35 [W] See this this Json responses being sent from the back end.
00:05:39 [W] So another thing that I solves is pork conflicts. So these ports here at the very end of these these bindings for HTTP and https are all random.
00:05:48 [W] They're guaranteed to be random and they're also guaranteed to be unused so when you start a a nap up in Thai, you never need to worry about having a port the conflict and especially when you grow the number of services they run locally this becomes larger and larger problem with that.
00:06:02 [W] There's a few interesting questions that come up first. How did the front and actually know what the your eye of the back end was
00:06:09 [W] You can't just hard code it in the front end. You need to have some way to make it discoverable.
00:06:14 [W] So how do you actually Implement Services government? I what tide does is before each process starts tie will inject environment variables with a well-known scheme into each process that starting which includes both The Binding information and/or connection string based on the service
00:06:29 [W] Service to know about all other services.
00:06:28 [W] So when you execute I run tie will know which hostname port and protocol is being used for each service, you know, inject these environment variables for Don adapts.
00:06:37 [W] We also provided a configuration model.
00:06:39 [W] So if I go into vs code and take a look at the front-end application, we can see that there's a method we added to this configuration model which gets the URI of the back end.
00:06:50 [W] This is effectively just parsing the environment variable. We injected in the process to get the back end URI.
00:06:57 [W] We also have a vs code extension here. If we go ahead and take a look at the tie explore that shows some extra information as well as making easy to debug tie applications.
00:07:07 [W] So if I click here this would actually bring up the dashboard but it actually takes a look at both the back and in front and they're currently running. Let's go ahead and add a breakpoint to the backend and debug attached to it.
00:07:19 [W] Let's go ahead and add it inside of the backend and add it to what the controllers.
00:07:29 [W] So what's going to happen here is when we send a request on the front end. It will actually causes the bug breakpoint to hit.
00:07:39 [W] So as you can see it this write the book breakpoint. This shows just another element of white eyes really useful for debugging multiple service applications.
00:07:47 [W] Also get the address from the back end in the front end.
00:07:42 [W] We also saw that we don't really need to worry about anything with regards to conflicting host and Port the port's because Ty handles all that for you. And finally we also saw that dashboard that gives a really nice view of everything. Now. Let's say we wanted to actually deploy this application to kubernative
00:07:58 [W] Deploying to kubernative isn't that easy?
00:07:49 [W] We need to add.
00:07:51 [W] dr. Files for both the front end and the back end. We would need to build each of these images version each image every single time.
00:07:57 [W] We need to push them to a container registry like Docker Hub author kubernative manifest, and then I guess you should have profit after that.
00:08:05 [W] I think your app should be working some tools like scaffold solve some of these problems but not everything with Ty though a single command can get this application running on kubernative without any of that ceremony.
00:08:16 [W] To start I'm going to use an empty kubeedge cluster. If I do cou couple get Services you can see just kubernative is running and deployments note appointments have been found.
00:08:29 [W] I'm going to run the command tie deploy in passons interactive flag what this is going to do is it's going to prompt me anytime.
00:08:36 [W] I need some sort of configuration from the user.
00:08:40 [W] So I was going to ask me for my container registry and I'm going to pass my doctor have account at this point.
00:08:46 [W] What ties going to do is it's going to produce build output of each of your donít applications. It's going to create a temporary dockerfile to create the
00:08:59 [W] Cream is from is going to execute.
00:09:01 [W] Dr. Bill to create said Docker image.
00:09:03 [W] Aim in there. Finally. It's going to actually apply the Manifest do kubernative and make it so your applications available in kubenetes.
00:09:10 [W] So now if we do cuttle get deployments.
00:09:15 [W] We can see that both back and front and are available and we do the same surfaces.
00:09:20 [W] We can see that both back and front and have a so C is Services as well.
00:09:24 [W] If we want to actually take a look at what the app looks like we do we can use the command kubeacademy port forward to the front end. Now if we go into the browser and go to Port 5000 what we can see is same
00:09:39 [W] We had running locally.
00:09:29 [W] I'm going to close that now another thing you may be wondering is how service Discovery is handle on kubernative.
00:09:34 [W] So locally we had that environment variable injection that injected the correct host and Port name or hostname Port into the application.
00:09:43 [W] Well, we do the same thing when we actually deploy these apps to kubernative.
00:09:46 [W] So if we do Cube cuddle describe front of deployment.
00:09:54 [W] pointment front end
00:09:57 [W] We're going to actually see it Munchies environment variables that we saw locally be injected. So this naming scheme of service front and protocol eventually he's used by the Don and application to build the URI in kubernative ends up just being the DNS name
00:10:12 [W] and for the for the hosting that you need to use as well as the port of 80
00:10:12 [W] now before we spoke earlier about the steps, you have to take two even run a coop neighs cluster as your development environment and when we think about kubernative we think about the learning curve of having to even like get started
00:10:27 [W] A front end and a back end and I'm supposed to kind of configure a cluster as my bare minimum so I can mimic my production environment.
00:10:24 [W] The the capacity is just is just way too high for getting started.
00:10:29 [W] So the tie we actually believe that our goal is to not hide kubernative but flattened learning curve so that you only need to learn things that are relevant to your application at the right time.
00:10:40 [W] So whenever so I start off I can use the tools that I'm used to for running for debugging for looking at
00:10:47 [W] as for compiling I can very simply get service covery and on a bunch of core microservices features, but they'll having to learn the entire kubernative ecosystem.
00:11:00 [W] I'm patterns all at once and then gradually as you get more comfortable with those tools, you can grow up gradually into learning more and more about the stack and you get more control so tight kind of smooth things out that learning curve
00:11:16 [W] through deployment
00:11:15 [W] So we showed you a super basic application with tie front and then the back end, but we also have a bunch more features that are that are that are in the realm of trying to help you develop microservices faster so you can just as you saw before
00:11:30 [W] Your peer Services via configuration.
00:11:24 [W] We inject the right variables and then you can read them in your application.
00:11:27 [W] We have support for developing across multiple repositories.
00:11:32 [W] So let's say you have service a b and c and you need a b and c to develop locally but a B and C are in different repositories.
00:11:38 [W] I can actually run a command to clone a b and c pull them down pull it together into a single type manifest and run those and I get the same features of surface surface cover and other things like that.
00:11:51 [W] I'm ty has support for modeling and grasses. Well the intent being that it isn't it isn't to say that that you that you would actually model your entire application with tight, but I can I can Model A couple of Core Concepts like Ingress so I can map
00:12:06 [W] two specific services and I have a local proxy that runs on my local environment before I deploy so I can actually test to see how routes flow into other services and then I can actually deploy
00:12:19 [W] I can actually test to see how routes flow into other services and then I can actually deploy Ingress and it will preserve those rules all the way to kubenetes.
00:12:21 [W] I can use Docker for dependencies so I can list as you saw in my in the demo. You saw containers. You saw sorry.
00:12:30 [W] You saw the the applications as Services.
00:12:33 [W] I can actually depend on other containers like redis or mongodb as part of my application and I can actually
00:12:41 [W] we get you surface covery the same Discovery. I used before for other services also work for containerd dependencies hot reload what we call watch support.
00:12:52 [W] I can kind of put tie into a watch mode where it runs forever for an application and I can change the application bits without having to recompile and rebuild manually and then we want be support this thing called
00:13:07 [W] Also work for containerd appendices hot reload what we call watch support.
00:13:14 [W] I can kind of put tie into a watch mode where it runs forever for an application and I can change the application bits without having to recompile and rebuild manually and then we want be support this thing called
00:13:43 [W] Our pattern made Popular by kubernative we can integrate with things like the elq stock. So so we want to build recipes for for common micro-service pattern.
00:13:54 [W] So let's say I have a bunch of infrastructure provision by my it's your Ops people I can model that same integration locally in my time manifest file for development.
00:14:07 [W] So it matches my production experience.
00:14:11 [W] And then I can generate kubenetes manifest on dr.
00:14:15 [W] Falls for services.
00:14:15 [W] So let's say I actually want to use Thai but I don't want to actually use it for deployment.
00:14:20 [W] I don't want to go all the way I can generate the Manifest that title use to go to those Services. I can generate those and check it in Source control.
00:14:30 [W] for example, if you're doing gitops.
00:14:33 [W] it's pretty powerful the thing we didn't talk about intentionally with Docker compose composed does solve a bunch of these problems, but we believe the learning curve is too steep because Docker compose requires containers to begin
00:14:48 [W] It does have really great features. It does solve a bunch of the same problems that we believe we believe that soccer is great for dependencies. But the learning curve to having having to package your own Services as good as containers before you get started is
00:15:03 [W] but the learning curve to having having to package your own Services as good as containers before you get started is too big of a of an issue to too big of a learning curve for most people
00:15:07 [W] of learning curve
00:15:09 [W] For most people our customers we think would prefer the smooth arm wrap where you are using your tools to begin with and then you can learn containers and then you can learn kubenetes as you care about that curve as you care about
00:15:26 [W] So here is composed where and where we think it fits on the Spectrum now, it isn't it isn't to say that compose is hard to hard to learn.
00:15:35 [W] But if you aren't concerned with containers as yet and you're just trying to run multiple Services you you're met with that complexity up front so you can see compose this somewhere in between tank kubernative
00:15:51 [W] But it does work very well for the same kinds of tasks.
00:15:56 [W] Okay. So future of Thai We Believe tie is useful in general and and through our customer research. We've seen people using JavaScript front-end with.net backhands and python for mlperf clothes in the same application.
00:16:12 [W] Through our customer research.
00:16:09 [W] We have seen people using JavaScript front-end with.net backhands and python for mlperf clothes in the same application.
00:16:16 [W] So it's a Racine polyglot Services a pair even for even for done it done it developers.
00:16:23 [W] So we think it would be interesting to support multiple languages with Ty and then we want to do more kubernative integration.
00:16:30 [W] So for example, we want to have a recipe for https. So imagine I could have an itchy futurewei.
00:16:37 [W] Yes enabling environment locally. And then when I deploy we would configure assert manager.
00:16:42 [W] That's incorrect, sir, Traditions those kind of things we want to have those and two ends working from development and I'm going to deploy so I can model my environment and test it locally and test it in production.
00:16:55 [W] Or at least in after deployment.
00:16:58 [W] We want to model a bunch more microservice patterns and Primitives what I mean by that is kubernative made a bunch of patterns, very popular like sidecars is kind of is one that comes to mind the idea
00:17:13 [W] Hide our patterns that happened to have been created by kubernative but have become kind of patterns that are now used by industry to do different things.
00:17:23 [W] We want to model the ones that we can so that so I can run those and test those locally and also have those models from persist in production.
00:17:35 [W] And then we want to have more Integrations with cncf project. So for example, I was trying to run Envoy as a sidecar in my local environment and that isn't something that actually is is well as well describe. It are described are defined. It's
00:17:50 [W] For kubernative only and I think we want to be able to model more of those and more of those things as time progresses.
00:18:01 [W] We have a booth at the a virtual booth at the conference.
00:18:06 [W] So come check it out and learn about more what Microsoft is doing with kubernative is a lot.
00:18:29 [W] Hello.
00:18:32 [W] David are you there?
00:18:38 [W] I cannot hear David at the moment.
00:18:45 [W] I guess we can continue with the QA.
00:18:48 [W] Let me let me double-check something. Okay, we can hear it.
00:18:51 [W] You can hear and see me awesome.
00:18:53 [W] All right, so we have a few questions that are coming in the chat right now.
00:18:57 [W] First question is from Fang Yuan Hao tie how can't identify which apps to build Docker images for So currently what we do today is if there isn't a Docker file present for
00:19:12 [W] Fairly good idea about how to build a Docker file and create a Docker image for that.
00:19:10 [W] So we go with some pretty well-known constructs there in order to create those images and go from there. Let's see here.
00:19:28 [W] Dennis Matthew John asks, how does tie generate kubernative manifests?
00:19:32 [W] That's a good question.
00:19:33 [W] So what we do is effectively when we create during the stage where we create a Docker vows, we also have some pretty well-known constructs for how to create deployments and services that we effectively template every time and
00:19:48 [W] And from there we create these manifest for each of your services that you have.
00:19:43 [W] Carl Francis asked Barbados.
00:19:45 [W] Yes. David is from Barbados Conan asks, what is the origin of the name Ty Ty I believe we had a brainstorming session where we were trying to come up with a name,
00:20:00 [W] I was in like the nautical theming like Docker and communities are I think Ty is like some sort of rope that people use to tie things together.
00:20:04 [W] Also.
00:20:05 [W] It's a logical tying together of everything.
00:20:08 [W] Um, I don't know it's kind of a random name.
00:20:12 [W] It's also three letters. So it's pretty easy to use and the command line environment.
00:20:15 [W] Can I use Thai to run full integration testing in a ci/cd environment?
00:20:20 [W] Yes, and no.
00:20:24 [W] If you're asking about like executing Tyrann as like a product like as a process inside of like a unit test or integration tests, that's possible.
00:20:33 [W] We haven't really thought about the scenario that much but it's something we would like to consider in the future.
00:20:40 [W] I've been asked is there a link to the tide row map?
00:20:43 [W] Yes, so ties open source is in the.net organization on GitHub GitHub dotnet / tie.
00:20:49 [W] So if you go there you can check the roadmap.
00:20:53 [W] We're going to be updating it soon as we are trying to figure out what the next steps for tie our for the last six to nine months. We have been experimenting with Ty.
00:21:03 [W] We're trying to figure out Integrations and other things tooling that would help make the experience better.
00:21:08 [W] And so that is going to be updated shortly and we can definitely get back to you on that.
00:21:14 [W] A link to the tide row map.
00:21:09 [W] Yes, so ties open source is in the.net organization on GitHub GitHub dotnet / tie.
00:21:15 [W] So if you go there you can check the roadmap.
00:21:19 [W] We're going to be updating it soon as we are trying to figure out what the next steps for tie our for the last six to nine months. We have been experimenting with Ty I trying to figure out Integrations and other things tooling that would help make the experience better.
00:22:19 [W] Free to find a port in the app settings. So Ty will use whatever Port is to find in the app settings are not app settings inside that llamo definition.
00:22:31 [W] Sorry Davis message me right now.
00:22:32 [W] He says yes, I don't know why I said it's not working.
00:22:37 [W] What if you define a port you so you can define a Port hard-coded Port inside of the animal definition.
00:22:46 [W] You can't let me let me be clear here you we use some of the app setting stuff or the launch settings in order to determine what porting exactly to use but fata.
00:23:00 [W] That only has so much impact there, but you can hard code something inside the Thai MO.
00:23:07 [W] Let me see here other questions are good here. Any plans to make Tye work with Helm?
00:23:14 [W] Yes, and no it's something that we have kind of thought about a little bit but we need to investigate a little bit more.
00:23:22 [W] We're trying to figure out how high fits in with the grenades landscape and how much we want to integrate with things like home and actually like generating like home charts and stuff like that.
00:23:37 [W] On the clearance for that, but I think it's something we'll be talking about in the GitHub repo excessively.
00:23:45 [W] Second page. Nevermind. Oh David, I can see you now.
00:23:50 [W] Can you hear you can eat?
00:23:52 [W] I think I can hear you now. Can you speak?
00:23:59 [W] Okay, I don't know if you can hear me.
00:24:01 [W] Oh, there's a second page and even see this.
00:24:03 [W] how does tie deal with application Secrets. Um, so for kubernative, I believe we we prompt users when application secrets are required for example, a connection strings and things
00:24:18 [W] And that will be provided interactively David.
00:24:03 [W] Can you hear me?
00:24:04 [W] I can hear you finally.
00:24:09 [W] So application secrets are handled through like in kubernative by like the interactive mode.
00:24:18 [W] I also think you can just set the secret and kubenetes itself and it will use kubernative Secrets.
00:24:23 [W] They're locally.
00:24:23 [W] I don't necessarily know if we have a solution for application Secrets locally.
00:24:29 [W] are variables
00:24:32 [W] For local yeah. Yeah.
00:24:37 [W] here's a good question. If Ty provides is level of abstraction to help with the learning curve.
00:24:41 [W] Doesn't that also create the risk of developers not appreciating how their applications are running under the hood.
00:24:47 [W] The same I guess the same can be said about anything that abstract stuff. I do think I think we're trying to find what the right level of attraction is for these things and I think with any abstraction
00:25:02 [W] - right death tend to learn attraction and not learn about the underlying Technologies is the same for for like C++ C sharp assembly things have to be there to raise the level of attractions make people more productive.
00:25:11 [W] I think we're trying to find that that Medium between being kind of too abstract and showing just enough things.
00:25:18 [W] I think kubernative does a pretty good job of trying to extract the ends.
00:25:22 [W] the ends. I'm a trying to raise the level a little bit more to focus on kind of the things that matter for your
00:25:27 [W] Ian's which is why we kind of copy some of the Primitives from from
00:25:35 [W] Archers themselves so health checks replicas those features.
00:25:39 [W] We think are should be in your face, but we're still trying to find that Medium.
00:25:45 [W] So I think it I think you'll continue to see more of these things trying to abstract platforms, but I'm I don't think there's a right answer but I think what we have now is pretty pretty good start.
00:25:58 [W] Yeah, Roberto ask this could be great tooling for Dapper. Do you have any plans to integrate it to make it better with micro service management and the answer is yes. We do support Tapper with Ty and we have been pushing that pretty hard actually a lot of people like using
00:26:13 [W] People like using Dapper with I considering the number of bugs we get filed as soon as something they're not mattering. So it's right. Yeah, that's for sure.
00:26:16 [W] My customer has a dotnet legacy app service is for.net.
00:26:20 [W] Core only yes is currently only for.net core for.net framework applications.
00:26:25 [W] That's something we currently don't support out of the box. But if there's enough asks for it, then we may consider doing something that right and then untied Titus support its cuticles so you can make it work, but it is
00:26:41 [W] The person experiences for dotnet core. Yeah.
00:26:46 [W] Let's see here.
00:26:50 [W] Sorry, I'm trying to how does tie handle search for HCBS.
00:26:54 [W] Yeah, we don't right now.
00:26:57 [W] That's something not yet. It will but it doesn't it right now.
00:27:02 [W] Yeah, Ben has a comment saying the case learning curve you touched on this real I felt the pain of spreading the knowledge amongst the team excited to see how high evolves keep up the good work.
00:27:12 [W] Thank you really do appreciate my experiences as well.
00:27:20 [W] If I can pull multiple Repose as part of my ci/cd pipelines create a virtual environment for testing that would add value.
00:27:26 [W] Yeah, totally we do stuff currently today for unit testing and functional testing tie in our repo that we potentially should make public in some way.
00:27:35 [W] Yeah. Sure. What's the origin of the name Tie The Divine Comedy, right? Yeah.
00:27:41 [W] Yeah.
00:27:42 [W] Okay.
00:27:43 [W] Awesome.
00:27:43 [W] was all you I'll continue reading them just because I know which ones we did get it any thought.
00:27:49 [W] integrating with Cloud native buildpacks
00:27:53 [W] Good question.
00:27:56 [W] There are no concrete plans. We have currently to integrate with buildpacks, but do let us know if you think that would be interesting scenario and we could consider it.
00:28:05 [W] Singings functional testing tie in a repo that we potentially should make public in some way.
00:28:06 [W] Yep.
00:28:07 [W] Let's see here. What's the origin of the name tie that I'm going to cover the right?
00:28:12 [W] Yeah.
00:28:12 [W] Yeah.
00:28:13 [W] Yeah. Okay. Awesome.
00:28:14 [W] was all you I'll continue reading them just because I know which ones we didn't get any thoughts that n***** any was Cloud native buildpacks.
00:28:24 [W] Good question.
00:28:25 [W] There are no concrete plans. We have currently to integrate with buildpacks, but do let us know if you think that would be interesting scenario and we could consider it.
00:28:37 [W] Yeah, what's the difference is between this and scaffold?
00:28:43 [W] Good question scaffold tries to automate the the dev flow for actually pushing to to kubenetes.
00:28:50 [W] I think Ty is more about how you not go to kubernative for as long as possible.
00:28:56 [W] So for it. So for example, when you run locally you aren't ya sleep are not running in in a cluster you're running locally with processes and it tries to simulate, you know for the behaviors to make it to make it
00:29:11 [W] Good question scaffold tries to automate the the dev flow for actually pushing to to kubernative.
00:29:18 [W] I think Ty is more about how you not go to kubernative for as long as possible.
00:29:24 [W] So for it. So for example, when you run locally you are you actually are not running in in a cluster you're running locally with processes and it tries to simulate, you know, if the behaviors to make it to make it
00:29:39 [W] So I think scaffold is more about trying to make the push to kubernative painless and we're more about having having that while doing both things, right?
00:29:49 [W] So while you're in Dev, you're not kubenetes and then when you want to get there, it's not hard to do that either.
00:29:55 [W] So kind of does two things the superset I guess I'd say, okay. I think we have time for maybe one more question.
00:30:02 [W] How about access and Cloud resources from your local time environment?
00:30:06 [W] Are there any limitations on that the experience may not
00:30:09 [W] Not be super smooth.
00:30:11 [W] It's not going like going to be that weak tie has a solution for like pulling like a sure resources or any cloud provider resources. But if you provide the correct or necessary configuration, then we should be bent I should be able to use it locally as well,
00:30:27 [W] At the experience may not be super smooth.
00:30:30 [W] It's not going like going to be that we tie has a solution for like pulling like a sure resources or any cloud provider resources. But if you provide the correct or necessary configuration, then we should be bent I should be able to use it locally as well,
00:31:01 [W] So that I can reference an external service a container or a project file or executable runs locally. Yeah.
00:31:10 [W] All right.
00:31:10 [W] I think that's most if not all the questions that we got again.
00:31:14 [W] Thank you so much for having us.
00:31:16 [W] We really do appreciate it.
00:31:17 [W] And yeah.
00:31:21 [W] Keep you asking us questions about sorry.
00:31:23 [W] I'm try it out.
00:31:24 [W] and give us feedback. I doubt yeah.
00:31:29 [W] All right, I think that's good for now.
00:31:35 [W] Yeah, thank you.
00:31:36 [W] Thanks.
00:31:39 [W] Do we have the Public's questions?
