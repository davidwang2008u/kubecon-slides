Service Mesh Specifications and Why They Matter in Your Deployment: PWJG-4982 - events@cncf.io - Wednesday, November 18, 2020 5:47 PM - 38 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello. Hi Cube, Khan.
00:00:03 [W] How question for all of you that are joining just now.
00:00:06 [W] About servicemeshcon sophistications how many of these do you know?
00:00:13 [W] Think about it servicemeshcon distractions not necessarily servicemeshcon.
00:00:27 [W] Do any come to mind?
00:00:31 [W] If so mention them in the chat, let's let's see how many you can paddle off.
00:00:38 [W] We'll go through all of them today. So no worries if if you're unfamiliar.
00:00:46 [W] By the way, my name is Lee Cal coat.
00:00:48 [W] I'm joining you today from Austin, Texas.
00:00:51 [W] I am I wear a number of hats have been focused in this ecosystem for a long time.
00:00:58 [W] One of the hats that I wear is as the co-chair of the cncf special interest group on networking and all of the cncf projects that fall within that domain
00:01:13 [W] So linkerd e and Cordy nsmcon voi grpc and servicemeshcon her face and Kuma and there's a there's a list and so we I stay busy with that hat on
00:01:28 [W] I wear one as a Docker captain and as an author on the subject of servicemeshcon.
00:01:36 [W] Authoring a couple of books at the moment.
00:01:39 [W] And so we'll see if I make it out alive.
00:01:41 [W] I'm not sure we're going to talk about a lot of servicemeshcon games today if we go too fast or you miss anything see the URL in green and you can have as much slides to your heart's content.
00:01:58 [W] That I do have a full-time Focus within the layer five Community layer five communities servicemeshcon.
00:02:26 [W] Read this one isn't quite like the others. The other thing that I'm really fortunate to have today is is to have a maintainer an open-source maintainer from that Community joining in co-presenting work that he's been doing for some
00:02:41 [W] time Kush
00:02:46 [W] I all I'm crushed 3D.
00:02:49 [W] I'm senior year in The Graduate at iot to pour and I have been focused on servicemeshcon and specification for around 6 to 7 months.
00:02:59 [W] I have been involved in there fi Community as a member of the contributor and as a maintainer we are doing also interesting stuff over there working on Machinery working on servicemeshcon Foreman specifications
00:03:14 [W] Working on a some a conformance tool.
00:03:17 [W] So yeah, we have quite a few exciting projects.
00:03:20 [W] We have a welcoming community.
00:03:24 [W] It's good.
00:03:26 [W] Well, let's let's talk about the the journey the cloud native journey to servicemeshcon.
00:03:54 [W] Look the same for a lot of us that has been with sort of the Advent of cloud knative has been with the popularization of containers.
00:04:04 [W] Thank you docker.
00:04:06 [W] which doctor was first announced little over seven and a half years ago. Now we saw a number of container runtimes come and a number of containerd runtimes still
00:04:21 [W] From their containers took off like wildfire.
00:04:24 [W] We got a lot of them turns out you need an orchestrator to help you Wrangle that sprawl we saw a number of orchestrators come and we still have a number of orchestrators around.
00:04:37 [W] I don't remember know if it was today or yesterday, but hashicorp snow mad 1.0 was just announced and so
00:04:47 [W] So can orchestrators our thing and so our servicemeshcon?
00:05:18 [W] technology, a lot of the power is Yet to Come From my perspective not everyone quite understands the capabilities of meshes as they are promoted and spoken about today
00:05:33 [W] and for my part, I believe that there is a tomorrow in which data plane intelligence really matters and matters about how people
00:05:44 [W] right Cloud native applications. So
00:05:48 [W] so come along on the journey.
00:05:50 [W] I suppose is the thing. There are any number of servicemeshcon?
00:06:18 [W] Weaker a couple of weeks ago go get familiar.
00:06:23 [W] There's a lot to say about each of these servicemeshcon how they work their architecture why they're made one who they're focused on what they do when they came about why some of them aren't here anymore why we're still seeing new ones
00:06:39 [W] A lot of things to go through you'll probably be interested in any number of the details that this landscape tracks so visit use it heavily reference it.
00:06:51 [W] But be aware this statement is true.
00:07:00 [W] We did pull out a few strengths just as a sampling of some of the servicemeshcon star available Network servicemeshcon. The right hand side is sort of the servicemeshcon of a Smash If you will
00:07:15 [W] It has a lower layer by layer.
00:07:17 [W] I mean OSI model layer Focus.
00:07:22 [W] It's a highly performant meshmark.
00:07:51 [W] During the tears if I recollect correctly somewhere north of 400 million deployments of nginx out there that as people continued on their Journey from just using proxies
00:08:07 [W] Stand-alone environments and they go to have lots and lots of those proxies and ultimately arrive at a servicemeshcon.
00:08:31 [W] I'll say that I for one employees that there are various choices.
00:08:35 [W] There's just there's different needs out there.
00:08:38 [W] There's different organizations different needs and what we're answering on this slide is actually the first question that I asked which is how many abstractions are there. How many specifications how many standards are there
00:08:54 [W] That have come to the rescue. So to speak for understanding interoperating with the various servicemeshcon that are there.
00:09:02 [W] One of these is SMI again fortunate in many regards.
00:09:10 [W] I think in this space but a maintainer of SMI and
00:09:16 [W] will tell you that it will describe SMI more deeply here in a couple of slides but his foes focused on lowest common denominator functionality across servicemeshcon.
00:09:45 [W] Also focused a bit on well, it has a couple of apis that are focused on Federation and I like to think of it as service catalog exchange, but they each are
00:10:00 [W] Mystery in nature and each address our specification to address a particular area around servicemeshcon.
00:10:19 [W] And actually from the specifications that we were just mentioning.
00:10:24 [W] Is the fact that teams are decoupled when you're running a mesh developers get to iterate a bit independently of operators. And so two operators get to make changes to infrastructure to the way that applications behave
00:10:39 [W] And of developers in the presence of a mash both of these teams are significantly empowered as matter of fact, there's an alternative version of this slide that talks about the product owner.
00:10:51 [W] The product owner is a third Persona that is also significantly empowered in the presence of a mesh.
00:11:02 [W] There's some Advanced use cases there that we I've spoken to in a number of other trainings and talks catch me in the chat. If you want to hear about those use cases, I'm pretty interesting.
00:11:15 [W] everybody gets a piece of power, I guess when they deploy meshmark
00:11:24 [W] Because of well the fact that there are many matches by the way, I didn't say that there's a little over 20 of them that are being tracked on that landscape.
00:11:34 [W] The those abstractions have come along and there's a need for abstractions because it's not necessarily the case that that most it's not the case that most organizations are running multiple servicemeshcon
00:11:49 [W] Nash's at the same time.
00:11:50 [W] There are that you know, there's the 1 or 2% or 5% of the world.
00:11:56 [W] That's that's in that scenario for any number of different reasons, but by majority that's not necessarily the case irrespective of that infrastructure diversity in the Enterprise is a reality.
00:12:09 [W] Enterprise is a reality. We've had any number of servicemeshcon for the last few years and
00:12:16 [W] near as I can tell we're going to have any number of them for any number of more years certainly just like any other Market will have some that enjoy much more adoptions than others, but we've been as a
00:12:31 [W] The out answering a lot of questions about which mesh is best for me.
00:12:35 [W] How do I get started?
00:12:36 [W] How do I operate these with confidence?
00:12:38 [W] How do I how do I ensure if I'm a should I be adopting one of these specifications.
00:12:45 [W] How do I ensure if I am that my implementation or the servicemeshcon implementation adheres to the spec?
00:12:52 [W] spec? Lots of those questions. We try to answer and we work within an open source project called measure e
00:13:00 [W] there's a lot of things to talk about about measuring will show you some of the servicemeshcon sophistications you're using measure e
00:13:09 [W] So let's take a moment to look at the architecture of mastery.
00:13:12 [W] If you hail from a network engineering background, some of these next terms are going to be quite familiar to you. If you don't then as long as you've spent some time around kubernative the data plane and control playing terms are probably
00:13:27 [W] As long as you've spent some time around kubernative the data plane and control playing terms are probably conceptually somewhat familiar to you and are certainly two of The Logical planes that generically comprise a servicemeshcon.
00:13:42 [W] There's a third one that measure e lands into and that's the management plane.
00:13:51 [W] There's a lot of comparatives and an analogy to be made here to how physical networks run and these data plane control and management planes that are represented there as we collectively sort of at least part of us or half of us live in
00:14:07 [W] Native ecosystem we lived within a software defined Network landscape and servicemeshcon in some respects or sort of a next-gen. So sdn.
00:14:16 [W] The management planes can do any number of things the help bridge The Divide between other back-end systems and servicemeshcon.
00:14:41 [W] Maybe they're facilitating insertion of webassembly modules and filters into your proxies.
00:14:48 [W] These things are things that measure e does measure e is also was a released partner with SMI and implements SMI it also is the canonical implementation of S&P.
00:15:02 [W] It also supports nine different servicemeshcon.
00:15:24 [W] So let's take a look at our first.
00:15:27 [W] Well, it's goal and kind of its Genesis was born inside of kubenetes. I guess is maybe one of the ways of articulating it that its focus is on.
00:15:37 [W] Being a specification that is knative to communities its focus is on Lois. I'd said this before but lowest common denominator functionality or a different way of saying that is kind of focusing on
00:15:52 [W] Bringing forth apis that highlight and reinforce the most common use cases that servicemeshcon are being used for currently while leaving space and providing extensibility room for additional apis
00:15:56 [W] Other servicemeshcon tonality as more people adopt and more people make other use cases. Well well known.
00:16:03 [W] There are four specifications today.
00:16:05 [W] They're listed here one that defines traffic splitting and how traffic splitting can work so that you as a consumer are a user of a servicemeshcon configure and control a servicemeshcon
00:16:20 [W] Vacation for defining something like traffic splitting doing a canary and doing that in a universal way are doing that in a standard way.
00:16:32 [W] And so on for other use cases around access control and metrics and exposing and highlighting the the most the most common metrics than that people look at.
00:16:49 [W] Okay, if you're familiar with sonobuoy from kubernative Project or as a related project to kubernative is so no boy is a utility that's used to.
00:17:04 [W] Identify whether or not a kubernetes distribution of which at one point there was near a hundred.
00:17:11 [W] Maybe there's over a hundred now whether or not that distribution is in fact kubernative whether or not that piece of software that is labeled with kubernetes.
00:17:22 [W] In fact adheres to the kubernetes apis and and like I said is kubernative so
00:17:32 [W] Sonobuoy runs some conformance test the same thing is needed for SMI as a standard specification. It needs to Define what it means for a servicemeshcon. Now, I believe there are 7 of service seven servicemeshcon that
00:17:47 [W] claim compatibility with SMI
00:17:46 [W] And there's been a community effort open source effort to create servicemeshcon formance tests to assert whether or not a given servicemeshcon
00:18:01 [W] Open source effort to create servicemeshcon formance tests to assert whether or not a given servicemeshcon Pat about with SMI.
00:17:55 [W] And in order to facilitate those types of tests.
00:17:59 [W] You've got to have a tool to well provision. Those seven servicemeshcon to provision a sample application on those Services as to then generate load and test out whether or not traffic splitting.
00:18:14 [W] In on those services mirantis to then generate load and test out whether or not traffic splitting behaves like it should or works with that servicemeshcon implementation traffic splitting as an example.
00:18:29 [W] And so and then you need to be able to collect the results guarantee the provenance of those results and publish them and so as a community we turned to measure as the tool to implement SMI conformance and
00:18:45 [W] With the individual servicemeshcon to validate their conformance.
00:18:51 [W] and so let's take a moment to
00:18:54 [W] do a demo.
00:18:55 [W] Let's take a moment to look at what that looks like to validate conformance in.
00:19:02 [W] SMI
00:19:05 [W] using measuring so
00:19:09 [W] What I'm going to do here is use measure as the tool to validate that conformance will come over and spin up measure e locally so we use mesh Ricci TL as the command line interface to work with measuring.
00:19:26 [W] That command line interface will do a mystery CTL system start it'll update the latest and greatest measure e start that up open up your browser and drop us in here.
00:19:39 [W] We can interact with a number of different servicemeshcon.
00:19:50 [W] Open servicemeshcon.
00:20:03 [W] I'm on a Mac.
00:20:05 [W] I'm running Docker desktop. I'm running kubernative inside of Docker desktop.
00:20:09 [W] And I should be running a relatively clean system lets a fairly fresh install just kubernative.
00:20:13 [W] We are connected.
00:20:14 [W] Let's go over to open servicemeshcon.
00:20:22 [W] Osm should you know installs fairly fairly quickly as that does we'll go ahead and get familiar a little bit with some of the other operations. We can perform here specifically on SMI conformance.
00:20:34 [W] And so one of those operations is to validate our
00:20:40 [W] Servicemeshcon figuration are conformance.
00:20:43 [W] It looks like osm is coming up here.
00:20:44 [W] Looks like we're up up up.
00:20:48 [W] And we'll initiate conformance testing. There are what I lose count of how many conformance test that there are currently defined the conform the test assertions that are
00:21:03 [W] Are not a complete spec so they will address all four of us semis apis.
00:21:01 [W] But the conformance tests are a work in progress. And so
00:21:07 [W] As such we will show the current set so it's so right now that those are being run. I'm going to go ahead and take a look at.
00:21:18 [W] Some prior tests that were run just a bit ago.
00:21:22 [W] So these were run earlier on open servicemeshcon.
00:21:47 [W] Conformant and I wouldn't reflect on osm in a negative way here. The conformance tests are early and so really is the notion that each of these meshes needs
00:22:02 [W] here to a certain set of assertions so
00:21:48 [W] Measure e then collects these results and will eventually be publishing them in combination with the SMI project.
00:21:59 [W] So
00:22:03 [W] nice SP.
00:22:06 [W] It's our next specification. Our next standard SMP is servicemeshcon formance.
00:22:13 [W] You know, it's very frequently been the case that as I engage in speak with people about servicemeshcon.
00:22:19 [W] They are concerned about overhead of a mesh and you know rightfully so servicemeshcon do a lot and the more that you ask any particular pieces of infrastructure to do the more CPU and memory that
00:22:34 [W] Pieces of infrastructure to do the more CPU and memory that you would expected it consumes.
00:22:38 [W] As such really trying to characterize.
00:22:43 [W] the performance of your infrastructure of a servicemeshcon
00:23:13 [W] published results about performance some that don't but what you'll find is that they're probably using an environment that isn't necessarily like yours and they're also using different statistics and metrics to measure themselves, and it's
00:23:29 [W] kind of
00:23:31 [W] doesn't help.
00:23:34 [W] And so SP. It was born in combination with in engaging with a few of those different servicemeshcon Lantern owners and creating a standard way of our ticket capturing articulating
00:23:50 [W] the mash
00:23:51 [W] in a future discussion.
00:23:53 [W] we'll talk about meshmark. If you want to learn about what meshmark is visit the specifications website, you'll you'll see the it gets kind of maybe more interesting than you might think its first of
00:24:08 [W] Really rather challenging and somewhat intriguing how many things you need to measure and keep track of it's not just the mesh.
00:24:02 [W] It's not just the meshes version or it's workloads or how many clusters you have the size of the Clusters the type of nodes all these things.
00:24:11 [W] It's all of that.
00:24:13 [W] It's also the type of infrastructure that I'm sorry the type of way in which you're configuring your control plan or your servicemeshcon.
00:24:26 [W] Client libraries to do some servicemeshcon.
00:24:30 [W] Ality.
00:24:32 [W] Maybe you're using those in combination with the servicemeshcon. Maybe not what costs more what's more efficient?
00:24:37 [W] What's more powerful?
00:24:39 [W] These are all open questions that SP assists in answering and assists and answering in your in your environment.
00:24:46 [W] Maybe you're using webassembly and filters there. Well, what's more efficient should you implement retries as
00:24:55 [W] Apple or authorization in one versus the next is one more powerful.
00:25:00 [W] What's the overhead of using one?
00:25:04 [W] So there's a lot of approaches here to how you derive that value and how you put that value to work.
00:25:12 [W] So for example, yeah, so there's a few examples here about path based routing and context-based rounded like just different load balancing algorithms.
00:25:21 [W] I wish you can enable that in the mesh is pretty fantastic.
00:25:20 [W] You'd be surprised by some of the results of some tests that we've done and that the community is done in combination with a couple of universities and graduate students.
00:25:33 [W] We actually showed some of those results last Cube Connie you we are going to do a short demo of SMP now.
00:25:44 [W] Okay, so I'm going to demonstrate servicemeshcon formance or more specifically.
00:25:50 [W] I'm going to show you the implementation of servicemeshcon formance as Lee told you that mystery the servicemeshcon achievement plane is the canonical implementation of the servicemeshcon formance.
00:26:02 [W] So on my terminal I have a local deployment of Machinery running you can also deploy my Xian kubernative as well as the vendor kubernative platforms like a k8s.
00:26:14 [W] EK s and D CP or you can use a talk rice container to and machinery.
00:26:21 [W] I also have my kubernative peas.
00:26:25 [W] on Docker desktop where I can just play the configuration and you can see
00:26:31 [W] all my kubernative. He's I have open servicemeshcon Lloyd.
00:26:37 [W] And yep, you can see all the pods are running controller Griffin a Prometheus instances.
00:26:43 [W] Like EK s EK s and GC P or you can use a Toc ice container to and machinery.
00:26:42 [W] I also have my kubernative E's.
00:26:45 [W] on Docker desktop that I can just bring the configuration and you can see
00:26:52 [W] all my kubernative. He's I have open servicemeshcon Lloyd.
00:26:58 [W] And yep, you can see all the pods are running controller Griffin our communication senses.
00:27:03 [W] So let's jump into the demo and see how I simply speak works.
00:27:09 [W] So the machine you eyes is exposed at 9:08 one port if it was just going to Performance this section.
00:27:16 [W] This is the UI which is used to instantiate a Lotus.
00:27:22 [W] we'll just performance Benchmark or osm control pin quickly.
00:27:28 [W] Open servicemeshcon.
00:27:30 [W] So where is the URL that I have exposed the open servicemeshcon?
00:27:49 [W] All of these no generators have their ones.
00:27:52 [W] Set of attributes which they record correctly and each of each of its attributes have their own significance. So let's just do four diodes and start this test.
00:28:08 [W] While doing the test. Let's see what other options we can expose in machinery.
00:28:14 [W] So in the advanced options, you can even say
00:28:18 [W] You can even tell what header should be passed by testing your services or servicemeshcon Intel them the cookies you can the content I and you can tell the request body, which should be passed while doing the performance test.
00:28:32 [W] Then it should be completed.
00:28:36 [W] Okay.
00:28:37 [W] performance test
00:28:39 [W] and then it should be completed.
00:28:43 [W] Okay.
00:28:45 [W] So here is the output of the photodiode don't generator and you can see the output is in for die or format.
00:28:54 [W] And you can actually download the test results from here or you can just browse into the results Tab and you can see all of the tests you which you have learned in them.
00:29:05 [W] So now we will be using night. Hope to generate the node and Benchmark the service for the same and later onwards you will be seeing how different generator generates the load and how servicemeshcon
00:29:21 [W] Interprets the load generated using different performance using different loads and reviews.
00:29:27 [W] so
00:29:31 [W] some control my cock.
00:29:42 [W] Is the endpoint URL which I used earlier.
00:29:45 [W] For Tayo, let's start this.
00:29:51 [W] So Nighthawk is the load generator, which is maintained by Envoy community and it is relatively new and it still hasn't got its 1.0 release, but right now Night Hawk has sufficient
00:30:06 [W] So Nighthawk is the load generator, which is maintained by Envoy community and it is relatively new and it still hasn't got its 1.0 release, but right now Night Hawk has sufficient
00:30:27 [W] The compete with different generators which are still in the play like it can generate a grpc server. It can generate a grpc service on its own and it has some more attributes which you can expose using their
00:30:42 [W] tributes, which you can expose using their CLI, dude
00:30:55 [W] Yep.
00:30:57 [W] So here's the load test.
00:31:00 [W] And here's the result which was generated using my talk.
00:31:04 [W] You can also see that Machinery has the capability to search your environment and see what specifications are using.
00:31:13 [W] And what's the load on your communities. So let's jump into the results Tab and see how we compare with the stresses.
00:31:28 [W] So he is the one which I've done using my talk, and he is the one which also in here saying for dial if I select the Nighthawk when and if I click on the download you will see that
00:31:43 [W] already the
00:31:45 [W] SMB format, but you can browse over here.
00:31:52 [W] The yongle you see that start time no time.
00:31:57 [W] The performance latency is the my tricks the environment are being captured.
00:32:04 [W] We plan to capture more details according to the specification. We have specified in the servicemeshcon formance repo.
00:32:14 [W] You can just go into the repo and see what all attributes we are planning to capture.
00:32:22 [W] One more interesting thing which we have about mushy over here is if you see the following result.
00:32:30 [W] And what I can do is I can just select the results and I can just compare them.
00:32:38 [W] so over here if you see the
00:32:41 [W] Graph a W-9.
00:32:44 [W] This is the elotl which was using the for download generator.
00:32:48 [W] And if you see be the orange one, this was the Lotus which was then using Nighthawk.
00:32:58 [W] You also have a WR K to performance test which you can see over here.
00:33:04 [W] Very good.
00:33:06 [W] Times the abstraction is a bit too abstract for me.
00:33:04 [W] It becomes pretty obvious how SMP facilitates confidence and efficiency and how it is that people operate a mesh.
00:33:18 [W] Our next specification to discuss is Hamlet.
00:33:23 [W] We mentioned Hamlet earlier. We talked about briefly about Hamlet's focus on servicemeshcon duration Hamlet's an important specification.
00:33:36 [W] I consider in and like I said before in a lot of respects I consider that you might think of it as service catalog Federation.
00:33:45 [W] Like the other specifications Hamlet is defines API interfaces to apis in Hamlet at the moment.
00:33:57 [W] One is the Federated resource Discovery API.
00:34:01 [W] The other one is the Federated service Discovery API, there is much Discovery that's happening in these apis.
00:34:08 [W] That's intentional.
00:34:09 [W] The intention here is to marry up connect to
00:34:15 [W] Two disparate servicemeshcon plummets those deployments might be of the same type.
00:34:19 [W] They might be of two different types.
00:34:21 [W] Defines API interfaces to apis in Hamlet at the moment one is the Federated resource Discovery API.
00:34:25 [W] The other one is the Federated service Discovery API, there is much Discovery that's happening in these apis.
00:34:32 [W] That's intentional.
00:34:33 [W] The intention here is to marry up connect to disparate servicemeshcon plummets. Those deployments might be of the same type. They might be of
00:34:43 [W] two different types
00:34:46 [W] Hamlet takes on a client-server architecture in which resources and services of one servicemeshcon discovered registered and using a common.
00:35:17 [W] Resources and services of one servicemeshcon discovered registered and using a common format information about them is exchanged between different servicemeshcon.
00:35:47 [W] Trevor here and the services that is running another team that controls this one the ability to identify.
00:35:57 [W] Rules around authentication and authorization rules around which Services get exposed and to whom and who can who can communicate with them and whether or not they can do it securely these are things that Hamlet addresses so
00:36:13 [W] Shinto SM is MP and Hamlet there have been an emergence of servicemeshcon turns patterns by which the way in which people are running an operating.
00:36:42 [W] Well, I helping identify those patterns of which there's a list right now unbeknownst to you.
00:36:48 [W] This is a clickable hyperlink that when you have access to the slides, you can click on if you don't find the slides reach out to Kosh reach out to myself or better yet reach out and join into the servicemeshcon.
00:37:04 [W] Working group all are welcome.
00:36:58 [W] You don't have to be a member of the cncf to participate but come join in and help us work through the 60 patterns that are defined right now 30 of those are going into an O'Reilly book called servicemeshcon turns
00:37:14 [W] Now 30 of those are going into an O'Reilly book called servicemeshcon turns with that.
00:37:14 [W] It's been wonderful talking servicemeshcon you talking abstractions and specifications?
00:37:21 [W] Thank you for your time cushion.
00:37:23 [W] I will be in the chat ready to field your questions if we are out of time and we don't get to them come join the layer 5 Community come join the slack. There are each of the servicemeshcon
00:37:38 [W] Going the slack. There are each of the servicemeshcon. We've discussed today.
00:37:44 [W] There are representatives of those in the community and there are many people who have adopted and are operating servicemeshcon in that Community as well. So a lot to be shared and to share
00:37:58 [W] Okay.
00:37:58 [W] Thanks a lot. We'll see you in the chat.
