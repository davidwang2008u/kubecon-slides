Standardizing Cloud Native Application Delivery Across Different Clouds: HYJF-9199 - events@cncf.io - Thursday, November 19, 2020 5:42 PM - 39 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Do you prefer to use kubernative draw so llamo, or do you prefer to have a platform on top of it? If you choose letter I'll be very happy to introduce to you. My project could be either if you choose a former. I'll still try to convince
00:00:15 [W] Hi, I'm Andy shoe from Alibaba cloud.
00:00:18 [W] This talk is about standardizing Cloud native application delivery across different clouds a little bit background of who are we we are platform Builder and our customers are and developers application developers,
00:00:33 [W] We have a large team. We have people working on kubernative.
00:00:18 [W] He's directly we have teams working on past and we also have infrastructure operators and our customers our internal customers, which is the e-commerce sites of Ali Baba. So we maintain some
00:00:33 [W] Artists kubernative cluster more than 10,000 nodes. Also.
00:00:36 [W] We are the p.m.
00:00:37 [W] That's on the Alibaba Cloud which serves a public as public Cloud offerings. And what do we build we build platforms basically extending kubernative and we serve both the
00:00:52 [W] External customers are public Cloud customers and private Cloud customers and internal business units as well.
00:00:56 [W] So our infrastructure is a hybrid infrastructure. We have Cloud infrastructure. We have I'm Pam and we have hybrid Cloud Solutions as well.
00:01:07 [W] But mostly our past our wide range of platforms basically ranging from the full-scale pass to lightweight serverless and middle webassembly.
00:01:18 [W] Form and we also have things like eda's which is Enterprise distributed application service.
00:01:25 [W] So all these different flavors, but they all share a lot of features that are common and maintaining so many different versions of the same feature really is painful and that's why we are looking
00:01:40 [W] Better approaches to solve this problem.
00:01:41 [W] But before we get to the solutions, I think one other question people always ask is why do we build platforms?
00:01:49 [W] Well, like I said in the beginning if you prefer to use yellow that is just a small percentage of users the majority of developers prefer to not directly dealing with kubenetes
00:02:04 [W] Mo but because of the exposure of kubernative capabilities right now is very primitive.
00:02:02 [W] Imagine less right instead of using Linux shell commands you have to use Cisco iOS to increment the same features and you need to change the different Cisco iOS together just to implement one function.
00:02:16 [W] that's worth kubernative says right now so majority of our users which are applications.
00:02:24 [W] And developers. They prefer the application Centric way meaning that they don't really care about the cluster and a lot of tools are platforms.
00:02:33 [W] They will provide this cluster Centric or infrastructure Centric view of how many deployments you have how many other things that's in your custard, but for
00:02:49 [W] They care about is my application. Right?
00:02:48 [W] What they want to have is to just shift your code build it package it and deploy it they really don't care about the cluster or infrastructures that you so a lot of our efforts also
00:03:03 [W] Making the application Centric API or making the every Century application center abstractions and application-centric user interfaces basically do a lot of modeling. So I guess what
00:03:09 [W] Interfaces, basically, I do a lot of modeling. So I guess what I just described the problems and the goes a common amongst many many different tools or
00:03:18 [W] Common amongst many many different tools or platforms.
00:03:26 [W] Everyone is trying to manipulate the kubernative.
00:03:30 [W] Zpi some way so that it's more acceptable to the developers and everyone is struggling with trying not to reinvent the wheels as we often say so let me give you
00:03:46 [W] Is that it's more acceptable to the developers and everyone is struggling with trying not to reinvent the wheels as we often say so, let me give you a little.
00:04:21 [W] Of taste of what could be the does before we move on to explain how we are doing it and this demo is I would say the first demo of cube be less.
00:04:34 [W] So if you see it and feel like it's not very impressive.
00:04:39 [W] totally understand but I would like to tell you that inside of Ali Baba so many different platforms. We are building this together so in-toto
00:04:50 [W] In the short-term. We should see a huge difference.
00:04:55 [W] Let's get through the demo.
00:04:58 [W] So Viva workloads will show you the works of types that's available.
00:05:04 [W] So these are the basic types of the back end is the work that would that doesn't open a service that doesn't open the port the web service on the other side.
00:05:16 [W] We just open a port.
00:05:20 [W] what web service will do is going to create a deployment and a service with a port right?
00:05:27 [W] Backhand with only have a deployment on the kubernative, but we do not expose these apis to the users task is a job for kubernative.
00:05:41 [W] Service that doesn't open the port the web service on the other side.
00:05:46 [W] We just open a port.
00:05:50 [W] So what web service will do it's going to create a deployment and a service with a port right back and with only have a deployment on the kubenetes, but we do not expose these.
00:06:44 [W] To or from kubenetes workers, but they are not really correlated. It can be customized and we're going to see it and another to another command we're going to see is via the trades.
00:07:00 [W] And that's gonna show you all the available trades that you can add attached to the components and here on the right side.
00:07:09 [W] You can see what kind of what type of workloads this can apply to you and it is a convenient way to show you but we think it would be
00:07:24 [W] Have a in conflict with so some trades are in conflict with another so we need to know like in description.
00:07:33 [W] what is available if we have added one trade if the next one will have any conflict or not.
00:07:43 [W] But anyway, so that's some useful commands that we can use with speed up, but we can check how many commands available so if we just type
00:07:54 [W] Pthey that we can see there are a lot of them, but they're pretty concise.
00:07:59 [W] have the minimum information that's going to show be printed because we don't want to overwhelm users.
00:08:12 [W] And it has created an app and the component is a look at this.
00:08:18 [W] This is how we Design This command line we say comp and we specify.
00:08:26 [W] The type of the workloads and the image and the port we want to expose and of course, it's web service so you will see.
00:08:38 [W] A deployment and a service and at last we say it's the app name is my app.
00:08:46 [W] Let's do it.
00:08:38 [W] The this command line would be more cubism because it's going to be Vida create app my app and then Vida app my app add comp or deploy
00:08:53 [W] But nevertheless it really is absent review or absent Rick way of doing things.
00:08:47 [W] So let's take a look at this app Villa.
00:08:53 [W] App status it's going to show you the this application.
00:09:00 [W] So yeah, so as you can see it shows you this application how many components it has and also it has the house check but this house check though is not always reliable because some pause or
00:09:15 [W] I have this house check. So here you're going to see some area information.
00:09:17 [W] So that's something we need to work out.
00:09:20 [W] Okay, so we've done with the demo and I hope you like it and enjoy it.
00:09:25 [W] I would like to tell you more about this platform.
00:09:29 [W] So who is it for?
00:09:30 [W] It's mainly for developers write the developers our users our customers, but it's also for platform Builders. Let me explain a little so for developers what we provide is
00:09:43 [W] Is the traditional people are familiar with those pipelines where you can ship your code and build it and deploy it and release it and operate on top of it right in terms of operation.
00:09:57 [W] We're talking about kubernative is capability like traffic shifting adding a domain adding T is doing Canary deployment cetera.
00:10:08 [W] All these things we can do it.
00:10:10 [W] But so do all the other platforms.
00:10:15 [W] But for plan will Builders you're always to question to answer one is how do you make that opinionated approach of your presentation layer? And the second one is how do you assess
00:10:30 [W] On of your presentation layer and the second one is how do you assess absorb the new features new capabilities that's emerging every day from the community.
00:10:33 [W] So kubelet leads to Problems by adopting what we call the OEM openebs occation model what it does is it allows new capabilities to become building
00:10:48 [W] That platform users don't have to reinvent the wheels. They can focus on how to present them.
00:10:56 [W] Even though the features look similar or actually the same representation can be hugely different. Like we've just saying our use cases we have passed and files or serverless
00:11:11 [W] So they're using the same features.
00:11:11 [W] How do you present them to the users? That's another problem?
00:11:14 [W] So cute Vida is aiming to help platform Builders to alleviate that pain to adopt new features and presenting them easily to the customers.
00:11:28 [W] I would like to tell you about the three design principles of kublr a number one is its application Centric so it's built for the developers.
00:11:41 [W] So we definitely put developers interest.
00:11:45 [W] And the top priority education should be the main API that exposes to users so we don't have things like deployment replica set all those apis from different packages.
00:12:00 [W] It's all about your API applications.
00:11:59 [W] And the second principle is we believe that it should be capability oriented. So each feature each each new feature can be added or old features can be deprecated.
00:12:14 [W] without breaking the build without breaking what we have here and also you should be able to swap out certain capabilities those building blocks without even changing the look and feel of your product
00:12:20 [W] Something we really are trying to make a difference and the third principle is it should be highly extensible especially for its user interface.
00:12:29 [W] So what we are talking about is we want to decouple the user interface from the underlying apis that's one and also it should be highly extensible. So we just talked about
00:12:44 [W] Underlying apis that's one and also it should be highly extensible.
00:12:48 [W] So we just talked about how painful it is to build an opinionated approach a pipeline. Right? So you always lose some customers in that process.
00:13:01 [W] What we want to do is to have a very flexible structure that you can satisfy most of them all if not all of them spire.
00:13:11 [W] By extending your GUI by keeping different provisions of the look and feel of your apis and serving them to your customers.
00:13:21 [W] So that's the three design principles of Kavita.
00:13:25 [W] So next let's look at a simple diagram of QV Le in this diagram.
00:13:34 [W] We are seeing that the user will interact with with QV de SU.
00:13:41 [W] Weezer's GUI that we built and also through a CI that give people the flexibility if they have something simple to change your simple to deploy and also we would have
00:13:58 [W] the simple diagram of kublr
00:14:25 [W] The F5 to deal with complicated more complicated user configurations. Now what we have for the users is they're dealing with applications, right?
00:14:40 [W] So they're dealing with workloads and traits what our work those workloads are things that's runnable.
00:14:47 [W] be a part of it can be a task. It can be a job right and it can also be a remote.
00:14:56 [W] Out of service what are traits traits are operations that you want to attach to the workloads things like skating rollout routes etcetera.
00:15:07 [W] These traits don't exist by themselves.
00:15:11 [W] They have to be tied to a workloads.
00:15:26 [W] The things that's coming out of the community, right?
00:15:31 [W] We have Flagger. We have Kedah. We have nginx Etc very rich, but you can also Define your own controller or crd and we can shape them into the building blocks of Trades and
00:15:47 [W] Out routes etcetera these traits don't exist by themselves.
00:15:51 [W] They have to be tied to a workloads.
00:16:15 [W] Hydra very rich, but you can also Define your own controller or crd and we can shape them into the building blocks of Trades and Supply them to to the customers.
00:16:31 [W] So that's really what could be the in a nutshell look like and we briefly talked about the app file.
00:16:41 [W] What is the F5 if you take a look at this on the end file, you're going to say. Oh, wow.
00:16:48 [W] It looks a lot like dockerfile what actually Docker compose file.
00:16:52 [W] Yes.
00:16:53 [W] That's really the target.
00:16:55 [W] We want to bring in this Docker compose user.
00:17:00 [W] But if you look closely you can see that we have a lot more than what dr.
00:17:05 [W] Campos can do.
00:17:06 [W] We actually put traits or operational tasks inside this F5 so users can Define what their whole application look like and it doesn't have to be just one container. It can be
00:17:21 [W] Trades operational tasks inside zest F5 so users can Define what your whole application look like and it doesn't have to be just one container. It can be several
00:17:36 [W] Thank you.
00:17:36 [W] You can have a several components or several workloads and each one would have one or more trades that's attached to them.
00:17:46 [W] That's what this F5 should be.
00:17:50 [W] So on the right side, you're going to see a couple templates.
00:17:54 [W] So these are the templates we talked about earlier.
00:17:58 [W] How do you manipulate the user interface?
00:18:02 [W] So we use the same card?
00:18:05 [W] You template to generate these templates and to evaluate them the good part of this is that when you change the template, let's say you create a new template it it would not need any
00:18:20 [W] Stuart directly appear on the API and also on the gooey and you can use them directly in your F5 this F5 will be evaluated strictly using
00:18:33 [W] And and the good thing about of the template is it decouples from the API itself?
00:18:29 [W] Right? So so in the definition part on top of the template, you're going to see typical kubenetes apis, right? It's there's a kind there's a group is
00:18:44 [W] Are translating them into templates.
00:18:45 [W] You don't have to follow that you can Define your own you can even negotiate with your developers what they like to cause it those terms and then put them into the F5.
00:18:56 [W] So in the end as a result what we have from the F5 is that the F5 looks nothing nothing like a kubernative CMO far right?
00:19:08 [W] And that's the beauty of what we are doing.
00:19:11 [W] Next let's take a look at the architecture diagram of kublr.
00:19:40 [W] Projects will be estate and all these projects will provide cri-o is or operators. Right and those crd is and also with some buildings here are the controllers from kubernative itself.
00:19:56 [W] Will be shaped into the building blocks, which will be the workloads and the traits to the user.
00:19:59 [W] There's another layer of abstraction, which is where we just talked about the queue template.
00:20:04 [W] So by using that it's decoupling again from the apis and it provides a user very user friendly application Centric View and also to the
00:20:19 [W] Don't have to be bound by the API terminologies.
00:20:11 [W] So the users can choose to use from at file or cri-o or using the GUI if they liked you to interact with the system the platform one thing I would like to point out is
00:20:26 [W] Listed project cross playing here.
00:20:25 [W] So what prosperous playing does for QV that are two things one is it provides the infrastructure resources or Cloud resources the managed Cloud resources?
00:20:39 [W] that's right term to Kavita and B is it also hosts the OEM runtime the openfaas in model runtime.
00:20:50 [W] It's very important. And also I would like to point.
00:20:52 [W] point out that there's a CRT registry something we want to have actually we call that the capability registry so we can keep track of or manage
00:21:08 [W] Capabilities that we have inside of Cuba. So this is basically what the architecture of QV looks like if we reflect them back to the three principles we can see
00:21:20 [W] The app Centric View and it gives us the extensibility that we are looking for both on the UI side and also on the capability side.
00:21:25 [W] Also, we have the capability oriented architecture where the building blocks can be added or removed from our QB the system without breaking the others.
00:21:41 [W] In summary Cube. Theta is a project for developers provides accent Rook platform, and it's very easy to ship application, especially account native application
00:21:56 [W] In summary Cube. Theta is a project for developers provides eccentric platform and it's very easy to ship application, especially account knative application
00:22:21 [W] His kubernative Custer's for perform Builders at Stylee extensible and it's simpler to maintain especially when you're talking about adding new features on day two current
00:22:36 [W] We are still in a pre-release stage. So if you try it probably something will break but hopefully not we have a roadmap.
00:22:50 [W] We would like to have a 1.0 released on December and current features that's available would be F5 and cri-o. I and dashboard is still working progress
00:23:05 [W] Have a couple of workloads defined already.
00:23:06 [W] So I would like to stress here that for each and every project. There are three different perspectives the if envisioned features of the beauties of those projects, right
00:23:21 [W] Status quo what's incremented what has been done in what way that's presented of this project and also the perceived features of this project by the users.
00:23:34 [W] There are three stages on three different perspectives.
00:23:37 [W] What we want to have is of course to consolidate them and into our own envisioned version of this project, but right now, I think it's too early. So what I would
00:23:50 [W] Would encourage or I would hope for you guys is to not jump to conclusions too fast. If you feel interested in this project come and join us.
00:24:03 [W] We have a community call every two weeks. If you check the website the links here, there's a stack there was a gator and we welcome everyone to join us
00:24:18 [W] Stress that Cube Vida even though I'm from Alabama crowd, but this project is truly open source. And from Day Zero is a zero. There are bootstrapping engineer's from eight different.
00:24:30 [W] So it's truly by the community a lot of people feel the same pain.
00:24:25 [W] They want to do the same thing and we are doing this together.
00:24:29 [W] So we hope more we could be joining us and we hope this project will provide enough benefits to the users of kubernative. Thank you.
00:26:24 [W] I'm Charles.
00:26:25 [W] Yes.
00:26:27 [W] Yeah.
00:26:34 [W] So do I need to read it or we'll just like I can just test a type it.
00:27:22 [W] One two three.
00:27:24 [W] Hello. So I'll just try to like read those questions and answer them like one by one.
00:27:30 [W] So first of all, so this providing another layer on top of prodyna xaj, so did the water plus.
00:27:38 [W] Yes, like so for us like kubernative itself is very low level. It's like classic we abstraction of who were all the infrastructure like you can use kubenetes are different.
00:27:50 [W] You're like you can use kubernative different Cloud platforms. You can use criminals on-prem like basically of stress all those compute storage networking on top of it, but I thought if we want to build applications, we see me and Leo to see
00:28:05 [W] This is all the capabilities and all the chief operational treats. I reset the application needs.
00:28:11 [W] That's why we feel Vanna and OEM to like to describe applications.
00:28:19 [W] And another thing is like om itself.
00:28:21 [W] It's a open and extensible format.
00:28:24 [W] We don't want to build a thing that's very in-house and very specific.
00:28:30 [W] want this thing to be indispensable just like what we have in with Kuma.
00:28:33 [W] openfaas
00:28:36 [W] Okay, and let me assure you could balance support module kubermatic costume like red hat openshift.
00:28:49 [W] Yeah, of course, like I think invalid there are two part of that.
00:28:54 [W] But the first part is about it's about the water plus like we do more and more developer tooling that that's easier for the workers to boost your and deploy.
00:29:05 [W] act for the other end is the platform like we want to include those reforms different kinds of past performance to adopt to this bivariate model to include their capabilities in so basically you have a very
00:29:21 [W] Yeah, of course, like I think the invalid there are two part of that.
00:29:25 [W] but the first part it's about it's about the what of us like we feel more and more developer tooling that that's easier for the workers to boost your and deploy their apps for the other end is the platform like we
00:30:14 [W] And that like it has a some something we call Coffee chats.
00:30:18 [W] That's very when necessary to run the minimum like app requirements and you can bring your employee like your capabilities like from opentracing from cancer from TKE inaudible.
00:30:32 [W] We also have a lot of some platforms called eat us like in Israel in China.
00:30:37 [W] There's some other people's want to adopt this thing to include it in house build capabilities into that as well. So those
00:30:44 [W] Platforms those capabilities will be extended into the platform using the OEM instructions and you can have a platform that has all the instructions describing all the capabilities and then those are is posed by our developer to well as if they were tooling abstractions
00:30:59 [W] Okay.
00:31:02 [W] So the first question, is there a guideline to judge whether to add a new tree or not.
00:31:11 [W] For example, how many user request new tradition for something like that?
00:31:16 [W] I don't cry.
00:31:19 [W] I understand your question hiroyuki.
00:31:21 [W] Could you follow up on the slack and to I overhear you? Can you get a bigger question of it?
00:31:28 [W] I will see you later.
00:31:28 [W] Bye.
00:31:31 [W] You just continue.
00:31:36 [W] Cute Valium work on a sure.
00:31:40 [W] Yeah, we are actually like working with Microsoft on this as well.
00:31:44 [W] I actually I actually like so where is a open standard that's initiated by Alibaba and Microsoft azure.
00:31:53 [W] So but a sure they are actually working something will be similarly the in like they're working together on this obstructions, but they have them published.
00:32:06 [W] The entire thing yet, like we are still continuing on this space and we hoped you liked So eventually we will have the same instructions corium on both like Azure and Alibaba cloud and on and then
00:32:21 [W] We also talked to many computers and companies. They also want to adopt this abstractions on top of their type long so that like they have a unified application Centric performs too many bills passed capabilities.
00:32:32 [W] For someone new to this is how is this compared with him or customers?
00:32:39 [W] Yeah, that's I got this question of so many times so it's pretty so like if you are like I think many people are confused with like, yeah all this like application development deployment truth.
00:32:52 [W] Like they all look similar to me.
00:32:55 [W] me. But if you dig deeper, it's very different. It's basically like if you think of him, it's just like
00:33:01 [W] Yeah, I have all those Solutions and I would assume styra package it and deliver it to it.
00:33:06 [W] They're actually like a fella or om applications with it can it can be packaged as a him and then I deploy to our Exton customers. That's what we did inside out of a car as well.
00:33:21 [W] well. But like if you're different that's a huge difference because m is just like oh, yeah, I have all this whole bunch of being a package it and we're going to ship it but where is well you dig deeper like
00:33:31 [W] And customize it and the other part of him besides packaging is about templating that this is something where we had something to do with the customers Sync aswell It's Bella managing configurations, like actually in in
00:33:23 [W] We like somewhat was youth if I application you can also use customized and Pam to patch things up before next two Springs.
00:33:31 [W] And also I use him templating or customized advantage of those conclusions and stupid to let your customers that's but let's it's just like I said different stages in application delivery workflow.
00:33:46 [W] Also, I saw a no on blue green and Cannery.
00:33:50 [W] Can you talk a bit more on how you are doing that?
00:33:55 [W] Yeah. Yeah, of course. So actually we are working together with Engineers from with they are working on something called flag.
00:34:07 [W] A flag is actually a true that's kubernative knative to do can we roll at night?
00:34:16 [W] We also have many departments challenges but quite but we all but recently we all moved to f***** and we are modifying a bit to set afire go but we are working reflected to merge all those things together and but basically
00:34:31 [W] Like these bagger and then we use all those capabilities to automatically do can we go out and step by step and then check for shifting other stuff all of the being automated automated.
00:34:45 [W] so
00:34:37 [W] so and there's a question.
00:34:40 [W] How do we keep up with?
00:34:46 [W] Cook newcomen's features.
00:34:48 [W] Is it why not now I can send as we are targeting for with more pink feather.
00:34:54 [W] How do we keep our new cloudevents features?
00:34:56 [W] So that is designed to work with like kubernative resources natively.
00:35:01 [W] That's a huge difference between Vela and other past platforms like it's so so in the OAS specification the format by the time is that it's actually natively support kubernative resources.
00:35:15 [W] Um, you can basically scan like any problem is resources into Bella and and like wrap it up in.
00:35:23 [W] Well, I obstructions using a chain of what low and then like a template to it's about you can think of like well as a prominent part in that make it kubernative powerfully to simplify application requirements.
00:35:40 [W] Have you considered to generate knative manifest out of your custom app definition?
00:35:46 [W] I think I like the idea of I think this is very similar to the previous questions.
00:35:53 [W] Your feet into Vala but like envelop. We also have some something we call the core the core capabilities, like if included some cold notes and trades those those core is something
00:36:08 [W] Minimum we were necessary to do application deployments and those things we just like have a building but we and also as well we can extend you understand any kind of resources in ravello.
00:36:23 [W] That's what we call inventions. But like that's how it works in general so that your questions.
00:36:29 [W] Yeah, I really do generated. So that's horrible. So white flag, what's the core benefit of flag?
00:36:38 [W] In this scope out like I said before so so there's two requirements like this.
00:36:45 [W] We want this whole thing to be automated and second light. It needs to be connected knative.
00:36:50 [W] That's what we did in Alibaba as well.
00:36:53 [W] But in other we have built all this kind of automation to and we and final part one big thing is like it's not open source here. So we are trying to add either way open source, or we work with some assistant bubble. We just came out and we found this.
00:37:09 [W] We talked to Engineers. We've they're open to like to collaborate.
00:37:13 [W] So we are trying to ideas black and much reflected to do all this kind of automatic go out.
00:37:21 [W] Okay, amazing privilege of thank you Dinesh.
00:37:24 [W] So this provide another layer on top of kubernative API server to developers.
00:37:32 [W] Yeah.
00:37:34 [W] Like actually like in most past performs.
00:37:38 [W] No, the was passed try computers don't expose kubernative had to users.
00:37:43 [W] actually that's that's what happens today.
00:37:47 [W] So what we saw is that like what they are be what many people commuting pass is that it's it's not extensible. You know, it's like a view of has its protections pretty specifics on my own. So it's very hard to say that
00:38:02 [W] I have passing hinges and I just take it and I didn't I I can get my fix on to it that that's very hard. So what umbrella we want to do is like we want to have something that's similar to this that you can you not read the application instructions, so
00:38:18 [W] You can supposed to uses the workers, but it's also extensible. So that's the difference.
00:38:27 [W] All right.
00:38:32 [W] I think I think that's pretty much it.
00:38:36 [W] So, so just finally I just want to thank you guys all for listening to this presentation.
00:38:42 [W] I also like just give a note that there's a website check out the website.
00:38:49 [W] you're going to go and give it a try and any kind of feedback just or welcome.
00:38:53 [W] give us some feedback and tell us what you thought and any anyone want to collaborate or more.
00:38:58 [W] Let's welcome. All right.
00:39:03 [W] I think I am done or the questions.
00:39:06 [W] Thank you guys all if you have further questions, welcome to ping me on slack on my email my GitHub handle or my curator. Thank you.
