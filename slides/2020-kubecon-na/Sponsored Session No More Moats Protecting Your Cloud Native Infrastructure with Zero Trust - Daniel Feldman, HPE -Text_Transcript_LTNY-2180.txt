Sponsored Session: No More Moats: Protecting Your Cloud Native Infrastructure with Zero Trust: LTNY-2180 - events@cncf.io - Tuesday, November 17, 2020 1:02 PM - 35 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello, welcome to the cube con Cloud native cotton North America 2020 virtual event.
00:00:06 [W] My name is Daniel Feldman.
00:00:07 [W] I am a software engineer at Hewlett Packard Enterprise and I am so excited to be here today.
00:00:13 [W] Here's a preview of the topics.
00:00:15 [W] We'll be discussing today.
00:00:15 [W] First of all, what is zero trust?
00:00:18 [W] Why would you want it to protect your Cloud native infrastructure that will just take a few minutes, then we'll discuss spiffe e and Spire which are the cncf incubating Cloud native security projects that I work on every day that help you implement zero trust on your infrastructure.
00:00:33 [W] Next we'll discuss Building Systems with spiffe E. And Spire. This is where we'll go over some design patterns that we've learned from helping dozens of companies get started zero trust on their infrastructure next.
00:00:37 [W] We'll be discussing my favorite topic which is the roadmap for spiffe Ian Spire.
00:00:41 [W] This is where I get to talk about the features that I and my colleagues are working on for spiffe Ian Spire to make them better for everyone using Cloud native infrastructure to implement zero trust.
00:00:52 [W] Finally, hopefully by this point in the talk.
00:00:54 [W] I'll have convinced he has zero trust is a great idea and we'll discuss the next steps for getting started with spiffe E and Spire 0 trust security inside your organization most organizations today use something called perimeter Security in Perimeter security.
00:01:08 [W] You have a firewall and everything inside your firewall is trusted and everything outside. Your firewall is untrusted.
00:01:15 [W] So you have a bunch of internal servers.
00:01:17 [W] they're communicating with each other usually over unencrypted connections. Then you have a DMZ and that
00:01:22 [W] MZ contains your email server your web server your VPN server, and those are locked down and only have encrypted inputs and outputs to the outside world.
00:01:31 [W] And meanwhile, these internal servers can't accept connections from the outside world at all.
00:01:35 [W] Now this architecture was great 10 or 15 years ago and it evolved because most organizations started with no internet connection at all, and they just wanted to connect their internal Network to the internet and they did it in the easiest way possible.
00:01:48 [W] Business partners that need to access internal Services you have tons of stuff in the cloud in multiple clouds, you might have some stuff in Hazard or some stuff in AWS some stuff in gcp, you might have different regions within all those different clouds. You might have manage databases which
00:02:01 [W] External provider and those are really hard to get inside your firewall.
00:01:58 [W] So as we add all this stuff perimeter security becomes increasingly untenable.
00:02:03 [W] It's really hard to maintain and even if you do maintain it, it's insecure if you make a mistake.
00:02:11 [W] One of my colleagues Frederick outs likes to say we're protecting 21st century infrastructure with 14th century technology.
00:02:18 [W] We're building a moat around your network. Like it's a like it's a medieval castle so attackers can't get in but that's just not the right way to do things for the future.
00:02:29 [W] Zero trust means giving each service wherever it runs whether it's in the cloud in your data center in a SAS provider its own unique secure provable identity.
00:02:40 [W] And that's what I work on and that's what we're going to be talking about today.
00:02:43 [W] Smithy is the new open standard for how to implement a zero trust identity provider.
00:02:49 [W] It includes apis file formats and written English descriptions of how a zero trust identity provider has to work so that applications can talk to
00:02:57 [W] Any conformance spiffe implementation Spire is a production ready implementation of spiffe e both spiffe e and Spire independently are cncf incubating projects so you can go and get Hub join meetings
00:03:12 [W] Join meetings comment on proposals open issues maybe resolve some issues. We encourage everyone to get involved in this Vivian Spire open source projects.
00:03:21 [W] What are the key benefits of zero trust the first benefit and the one that most people care about is defense in depth.
00:03:28 [W] That means if one service is compromised the attacker can't use that service to move laterally within your network.
00:03:35 [W] The second benefit of zero trust is there's a reduced overhead for your security teams. Your security teams are manually maintaining that perimeter and creating and rotating credentials constantly for all your different Services because the zero trust identity provider is just giving all
00:03:50 [W] Service has their own unique identities.
00:03:52 [W] And the last benefit of zero trust is that Services can't operate at all without an explicit identity and then you can use that identity for observability and logging and this is really useful for your bigger companies that might have thousands of different services and they've
00:04:07 [W] Services are talking to which other services at which times or maybe they accidentally have some stuff in a Dev environment that's talking to a production database.
00:04:11 [W] You really don't want that.
00:04:12 [W] So the observability and locking benefit really benefits the the bigger organization now that we've talked about the key benefits of zero trust.
00:04:21 [W] Let's discuss spiffe e and Spire which are the cncf sponsored implementations of zero trust that I work on. Like I said before spiffe e is a standard for an application to use service identity.
00:04:32 [W] Provider and then Spire is a production-ready implementation of spiffe e that you can download and get started using both of them are open source projects in the incubation phase of the cncf.
00:04:46 [W] The spiffe E standard consists of four pieces. The first piece is the spiffe E ID which is a standard format for a service identifier.
00:04:53 [W] It looks like this and starts with spiffe e colon slash slash.
00:04:56 [W] Then there's a trust domain name, which is simply your company's unique name.
00:05:00 [W] Then there's another slash and then there's a unique service identifier and you can just be any string that makes sense for your company.
00:05:07 [W] So that's pretty simple. The next part of this day fee standard is a standard format for spiffe e-verify.
00:05:14 [W] Identity documents are estimates and an estimate is a cryptographically verifiable document asserting a specific spiffe Eid now, we actually support two different formats for these estimates. One is an x.509 certificate just a standard x.509
00:05:30 [W] With a certain field filled in it's a field that's used for other purposes with the spiffe Eid.
00:05:36 [W] the other format we support is Javascript web tokens or jobs and that's another standard format for cryptographically verifiable identifiers and
00:05:47 [W] it's really useful in certain situations where x.509 doesn't work.
00:05:51 [W] So we support both of those two formats 90% of the time nsmcon is in the x.509 estimate format.
00:06:00 [W] The next part of the stiffy standard is the standard format for trust bundles which are sets of public Keys used to verify estimates.
00:06:07 [W] So each trust domain will have a trust bundle and that trust bundle will contain the public keys that can be used to verify any estimates within that trust domain.
00:06:16 [W] So that's pretty simple.
00:06:17 [W] that's very simple similar to what your web browser has built-in or your operating system has built in your phone has built in to verify servers.
00:06:25 [W] It's just a standard format for those public keys.
00:06:30 [W] Finally the last part of this movie standard is the workloads API and the workload API is the most complicated part of the standard.
00:06:38 [W] This is a local API that workloads can connect to and retrieve their own spiffe e IDs their own assets and their own trust bundles. Now when I say, it's a local API, it's a Unix domain socket, which is a service that's
00:06:53 [W] By the Linux or Unix kernel then lets you create a server that sits there and accepts connections. And when anyone could x 2 it has to be a local connection.
00:06:52 [W] the colonel will provide the PID the uid and GID of the connecting process.
00:06:58 [W] So this lets any process connect to that workloads API and get the right identity identity for that process securely based on the security of the operating system. So at this point you might be thinking this looks a whole lot like traditional pki I've got something that's buildpacks.
00:07:13 [W] Physically a certificate and I've got something that's basically a root certificate bundle and you'd be right.
00:07:18 [W] We're using Open Standards here, but there's a key difference which is the S meds and Trust bundles are rotating frequently.
00:07:26 [W] They're rotating every couple of hours.
00:07:27 [W] So in traditional pki if you compromise the certificate if you're a bad guy you obtain a certificate that's really bad you have basically unlimited access to the identity of that certificate maybe for months or years.
00:07:41 [W] In spiffe E those estimates and those trust funds they're rotating every couple of hours.
00:07:46 [W] So if you compromise something the blast radius is very small. You only have a very limited window where you can actually access anything on the network now there is a big problem here, which is that you have to use the workload a pi in order to get your acid and
00:08:01 [W] I've got something that's basically a certificate and I've got something that's basically a root certificate bundle and you'd be right.
00:07:44 [W] We're using Open Standards here, but there's a key difference which is the S meds and Trust bundles are rotating frequently.
00:07:52 [W] They're rotating every couple of hours.
00:07:53 [W] So in traditional pki if you compromise the certificate if you're a bad guy you obtain a certificate that's really bad you have basically unlimited access to the identity of that certificate maybe for months or years.
00:08:07 [W] In spiffe E those estimates and those trust funds they're rotating every couple of hours.
00:08:12 [W] So if you compromise something the blast radius is very small. You only have a very limited window where you can actually access anything on the network now there is a big problem here, which is that you have to use the workloads API in order to get your asset and
00:09:52 [W] You can't just download the S fed download the trust fund elotl.
00:10:22 [W] Possible for generating and signing all the estimates in the entire system and then the Spire agent which sits on each node and is responsible for serving the workload a pi.
00:10:35 [W] When the Spire agent first starts up it performs a task called No data station in no data station.
00:10:40 [W] The agent proves the identity of the node to the Spire server.
00:10:44 [W] So if the agent is running on an Amazon ec2 instance, it can collect the ER ec2 instance identity document and send it to the Spire server. And that's a cryptographically signed document that proves that the node is Hua says it is if
00:10:59 [W] At a station in no data station the agent proves the identity of the node to the Spire server.
00:11:06 [W] So if the agent is running on an Amazon ec2 instance, it can collect the ER ec2 instance identity document and send it to the Spire server. And that's a cryptographically signed document that proves that the node is Hua says it is if
00:11:34 [W] Hardware maybe it gets a key from The Trusted platform module of that physical hardware and uses that to prove its identity to the Spire server. If it's running in kubernative kubernative Rook provides a mechanism for proving that a particular pot is running
00:11:49 [W] And it uses that to prove its identity to the Spire server.
00:11:53 [W] Once the Spire server has that information in some cases.
00:11:56 [W] It needs to talk to the API server for whatever platform you're running on.
00:12:00 [W] So for easy to this actually isn't mandatory, but it can collect some extra information from the easy to a pi server for kubernative.
00:12:08 [W] actually do have to take a token that's returned from the local node apis and then send that to the API server through something called the token review API and then the Spire server can guarantee that that Spire agent is running on.
00:12:23 [W] Note that it says it's running on.
00:12:26 [W] Right. Now we have implementations for a couple of different platforms Amazon web services ec2 Microsoft Azure Google cloud and kubernative and we're working on more all the time.
00:12:41 [W] Once note attestation is complete. The Spire agent has proven its identity to the Spire server and the Spire server has an entry in its database indicating for sure that that Spire agent is running on the expected node.
00:12:55 [W] Once that's complete we perform another task called workloads attestation.
00:12:59 [W] So first of all, the Spire server is constantly sending every Spire agent a list of all the workloads that are expected to run on that Spire Egypt, then when it workloads connects to the workloads API remember, it's an old local API that requires no
00:13:14 [W] Then the Spire agent checks the details of that workloads that's connecting.
00:13:18 [W] And checks it against the list of expected workloads gets the right spiffe.
00:13:23 [W] He IDs vids and Trust bundles for that workloads them over the workloads API. And remember this is changing constantly.
00:13:30 [W] It's changing rapidly.
00:13:31 [W] So it's constantly pushing these to the workload.
00:13:34 [W] And again, we support some platforms. We support kubernative. We support Docker we support wrong Linux processes and we're working on more all the time.
00:13:45 [W] So once you have one workloads that has its ass fed, trust bundle and spiffe Eid and then you do the same process on a different node to give it its estimate trust bundle and works. If you ID then they can communicate securely now
00:14:01 [W] Report wrong Linux processes and we're working on more all the time.
00:13:59 [W] So once you have one workloads that has its estimate trust bundle and spiffe Eid and then you do the same process on a different node to give it its estimate trust bundle and work the spiffy ID, then they can communicate securely now
00:14:32 [W] Specifying how are you communicate securely.
00:14:35 [W] Typically, this would be a mutual TLS encrypted connection, but there are other ways of doing it that make more sense in different contexts.
00:14:41 [W] So we're not a servicemeshcon.
00:14:43 [W] Don't route the traffic between the two nodes. All we do is allow you to prove your identity if you're one service in a multi service system.
00:14:53 [W] Now we have secure communication, which is the goal of a zero trust Network.
00:15:01 [W] Remember that we had specific platforms that we supported for no data station and for workloads attestation. It's important that Spire is a pluggable architecture.
00:15:10 [W] So we have all these plug-in interfaces on both the agent side and the server side.
00:15:15 [W] They'll let you add new support for new platforms as their as they're developed.
00:15:20 [W] So we have multiple workloads to test her plug in some for the operating system different container runtimes for the cubelet.
00:15:28 [W] You could add more there as especially as different container runtimes are developed or different workloads orchestration engines are developed on the both the Spire agent and the Spire server have noted tester plugins and you need a
00:15:43 [W] Plug-in on the agent side and the server side and these plugins can Implement different Cloud platforms.
00:15:49 [W] So if you wanted to support digital ocean, you could easily write a plug-in for that and we have existing plugins.
00:15:56 [W] Like I said for Google Cloud platform Microsoft Azure Amazon web services etcetera.
00:16:03 [W] Another type of plug-in.
00:16:04 [W] that's very important is called an upstream Authority plug-in and what this plug-in does is every time the Spire server needs its own new root certificate.
00:16:11 [W] It uses the Upstream Authority plug-in, which can then talk to some external service to get that root certificate for spire. And remember the Spire server is rotating its root certificate frequently every couple of hours.
00:16:23 [W] So it'll make this call pretty frequently. It's common to use the Upstream Authority plug-in to get a root certificate from something else that ties into
00:16:32 [W] Organizations pki infrastructure, if you have some standards in your organization already about who needs to sign certificates.
00:16:41 [W] Another option is actually using another Spire server as the Upstream Authority so you can have a nested tree of spire servers and we'll talk about that in a few minutes.
00:16:50 [W] Another important design consideration for Spire that you need to understand is that it's really designed for defense in depth.
00:16:58 [W] As because it's sitting on some Edge node that is poorly protected.
00:16:57 [W] But even if it can talk to the Spire server, it's not trusted to just request any estimate for the entire system as a very restricted list of estimates that it can request now that we've talked about spiffe e and Spire we can start talking about practical ways to use spiffe e and Spire within
00:17:12 [W] There are three main ways for a service to get its own s fed trust bundle and spiffe Eid.
00:17:09 [W] The first way is by directly accessing the workloads API and we provide libraries for Java and go that make that really easy and we're working on a python library and then your workload can just call a function and get its own estimate and then use that to establish.
00:17:24 [W] that make them really easy and we're working on a python library and then your workload can just call a function and get it so nested and then use that to establish Mutual TLS connection or present that to other services as proof of its identity
00:17:37 [W] Tool TLS connection or present that to other services as proof of its identity.
00:17:41 [W] The second way is for workloads that you can't easily modify and that's to use an Envoy proxy and not Envoy proxy then talks to the Spire agent and gets the S vid and uses that for incoming and outgoing communication
00:17:56 [W] The acid and uses that for incoming and outgoing communication and optionally in this configuration, you can use open policy agent to make authorization decisions.
00:18:07 [W] This is actually a really useful design pattern because open policy agent supports a wide variety of flexibility for which spiffe e IDs can talk to your workload using a very fancy configuration language called Regal so then you can Outsource
00:18:22 [W] Outsource all the responsibility for deciding who gets to talk to your workload to open policy agent, which means your workload doesn't have to worry about it and you can change it and configuration files instead of in code.
00:18:34 [W] So this is actually the most common way right now to use spiffe e identities within your infrastructure and then the last way this is a little bit more rare but this is really good for workloads that already provide their own authorization framework in particular
00:18:50 [W] Workloads that already provide their own authorization framework in particular databases like postgres.
00:18:56 [W] This is called the spiffe E helper, which is a process that we provide that talks to the Spire agent over the workloads API, it gets your estimate and Trust bundle and then it feeds that into the workloads using a script and it
00:19:11 [W] L script that's really easy to write. And again, this is really useful for databases like postgres that already have their own concept of users with different levels of access permission because then the spiffe E helper can just map those estimates
00:19:26 [W] And map those to users with with different permission levels within the database now that we know the basics of using spiffe Ian Spire identities in your workloads.
00:19:35 [W] We can talk about some zero trust design patterns that I think everyone should know about in order to take the most advantage of spiffe Ian Spire in their environments.
00:19:44 [W] The first design pattern is high availability.
00:19:46 [W] Spire server is actually stateless. It stores everything in a data store and we support several different types of data stores if you use a high availability
00:19:56 [W] The store then you can run multiple copies of spire and multiple instances of that data store and have an active active High availability configuration.
00:20:05 [W] So this means that if Spire server one or data store one or Spire server to or data store to crash or the instances that are on get deleted or all kinds of different things can happen then spire.
00:20:20 [W] Run, this is really important because Spire needs to be high availability. If Spire goes down then very quickly.
00:20:29 [W] Those estimates are going to start to expire and your workloads will no longer be able to communicate with each other.
00:20:33 [W] So it's very important that the Spire server is be deployed my availability configuration.
00:20:39 [W] So this is one design pattern that I think every organization that is looking at spiffe e and Spire needs to think about you can have these different Spire servers and different availability zones or running on different tracks if you're on physical infrastructure, so they're less likely to fail together
00:20:56 [W] Down your whole spiffe the identity infrastructure.
00:20:55 [W] The next design pattern I'd like to talk about is using separate trust domains for separate environments with separate Spire servers, so you can have a Devon environment with one Spire server and a prod environment with a different Spire server.
00:21:07 [W] And then these the workloads in the dev environment won't be able to talk to the prod environment workloads because their estimates won't validate against each other.
00:21:17 [W] So this is really useful. If you have multiple environments that need to be completely isolated, even if they're running maybe on multiple different cloudbees.
00:21:25 [W] Multiple different on-premise servers multiple different kubernative clusters. It would be challenging to isolate that normally but by using separate Spire servers, you can have completely separate trust domains and completely isolated environments.
00:21:39 [W] This is one of the key advantages when you're just getting started with stiffy and spire.
00:21:45 [W] The next zero trust design pattern I'd like to talk about is something that many of our users are just getting started with right now.
00:21:50 [W] So you have some ci/cd system continuous integration and continuous delivery that takes your source code every time you make a change to the source code.
00:22:00 [W] It is updating a container image with compiled version of that new source code and uploading that to some artifact repository or container registry.
00:22:12 [W] You can tie that into the Spire infrastructure.
00:22:14 [W] Will ever be able to get that spiffe Eid so this is really useful for high security environments because even if an attacker compromises the contents of the container later on and replaces some binary add some scripts because the container
00:22:25 [W] It will never be able to get the spiffe Eid it supposed to get so this is really good for high security environments where you really want to be able to tie off a spiffe Eid to a specific Bill - it is challenging to set up though because you need to have some scripts
00:22:34 [W] Them that talk to the Spire server and configure the spiffe the ideas and build actions the next design pattern.
00:22:39 [W] I'd like to talk about is using spiffe e IDs to talk to a Secret store.
00:22:43 [W] So you probably already have a secret storing your infrastructure hashicorp vault is one of the popular ones. Although there are plenty of others. You can use your workloads spiffe Eid to authenticate to The Secret store and then you can talk to that secret star
00:22:58 [W] Core vault is one of the popular ones. Although there are plenty of others.
00:22:59 [W] You can use your workloads spiffe Eid to authenticate to The Secret store and then you can talk to that secret star get a credential and use that credential to access some non spiffe e aware service.
00:23:12 [W] So this is really useful if you want to gradually deploy spiffe Ian Spire throughout your infrastructure without just having to do a big bang and spiffe E eyes every service all at the same time and then gradually you can replace those hard-coded credentials in the
00:23:26 [W] store with a zero trust pattern and use spiffe e authentication to talk to them.
00:23:31 [W] So this is a really good way to gradually roll out Spire overtime.
00:23:38 [W] The next design pattern is in the same vein in this design pattern you use something called oid see Federation.
00:23:45 [W] So the Spire server can provide its trust bundle its root certificates in a format called YDC Federation and this is supported by a couple of different external apis.
00:23:56 [W] The big one is AWS and AWS allows you to map different YDC identities to AWS.
00:24:04 [W] I am identities.
00:24:05 [W] So the net result is that
00:24:07 [W] You have some workloads that's running in your Spire environment.
00:24:11 [W] that workloads can access the AWS API.
00:24:16 [W] It will automatically be granted and I am identity and then it can use the AWS API for all kinds of different purposes may be accessing data base in Amazon RDS database.
00:24:27 [W] Give you us allows you to map different YDC identities to AWS.
00:24:32 [W] I am identities.
00:24:33 [W] So the net result is that you have some workloads.
00:24:37 [W] that's running in your Spire environment that workloads can access the AWS API. It will automatically be granted and I am identity and then it can use the AWS API for all kinds of different purposes may be accessing data base
00:25:25 [W] Having any fixed access token or secret key for AWS, which is really great for security and really great for managing those credentials.
00:25:35 [W] So all IDC Federation is really a key feature for a lot of organizations that are using AWS. Some of the other Cloud providers are starting to support oid see they're not quite as mature yet, but they'll get there.
00:25:48 [W] The next zero trust design pattern is called nested spire and nested Spire looks a lot like I availability at first in this design pattern.
00:25:57 [W] You've got a global Spire server and then you've got multiple intermediary Spire servers that function is intermediate Citrix certificate authorities.
00:26:06 [W] So each one of these intermediaries Spire servers lower down is repeatedly fetching its root certificate from the global Spire server every couple of hours, and then it's talking to all day.
00:26:18 [W] Well Spire agents that authenticate workloads the advantage of this design pattern is that if the data center on the left goes down, it doesn't affect the data center on the right or if the network connection gets really slow between the data center on the left
00:26:33 [W] It doesn't affect the data center on the right and this is really useful for separating multiple failure domains.
00:26:40 [W] We're working with companies who have thousands of servers in different data centers, and they really don't want to be in a situation where if access to one data center becomes slow or goes down.
00:26:51 [W] It causes failures and other data centers. So nested Spire is really ideal for separating failure domains each one of these Spire servers, especially the global server and then each one of the intermediary
00:27:02 [W] Spire servers should also be high availability itself just to further reduce the chances that any one of them will go down.
00:27:12 [W] The next design pattern I'd like to talk about is Federation.
00:27:16 [W] So this is this is spiffe e Federation.
00:27:19 [W] It's actually specified in the spiffe E standard. So multiple different implementations of spiffe e will be able to talk to each other and in this each Spire server has its own trust domain its own set of Agents its own set of spiffe.
00:27:33 [W] e IDs but what they're doing is they're constantly exchanging trust bundles and feeding those trust bundles to all the Spire agents on their side. So that means any
00:27:41 [W] Fluid running on the left side will be able to authenticate any workloads running on the right side.
00:27:47 [W] And any workload on the right side will be able to authenticate any workload on the left side.
00:27:51 [W] What makes this different from nested spire and this is very important is that these are still two independent Spire servers with separate trust domains in separate configuration.
00:27:45 [W] So this is really good. If the system on the left is owned by one company and the system on the right is owned by another company and they want to be able to communicate without trusting each other fully or in some organizations.
00:27:58 [W] You may have multiple different divisions that need to be able to communicate without being able to trust each other fully so
00:28:05 [W] Fashion is really useful for separating security domains.
00:28:09 [W] It isn't designed to separate failure domains as much as nested spire and you still need to use high availability in order to make sure that if one Spire server goes down nothing bad happens, but it's really good for separating security concerns.
00:28:24 [W] Between one organization and another organization.
00:28:28 [W] I'm a software engineer on Spire.
00:28:29 [W] I'm not in sales and marketing.
00:28:30 [W] So I really like to talk about the road map for features working on the Spire.
00:28:34 [W] We are just about hitting our Spire 1.0 release with all the features they have discussed so far, but we have a lot on board for releases after 1.0.
00:28:45 [W] The first item on the roadmap and one of the ones that will make Spire that will improve Spire. The most is having improved data store layer.
00:28:53 [W] So right now we support using MySQL or postgresql as that data store layer where we store all the information about what notes are attested.
00:29:01 [W] What spiffe Eid is are available to be granted that kind of thing.
00:29:05 [W] That's a little bit limiting. So we're working on improved data story interface that will let you talk to all kinds of different distributed databases as the data store layer.
00:29:14 [W] That will improve our performance and production Readiness across the board.
00:29:19 [W] So that's one of the things I'm most looking forward to the next thing is support for trusted platform modules.
00:29:25 [W] So you might know this hpe is the largest server completely in the entire world.
00:29:30 [W] every server we make has the trusted platform module which is a secure chip that comes built in with a certificate signed by hpe now we should be able to use those TPMS as a source of Truth for no data station right now that
00:29:45 [W] Sure isn't quite there, but we are working on it and it will be available soon.
00:29:48 [W] And then when you buy a server from hpe or any other company that provides a server with trusted platform module you'll be able to plug it in and perform no data station right away.
00:30:00 [W] The next feature we're working on is support for serverless functions.
00:30:04 [W] So you might know this in a lot of cloud infrastructure Now sort of the glue is serverless functions.
00:30:10 [W] These things don't require an instance to run. They don't require a kubernative cluster.
00:30:15 [W] They're just built into the cloud environment Amazon calls them Lambda functions Google calls them Cloud functions. Every cloud provider has these we're working on a really good mechanism for supporting spiffe e IDs in serverless.
00:30:29 [W] Since that isn't there because there's no agent. There's no obvious place to get the snippy ID and we're working on some glue that will generate spiffe.
00:30:38 [W] He IDs and feed them into the serverless functions.
00:30:40 [W] they can talk to other traditional non serverless surfaces securely.
00:30:47 [W] The next big feature we're working on is something called certificate transparency and this is actually coming from the folks who are at by dance the company that makes Tick Tock they really want this feature in certificate transparency every certificate.
00:31:02 [W] Generated is added to a certificate log and that certificate log is generated in a very clever way where it's cryptographically verifiable.
00:31:10 [W] What was added to it?
00:31:12 [W] So every single s vid that's been generated across your entire infrastructure may be many different Spire servers many different trust domains will go into this auditable log, and then you'll be able to set up some alarms so that if something goes wrong if someone gets
00:31:27 [W] CNN manages to generate fake bad s vents you find out right away.
00:31:33 [W] And the last thing is improved kubernative support.
00:31:35 [W] So right now we already have kubernative no data station and workloads attestation.
00:31:40 [W] Like I mentioned what we're working on is making it more automatic.
00:31:44 [W] And again, this is this is a contribution coming from outside. Hpe we're working on a workloads registrar that will go through your kubernative configuration and automatically do the real relevant Spire
00:31:59 [W] creation so that every kubernative poddisruptionbudgets
00:32:29 [W] identity blame within a different infrastructure product. So Kuma and network servicemeshcon to that category and you can see other talks about those cncf projects at this conference, then in terms of end users.
00:32:42 [W] There are a ton of big companies that are rolling Spire out across the infrastructure because they're trying to go to zero trust bite dance, which makes The Tick-Tock app Uber Square GitHub Bloomberg stripe Anthem transferwise those companies
00:32:57 [W] Have all given public talks on using spiffe e and Spire that you can Google and they're all linked to from the spiffe e website.
00:33:04 [W] There are other companies that won't talk about it, but are starting to roll out spiffe in Spire.
00:33:10 [W] Finally. The last thing to users really cool. Hpe also owns cray supercomputers, which makes the fastest supercomputers in the world.
00:33:17 [W] in a couple of years these excess scale supercomputers with millions of cores will have Spire running on every single node in order to provide zero trust itrenew.
00:33:27 [W] Energy to supercomputing workloads, which is really cool. It's really cool that we've gotten this far in just a couple of years.
00:33:36 [W] Lastly I'd like to talk about the next steps for adopting zero trust with spiffe Ian Spire.
00:33:42 [W] First of all, we have a website with tons of documentation and links to every presentation we've ever done on smithian Spire that you can click and watch we also did a community day as part of this conference with people from a number of different companies talking about how they're using.
00:33:57 [W] Spiffe Ian Spire.
00:33:59 [W] We also have a very active slack Community.
00:34:01 [W] This is separate from the cncf slack in the kubernative slug this Onslaught Community with people from a number of different companies hundreds of different people talking about how to roll out zero trust security using spiffe e and Spire we've got our own Twitter, of
00:34:16 [W] Arse follow us on Twitter and we've got a book coming out soon.
00:34:20 [W] I actually worked on this book along with about 10 other people.
00:34:22 [W] It's being published by hpe. If you shoot me an email, I'd be happy to send you a PDF of the book or even a paper copy.
00:34:29 [W] I think it's really good. My favorite part of the book is that it has five detailed case studies for how how certain companies are using spiffe Ian Spire in real life and why they made the decision to go with spiffe in Spire.
00:34:43 [W] think those case studies are incredibly valuable if you're
00:34:46 [W] talking about making a case for spiffe inspire to your management.
00:34:50 [W] So with that, I'd like to thank everyone for watching. Again. My name is Daniel Feldman.
00:34:55 [W] I work in hpe security engineering.
00:34:57 [W] Here's my email address.
00:34:59 [W] Follow me on Twitter.
00:35:00 [W] Shoot me an email to follow up and I think we have a few minutes for questions.
