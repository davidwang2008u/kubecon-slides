Being a Good Citizen of the Multi-operator World: XCUH-5376 - events@cncf.io - Wednesday, November 18, 2020 5:54 PM - 33 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hi, I'm the vertical Carney founder of cloudevents.
00:00:23 [W] Hi, I'm the vertical Carney founder of cloudevents.
00:00:37 [W] Little bit about me.
00:00:39 [W] I've been working in the system space for a long time these days apart from cloudevents.
00:00:56 [W] Kubernative operator pattern has become widely popular for running various kinds of applications on kubernative operators are getting built for stateful applications complex Services internal it workflows Etc.
00:01:11 [W] Automobile location is development in the computer science department at University of Texas at Austin.
00:01:17 [W] Kubernative operator pattern has become widely popular for running various kinds of applications on kubernative operators are getting built for stateful applications complex Services internal it workflows Etc.
00:01:49 [W] When it is operator ads custom resources to a cluster the set of resources on any cluster depends on what operators have been installed on it. For instance here.
00:02:03 [W] We have a MySQL operator and a custom application operator installed on the cluster and they add MySQL cluster and app see our custom resources to it.
00:02:14 [W] The Ensemble of kubernative built-in and custom resources that are deployed together to serve a specific workloads.
00:02:44 [W] Any pass through the custom resource instances here are two examples of such passages that we have encountered in our work with different customers on the left hand side.
00:02:56 [W] There is a Moodle pass a bill to deliver an e-learning Solution on kubernative.
00:03:01 [W] This uses two operators Moodle and MySQL mu Del operator is developed in house to deliver specific workloads workloads requirements for Moodle Moodle instances depend on MySQL.
00:03:14 [W] Stacks to different customers on the right hand side.
00:03:18 [W] There is a past developed to deliver browser instance has two different application Developers for their testing this users browser as a service operator developed by an internal devops team and for monitoring purposes.
00:03:31 [W] This pass uses the Prometheus operator.
00:03:35 [W] This custom pass is built on kubernative tsar multi-tenant and multi operator environments.
00:03:43 [W] So given that an operator may need to run alongside other operators in a cluster the important question that operator developers need to ask today is whether they're operator is ready for this multi-tenant and multi operator world.
00:04:00 [W] Towards helping operator developers answer this question.
00:04:03 [W] We have developed the kubernative operator maturity model. It consists of four categories consumed ability security robustness and portability and there are guidelines in each of these categories.
00:04:18 [W] In today's talk.
00:04:20 [W] I'm going to focus on the for specific problems and Associated guidelines to address them.
00:04:26 [W] these problems are how to enable Atomic deployments of application Stacks how to enable colocation of stacked opponents how to make application stack. So robust against Pottery starts and
00:04:41 [W] Accurate charge bags for application stack check out our comprehensive list of guidelines on our GitHub page.
00:04:37 [W] to know more about these different categories and the guidelines
00:04:42 [W] To discuss these questions. I am going to use the example of the Moodle pass which I referred to earlier. Moodle is an e-learning software and I'm going to be using only two custom resources that are part
00:04:57 [W] Some girls, but for the sake of discussion, I am going to focus on only the to custom resources Moodle and MySQL cluster the Moodle operator handles the Moodle custom resource and creates a pod with the Moodle software on it the
00:04:54 [W] Handles, the Moodle custom resource and creates a pot with the Moodle software on it.
00:04:54 [W] The MySQL operator handles the MySQL custom resource and creates the Pod for MySQL. And then the Moodle part uses the my SQL part for its database needs.
00:05:07 [W] The first problem we want to discuss is that of atomic deployments now as a pass provider we need to ensure that an application stack is created atomically.
00:05:19 [W] What do we mean by atomic City in the context of application Stags, especially the stacks that are built or consists of Ensemble of kubernative C resources where some of these resources May consist of maybe
00:05:34 [W] I mean from different operators.
00:05:35 [W] Well the automaticity in this case means that we want to avoid situations where only some parts of an application stack are deployed and not others.
00:05:46 [W] So for example, we want to avoid situations where let's say the Moodle board has gotten deployed. But the MySQL pot has failed to get scheduled or vice versa where the MySQL
00:06:01 [W] Little pod has failed to get scheduled on any worker node.
00:06:03 [W] So then the question is how can such atomicity be guaranteed especially when there are operators some Community operator seniors in your multi operator environment some that you might have developed on
00:06:18 [W] So how do you really guarantee this Atomic City?
00:06:17 [W] And then the second question is what can operator developers do to ensure that the pods that are deployed as part of their custom resources get guaranteed scheduling from the kubernative scheduler.
00:06:32 [W] So one way to achieve guaranteed scheduling in kubernative is is to Define resource requests and resource limits for all the containers that are defined as part of the pot spec.
00:06:46 [W] No, when we are working with custom resources, the the poor is not visible, right? Because the operator is going to handle the custom resource and as part of creating that custom resource it is going
00:07:02 [W] Some boards.
00:07:00 [W] Maybe it's not even actually directly creating a part is probably creating a deployment or a stateful set.
00:07:06 [W] So the question is what can the operator developer will do to Leverage The built-in kubernative mechanisms of resource requests and resource limits because if you look at the kubernative scheduler
00:07:22 [W] All the containers that are part of a pod spec are provided with resource requests and limits. Then that pod is going to get guaranteed scheduling Behavior.
00:07:25 [W] So the kubernative scheduler will will provide guarantees that that part will get scheduled on some worker node, which has adequate capacity.
00:07:35 [W] Okay, so as an operator developer, our guideline is that you can provide in the custom resource pack away or the spec property is through which these
00:07:50 [W] property is through which these resource requests and resource limits can be specified and then Implement your custom controller, which is part of your operator to pass these scheduling hence
00:08:00 [W] Just part of your operator to pass these scheduling hands down to the part that the custom controller is going to create when instantiated a custom resource instance.
00:08:10 [W] So for example, in case of Moodle custom resource, it could be that the actual resource requests and limits from the Moodle custom resource instance are passed down to the the pot that the
00:08:25 [W] It's down to the the part that the Moodle operator will create for that Moodle instance.
00:08:31 [W] So once you do that, if you are operator developer, then kubernative is will provide that guarantee of scheduling that poor Don some work at node which which has the capacity now, it may so happen that you don't have
00:08:47 [W] Are not developing an operator you are using some operator from the community. And then the question becomes you don't know the source code of that operator to actually modify the custom controller then in that situation.
00:08:59 [W] What can you do?
00:09:00 [W] So our guideline is one option that you can explore in that situation is used some admission controllers may be something like Opa to to intercept such Fords and then
00:09:16 [W] Then at that point you will be able to change the spec to to add these scheduling hints on the custom resource on the containers that are defined as part of that pot.
00:09:32 [W] The second problem that we want to look at is that of collocation?
00:09:38 [W] So what do we mean by colocation in this context colocation means that we would like to run all the parts of an application stack on on the same worker node.
00:09:49 [W] You may need this for various reasons. For example, you may want to provide some differential service or treatment to different customers as part of your past and
00:10:05 [W] So what do we mean by colocation in this context colocation means that we would like to run all the parts of an application stack on on the same worker node.
00:10:11 [W] You may need this for various reasons. For example, you may want to provide some differential service or treatment to different customers as part of your past and
00:10:41 [W] Add reason you may want to just use some worker nodes to to basically deploy up complete stack and you want all the parts of that stack to run on that work of known that could be one reason the
00:10:57 [W] that when let's say if you are rotating certain worker nodes from your cluster you want to know which customers will get affected and if all the parts of the stack are running on that worker node, then then it
00:11:11 [W] For you to tell which customers will get affected.
00:11:13 [W] So what we want to avoid is in case of this Moodle example is we want to avoid the split situation where the Moodle poddisruptionbudgets of Node 1 and the MySQL body is running on worker node 2
00:11:31 [W] So how do you as an operator developer can achieve collocation or enable colocation for for the pods that your operator is generating creating
00:11:46 [W] Resources and co-locate them with let's say some other custom resource pods that some other operator in the in your environment in your cluster might be creating.
00:11:55 [W] So how can you really achieve that so the only or one of the ways you can do that is by enabling specific enabling specification of node selectors as part of your
00:12:10 [W] spect so in kubernative is there is this notion of affinity there is
00:12:34 [W] selector with the label of one of the nodes that the node has then the kubernative scheduler will schedule that poor on that particular node.
00:12:45 [W] Okay, so that's available directly in kubernative.
00:12:49 [W] So as an operator developer to enable colocation of your custom resources pods with let's say some other pods, you need to expose that node
00:13:04 [W] Through your custom resource packs.
00:13:02 [W] Okay, so if you design your custom resource pack to allow specifying in node selector, and then if you implement your custom controller to pass that node selector down to the pot that it will be creating
00:13:17 [W] possible to co-locate these your pod with some other pod which may be coming from another custom resource or just directly created deployment doesn't matter
00:13:30 [W] That having that ability to specify node selector and then passing that label down to the Pod will allow collocation of your pot with other pots.
00:13:42 [W] The third problem that we are going to look at is poddisruptionbudgets.
00:14:10 [W] You started so where do we see really pod? The sidecar injections happening.
00:14:19 [W] So there are certain operators Community operators that that they will modify a pod spec an example of that is our the volume backup operators what they do.
00:14:34 [W] So where do we see really pod the sidecar injections happening. So there are certain operators Community operators that that they will modify
00:15:08 [W] Some of the ones that we have looked at they will essentially in order to take a backup of a pots mounted volume.
00:15:18 [W] They'll add a container to a pod spec and then that container the sidecar container has access to that volume and then they are able to that we take backup of that volume now
00:15:33 [W] Do this that operator will once a pod is specified to that operator that operator will modify that pot spec and inject this sidecar. So in this example we wanted to take
00:15:48 [W] Modify that pot spec and inject the sidecar. So in this example, we wanted to take backup of the Moodle Moodle custom resource and the pot that the Moodle operator has created for
00:16:00 [W] The part that the Moodle operator has created for that.
00:16:03 [W] So the volume back up operator. Once it injected the sidecar into the Moodle Ford it cause the Moodle pot to get restarted.
00:16:13 [W] Okay.
00:16:15 [W] So now what is that as an operator developer? You need to be cognizant of such badri starts because what may happen is after a pot gets restarted. You have to still go back.
00:16:29 [W] Back and verify whether whatever the application Level invariants that we're supposed to be valid whether they are still valid.
00:16:40 [W] You need to check that and that that is something that you need to do.
00:16:45 [W] So they are still maintained.
00:16:48 [W] so the way to handle Pottery starts is essentially your operator needs to subscribe to all the events that are related to any pods that the operator is creating and then verifying if
00:17:04 [W] Solve the underlying software are still holding true.
00:17:07 [W] So for example in the case of the Moodle stackrox.
00:17:33 [W] I would not be present.
00:17:36 [W] So the operator had to subscribe to these Pottery start events, and then ensure that the plugins got installed again when the pods are restarted.
00:17:49 [W] Finally as a fast provider.
00:17:52 [W] We are also interested in accurate charge bags at different levels.
00:17:58 [W] We may want to for example find out.
00:18:01 [W] What is the CPU memory consumption of a particular custom resource.
00:18:06 [W] Say for example, the my SQL customer resource how much CPU and memory that one is consuming or we may want to find out CPU memory consumption at the level of an entire application stack.
00:18:19 [W] Which in this case consists of a Moodle custom resource and a MySQL custom resource. So and then how do we charge it back accurately to the customers for which that stack was created?
00:18:32 [W] To answer these questions what is needed is we need to be able to discover discover all the resources that are part of an application stack.
00:18:35 [W] So for example here you see in this picture the Moodle application stack actually consists of several built-in resources, like in Grace and stateful set surveys config map persistent volumes persistent
00:18:50 [W] And there are custom resources cluster issuer Moodle and my SQL cluster the in order to do accurate charge bags.
00:18:44 [W] We need this entire graph of custom resources.
00:18:49 [W] I mean Resources office tag, because without that entire graph and without the ability to find out all the for example pods that are part of the stack. We won't be able to accurately find out.
00:19:04 [W] What is the CPU consumption of the entire stack? Because ultimately what we need to find out is what all parts are part of application stack and then find out the CPU consumption consumption of the
00:19:19 [W] part of those parts and the only way you can find out all the pods that are part of an application stack is if we follow the connections between different resources that are part of the stack so
00:19:29 [W] Bad in kubelet is there are different kinds different mechanisms to establish inter resource connections.
00:19:29 [W] There are owner references. There are labels and annotations and there are spectro / T So for different ways exist and what this picture is showing is not only the application stack
00:19:44 [W] these different resources but there are these resources are related to one another through these various different relationships owners labels and rotations or spec properties and in order to be able to
00:19:57 [W] Water that entire resource relationship graph. We need to be able to follow these relationships within a stack and that's how we will be able to discover the entire graph. And then that's how we will be able to find
00:20:07 [W] The all the parts all the persistent volume claims that are part of that particular stack.
00:20:17 [W] In order to discover these resources relationships and the resources relationship graphs.
00:20:24 [W] We have developed q+ which is open source tool that is able to basically discovered all the kubernative C resources including custom resources and there are some resources
00:20:39 [W] Well to discover these on a running cluster q+ is able to discover the connectivity and the topology of all these resources and then we provide several Cube CTL plugins to
00:20:50 [W] All these resources and then we provide several Cube CTL plugins to retrieve the graph and gets tagged level aggregation Matrix and logs from from that leveraging that
00:21:00 [W] From from that leveraging that relationship graph.
00:21:04 [W] So so how does q+ discover these relationships and build the relationship graph in order to do that, especially for discovering custom resources
00:21:19 [W] This is what needs to happen is Q Plus needs to be aware of the operator developers assumptions around custom resources and their dependencies on other resources.
00:21:31 [W] By the way, q+ is a generic tool so it works with any operator.
00:21:36 [W] So the way these operator developers assumptions need to be captured is we have developed a simple mechanism to capture these assumptions it consists of
00:21:49 [W] five different annotations that can be put or that need to be put on the custom resource definitions or the crd is that are packaged as part of an operator.
00:22:03 [W] these annotations offer a simple declarative way to capture for example, what's up resources will be created by a custom resource by an operator for handling a custom resource or what type of labels
00:22:19 [W] Property based relationships can exist between a custom resource and other resources for for that operator to work to do its work.
00:22:27 [W] Property based relationships can exist between a custom resources and other resources.
00:22:22 [W] We have seen previously.
00:22:36 [W] The first example shows how to define what sub resources will be created by the MySQL cluster custom resource operator when an instance of MySQL cluster is created
00:22:52 [W] This will be created by the MySQL cluster custom resource operator when an instance of MySQL cluster is created the second example shows.
00:22:54 [W] What sub resources will be created by the Moodle operator for instance creating a Moodle custom resource instance while the third example is showing that the cluster issuer custom
00:23:09 [W] Moodle custom resource instance while the third example is showing that the cluster issuer custom resource depends on a specific annotation on the in Grace
00:23:24 [W] An on the in Grace Resource for to to do its work. And by the way, the cluster issue, our custom resource is coming from the cert manager operator and ate it helps with
00:23:39 [W] Certificates from authorities like let's encrypt and the way it works is you need to specify a particular a notation on the Ingress resource and that basically is captured through this cri-o notation.
00:23:56 [W] We are there is no way to capture such operator developers and assumptions today and these annotations enable defining and capturing these annotations these assumptions.
00:24:12 [W] You have to search operator developers assumptions today and these annotations enable defining and capturing. These are notation these assumptions as part of your cri-o DS so
00:24:30 [W] It's part of your ci/cd is so our appeal to my appeal to all the operator developers is to look at these annotations and add them to your operators.
00:24:43 [W] We are also maintaining a list of operators and CID is for which we have added these annotations on our GitHub page so you can take a look at that and we'll be happy to add your
00:24:58 [W] Ideas for which we have added these annotations on our GitHub page so you can take a look at that and we'll be happy to add your operators to that list as well.
00:25:11 [W] So once these resource relationship graphs are discovered using Q Plus, we have q cut and plugins which can enable you to do
00:25:26 [W] Well you to do application stack level chargeback. So for example, the cube CTL Matrix plug-in that is possible to use that to track CPU memory storage usage at custom resource level
00:25:41 [W] You memory storage usage at custom resource level or at application stack level in this picture on the left.
00:25:49 [W] You can see output of MySQL custom resource metrics which consists of two parts and on the right, you can see output for the entire model application stack which consists of three parts one from the Moodle custom resource and
00:26:04 [W] from the MySQL custom resource
00:26:10 [W] These metrics can then be surfaced in Prometheus to get view into resource consumption at different levels.
00:26:16 [W] So here the screenshot shows CPU consumption for a MySQL cluster custom resource instance, and then this can be used to build chargebacks for your pass users.
00:26:30 [W] So to summarize we have developed the platform as Code Practice that simplifies building passes using kubernative operators.
00:26:38 [W] It consists of operator maturity model that offers comprehensive guidelines on operators Readiness for multi-tenant and multi operator environments. It also includes q+ tooling that enables inventory and charge bag for
00:26:53 [W] Is building passes using kubernative operators, it consists of operator maturity model that offers comprehensive guidelines on operators Readiness for multi-tenant and multi operator environments. It also
00:27:25 [W] Beat using operators check out our GitHub page to learn more about these.
00:27:33 [W] Thank you. I will take questions now.
00:27:47 [W] Everyone.
00:27:55 [W] well will for any questions?
00:28:04 [W] Hey Kingdom.
00:28:06 [W] nice to see you.
00:28:47 [W] So I do see there is a question as I am.
00:28:51 [W] So what Helm provides is a way for you to to package your community's resources with various ability for you to customize.
00:29:07 [W] And add values to your kubelet is resources for deployment. So the way
00:29:21 [W] the two operations like let's say you are running a data.
00:29:45 [W] Those kind of operations which typically happen on an ongoing basis operators are good.
00:30:05 [W] What's the question?
00:30:14 [W] what we will have to do is encode the Assumption of what actually
00:30:43 [W] well for any
00:30:56 [W] Hear me properly.
00:31:00 [W] I know.
00:33:28 [W] Thanks for all your help Carol.
