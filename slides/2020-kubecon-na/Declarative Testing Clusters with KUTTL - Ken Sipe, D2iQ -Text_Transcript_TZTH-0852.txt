Declarative Testing Clusters with KUTTL: TZTH-0852 - events@cncf.io - Friday, November 20, 2020 4:02 PM - 43 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello Q Khan, welcome to this session on cuddle, but full of fun kit number seven Pikeville of fun kid number seven.
00:00:08 [W] That's right Pack full of fun kit number seven.
00:00:35 [W] Hello Q Khan, welcome to this session on cuddle, but full of fun kit number seven Pikeville of fun kid number seven.
00:00:43 [W] That's right Pack full of fun kit number seven.
00:00:45 [W] This session is taking a look at declared of testing of your kubernative cluster using cuddle a project that I'm one of the commenter's on and I was fortunate enough to last very last minute get a hold of a co-presenter.
00:00:58 [W] Let me introduce you to him.
00:00:59 [W] loudmouth shook.
00:01:03 [W] No, no, no loud mouth. Look.
00:01:05 [W] I'm a Chicken roaster lot are all right.
00:01:08 [W] All right, that wasn't fair.
00:01:09 [W] You're right.
00:01:10 [W] Let me introduce you to the rooster Foghorn Leghorn.
00:01:19 [W] He's going to be co-presenting much of the material with me and you might know him from Who Framed Roger Rabbit or Space Jam. He started out a 1949, but he has gravitated today and to just doing
00:01:32 [W] Some commercials KFC or Geico and I'm the other rooster.
00:01:38 [W] He's good.
00:01:39 [W] My name is Ken site.
00:01:45 [W] I'm one of the application distributed application Engineers with Day 2 IQ.
00:01:49 [W] That's how to get a hold of me at the bottom again site on Twitter or Ken at d 2 IQ senior rooster. It's mine.
00:01:59 [W] And my pleasure to instruct Junior roosters in the ancient art of Roastery.
00:02:04 [W] Let's get started.
00:02:05 [W] Well cuddle stands for the kubernative test tool as you can see here.
00:02:11 [W] The origins of it is that we were creating Kudo the kubernative use Universal declared of operator with a focus on declarative operators.
00:02:20 [W] 1949 but he has gravitated today and to just doing some commercials KFC or Geico and I'm the other rooster. He's good.
00:02:31 [W] We don't need no more.
00:02:32 [W] My name is Ken site.
00:02:37 [W] I'm one of the application distributed application Engineers with Day 2 IQ.
00:02:41 [W] That's how to get a hold of me at the bottom again site on Twitter or Ken at d 2 IQ senior rooster around here. It's not.
00:02:56 [W] Let's get started.
00:02:57 [W] Well cuddle stands for the kubernative test tool as you can see here.
00:03:02 [W] The origins of it is that we were creating Kudo the kubernative use Universal declared of operator with a focus on declarative operators.
00:03:11 [W] We thought it made sense to create our test in the similar way. So we went after declarative testing when we look at testing. There is a number of different types of tests, you know developers are probably used to unit test you of course have integration.
00:03:25 [W] Both of those really focused on developers both of those kind of fit in to the developer workspace. And then you have your end-to-end tests.
00:03:34 [W] What can I say? What in the name of Jesse James? Do you suppose that is that's a really great question Foghorn. It turns out that and in testing goes from end to end from front end to back end and when you look at it from that perspective, it's
00:03:49 [W] You know developers are probably used to unit tests you of course have integration tests. Both of those really focused on developers both of those kind of fit in to the developer workspace.
00:04:00 [W] And then you have your end-to-end tests.
00:04:02 [W] what I say what in the name of Jesse James do you suppose that is that's a really great question Foghorn it turns out that and and testing goes from end to end from front end to back end. And when you look at it from that perspective, it's
00:04:17 [W] Of looking at an end and test from a declarative standpoint as you're looking at conditions or setups and assertions that are from the perspective of an end user.
00:04:26 [W] but also usually when you have developer test you have one cluster or one version of a cluster or one style or environment that you're testing in and that you're repeatedly doing if you're doing the right thing and the CI environment,
00:04:42 [W] Tests and testing on a lot of different clusters, but then also test it may be in the customers environment, you know, probably the best way to look at this would be to look at what you Foghorn have done.
00:04:50 [W] I believe what you were one of the people involved with creating the imperative tests that are in the kubernative proper.
00:04:56 [W] Let's go take a look at that.
00:04:57 [W] Well here we are Foghorn. First of all, I should probably were stating that they can this there are tests.
00:05:04 [W] that's fantastic and someone probably did what they knew but what we have here in
00:05:09 [W] In Cooper Nettie's test CMD crd and there's a series of them. Of course in this directory is an SSH file. So a shell script of some sort.
00:05:18 [W] Imagine what you need to know in order to accomplish your end goal of just testing into n here.
00:05:24 [W] We have Json that's kind of interweaved inside of this sh file, perhaps it would be easy to mistakenly put in a comma or an extra line and you could test it, you know by running the sh file but
00:05:39 [W] There's really no way you could get a validator to validate this shell script, but it would be really challenging to validate these files the Json or XML files.
00:05:48 [W] You can also see some cryptic - some imperative way of managing certain aspects.
00:05:54 [W] dogs as subtle as I hand grenade in a barrel of oatmeal
00:05:58 [W] What does it mean to be declared it then?
00:06:01 [W] Well, when we say declarative what we mean is the setup the actual creation of state or existence of objects in the cluster can be declared. Just like any minikube mirantis object would normally so here we have the creation of the
00:06:16 [W] Spot that's going to run.
00:06:17 [W] So this is step one.
00:06:18 [W] It's just a demo file.
00:06:20 [W] So so we can use a yam LED être and all the features of beautify and prettier and all those things that you might be used to as a user. We can use it for testing.
00:06:29 [W] What does it mean for a cert? Well, it means we use I am will file and in this case we need to be explicit about the thing that we're after in this case.
00:06:37 [W] We want to know that the status phase is to running that's it and what you can express here as we will see further in the presentation is you
00:06:45 [W] Just Express the thing that you're interested and asserting anything else is ignored we have.
00:06:50 [W] Inflamed fly on and we can go further with those assertions. The assertion here is we have some special types within cuddle of detail that through this presentation.
00:06:59 [W] So here we have the test of cert and we can change the timeout we can add some collectors will talk about what that means.
00:07:06 [W] You can of course have a series of the animal in the Manifest file this you can see is 0 0 assert that the animal and it is setting the timeout setting up a collector and it is making sure that the status is running so
00:07:20 [W] I asked you the question.
00:07:21 [W] If you could do things in part of or you would do it declarative.
00:07:25 [W] What would you do?
00:07:25 [W] You know the funny thing about introducing Foghorn in this presentation? Is this is the one thing I remember about him is he said the words I do declare and I cannot find one example of that.
00:07:39 [W] All I see is the mean so that's kind of comical.
00:07:42 [W] Or you would do it declarative.
00:07:41 [W] What would you do?
00:07:42 [W] You know the funny thing about introducing Foghorn in this presentation? Is this is the one thing I remember about him is he said the words I do declare and I cannot find one example of that.
00:07:55 [W] All I see is the mean so that's kind of comical.
00:07:58 [W] I'm not sure what happened.
00:08:00 [W] I don't know if those are lost or if I my mind just made things up, but why don't we when we dive in further into the rest of cuddle?
00:08:12 [W] So who is the target audience for cuddle cuddle was originally written for operators Kudo in particular? We quickly needed to use it for Helm charts and for other operators.
00:08:21 [W] It's basically for anybody putting a workloads.
00:08:44 [W] I'll spend some time showing you how to do exactly what's in those manuals.
00:08:47 [W] So, how do we get started?
00:08:48 [W] Well, first do a brew install or a crew install probably be the easiest way to get cuddle on your platform.
00:08:56 [W] Trying to do for build a better trapped in mind. Let's get started with the basics. Then I might run through this fairly quickly, but through the magic of video. You can go back and re-listen.
00:09:06 [W] I want to make sure we have plenty of time for demos.
00:09:09 [W] So let's get started.
00:09:10 [W] The cuddle CLI is a plug-in to keep cuddle and is invoked through cuddle cuddle and the sub commands are listed here.
00:09:19 [W] The main one is test and it's the test harness that you usually run up against a live test cluster. There's other options which are pretty fairly well,
00:09:26 [W] either in a directory that has a test Suite file, which we're going to see or you will specify all the command line arguments and it's very common to pass like the test Suite folder into this as the first argument the other one that might be useful to
00:09:42 [W] Shirt, I recently added that and where you normally pass in the test Suite to the test subcommander with the assert. You pass the direct.
00:09:45 [W] Yeah, multi. I'll of the thing you want to assert as you're starting out and you're building up certain state within your cluster and you want to assert something to be true.
00:09:53 [W] You can use this assert to verify that a longer path. You could also use it to verify that the state of things is exactly the way you intended it outside of cuddle all together and we have the major sub-command which is test and as I mentioned there's
00:10:07 [W] a bunch of options here. The one that you see at the top is keep cuddle cuddle test and I'm passing in a test folder called test within a given test.
00:10:17 [W] There are test steps and those are your EML files.
00:10:21 [W] So if there are any other file extensions within that directory may be like your readme files or some kind of setup details or your licensing files.
00:10:30 [W] All those are ignored. The only thing we pick up our EML files and then it has a specific nomenclature to it. So we have an index - and a step name.
00:10:37 [W] Not altogether, we have the major sub-command which is test. And as I mentioned there's a bunch of options here. The one that you see at the top is keep cuddle cuddle test and I'm passing in a test folder called test within
00:13:19 [W] People new to cuddle. We do a match against the gbk some group version kind of given the name or a filter for The Unique object. If we don't find one we created if we do find one we update it which can be very confusing or create interesting
00:13:34 [W] Is when you're switching between namespaces and I'll talk about that a little bit later in this presentation.
00:13:38 [W] So if you create an object and let's say step one and then you asserted and step 1 and then you want to augment her change that object. Then you just need to provide the Delta of the thing you want changed and that is
00:13:53 [W] Important concept if the object already exist. It's just going to augment it if you normally run with multiple namespaces and then run all in one namespace very common for people to have failures that are surprising.
00:14:03 [W] that's because usually because they were used to having tests isolation through namespaces, and now they don't and they didn't have proper clean up after their test. So this is a really important concept any this get into that a little blue bonnet videos then we have the assert or are
00:14:18 [W] Used to having tests isolation through namespaces and now they don't and they didn't have proper clean up after their test. So this is a really important concept any this get into that a little blue bonnet. He owes then we have the assert or airfares file again an index and the
00:14:36 [W] I'll again an index and the assert all of the ammo within the assert within a certain period of time the default is 30 seconds. The state that is defined within those certain file will have to be true.
00:14:48 [W] Otherwise, we fail the test and the air is just the opposite of that.
00:14:51 [W] It's the state of something that should not exist.
00:14:54 [W] So you want to check test for the absence of something maybe even the absence of the object even existing.
00:15:00 [W] Let's go through some of the terms now. I've already covered some of them but let's put a nice bow around it the terms of service. We have the tests weaveworks.
00:15:06 [W] Wheat which is a collection of test.
00:15:08 [W] We had the tests themselves, which is a collection of test steps.
00:15:11 [W] We have a test step which has multiple phases kind of the create update and then the assert phases and then we have the test assert.
00:15:18 [W] What's also important to note here? Is that the test Suite the test step and the test assert are all object types defined within cuddle.
00:15:26 [W] There's always more mixed up than a feather in a whirlwind.
00:15:29 [W] Now there is a couple of areas that could use some improvement within cuddle.
00:15:33 [W] This is one of them. There are two concepts that are completed together.
00:15:37 [W] I'm going to just draw them out here.
00:15:38 [W] So a test Suite the test Suite is as you see on the left a folder in this case.
00:15:43 [W] It's called test data. That is the collection of test. So every folder that you see underneath there are tests. The test data is the test Suite but also we have this object type which is the configuration
00:15:58 [W] End of test Suite you see on the right.
00:16:00 [W] We're looking at a test suite and that particular example, we can actually create a number of tests ders which would be a series or an array of test Suite folder locations or what's conflated together is the startup
00:16:15 [W] Which should be separated out from the concept of a test Suite but today this is what we have.
00:16:10 [W] Glad you got it.
00:16:11 [W] Okay, so then the test as you see here, we have a test pots folder.
00:16:15 [W] That's within our test data test Suite the test folder.
00:16:18 [W] I'm sorry that the list pods is the name of the test.
00:16:21 [W] So when you see that reported within the stream of logs for a test and will be listed as the list pods test.
00:16:29 [W] It's also very common for people new to cuddle to actually point to a test folder when they are starting up the test harness so they say keep cuddle cuddle test and then they specify the
00:16:39 [W] Patient of a test.
00:16:41 [W] We look for the test within the test Suite not finding any it won't run anything.
00:16:47 [W] So that's a very confusing point for people starting out. You need to point to one folder up which is the test Suite itself. It will discover all the tests with underneath the test suite and it will run those tests and we have the test step and again in this case, there's two concepts to it, but they're more
00:17:02 [W] For the test within the test Suite not finding any it won't run anything.
00:17:05 [W] So that's a very confusing point for people starting out. You need to point to one folder up, which is the test Suite itself.
00:17:12 [W] It will discover all the tests with underneath the test suite and it will run those tests and we have the test step and again in this case, there's two concepts to it, but they're more or less match. So in this particular case, we have our list pods, and then under that we have files we have the 0 0
00:17:33 [W] So in this particular case, we have our list pods. And then under that we have files we have the 0-0 poddisruptionbudgets.
00:18:03 [W] Anne's assuming that you had some commands that you wanted to run maybe creating a service account creating a service itself doing something that's outside for whatever reason of your declarative files.
00:18:15 [W] And finally we have our test assert. And again this falls into the same ideas the test steps. We have an assert file. In this case. It's 0 0 assert.
00:18:23 [W] We can have multiple things in it. We also have a test assert kind So within the assert file we can say that this particular test doesn't take the default 30 seconds.
00:18:33 [W] Takes 20 seconds in addition to that we want to assert the Pod and named test2 has a certain quality of service and it will sort that to be true within 20 seconds or the test will fail and then finally we can run the test. So cute cuddle cuddle test
00:18:48 [W] File in this case.
00:18:49 [W] It's 0 0 assert.
00:18:51 [W] We can have multiple things in it.
00:18:52 [W] We also have a test assert kind So within the assert file we can say that this particular test doesn't take the default 30 seconds. It takes 20 seconds in addition to that. We want to assert the Pod and named test2 has a certain quality of service
00:19:32 [W] Location of the test directory before we get to a demo.
00:19:35 [W] There's one more thing.
00:19:36 [W] I want to show you and that is this other concept that's super important to understand that by default cuddle will create a namespace for every test.
00:19:44 [W] So we provide test isolation through namespaces.
00:19:47 [W] We understand that there are certain environments for which you may not have permissions to do that and we have ways of getting around that by focusing test on one test namespace that said this is the default nature of it.
00:19:59 [W] You will get nice isolation of your test through namespaces.
00:20:02 [W] And you may need to make adjustments to your test Suite if you change from this you're gonna I say you got to keep on your toes before we get to the demo.
00:20:14 [W] Let's talk about what you need to do to do your very first cuddle you have cuddle CLI installed nothing else.
00:20:21 [W] What do you do first?
00:20:23 [W] Let's create our test Suite so we create the test e2e folder next we need a test. So let's create the doghouse with in the doghouse will create
00:20:32 [W] Zero zero install that I am will file which for us is just a very simple nginx.
00:20:38 [W] The next is that will create and insert file 0 0 a certain angle. And in this case we're looking for a pod.
00:20:45 [W] It has the name of doghouse and has a status of running if it has the status of running. Then this test passes. Next you have an option you could just use the test the way they are and point the test harness the first argument of the test to the folder
00:21:00 [W] We create the test, ete folder next we need a test.
00:21:04 [W] So let's create the doghouse with in the doghouse will create the zero zero install that game will file which for us is just a very simple nginx.
00:21:13 [W] The next is that will create an assert file 0 0 a certain angle. And in this case we're looking for a pod.
00:21:20 [W] has the name of doghouse and has a status of running if it has the status of running. Then this test passes next you have an option you could just use
00:21:29 [W] as the test the way they are and point the test harness the first argument of the test to the folder to the test Suite folder or you could create a cuddle test that llamo file a configuration file of test Suites and then include the rectory that your it's supposed to be
00:21:59 [W] or you could create a cuddle test that you will file a configuration file of test Suites and then include directory that your it's supposed to be pointed to if you have this file, then it's nothing more than saying tunnel tests and we'll discover where those tests are and run
00:22:15 [W] You can see them running right here.
00:22:16 [W] We have the doghouse.
00:22:17 [W] So maybe The Henhouse both of them have been started.
00:22:19 [W] You can see that we created a namespace for the doghouse and we created the namespace for The Henhouse.
00:22:25 [W] So we have test isolation.
00:22:27 [W] This is the default Behavior.
00:22:28 [W] What if we just wanted to run run one of those tests what we can actually specify - - test and specify the test in which case only one of those tests would be run.
00:22:38 [W] Let's get to a demo.
00:22:39 [W] This would be more fun than a barrel I have with a monkey. Well as you can see I've just created an a
00:22:45 [W] Cluster with kind and there's nothing running in it. So let's start by putting something in it.
00:22:51 [W] This run an instance of nginx and then let's create an assert and I've already done that.
00:22:58 [W] So there's the assert file we're going to assert for a pod named nginx that has reached the running State.
00:23:04 [W] Let's switch back to the command line.
00:23:05 [W] And in this case, we're not going to run a test.
00:23:08 [W] We're going to just validate the assert and we're going to specify a short timeout and we're already asserting it to be valid.
00:23:16 [W] Let's take a look at what a failure might look like. Maybe we misspelled something.
00:23:22 [W] It's safe there.
00:23:23 [W] Obviously that's spelt incorrectly and let's run the same assert.
00:23:27 [W] There is something going on around here that just don't add up. So in this case, it takes three seconds.
00:23:33 [W] We had to wait for that. We get a full diff which seems like a lot. There are actually two errors that come back.
00:23:39 [W] Isn't but then you get a second targeted message, which is this resource for status dot phase had a value mismatch.
00:23:48 [W] It was looking for running with one end. But we actually found running with two ends seems pretty simple.
00:23:54 [W] Right?
00:23:54 [W] What are we take a look at our larger project with the e2e tests and see what we might be able to learn here.
00:24:01 [W] The first is we have two tests. We have the dog house and its depth 0 we will
00:24:07 [W] we'll have created a pod which is named doghouse and is nginx and the assert is very similar to what we've seen already.
00:24:15 [W] We're just checking to see that it was running then house actually has a couple of other new features that might be interesting to look at.
00:24:23 [W] The one is you may have you might have some Jama let you repeatedly use and either steps or tests and you may have it out here all by itself like this in house example right here in the pot dot animal here with in-toto.
00:24:38 [W] The zero zero install we say apply and then we provide a list of Yemen's that we want to include so I can use a bunch of them across test.
00:24:47 [W] I could put padding there.
00:24:49 [W] This could say that that slant that that assuming, you know, where ones at it could just as well said that it could be in subfolders be in a variety of places in this case.
00:25:00 [W] What's on the test step?
00:24:50 [W] One of them is common it out, but I could have put in commands and that would be a list of commands. Then we have our cert which is a little bit unique as well Worth showing off a few things one.
00:25:00 [W] We could have changed the time out. So I could have switched to maybe 60 seconds. We have a collector and I'll talk about that in just one second.
00:25:07 [W] So this changes the test assert configuration.
00:25:11 [W] And then this is the assert to and could be a series of assert. This also shows multiple emal's in the
00:25:18 [W] same manifest file with collectors.
00:25:21 [W] It's it's common or interesting sometimes to collect additional information. If a failure were to occur. So in the case of say this this test failing we have two options with collectors currently one is poddisruptionbudgets.
00:25:34 [W] So if it was command and you could just run any command so you can gather whatever you wanted and that will just be dumped right in the log with with the test with the Pod for specifying that you want to collect the logs out of the pot. So the poddisruptionbudgets
00:25:48 [W] That is The Henhouse poddisruptionbudgets in the log file.
00:25:54 [W] Of course, if there were multiple containers even have to specify which container there's all the configurations that you can imagine that with you would need to differentiate other there.
00:26:04 [W] You don't stop talking so much tongue Sunburn and that's it.
00:26:09 [W] We could then just as well run that test.
00:26:11 [W] Let me clear the screen.
00:26:13 [W] Don't write in the log with the test with the Pod is specifying that you want to collect the logs out of the pot. So the Pod and that is The Henhouse poddisruptionbudgets.
00:26:34 [W] As well run that test.
00:26:36 [W] me clear the screen.
00:26:38 [W] Cuddle test and in this case, we want to run the ed test and now we have it running eventually passing one more really cool feature that I'd like to show you before we leave this demo is I've taken the example that we've seen here then
00:27:09 [W] The ed test and now we have it running eventually passing one more really cool feature that I'd like to show you before we leave this demo is I've taken the example that we've seen here then house and doghouse and the test squeak that it is.
00:27:22 [W] I have tarball that and have put that up on GitHub so we could run the test queue cuddle cuddle test and specify the URL of the test Suite it will pull down the test Suite extract all of the files and then run
00:27:37 [W] And have put that up on GitHub so we could run the test.
00:27:42 [W] You cuddle cuddle test and specify the URL of the test Suite it will pull down the test Suite extract all of the files and then run the whole test Suites were running the exact same test Suite we were before except for now.
00:27:54 [W] We've pulled down the archive from the GitHub.
00:27:57 [W] That's it.
00:27:58 [W] Super cool, right?
00:27:59 [W] Let's look at some additional features.
00:28:01 [W] The first is that we can obviously do a delete you can dilute do a delete based on a number of things. So as you see here in the example, I can get rid of a pod. That's my pod or pot with labels of app nginx.
00:28:15 [W] We can delete things as part of a test step and you just include that into your step.
00:28:20 [W] Additionally we could add commands and you it's an array of commands the example you see on the first one is we can do a standard apply if you wanted to we already do applies. It is not necessary to do that, but
00:28:31 [W] In the case of Kudo installing an operator without the instance might be something useful and there's some danger here.
00:28:38 [W] You got to know how to handle it one wrong move and you're done for pay attention son.
00:28:43 [W] This is for your own good as I mentioned before it is possible to set up cuddle so that it doesn't create a test a namespace per test the danger here, of course, and the thing you need to be aware of is you may have to do some additional tests design. You may need to delete
00:28:59 [W] Sort of app nginx we can delete things as part of a test step and you just include that into your step.
00:29:04 [W] Additionally, we could add commands and you it's an array of commands the example you see on the first one is we can do a standard apply if you wanted to we already do apply. It is not necessary to do that. But in the case of Kudo installing an operator
00:31:22 [W] Assert that those things are gone using the errors prior to moving on because you do know you no longer have the isolation that you would normally have but otherwise a useful feature for for many people as we've shown before you've
00:31:38 [W] I didn't realize that I had this on my slides so dummy things of Mexican border pays rent the example here, of course is that we can apply some more tips.
00:31:47 [W] Everything is accessible to cuddle. So here we're asserting an event occurred.
00:31:53 [W] Of course remember that events are short-lived things, but the test is only going to run for a short period of time. It's not something usually that's going to be on for longer than an hour. So in this case, we're asserting that an event occurred and that it was chronosphere.
00:32:07 [W] Created the source of that event was the kubelet and that the involved object was the Pod named my pod. Another tip is we're going to take a look and see how you might start up your test with cri-o is but perhaps you have series that you're going to be creating or
00:32:22 [W] Ring that an event occurred and that it was created the source of that event was the kubelet and that the involved object was the Pod named my pod. Another tip is we're going to take a look and see how you might start up your test with cri-o is but perhaps you have series.
00:32:52 [W] On the way prior to using the crd is to assert that the CRT exist what you see on the left the 0 0 cert wamo after you've asserted it then in the next step you could use it.
00:33:03 [W] So in this case we have asserted that the CRT exist prior to it being used a common use in kubernative world is using Helm.
00:33:11 [W] So here we see examples of using the command and using Helm to do installations and potentially even setting up service accounts and roll bindings and that kind of thing and as I've indicated we can pull
00:33:22 [W] I'll test Suites Straight From Any Given URL we can even include them in our test configurations notice how great this is that you could you could have a suite of tests available to any of your customers and clients and they can test in their environment and what
00:33:37 [W] Up to this point is that it is possible to add some Flags so that it doesn't delete anything.
00:33:42 [W] So the creation of something is establish has the state according to what you desired and then asserts that that state is there and then leaves the cluster without tearing down the test. This can be a very useful feature of these and cuddle.
00:33:57 [W] Another great feature that Google provides is a report these specify report. You can specify either XML or Json if you specify XML, it'll be a j-unit XML report.
00:34:07 [W] You can see two examples of an XML report here one with all succeeding tests.
00:34:12 [W] And then you have an example here a failing test in the doghouse.
00:34:15 [W] So let's cuddle was originally created to test operators Kudo in particular. Let's take a look at the features that support that the first is we need to enable the ability to install cri-o ES
00:34:27 [W] This ability install manifests or crd s or apply them within the kubenetes cluster. The difference is that when we see series within the CRT der cuddle will wait until the CRT has been realized within the kubernative cluster then when we talk about
00:34:42 [W] They're testing an operator.
00:34:38 [W] There are two different styles are different to different ways that an operator might be being used within the cluster.
00:34:43 [W] The first is that it is B. It is a released operator. And the other is that it's an Endeavor operator the example you see here is that we have a Kudo and knit that is initializing the controller within the cluster and the weight process will wait until it's complete.
00:34:58 [W] Establish Kudo running within our cluster and then we'll have a series of tests that follow in Dev.
00:34:54 [W] We do it slightly different and of we actually apply the CRTs and there's a week period of time for that and then we invoke a command on the code that is part of the CIA environment where we invoke the manager and we put that in the background what's important about
00:35:09 [W] Standard out by default will be part of the test logs.
00:35:10 [W] There is a way of opting out of that. Now you can see how cuddle supports the released testing as well as the in Dev testing of operator.
00:35:19 [W] Well, it's open leave some more time for Q&A away all this time son.
00:35:25 [W] Yeah, right.
00:35:25 [W] Let's put some closing remarks around this.
00:35:28 [W] there's a lot more. I would love to share with you or show you if I would recommend a place to get some feel for the different tests. I would recommend this.
00:35:36 [W] So under GitHub underneath cuddle itself, if you want to get some more cuddling and the other is is the first release was March of this year.
00:35:43 [W] We've had the 0-7 release.
00:35:46 [W] I just got out in October.
00:35:47 [W] We have a release Cadence that happens about once a month. And if you'd like to get involved with that you can find the project in this location. You can find this on Kate's slack underneath Kudo. You haven't had a need or demand to drive it off to its upper Channel,
00:36:02 [W] And it happens we'll do so we do follow a cap process and we do once a month meet and talk about Community issues.
00:36:05 [W] I'd love for you to get involved. And with that That's all folks go I say go away boy you bother me.
00:36:30 [W] Too much.
00:36:32 [W] All right. I don't see any outstanding questions that weren't answered. There were some questions geared around it.
00:36:48 [W] Further questions the questions that I think we're answered was reports.
00:36:54 [W] Yeah. We do J unit XML style reports, which seemed to be most popular.
00:36:58 [W] I didn't realize how popular that I would be when we initially requested but it's super popular something that wasn't asked but probably connected is that we've made a lot of effort to make sure that cuddle does not
00:37:13 [W] Hence, the cluster little as possible.
00:37:09 [W] So when you specify that it's going to a namespace one expects that you have authorization for that and it doesn't do a whole lot beyond that so that environments where you have narrowly scoped capabilities or authorization.
00:37:24 [W] We try to honor that outside of that if if you run it under the default Behavior crisp great namespaces and do all kinds of things course. We can't control what you actually want to do your command to do anything.
00:37:22 [W] you try to create things. You may not be authorized to those test will fail of course. So I'll tell you that there was questions about time outs, but we have timeouts are almost around everything one of the challenges potentially is that timeouts are
00:37:37 [W] We need to be thought out just a little bit more some people might consider a timeout to be for the scope of of a test.
00:37:41 [W] Usually they are geared around an element within that test.
00:37:46 [W] So the time out of an assert the timeout associated with you know, command and by default whatever the default timeout is unless you've changed it somewhere it's used for all the things.
00:37:59 [W] So is it possible to use cuddle to verify?
00:38:03 [W] Yes, okay, so that that's fantastic question.
00:38:06 [W] The question was is it possible these cuddle to verify an existing deployment to things with that that are useful to understand one cuddle could be the thing that actually spins up but not the cluster but spins up the the state of the cluster and
00:38:21 [W] I said that state is in a certain condition and then leaves everything standing so it does not go through the delete phase or just some flags of turn that off.
00:38:24 [W] If you're looking for to answer your question very specifically if you're just looking to have it assert existing deployments Yes again in that case.
00:38:32 [W] You don't want to run the test.
00:38:33 [W] There's another command.
00:38:34 [W] There's a couple of commands they didn't go over very in very much detail.
00:38:38 [W] One of them is the assert.
00:38:40 [W] So if you do a coop cuddle assert, you can pass in the file with as many Yemen's within that.
00:38:47 [W] At manifest file that you want and assert that that state is true so that hopefully answers that question.
00:38:55 [W] It's a very useful item.
00:39:02 [W] Is that you can actually use cuddle to you know to set up a customers environment or you set up the state of things verify its in the state that is desired and confirm that and then leaves everything standing.
00:39:15 [W] So this is going to be great for demos.
00:39:16 [W] It's going to be great for initial customer validation verification things of that nature.
00:39:21 [W] So it's a great question the other question kind of the same question, but I can't tell whether the intention here is that this is just used.
00:39:28 [W] During development or whether it's going. Okay. So we use it in our CI environment during Dove for testing end-to-end.
00:39:36 [W] Customers environment where you set up the state of things verify its in the state that is desired and confirm that and then leaves everything standing.
00:39:31 [W] So this is going to be great for demos.
00:39:32 [W] It's going to be great for initial customer validation verification things of that nature.
00:39:37 [W] So it's a great question the question kind of the same question, but I can't tell whether the intention here is that this is just used during development or whether it's okay.
00:39:46 [W] So we use it in our CI environment during Dove for testing and
00:39:51 [W] to end so we have a breakup of unit integration and then essentially API and all the way back and forward so we do use it in Dev, but we also use it for what we call mix workloads testing.
00:40:09 [W] And be involved with some form of testing that is clearly outside of death testing. It is specifically you can think of it almost as a cue a level of testing and we could we also
00:40:30 [W] But we also use it for what we call mix workloads testing.
00:40:35 [W] And be involved with some form of testing that is clearly outside of death testing. It is specifically you can think of it almost as a cue a level of testing and we could we also
00:41:04 [W] In of other other components, so we are starting to use it more and more within our or our own or also as I mentioned.
00:41:10 [W] It's part of operator SDK now with scorecard and we'll see how people start.
00:41:18 [W] Customized that's also a great question.
00:41:21 [W] I see no reason not I see no reason why that wouldn't work.
00:41:25 [W] There's there's probably some things we could do there to enhance that experience. But certainly you could make a command calls leveraging customized to do some things.
00:41:40 [W] Private use case frequently provide enough of a use case or a plan around what you're looking to do super excited to enhance those kind of things.
00:41:48 [W] So great question use the API to correctly determine test success instead of using the CLI.
00:41:55 [W] I'm not sure where to go with that but it is geared towards what is the state of things and it is geared towards kubernative objects that are declaratively expressible and again,
00:42:08 [W] It's the API server. So certainly you can manually do things like this through the CLI.
00:42:15 [W] You might be able to even script things through the CLI.
00:42:17 [W] This is a way of Co defying what you deem as be in a test.
00:42:23 [W] that is successful. We have the time out specifically around.
00:42:28 [W] Add in CL eyes as part of the assert.
00:42:30 [W] So if you have a situation where you want to assert maybe a reg ex of something and the output of the of the pot of the Pod log we want to be able to do that.
00:42:42 [W] And so that's that's that should be in there in the next you know week or so, I would imagine.
00:42:50 [W] Man, I'm out of questions and probably at a time I think thank you so much.
00:42:54 [W] This has been really wonderful.
00:42:55 [W] I if you have a need for this or have you finally finally I just can't decide.
00:43:11 [W] The community. Thank you.
