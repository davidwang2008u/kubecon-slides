Open Policy Agent Intro: UYJT-2858 - events@cncf.io - Wednesday, November 18, 2020 3:22 PM - 68 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:00 [W] Hello, welcome. This is the open policy agent project update and intro.
00:00:07 [W] Today we've got Max with us.
00:00:09 [W] Hello.
00:00:11 [W] You can look me up on either the sopa slack or I am on Twitter though not very often.
00:00:20 [W] All right, and then myself Patrick Opa maintainer engineer at styra on slack all the time in Yelp and same you can tweet at me, but I may not Tweet back.
00:00:33 [W] All right.
00:00:34 [W] So let's talk for a second about what Opa is an open source project cncf founded by styra in 2016 and 2018 donated and cncf sandbox project since then is gone incubating.
00:00:49 [W] Have a beer graduated question mark As of recording this right now, it's up for voting by the TOC but it is in process to become graduated.
00:00:46 [W] Yeah, fingers crossed.
00:00:47 [W] There's no blocking issues.
00:00:48 [W] So hopefully by the time people are watching this, you know, good things will happen. The project is got tons of contributors who a pretty broad spectrum.
00:00:59 [W] We have kind of The Usual Suspects that Google Microsoft. We also have a bunch of stars.
00:01:04 [W] Helps as well as end users.
00:01:06 [W] We have people like chef and some others that you know, they use Opa they came back they can shoot we did they help out the community.
00:01:14 [W] The users are also vary across the Spectrum everywhere from you know, the big kind of cloud Giants down to startups and financial institutions and other sort of more traditional Enterprise.
00:01:30 [W] So what is over it's a general-purpose policy engine sounds super vague. And the reason being it sort of is in the sense that it's not domain-specific.
00:01:41 [W] It's not just for solving, you know, authentication authorization.
00:01:45 [W] It's not for you know image scanning.
00:01:48 [W] It's a policy language that and the runtime and the tools to actually like, you know, evaluate that and make decisions. So at a
00:01:58 [W] Json whatever, you know, if you can Json serialize it can go into oppas input the decision same deal often times.
00:02:00 [W] You're going to see a Boolean, you know, like allow.
00:02:02 [W] Yes, no nothing, but it doesn't have to be the case.
00:02:05 [W] It can be a set of reasons why it wasn't allowed it could be, you know a set of mutations. What labels to add to a pod or something right the service here in this picture.
00:02:17 [W] these logos have an existing integration but in-toto
00:02:21 [W] really could be anything your Custom Service can be a plug-in some external operator has a authorization to lure, you know, some of them some actually a plug-in some actually have like a separate rest API or something that
00:02:36 [W] Doesn't really matter for Opa as long as you can translate it into some Json payload. It'll work.
00:02:28 [W] So again, like digging a little deeper you're getting the declarative policy language.
00:02:34 [W] Rego it essentially it's a query language that's built to let you reason about structured data asking questions. Typically like kind of user do something, you know some action
00:02:49 [W] language that the bill to let you reason about structured data asking questions typically like kind of user do something, you know some action on some resource or you know, is this is this object missing a
00:02:59 [W] For you know, is this is this object missing a field or some value of property of that object in valid or invalid.
00:03:10 [W] There's a ton of built-in functions in the language.
00:03:12 [W] It provides the ability to do kind of context-aware things the the main kind of like selling point there being that you don't just have your policy and the input you can have external data to so if you're trying
00:03:27 [W] they're being that you don't just have your policy and the input you can have external data to so if you're trying to answer a question about something he I request you can also provide external Json data such as
00:03:42 [W] You can also provide external Json data such as maybe the entitlements where users group permissions hook it up to your active directory or something.
00:03:53 [W] You know, it's very flexible. Again, Json and Json out the other piece of having this custom language is performance optimizations.
00:04:03 [W] So the the query language it's a declarative.
00:04:08 [W] So you write your policy.
00:04:09 [W] You don't have to worry about the performance so much that's you know,
00:04:12 [W] All right. Our problem is open to Bella purrs, the the kind of nice part in addition to optimizations is that the way that it's written in structured allows us to do a lot of cool tricks for reasoning about the policy
00:04:27 [W] Like you know how fast it is, but also like how correct is.
00:04:33 [W] The last piece here might be wondering what we've been talking about features. But like what actually is it?
00:04:40 [W] it's typically going to either be used as a going library or as a sidecar can post level demon. So Opa opal comes is a binary that you can run.
00:04:53 [W] Most people just use Docker image and you know gives you like the kind of like lowest latency approach with those
00:05:02 [W] The kind of like higher level stackrox features the biggest the yeah.
00:05:11 [W] We call them Enterprise features here.
00:05:12 [W] You have a set of things for essentially managing the OPA agents and this includes their status audit logs things like packaging and Delivery for the policies themselves
00:05:28 [W] Like Dynamic configuration and things like that the last step here to sort of round it out is the the tooling to write policies.
00:05:29 [W] So the CLI that the OPA binary provides a bunch of tools built in but there's also a whole it's a pretty pretty like fully fledged ecosystem now of IDE and editor Integrations that
00:05:44 [W] The nice ways to write your policies, but also test them and profile them.
00:05:35 [W] Do do kind of regular like code development with them.
00:05:41 [W] One of those very common is the OPA playground.
00:05:45 [W] some to take a second to show that to you.
00:05:51 [W] This is the Ringo playground.
00:05:52 [W] It's a open to LAN.
00:05:55 [W] Anybody can use this card to see the URL but it's played open policy agent dot org, you go to the OPA website.
00:06:03 [W] There's a link to it.
00:06:03 [W] This gives you a really good way to just play around with the language.
00:06:08 [W] Try things out help kind of explore not only how to write the policies but how to troubleshoot them reason about them walking through just kind of your smile for
00:06:20 [W] Of you your first policy here essentially each policy file defines a few things.
00:06:27 [W] They each have a package which defines where and kind of the virtual document structure that we query against that that policy exists.
00:06:39 [W] also have rules that we Define as a few types the overall syntax is basically defining some rule name and a value for it with
00:06:50 [W] Well, we're sitting is build a virtual like we're declaring a document.
00:06:55 [W] Under that document tree under the app dot are back path.
00:06:59 [W] We have a rule and by default. This rule allow is false.
00:07:04 [W] There are no conditions.
00:07:05 [W] It's just that's it by default its false.
00:07:09 [W] Our next statement says allow is true by, you know omitting the equals true.
00:07:17 [W] These are equivalent statements we're saying allow is true. If the user isn't add users.
00:07:25 [W] Admin here is another rule we scroll down we can see that user is admin is true. If for some I I being a variable in data user roles input is whole big long select.
00:07:39 [W] Yeah.
00:07:41 [W] What this is doing is creating the document structure and saying find a variable I if a value exists for I inside of this this path that I'm defining this rule is true.
00:07:53 [W] The rule is true is everything in the you will body is true so data, we're referencing into our external data.
00:08:02 [W] we have here in this middle section aptly named data user roles.
00:08:10 [W] Inside of user roles.
00:08:11 [W] Here we can see that there is indeed a user.
00:08:07 [W] The value is Alice. So if we go back down see user roles Alice, okay, so far so good. That thing is an array. There is at the zeroth element its spring that's is
00:08:23 [W] So we've sort of reason our way through what Opa would evaluate in that.
00:08:03 [W] Yes there exists an eye where admin is, you know equivalence is the string. Admin is equivalent.
00:08:10 [W] We can verify that we can do something cool here in the playgrounds evaluate the selection what this is telling us is that Opa crunch the numbers found a variable says I value 0 made this
00:08:26 [W] And really this this concept is what everything is built on Opa is trying to find variables that make things grew if it does exist there to find that it bubbles back at the top.
00:08:37 [W] So in this case for the input, we're looking at the users Alice they are an admin. Therefore allow is going to be true and if we evaluate Allah how
00:08:51 [W] We will see that yes indeed.
00:08:53 [W] It is true.
00:08:54 [W] So there you go.
00:08:56 [W] This is our you know crash course.
00:08:58 [W] everybody is now an open experts. This is you know, your first taste of the language but it's it really is kind of that simple and that you're defining these things that essentially just they set up some
00:09:13 [W] Addition over that structured data and you know Opa tries to see if it's true.
00:09:15 [W] And I will switch back to slides.
00:09:22 [W] Okay, and
00:09:27 [W] now that we've seen a little bit of the policies themselves, you might be wondering like where do you use these things?
00:09:35 [W] There's a slide earlier that showed service box and had some logos.
00:09:40 [W] I think the important thing is to sort of sit back take a look at like, you know, we're at Kuma gum attending could con.
00:09:48 [W] Um, and the in these ecosystems everybody's got ci/cd pipelines. They've got deployment management.
00:09:57 [W] they've got container orchestration got Cloud management all their infrastructure as code, you know, nobody is well, most people you know have it automated is to link and stig's everything's going through apis
00:10:13 [W] Themselves are all built on microservices. Most of which are using some kind of, you know, servicemeshcon Gateway haproxy, whatever and then you also have worked databases backbone of a lot of these things every single one of
00:10:18 [W] Has policy and every single one of these spots has an integration point for OVA whether that's an existing Plug-In or a place where you can add your own custom call out to do the the authorization or the the sort of policy enforcement
00:10:21 [W] Custom call out to do the the authorization or the these sort of policy enforcement Opa. Is there as the economy unified way of defining these policies?
00:10:30 [W] That's really the primary objective.
00:10:33 [W] That's what it was built for.
00:10:34 [W] That's what we set out to do and I think the ecosystem page sort of shows that we're succeeding.
00:10:41 [W] a pretty broad spectrum of Integrations here.
00:10:47 [W] Everything from doing you know, like object storage authorization to living is like 1080i gateways that you know people of plug-ins for as well as doing like Mission Control terraform Flynn validation
00:11:02 [W] All kinds of other stuff.
00:11:03 [W] I'd recommend you guys check this out.
00:11:05 [W] The short link should work. If it doesn't just go to the OPA website and click on ecosystem link.
00:11:14 [W] It's pretty easy to find.
00:11:16 [W] And we do keep this up to date so it should reflect the latest and greatest stuff.
00:11:22 [W] Speaking of Integrations latest and greatest stuff one that we want to call out is contest.
00:11:29 [W] So I think probably a lot of people have heard of it.
00:11:31 [W] You haven't go check it out, you know, there's a quote here straight from the readme but it essentially gives a little bit of an opinionated way to write Opa policies and validate over structured data in this case
00:11:46 [W] Config files, whether those config files are kubernative manifest or a Docker file or whatever doesn't really matter back to that, you know point if you can turn it into a Json object.
00:11:57 [W] You can write policy over it and so they do that.
00:12:03 [W] It's super popular.
00:12:04 [W] Check it out is a reason in the popular one thing that I do want to call out here.
00:12:09 [W] It's really cool contest is now an official Opa project. So they've
00:12:14 [W] they've moved in there underneath the open all situation org ongoing efforts to you know, further integrate server functionality between core Opa and contest but yeah, definitely something we're looking at but we're could come on
00:12:29 [W] Let's start talking about config files because we love mlperf.
00:12:51 [W] GateKeeper
00:12:53 [W] Okay, let's take a look at gatekeeper.
00:12:57 [W] First of all, what is gatekeeper? Our tagline is that gatekeeper is a customizable kubernative admission webhook that helps enforce policies and strengthen governance.
00:13:07 [W] And if we look at the sort of history of the project we can see how it is kind of an outgrowth of earlier styra efforts. So styra originally released the
00:13:22 [W] sigh car back in 2017 that basically watched config Maps as a way to import Opa policy and Microsoft in December of 2018 Road a project called kubernative policy controller
00:13:23 [W] that builds on top of that and added mutation and a little bit after that time Microsoft Google and styra and other collaborators started to work together on creating a new
00:13:26 [W] sort of reimagining of what this could look like that was called gatekeeper, and that's what we've been doing since then and so a bit about what gatekeeper actually is in practice is gatekeeper is
00:13:41 [W] Both a web hook that provides admission control for kubernative use as well as an audit system that provides ongoing monitoring of your kubernative.
00:13:51 [W] He's configuration to make sure that it is not drifted away from whatever policy you are attempting to comply with and if we look at the web hook piece of it and try to see how that
00:14:07 [W] X we see that there's this big blue rectangle here called the API server and when a user has an inbound requests a they run Cube cuddle apply or something similar.
00:14:22 [W] It's going to hit the API server, which is going to as part of its admission Control process.
00:14:28 [W] send out an admission review web hook to or sorry admission review request to gatekeeper, which is then going to forward a query to Opa to return a response in terms
00:14:43 [W] Terms of how we figure out what response to give what's happening is that gatekeeper establishes a watch on the policy configuration objects. So for gatekeeper that is constraints and constraint templates as well
00:14:58 [W] well has any other objects in the cluster that you may be watching in order to have referential policies, you know, something like make sure that this the value for this label is unique on a per namespace basis that kind of thing
00:15:13 [W] And based off of those cash resources and the policies that have been loaded in Opa formulates response that gatekeeper then passes back to the API server, which renders its verdict back to the
00:15:30 [W] So if we think about the core features that Gatekeepers offering users these sort of highlight features are that it's a validating admission controller right that we
00:15:45 [W] Coverage also it provides audit functionality this periodic checking of your cluster config to prevent drift as well as maintains oppas ability to provide context where
00:16:00 [W] Preferential policies but with a specific focus on being compatible with the krm conventions of kubernative as well if we look at the
00:16:15 [W] a policy side of things the constraint and constraint template conventions allow users to have easily shareable policy bundles that are designed to be non interactive and
00:16:29 [W] Once they load those constraint templates in there are able to create policy simply using constraint objects, which should be just straight llamo configurations.
00:16:42 [W] Like these are the specific labels.
00:16:45 [W] I want to make sure exists is a common example, another highlight high level feature of gatekeeper is dry run. We would like users to be able to test their
00:16:57 [W] these on a provisional basis and get information as to whether adding a new policy would actually break the cluster.
00:17:08 [W] So this is kind of like a pretend enforcement that's giving you feedback either through Prometheus metrics through logs or through audit results that if you were to actually enforce this policy, these requests would have
00:17:23 [W] Ejected or this particular resource that is already in your cluster would no longer be in compliance.
00:17:31 [W] And so if we also look at what's new since the last time we talked to you which is the virtual Cube Connie you there are a few changes the
00:17:46 [W] being that we are now stable her egg and that we have support for Helm three for those users who deploy using Helm charts and in terms of efficiency
00:18:01 [W] we have provided P Prof profiling which gives users the ability to see where Gatekeepers spending time for its CPU Cycles as well as where RAM usage is going as well as
00:18:16 [W] Is overhauling the memory usage profile for audit? Hopefully lowering the maximum possible memory usage when you start scaling to large clusters.
00:18:27 [W] We are exploring and events framework where certain audits incidents or rejections are reported to the user as kubernative events.
00:18:42 [W] We would definitely like feedback on sort of the granularity that users would like to see for events.
00:18:52 [W] And other than that, there's a lot of process improvements that have been happening on the back end. So backwards compatibility guidelines is a big one for users who want to have confidence that upgrades
00:19:07 [W] to maintain compatibility across upgrades the release management doc will give you some idea of our release Cadence and we have split the constraint template Library, which is a repository of constraint templates that
00:19:22 [W] Been developed by the community for users to use to form their own policy.
00:19:26 [W] We have split that into its own Repository.
00:19:32 [W] All right.
00:19:33 [W] let's take a look at what gatekeeper can do. So in this shell I have open here. We have a connection to a kubernative cluster that is running gatekeeper.
00:19:48 [W] you can see the simply list the name spaces gatekeeper system exists, which is a good indicator that gatekeeper is at least installed and let's look at some of the constraint templates
00:20:03 [W] we have
00:20:06 [W] so we just have the one constraint template in this case.
00:20:10 [W] It is called Kate's PSP privileged container. And this is an analog constraint to pods security policy.
00:20:21 [W] What it's doing is it is disallowing the use of privileged containers inside the cluster if I look at what?
00:20:36 [W] We have installed.
00:20:37 [W] Thank you cuddle get from strings here.
00:20:41 [W] that will change in a soon-to-be-released release. We can see that I have instantiated this constraint template as a constraints.
00:20:53 [W] Let's see status of this is not a little get
00:21:00 [W] PSP privilege container let's actually get the full yamo and we can see in the status of this resource.
00:21:13 [W] That's we have four total violations.
00:21:20 [W] What are they are listed below gatekeeper actually by default lists a maximum of 20 violations for / constraints.
00:21:29 [W] So each of these are going to be pods, right?
00:21:33 [W] Because this is a Cod security policy equivalent constraint and we can see I'm running a version of opa that is requesting privileges Q proxy is running with higher privileges than we would like.
00:21:49 [W] And a couple of other Cube system pods.
00:21:53 [W] I'm actually going to ignore the cube system pods for now because it's keep system.
00:22:00 [W] Let's look at this Opa pods, so he cuddled get pods Opa it was called we can see that name here and that it is in the default namespace.
00:22:18 [W] actually gets
00:22:21 [W] the full config for it.
00:22:23 [W] and we can see somewhere in here that I have set security context privileged equal to True which is why the constraint is unhappy
00:22:40 [W] So that's good.
00:22:41 [W] This is what we would expect audit is telling us that our constraints are being violated what happens if I try to apply so that's a bad object.
00:22:56 [W] I'd say I've helpfully called this directory bad resources and we once knew Opa privileged.
00:23:06 [W] We can see this is basically an open container again with privileged equal to true. So you cuddle apply resources new open privileged and rejected.
00:23:22 [W] Because we are requesting more privileges than the policy wants us to can we remediate this.
00:23:32 [W] So let's edit this.
00:23:37 [W] Privileged and let's just get rid of the lines where we request extra Privileges and apply here and the OPA poddisruptionbudgets.
00:24:05 [W] We finds a few interesting events.
00:24:10 [W] here. We have audit violations showing up and we also should have yes right down here of failed admission.
00:24:20 [W] That is about 46 seconds old from when I tried to apply the invalid Opa poddisruptionbudgets. So this is just a sample of some of the ways that you can use gatekeeper to Define and
00:24:34 [W] Force policy on your cluster as far as Gatekeepers current status as a project as I said before we are now stable, but we are always looking for contributors.
00:24:45 [W] If you want to try us out and Report any issues or general feedback, we would love to hear from you. If you have interesting user stories that you would like to be supported.
00:24:57 [W] Those are definitely welcome raising issues.
00:26:13 [W] Hello, welcome. This is the open policy agent project update and intro.
00:26:19 [W] Hello.
00:26:20 [W] I am Max. I am an engineer at Google.
00:26:23 [W] I am one of the maintainers of the gatekeeper project.
00:26:26 [W] You can look me up on either these Opa slack or I am on Twitter though not very often.
00:26:35 [W] All right, and then myself Patrick Opa maintainer engineer at styra on slack all the time in Yelp and same you can tweet at me, but I may not Tweet back.
00:26:49 [W] All right.
00:26:50 [W] So let's talk for a second about what Opa is an open source project cncf founded by styra 1 2016 and 2018 donated the cncf sandbox project since then is gone incubating.
00:27:05 [W] I have up here graduated question mark As of recording this right now, it's up for voting by the TOC but it is in process to become graduated.
00:27:04 [W] Yeah, fingers crossed.
00:27:05 [W] There's no blocking issues.
00:27:06 [W] So hopefully by the time people are watching this, you know, good things will happen. The project is got tons of contributors who a pretty broad spectrum with thousand of The Usual Suspects that Google Microsoft
00:27:23 [W] The project is got tons of contributors who a pretty broad spectrum with thousand of The Usual Suspects that Google Microsoft.
00:27:31 [W] We also have a bunch of startups as well as end users.
00:27:34 [W] We have people like chef and some others that you know, they use Opa they came back they can shoot we did they help out the community.
00:27:42 [W] The users are also vary across the Spectrum.
00:27:49 [W] Everywhere from you know, the big kind of cloud Giants down to startups and financial institutions and other sort of more traditional Enterprise.
00:27:58 [W] So what is Opa it's a general-purpose policy engine sounds super vague. And the reason being it sort of is in the sense that it's not domain-specific.
00:28:09 [W] It's not just for solving, you know, authentication authorization.
00:28:13 [W] It's not for you know image scanning.
00:28:16 [W] It's a policy language that and the runtime and the tools to actually like, you know, evaluate that and make decisions. So at a
00:28:27 [W] Level Opa you query it the query any input can be Json whatever, you know, if you can Json serialize it and go into oppas input the decision same deal often times. You're going to see
00:28:42 [W] Policy language that and the runtime and the tools to actually like, you know evaluate that and make decisions.
00:28:51 [W] So at a high level Opa you query it the query any input can be Json whatever, you know, if you can Json serialize it and going to oppas input the decision same deal
00:29:20 [W] Like allow yes. No I thing but it doesn't have to be the case.
00:29:24 [W] It can be a set of reasons why it wasn't allowed. It could be, you know a set of mutations.
00:29:30 [W] What labels to add to a pod or something right the service here in this picture.
00:29:36 [W] I think all these logos have an existing integration, but it really could be anything your Custom Service in the plug in some external authorized e authorization to lure, you know, some of them some actually a flowmill
00:29:50 [W] plug in some actually have like a separate rest API or something that is to get implemented, but it doesn't really matter for Opa as long as you can translate it into some Json payload. It'll work.
00:30:03 [W] So again, like digging a little deeper you're getting the declared of policy language.
00:30:09 [W] rhaego it essentially it's a query language that's built to let you reason about structured data asking questions. Typically like kind of user do something, you know some action
00:30:24 [W] For you know, is this is this object missing a field or some value of property of that object in valid or invalid.
00:30:34 [W] There's a ton of built-in functions in the language.
00:30:36 [W] It provides the ability to view kind of context-aware things the the main kind of like selling point there being that you don't just have your policy and the input you can have external data to so if you're trying
00:30:52 [W] Edge it provides the ability to do kind of context-aware things the main kind of like selling point there being that you don't just have your policy and the input you can have external data to so
00:31:16 [W] You know about some API requests. You can also provide external Json data such as maybe the entitlements for users group permissions hook it up to your active directory or something.
00:31:28 [W] It's very flexible. Again, Json and Json out the other piece of having this custom language is performance optimizations.
00:31:39 [W] So the the query language it's a declarative.
00:31:43 [W] write your policy. You don't have to worry about the
00:31:45 [W] performance so much that's you know, all right. Our problem is open developers the the kind of nice part in addition to optimizations is that the way that it's written in structured allows us to do a lot of cool tricks for
00:32:01 [W] Nothing about policy in addition to like, you know how fast it is, but also like how correct is.
00:32:09 [W] The last piece here might be wondering what we've been talking about features. But like what actually is it?
00:32:16 [W] it's typically going to either be used as a going library or as a sidecar can post level demon. So Opa opal comes as a binary that you can run. Most people just use Docker image
00:32:32 [W] Or as a sidecar who post level demon so Opa opal comes as a binary that you can run.
00:32:30 [W] Most people just use Docker image and you know gives you like the kind of like lowest latency approach with those
00:32:40 [W] The kind of like higher level stackrox features the I guess the yeah calm Enterprise features here.
00:32:50 [W] You have a set of things for essentially managing the OPA agents and this includes their status audit logs things like packaging and Delivery for the policies themselves
00:33:05 [W] um, you have a set of things for essentially managing the OPA agents and is includes their status audit logs things like packaging and Delivery for the policies themselves
00:33:29 [W] Like Dynamic configuration things like that. The last step here to sort of rounded out is the the tooling to write policies.
00:33:38 [W] So the CLI that the OPA binary provides a bunch of tools built in but there's also a whole it's a pretty pretty like fully fledged ecosystem now of IDE and editor Integrations that
00:33:53 [W] some tools built in but there's also a whole it's a pretty pretty like fully fledged ecosystem now of IDE and editor Integrations that give you like really nice ways to write your policies, but also test them and profile them
00:34:10 [W] Really nice ways to write your policies, but also test them and profile them. Do do kind of regular like code development with them.
00:34:20 [W] One of those very common is the OPA playground.
00:34:23 [W] So I'm going to take a second to show that to you.
00:34:30 [W] This is the Ringo playground.
00:34:31 [W] It's a open to LAN. Anybody can use this card to see the URL but it's played open policy agent dot org, you go to the OPA website.
00:34:42 [W] There's a link to it.
00:34:42 [W] This gives you a really good way to just play around with the language. Try things out help kind of explore not only how to write the policies but how to troubleshoot them reason about them walking through
00:34:58 [W] Yeah slow for some of you your first policy here.
00:35:00 [W] Essentially each policy file defines a few things.
00:35:05 [W] They each have to have a package which defines where and kind of the virtual document structure that we query against that that policy exists.
00:35:17 [W] We also have rules that we Define is a few types the overall syntax is basically defining
00:35:25 [W] some rule name and a value for it with conditions.
00:35:29 [W] So if we look at something that's maybe a little bit more complicated than this. Hello world one. Look at the role based Access Control example where we're sitting is build a virtual like we're declaring
00:35:44 [W] Document under that document tree under the app are back path.
00:35:35 [W] We have a rule and by default this rule allow is false.
00:35:41 [W] There are no conditions. It's just that's it by default its false.
00:35:45 [W] Our next statement says allow is true by, you know omitting the equals true.
00:35:53 [W] These are equivalent statements we're saying allow is true. If the user isn't add users.
00:36:01 [W] Admin here is another rule we scroll down we can see that user is admin is true. If for some I I being a variable in data, these are rules input is whole big long select.
00:36:15 [W] Yeah.
00:36:17 [W] What this is doing is querying the document structure and saying find a variable I if a value exists for I inside of this this this path that I'm defining this rule is true.
00:36:29 [W] The rule is true is everything in the will body is true so data, we're referencing into our external data.
00:36:38 [W] we have here in this middle section at linear data user roles.
00:36:46 [W] Inside of user roles.
00:36:48 [W] Another rule we scroll down we can see that user is administered through if for some I I being a variable and data, these are roles input is whole big long selector here.
00:36:54 [W] What this is doing is creating the document structure and saying find a variable I if a value exists for I inside of this this this path that I'm defining this rule is true.
00:37:07 [W] The rule is true is everything in the will body is true so data, we're referencing into our external data.
00:37:16 [W] So we have here in this middle section aptly named data user roles.
00:37:23 [W] Inside of user roles.
00:37:25 [W] We're going to be looking for the input dot user if we jump up to our input tab here. We can see that there is indeed a user the value is Alice.
00:37:35 [W] So if we go back down see user roles Alice, okay, so far so good. That thing is an array there is at the zeroth element it string that's is admin.
00:37:49 [W] So we've sort of reasoned our way through what
00:37:53 [W] Opa would evaluate in that.
00:37:55 [W] Yes there exists an eye where admin is you know equivalence is the string. Admin is equivalent.
00:38:03 [W] We can verify that we can do something cool here in the playgrounds evaluate the selection what this is telling us.
00:38:09 [W] is that Opa crunch the numbers found a variable says I at Value 0 made this expression true and really this this concept is what everything.
00:38:23 [W] Built on Opa is trying to find variables that make things true. If it does exist there to find that it bubbles back at the top.
00:38:33 [W] So in this case for the input, we're looking at the users Alice. They are an admin. Therefore allow is going to be true and if we evaluate Allah wow.
00:38:47 [W] We will see that yes indeed.
00:38:49 [W] It is true.
00:38:50 [W] So there you go.
00:38:52 [W] This is our you know crash course.
00:38:59 [W] We go back down to see user roles Alice.
00:39:03 [W] Okay, so far so good. That thing is an array. There is at the zeroth element it spring that's is admin.
00:39:11 [W] So we've sort of reasoned our way through what Opa would evaluate in that.
00:39:17 [W] Yes there exists an eye where admin is, you know equivalence is the string. Admin is equivalent.
00:39:25 [W] We can verify that we can do something cool here in the playgrounds and evaluate the
00:39:29 [W] action what this is telling us is that Opa crunch the numbers found a variable says I at Value 0 made this expression true and really this this concept
00:41:12 [W] They set up some kind of condition over that structured data and you know Opa tries to see if it's true.
00:41:21 [W] And I will switch back to slides.
00:41:29 [W] Okay, and
00:41:33 [W] now that we've seen a little bit of the policies themselves, you might be wondering like where do you use these things?
00:41:41 [W] There's a slide earlier that showed, you know, servicemeshcon had some logos.
00:41:47 [W] I think the important thing is to sort of sit back take a look at like, you know, we're at Kuma gum attending could con.
00:41:54 [W] in these ecosystems everybody's got ci/cd pipelines. They've got deployment management.
00:42:03 [W] They've got container orchestration.
00:42:06 [W] They've got Cloud management all their infrastructure as code. You know. Nobody is well, most people you know have it automated is to link and stig's everything's going through apis.
00:42:18 [W] Your applications themselves are all built on microservices.
00:42:22 [W] Most of which are using some kind of, you know, servicemeshcon Gateway haproxy, whatever and then you also have worked databases backbone a lot of these things.
00:42:33 [W] Operation got Cloud management all their infrastructure as code, you know, nobody's well, most people you know have it automated is to link and stig's everything's going through apis.
00:42:46 [W] Your applications themselves are all built on microservices.
00:42:51 [W] Most of which are using some kind of, you know, servicemeshcon Gateway haproxy, whatever and then you also have worked databases backbone a lot of these things.
00:43:02 [W] Every single one of these spots has policy and every single one of these spots has an integration point for OVA whether that's an existing Plug-In or a place where you can add your own custom call out to do the the authorization or
00:43:40 [W] Out to do the the authorization or the sort of policy enforcement Opa. Is there as the economy unified way of defining these policies?
00:43:51 [W] That's really the primary objective.
00:43:54 [W] That's what it was built for.
00:43:55 [W] That's what we set out to do and I think the ecosystem page sort of shows that we're succeeding.
00:44:02 [W] There's a pretty broad spectrum of Integrations hear everything from doing you know, like
00:44:09 [W] like object storage authorization to living is like 1080i gateways that you know people of plugins or as well as doing like Mission Control terraform plan validation config validation all kinds of other stuff
00:44:25 [W] You guys check this out the short link should work. If it doesn't just go to the OPA website and click on ecosystem link.
00:44:35 [W] It's pretty easy to find and we do keep this up to date. So it should reflect the latest and greatest stuff speaking of Integrations latest and greatest stuff one that we want to call out is contest so
00:44:50 [W] We lot of people have heard of it.
00:44:37 [W] You haven't go check it out. You know, there's a quote here straight from the read me but essentially gives a little bit of an opinionated way to write over policies and validate over structured data in this case
00:44:52 [W] Is config files whether those config files are kubernative manifest or a Docker file or whatever doesn't really matter back to that, you know point if you can turn it into a Json object.
00:45:00 [W] you can write policy over it and so they do that.
00:45:06 [W] It's super popular.
00:45:07 [W] Check it out is a reason in the popular one thing that I do want to call out here.
00:45:13 [W] It's really cool contest is now an official Opa project. So they've
00:45:17 [W] they've moved in there underneath the open policy agent org ongoing efforts to you know, further integrate server functionality between core Opa and contest but yeah, definitely something we're looking at but we're could come on
00:45:32 [W] Let's stop talking about config files because we love mlperf.
00:46:00 [W] at GateKeeper
00:46:03 [W] Okay, let's take a look at gatekeeper.
00:46:06 [W] First of all, what is gatekeeper?
00:46:08 [W] Well, our tagline is that gatekeeper is a customizable kubernative admission webhook that helps enforce policies and strengthen governance.
00:46:16 [W] And if we look at the sort of history of the project we can see how it is kind of an outgrowth of earlier styra efforts. So styra originally released the
00:46:31 [W] sigh car back in 2017 that basically watched config Maps as way to import Opa policy and Microsoft in December of 2018 wrote a project called kubenetes policy controller
00:46:38 [W] built on top of that and added mutation and a little bit after that time Microsoft Google and styra and other collaborators started to work together on creating a new sort of
00:46:43 [W] Of what this could look like that was called gatekeeper, and that's what we've been doing since then and so a bit about what gatekeeper actually is in practice is gatekeeper is both a web hook.
00:46:56 [W] That provides admission control for kubernative has as well as an audit system that provides ongoing monitoring of your kubernative.
00:47:02 [W] He's configuration to make sure that it is not drifted away from whatever policy you are attempting to comply with and if we look at the web hook piece of it and try to see how that
00:47:17 [W] We see that there's this big blue rectangle here called the API server.
00:47:22 [W] And when a user has an inbound requests a they run Cube cuddle apply or something similar.
00:47:29 [W] It's going to hit the API server, which is going to this part of its admission Control process send out an admission review web hook to or sorry admission review request to gatekeeper,
00:47:44 [W] Going to forward a query to Opa to return a response in terms of how we figure out what response to give.
00:47:50 [W] what's happening. Is that gatekeeper establishes a watch on the policy configuration objects.
00:47:57 [W] So for gatekeeper that is constraints and constraint templates as well as any other objects in the cluster that you may be watching in order to have referential policies, you know, something like
00:48:10 [W] Make sure that this the value for this label is unique on a per namespace basis that kind of thing and based off of those cash resources in the policies that have been loaded in Opa formulates
00:48:25 [W] But a keeper then passes back to the API server, which renders its verdict back to the user.
00:48:28 [W] So if we think about the core features that Gatekeepers offering users these sort of highlight features are that it's validating and Mission controller,
00:48:43 [W] that we just covered also it provides audit functionality this periodic checking of your cluster config to prevent drift as well as maintains oppas ability to provide context where
00:48:50 [W] policies but with a specific focus on being compatible with the krm conventions of kubernative as well if we look at the policy side of
00:49:02 [W] Well, we'll see look at the policy side of things the constraint and constraint template conventions allow users to have easily shareable policy bundles that are designed to
00:49:15 [W] conventions allow users to have easily shareable policy bundles that are designed to be non interactive and the once they load those constraint templates in there are able
00:49:38 [W] Does and the once they load those constraint templates in there are able to create policy simply using constraint objects, which should be just straight.
00:49:52 [W] llamo configurations.
00:49:55 [W] Like these are the specific labels.
00:49:57 [W] I want to make sure exists is a common example, another highlight high level feature of gatekeeper is dry run we would like users to be able
00:50:08 [W] able to test their policies on a provisional basis and get information as to whether adding a new policy would actually break the cluster.
00:50:19 [W] So this is kind of like a pretend enforcement that's giving you feedback either through Prometheus metrics through logs or through audit results that if you were to actually enforce this policy these
00:50:35 [W] Have been rejected or this particular resource that is already in your cluster would no longer be in compliance.
00:50:42 [W] And so if we also look at what's new since the last time we talked to you which is the virtual Cube Connie you there are a few changes the
00:50:58 [W] we are now stable her egg and that we have support for Helm three for those users who deploy using Helm charts and in terms of efficiency we
00:51:08 [W] P Prof profiling which gives users the ability to see where Gatekeepers spending time for its CPU Cycles as well as where RAM usage is going as well as overhauling the
00:51:19 [W] File for audit hopefully lowering the maximum possible memory usage when you start scaling to large clusters.
00:51:25 [W] We are exploring and events framework where certain audits incidents or rejections are reported to the user as kubernative
00:51:40 [W] In Italy like feedback on sort of the granularity that users would like to see for events.
00:51:48 [W] And other than that, there's a lot of process improvements that have been happening on the back end. So backwards compatibility guidelines is a big one for users who want to have confidence that upgrades how
00:52:03 [W] Compatibility across upgrades the release management doc will give you some idea of our release Cadence and we have split the constraint template Library, which is a repository of constraint templates that have been developed by the
00:52:15 [W] Or users to use to form their own policy.
00:52:14 [W] We have split that into its own Repository.
00:52:20 [W] All right.
00:52:21 [W] let's take a look at what gatekeeper can do. So in this shell I have open here. We have a connection to a kubernative cluster that is running gatekeeper.
00:52:36 [W] We list the name spaces gatekeeper system exists, which is a good indicator that gatekeeper is at least installed and let's look at some of the constraint templates we
00:52:47 [W] Some of the constraint templates we have.
00:52:53 [W] So we just have the one constraint template in this case.
00:52:57 [W] It is called Kate's PSP privileged container. And this is an analog constraint to pods security policy.
00:53:07 [W] What it's doing is it is disallowing the use of privileged containers inside the cluster.
00:53:19 [W] If I look at what constraints we have installed, thank you fellow get from strings here.
00:53:27 [W] that will change in a soon-to-be-released release. We can see that I have instantiated this constraint template as a constraints.
00:53:39 [W] Let's see status of this is not a get.
00:53:46 [W] PSP privilege container let's actually get the full Jama and we can see in the status of this resource.
00:54:00 [W] That's we have four total violations.
00:54:05 [W] Look at what constraints we have installed?
00:54:11 [W] Thank you cuddle get from strings here.
00:54:13 [W] that will change in a soon-to-be-released release. We can see that I have instantiated this constraint template as a constraints.
00:54:25 [W] Let's see status of this is not a little get
00:54:32 [W] PSP privilege container let's actually get the full Jama and we can see in the status of this resource.
00:54:45 [W] That's we have four total violations.
00:54:51 [W] What are they are listed below gatekeeper actually by default lists a maximum of 20 violations for / constraints.
00:55:01 [W] So each of these are going to be pods, right because this is a called security policy equivalent constraint and we can see I'm running a version of opa that is
00:55:15 [W] Questing privileges Cube proxy is running with higher privileges than we would like and a couple of other Cube system pods.
00:55:25 [W] I'm actually going to ignore the cube system pods for now because it's keep system.
00:55:32 [W] Let's look at this Opa pods, so he cuddled get pods.
00:55:41 [W] Opa it was called you can see that name here and that it is in the default namespace.
00:55:50 [W] actually gets
00:55:53 [W] the full config for it.
00:55:55 [W] and we can see somewhere in here that I have set security context privileged equal to True which is why the constraint is unhappy
00:56:37 [W] say called security policy equivalent constraint and we can see I'm running a version of opa that is requesting privileges Cube proxy is running with higher privileges than we would like
00:58:32 [W] Good.
00:58:32 [W] This is what we would expect audit is telling us that our constraints are being violated.
00:58:39 [W] what happens if I try to apply?
00:58:44 [W] Let's a bad object.
00:58:47 [W] So let's see.
00:58:48 [W] I've helpfully called this directory bad resources and we want new Opa privileged we can see this is basically an open container again with privileged equal
00:59:04 [W] new Opa privileged
00:59:06 [W] we can see this is basically an open container again with privileged equal to true.
00:59:12 [W] So you cuddle apply resources new Opa privileged and rejected because we are requesting more privileges than the policy wants
00:59:27 [W] It's too can we remediate this?
00:59:31 [W] let's edit this.
00:59:37 [W] Privileged and let's just get rid of the lines where we request extra Privileges and apply here and the OPA poddisruptionbudgets.
01:00:05 [W] We finds a few interesting events.
01:00:10 [W] here. We have audit violations showing up and we also should have yes right down here a failed admission.
01:00:20 [W] that is about 46 seconds old from when I tried to apply the invalid Opa poddisruptionbudgets.
01:00:27 [W] So this is just a sample of some of the ways that you can use gatekeeper to Define and
01:00:34 [W] Force policy on your cluster as far as Gatekeepers current status as a project as I said before we are now stable, but we are always looking for contributors.
01:00:45 [W] Finds a few interesting events.
01:00:49 [W] here. We have audit violations showing up and we also should have yes right down here of failed admission.
01:00:59 [W] that is about 46 seconds old from when I tried to apply the invalid copepod. So this is just a sample of some of the ways that you can use gatekeeper to Define and enforce
01:02:32 [W] Raising issues on the GitHub project is a great way to provide those and of course if you're a developer, and you're looking to contribute to gatekeeper, we would love to love to work with you.
01:02:44 [W] So please join.
01:02:48 [W] if we are looking towards sort of the future of where gatekeeper is looking to go these top three items are things were actively focusing on the biggest I think
01:03:03 [W] Tation which is pretty heavily requested.
01:03:07 [W] So we have an active design out for that which is pending approval as of this recording and hopefully by the time you see this will be in development for mutation for an outlet. Another area of emphasis
01:03:22 [W] Teleport tooling for writing constraint templates and making that process a little easier.
01:03:19 [W] And as I said, the violations is kubernative events feature is in Alpha.
01:03:26 [W] So we're going to continue to think about what that story looks like in the future and these other items are things we're interested in and we have our eye on the top three are where we're currently
01:03:41 [W] hurt
01:03:40 [W] So please join us you can contribute to open policy agent by visiting their GitHub repo at OPA github.com open policy agent.
01:03:52 [W] / okay, or you can look at gatekeeper github.com such open policy agent / gatekeeper join us on slack or however, you're comfortable communicating.
01:04:04 [W] love to hear from you.
01:04:14 [W] Okay, I think we're live now for questions.
01:04:17 [W] So we only have a few minutes. So if we don't get to any questions will be in the slack for the like to - koukin - maintainer slack channel, so it will be in there answering questions.
01:04:33 [W] I guess just going through the list one of the first slides.
01:04:28 [W] Let's say first couple of questions are about the slides.
01:04:31 [W] So we'll post a copy of those offline.
01:04:33 [W] They just didn't get uploaded to the the schedule like session stuff.
01:04:37 [W] So look for that shortly.
01:04:42 [W] And then let's see what else we have.
01:04:44 [W] So max you want to take this one about mutation question number nine on the bottom there.
01:04:52 [W] Yeah.
01:04:53 [W] Sure.
01:04:53 [W] So the question is will Gatekeepers support mutation to remediate / update things automatically for common things like image comma resource defaults and other defaults. We would like to apply to resources.
01:05:09 [W] The answer that question the short answer is yes, the slightly longer answer is you know mutation is actively under development.
01:05:16 [W] It's not going to be the first thing we Implement I expect it will become shortly after we implement the mutation webhook and kind of a warning caveat thing.
01:05:27 [W] I don't know if we would enable it by default just because remediation has the potential to be dangerous.
01:05:35 [W] Imagine if you have a mutation adding a sidecar to all pods, you could wind up killing and restarting all pods in your cluster kind of at once that's that's an example of the risk. So if you if you are looking to do something like that.
01:05:50 [W] Definitely.
01:05:46 [W] be careful how you change your mutation policy over time?
01:05:53 [W] Let's see. If there's a question here can open be used with an access management tool like key cloak if yes, so there any current examples so the answer is yes.
01:06:03 [W] So what what often happens for like the the sort of like split up between like authorization and authentication?
01:06:11 [W] So you use like key cloak or some other like like ox 0 or whatever to actually be like your identity provider that you know, that's the thing that hands out like your tokens and
01:06:22 [W] And use their their keys to validate like your jobs or other things that are being passed around Opa has built ins to allow you to like verify the tokens.
01:06:32 [W] So if you imagine like an API request comes in with a token that came from Key cloak you can you can have like the the token get verified by keys from Key cloak or pull an extra data or something like that.
01:06:47 [W] There's not like a direct like a plug-in or something that goes between the two it's more like their little decoupled. I guess as far as current examples.
01:06:50 [W] I don't think there's anything specific to he cloak. But if you look around at some of the like Envoy use cases, there's a lot of examples showing like doing chop like validation and pulling information out of those to enforce policies.
01:07:04 [W] And I think we're just about out of time as it was one more on here.
01:07:09 [W] It's open a good solution for AWS policies on ec2 S3.
01:07:13 [W] I think the question is very broad as far as like how you enforce those and things like that.
01:07:21 [W] I think the takeaway that I want to leave is that Opa doesn't necessarily have like the enforcement point for those so you can make decisions about that, but you need an enforcement point so sometimes that's contest with the terraform plan.
01:07:34 [W] It could be your API, you know Gateway that you use so there's there's a few places where you could do that but it's not something that's you know out of the box.
01:07:44 [W] Hopefully that makes sense and I think we're at time.
01:07:51 [W] Set correct 125.
01:07:55 [W] I think we're also at questions that was all the questions that have been asked perfect.
01:08:00 [W] Or we will be on the the open policy agent slack me and Max are both on there all the time. So feel free to send us messages there, too.
01:08:07 [W] Thanks everyone for coming.
