A Journey Through Kubernetes Admission Controller Taxanomy: KXJU-4820 - events@cncf.io - Wednesday, August 19, 2020 11:39 AM - 1139 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:01:14 [W] Our talk on prevent.
00:01:16 [W] He's at Mission controllers.
00:01:17 [W] My name is Morgan.
00:01:19 [W] I'm here with trainee who works together with me at IBM on open source projects as an open-source contributor today.
00:01:30 [W] We want to take you through an overview of admission controllers discussing the history and a sort of kept classification of admission controller so that when you encounter them, you understand what they are and the different organizations.
00:01:43 [W] We're going to start with the history and then we'll have a high-level overview of
00:01:49 [W] The initiative polar is followed by deeper sort of code view into what you see when interacting with them or developing your own.
00:02:00 [W] And so to start with what is an admission controller in abstract.
00:02:08 [W] It's a way to validate or modify objects as they come in before they are persisted to database that is that see in a technical sense for the built-in compiled inversions.
00:02:22 [W] They're implementing the go validation of your face or mutation interface will look at that and what that is and for
00:02:31 [W] the
00:02:33 [W] in abstract its way to validate or modify objects as they come in before they are persisted to database that is that c and a technical sense for the built-in compiled inversions
00:02:45 [W] Next. Okay. And so the history of them in Mission Control is basically I've been since kubermatic in kubernative since nearly the beginning and the first was pulled out first in
00:03:03 [W] Object validation into a pluggable interface as well as allow other plugins to exist in the future.
00:03:15 [W] The first web hooks started out around 1.4 and existed for specific API types to call out to specific web servers and we're not sort of as configurable
00:03:28 [W] and existed for specific API types to call out to specific web servers and we're not sort of as configurable as the generic web hooks are the day and so we have
00:03:34 [W] Into v v 1.9. We have the separation of both generic web Hooks and mutation and this allows.
00:03:49 [W] Configuration to look at any objects as well as a specific formalization of the ability to modify the objects as they come in everything that exists today
00:04:04 [W] this allows
00:04:05 [W] configuration to look at any objects as well as a specific formalization of the ability to modify the objects as they come in everything that exists today comes
00:04:06 [W] from
00:04:06 [W] one point is V 1 is e 1 now it's not alphabet anymore and exist in kubenetes from 116 on word, which can covers most of the currently supported releases.
00:04:21 [W] So despite our title being taxonomy, you can sort of historically go back and see the history of how these evolved but it's easier to classify them into sort of this Punnett Square type object where you look at whether it's compiled
00:04:41 [W] and we also look at whether it's validating or mutating the built-in validating web hooks are some of the earliest validating admission controllers built-in file them are some of the earliest ones that are available
00:04:57 [W] The web hooks came in to validate sort of allowed images.
00:05:06 [W] That was one of the first web hooks mutating came somewhat later. One of the first ones being pawed presets, which allows them to which allowed users to create a configuration to modify pods as they arrived
00:05:19 [W] And I think the most interesting category would be mutating web hooks, which are most useful for cri-o is and it's in that it is the only way to validate and apply defaulting for crd S.
00:05:35 [W] And so there are n a provided by the code but there are integration tests that use defy a testing one called AGN host and that is what we will look at later.
00:05:49 [W] And now it is trainees turn.
00:06:03 [W] Thanks Morgan and I would like to talk about what I'd Mission controllers are give you a good overview on
00:06:08 [W] What I Mission controllers are give you a good overview on everything we know about them.
00:06:12 [W] So what are our mission controllers?
00:06:19 [W] First of all and kubenetes controllers are control loops that watch the state of the capacitor and each of these controller tries to move the cluster state to desired State admission controllers
00:06:28 [W] Admission controllers on the other hand are plugins that govern and enforce how the cluster is used there nothing but interceptors to in the incoming API called their execution to fines and customizes how a cluster operate.
00:06:42 [W] And you should control the web hooks on the head or simple HTTP callbacks and addition controller web hooks are like I stated mutating as well as well.
00:06:55 [W] Dating are specially controllers compiled into the API server.
00:07:00 [W] There are many other plugins compiled into the API server. These plugins can respond to the incoming create delete modify kind of request.
00:07:14 [W] on and resources in the communities cluster many Advanced features in communities require an admission controller plug in to be enabled in order to properly support the future as a result
00:07:28 [W] Properly configured with the right set of admission controllers may be an incomplete server and will not support most of these features.
00:07:40 [W] Let's look at the flow of an incoming request as a request comes in authorized and authenticated properly.
00:07:46 [W] It will go through imitating phase where any mutating built-ins as well as custom web hooks gets executed serially, and then those will
00:07:58 [W] Affect the incoming object suspect or make modifications to the spec and they eventually goes through an object schema validation where the spec is validated for the object and just through a validation phase where
00:08:14 [W] The trains as well as that pokes validate various fields in the incoming object. If everything goes fine, it gets persisted to the database it City if
00:08:29 [W] Of them fails the request can get rejected as you can see here.
00:08:40 [W] It used to be - - admission control flag that was set.
00:08:44 [W] I was that replicated in 110. I believe which where we used to present all the web hooks in an orderly match fashion with mutating admissions where coca and validating admission record
00:08:56 [W] but with the new plaque in able admission plugins there we don't need any order and each of the API servers set this set of flags as by on a required basis, like for example, if I
00:09:13 [W] flags as Vienna required basis like for example, if I you need to read through the documentation of the individual providers, like for example
00:09:23 [W] providers like for example IBM Cloud here shows you the set of plugins that are enabled similarly every
00:09:32 [W] cloud provider may have different set of plugins enabled.
00:09:40 [W] So the main function of the built-in plugins is to provide security governance and configuration. For example, some of the plugins a built-in plugins that I have mentioned here default storage plug-in. That's a default
00:09:57 [W] Mr. Rich request if storage class is not specified limit Ranger other handsets a default limits on CPU and memory within a namespace if they are not specified interesting part is always full images here, which will protect
00:10:13 [W] Private images in a multi-tenant environment forcing every other user to provide proper authentication and put your images if they want to use it.
00:10:24 [W] So let's move on to validating admission web Hook when all the matching weaveworks are found.
00:10:37 [W] They are executed parallely. And if any one of these web books fail, the entire request gets rejected no mutation can occur because this is the last and the Final Phase as we saw which is the validation phase and
00:10:46 [W] You can see the rules are based on operations curve scope can be cluster or namespaced as in the example here.
00:10:56 [W] I have even created on the Pod with the name space. There is another flag we can obtain the hook configured to use that object selector, which will skip the polymer the web for give the label matches as
00:11:09 [W] We can obtain that configured to use an object selector, which will skip the polymer the web for give the label matches as depicted here.
00:11:13 [W] On the other hand looking at the mutating admission that perks they are called see really let us talk about the requests coming in.
00:11:26 [W] These are history be called bats. Like I mentioned admission review object is presented to the web for this contains a uid universal ID and the resource object that needs my attention or validation right
00:11:38 [W] mutation the response should contain this uid, which is presented to it back and then a flag called aloud which is set to true or false depending upon whether the web Hook is accepting or rejecting this request
00:11:53 [W] And for a metering mapper Apache is also present returned before that.
00:12:08 [W] I want to say in case of error they were hooked should return a proper HTTP error with a nice user friendly message like use signature missing and they coming poddisruptionbudgets not whatever your figure is missing from the
00:12:18 [W] So for example on the patch the patch and the patch field type, which is always going to be this on the patch will be a serialized area bites of the Json string if
00:12:35 [W] Said replicas to three if they are replicas missing on the deployment.
00:12:44 [W] You would send a patch back saying that up is ADD path is / spec replicas.
00:12:50 [W] So we are adding that filled with a value of 3 item content is important for web hooks because we have hooks can be called more than once they're in there is if there is a patch that is is
00:13:03 [W] Changed by more than one Beppo that is observed and then your web might be called twice or more ordering is not guaranteed any web can called in any order and then matching is Imagine request is a
00:13:18 [W] In called in any order and then matching is that imagine request is a field that has to be set to exact or equivalent equivalent is preferred.
00:13:28 [W] The reason is let's for example, we talked about our deployment case weaveworks setting the replicas as you know, QPS are allows creating and modifying it line objects with different versions and a pi groups.
00:13:39 [W] If deployment comes with we won ABS / rerun or apps life even better one, both of these should should have the same effect and we should be able to add the replicas.
00:13:54 [W] So that means that in order to achieve consistency we should set this field to equal length timeouts is another aspect.
00:14:04 [W] I want to mention web hook latency adds to the Epi latency. So set the timeout to any value between 0 and 30 mutating.
00:14:11 [W] Involving web folks should work hand-in-hand not means a mutating changes certain aspects in the object and then the validating validates them side effects are is a field that can be set to none some non
00:14:24 [W] So on so forth. If you are doing a dry run or a failure happens in the middle of the request, you have to make sure that your web hook reconcile all the changes. It has made to the cluster namespace selector is
00:14:40 [W] to a white running that puts in the system namespace, which will may have an
00:14:48 [W] on expected Behavior to your cluster.
00:14:56 [W] The invocation policy is set to never or if needed this depends again on your web hook. Basically if you want to run your web hook such that only once so you can control that getting this
00:15:07 [W] Apoptosis is a built-in which is mutating.
00:15:13 [W] Actually. It will inject information into Parts at creation time such as Secrets volumes and volumes volume and sand Etc Pottery Supply by labels on the path.
00:15:27 [W] For example, as I shown on the example here a pot coming in with within label front end will be when will be actually
00:15:38 [W] Actor because we're going to inject deep and an honor variable the report as well as volume of sin there if apart preset fails to merge the park will still get started.
00:15:53 [W] There can be a number of presets run on and coming part under the same time earpod preset may affect and different types of Power Pod request.
00:16:04 [W] All containers in in the incoming path object or even the parts back may be affected by the merge. You can turn it off using a flag here. So at this point, I think I would let Morgan.
00:16:19 [W] Deeper into the code and show you how the admission Maps work.
00:16:28 [W] All right.
00:16:36 [W] Let's talk about the built-in compiled an emission controls.
00:16:37 [W] Thank you straining.
00:16:42 [W] We're going to look at some code details now so that you are again aware of the behavior and the the existence of some of the compiled and ones and such as the always pull images that we've discussed
00:16:54 [W] the
00:17:02 [W] package the plug-in directory which has all of the admission controllers in it and in it, we can look at the always pull images controller and we see the code
00:17:20 [W] The admission go is where the code is located and inside of this we can see that we implement the mutation interface and validation interface as discussed.
00:17:34 [W] When we look at that we can see it that the the mutation interface is if when we look at the mutation or face will see that it is coordinated with this admit function and that the validation
00:17:50 [W] With the validate function and if you remember the order we can remember that mutating happens before validation.
00:18:05 [W] And so for our mutation, you can see that the always cool images sets the invisible policy to pull always and you can see that the validation side of this.
00:18:10 [W] checks that that is set other thing important to note is that
00:18:16 [W] I mean your past the object from the past in what we get always going to be a pointer to the object because you have to modify the object directly before it is persistent.
00:18:30 [W] so now mutating versus validating
00:18:42 [W] built-in remember that the abstractly validating simply says yes or no procedure don't accept or reject again and everyone's the validation interface whereas the mutating and
00:19:00 [W] This allows access to change the object.
00:19:09 [W] And as I mentioned you're going to get a pointer and it's important that you modify that object directly because that is what gets persisted by the storage layer, which is that CD and you this is this
00:19:19 [W] Significantly from a normal controller where you want to walk to have a layer of passion involved and you want to make sure you do not modify that because the caching layer will not be aware of you
00:19:35 [W] And right and what right back and so you can get you can blow yourself up that way.
00:19:40 [W] So you need to be careful.
00:19:41 [W] So if we go back to it, we can see.
00:19:46 [W] the
00:19:49 [W] Mutation interface here.
00:19:55 [W] We can see that it implements.
00:19:55 [W] They both have the same interface which is just a Handler and so obviously it's a sort of a plug-in and so the plug-in is called as handle, but once inside we detect whether or not it's mutational validation.
00:20:10 [W] we call them in the appropriate order and they get called with these specific functions.
00:20:20 [W] now you move back to
00:20:25 [W] webassembly
00:20:56 [W] and admission review objects in and inside of that mission would you object is going to be an admission request and both validating you Jang are going to look at that request perform some logic
00:21:07 [W] Poppy having you ID from your request for both of them settle allowed to true if both if they about it.
00:21:15 [W] are you getting angry they want to proceed and then the mutating will also contain the describe. Json patch change to the object.
00:21:27 [W] So there's that.
00:21:30 [W] and
00:21:37 [W] So we look at the admission review struck. We have the admission request.
00:21:42 [W] They have the admission response.
00:21:51 [W] And so inside request we have the uid and that is what we are going to copy it from and we'll also have the object which comes in and this is again a going to have to deserialize that into an actual object
00:21:57 [W] That up.
00:21:58 [W] and
00:21:58 [W] so we look at the admission review struck. We have the admission request.
00:21:59 [W] They have the initial response.
00:22:00 [W] And so inside a request we have the uid and that is what we are going to copy it from and we'll also have the object which comes in and this is again a going to have to deserialize that into an actual object.
00:22:01 [W] Operate on and then once you have decided what to do, you will write your patch out and you will copy as it says from the documentation here.
00:22:10 [W] You copy it from the request and you will set your allowed to true.
00:22:14 [W] Okay, and now we get to the point where I discuss the AGM host image, which is the demo portion. So we'll go back to our screen.
00:22:33 [W] and so in in the kubermatic is testing environment, the there's an image provided called AGN house, which is a very helpful image to use for testing
00:22:50 [W] and so in in the kubernative testing environment, the there's an image provided called AGN house, which is a very helpful image to use for testing,
00:22:52 [W] example of the intricacies and the implementation of a web hook and webhooks again as we've mentioned the configuration earlier SSL and so you'll have to provide a server at
00:23:06 [W] Provides TLS configuration and then we will demonstrate the deny web Hook and the ad lib webhook, but you can see that you can have multiple web hook implementations with on a single server as it is just a server
00:23:22 [W] Nation you can see where we copy the guid from the response to the request.
00:23:33 [W] And so for the always deny, there is a very small implementation which sets to the real you've responded to false and again and importantly as mentioned earlier.
00:23:43 [W] It sets a message the label will add a label called add a label to the created resource. So if we look at the
00:23:58 [W] Configuration here.
00:24:08 [W] I have set up a Kuma iot server to the two nodes.
00:24:09 [W] And so we can check that there are.
00:24:16 [W] we have no webhooks created so I will create a
00:24:39 [W] I will set up the
00:24:43 [W] Where is the one that I was using this one?
00:24:52 [W] And so now if I pull the web configuration we can see that it's created and to demonstrate that it's working.
00:25:04 [W] We will run a pod.
00:25:05 [W] And we can see that we got the message. So now
00:25:12 [W] That is the end of the demonstration.
00:26:04 [W] We will discuss some wrap up here where I want to leave you with some advice on web sand them.
00:26:12 [W] tada
00:26:14 [W] That is the end of the demonstration.
00:26:23 [W] We would discuss some wrap up here where I want to leave you with some advice on web sand.
00:26:24 [W] Sonic
00:26:24 [W] Facts and so you should be in general avoiding side effects and what I mean by side effects is you shouldn't be writing to other objects that are not the object that you're getting past them. And the reason is you want to avoid having to keep track of
00:26:30 [W] That are not the object that you're getting past them. And the reason is you want to avoid having to keep track of States because again, most of these controllers should be fairly stateless and that if you interrupt them and restart them, they should achieve this you able to achieve their
00:26:40 [W] There are many different security aspects beyond the TLs that you should be aware of.
00:26:51 [W] If you're running your web hooks in the cluster that you can run them in the class or out of Custer again.
00:26:54 [W] It's a it's a rest API endpoint anywhere you can contact it. I should probably have a separate name space.
00:26:58 [W] You should have our back to configure access to your config objects and you should understand the different failure modes that exists when you have
00:27:11 [W] the pot of the failure policies.
00:27:18 [W] So if your failure policy is set to ignore you may end up skipping some kind of policy that you must have by corporate dictate.
00:27:30 [W] And so it's important to understand those policies. And again as it is a separate web server that you're running you can write it in any language you want as long as use fulfill the
00:27:41 [W] The API which is a rest API you have the admission review phone with request and response.
00:27:53 [W] It's important as we mentioned the other things to remember that the order is not guaranteed remaining item potent and Etc. And with that next
00:28:03 [W] Are over and we would accept questions as opposed. Thank you for watching attended. Goodbye.
00:28:13 [W] I cannot hear you.
00:28:33 [W] Can you guys hear us?
00:28:39 [W] Super okay.
00:28:51 [W] So other than a couple of questions on Where are the slides which hopefully I've posted a link.
00:28:54 [W] A good one I think is is there a good code generator or starter projects for building new admission controllers?
00:29:04 [W] and
00:29:06 [W] I don't know if any of the cube builder stuff is set for specifically in Mission controllers.
00:29:20 [W] But the Aegean host image that I was showing earlier on I think is a good.
00:29:21 [W] While it's out while it sort of over complicated in that it's got 15 different Mission controllers in it.
00:29:32 [W] in it. It does have a very good.
00:29:33 [W] run through of most of the features and those are all tested using the integration testing that could round is does we wanted to sort of
00:29:47 [W] provide a sample one, but it cage and house does really everything we want we wanted to do at the time.
00:29:56 [W] All right, SRI knee the other one.
00:30:03 [W] There was a new one.
00:30:09 [W] Can you elaborate on what the reconcile process is for dry run on an object? We've been using validating web hooks that didn't allow for a dry run but couldn't understand the implications of enabling it.
00:30:16 [W] so dry run the idea there is that
00:30:24 [W] You want to support?
00:30:28 [W] The object you want to support looking at an object without actually creating it and persisting it through the actual the whole whole stream and so from what I remember, I think we didn't talk about this a lot. Is that dry run has
00:30:45 [W] There's a flag that you can put on the incoming object that says is this a dry run object and that that means that you're just asking the server to basically do whatever it does and not actually persist all the objects and
00:31:03 [W] Our this is one of the reasons why we say sort of avoid side effects.
00:31:14 [W] If you're going to create side effects, which means you're going to go back and create new objects.
00:31:22 [W] You need to be worried about a the modifications that that happened to the incoming object that might be created and then you don't want to make sure you want to leave these other objects around so, you know by supporting dry run
00:31:29 [W] be created and then you don't want to make you want to leave these other objects around so, you know by supporting dry run you want to make sure you have a
00:31:31 [W] code path that goes through the
00:31:34 [W] the full life cycle of a request but doesn't actually create any of the end up ending objects.
00:31:43 [W] And maybe we can talk about that later.
00:31:49 [W] Yeah.
00:31:52 [W] cause any side effects
00:31:56 [W] And I don't see.
00:32:05 [W] Any questions that we haven't answered that aren't where are the slides?
00:32:12 [W] And I don't know what any of these other buttons do so.
00:32:22 [W] Do you have anything you want to add?
00:32:47 [W] Escaped con actually for people to refer to if you're interested.
00:33:10 [W] The other thing is that with thank you all for joining even though it's a virtual conference.
00:33:16 [W] We appreciate the interest see that. Yep.
00:33:18 [W] Go stop by the virtual booths and get some virtual prizes.
00:33:26 [W] I think there's actually real prizes still so stop by the IBM Booth I guess and I hope you enjoyed some of the Keynotes and I hope you're having a good time and I hope you're all safe and sound.
