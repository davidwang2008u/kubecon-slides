Building Docker Images with Cloud Native Buildpacks: ONQJ-3825 - events@cncf.io - Tuesday, August 18, 2020 11:40 AM - 57 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:01:58 [W] Afternoon everybody and welcome to building Docker images with Cloud native building.
00:02:04 [W] Good afternoon, everybody and welcome to building Docker images with Cloud native buildpacks.
00:04:55 [W] Afternoon everybody and welcome to building Docker images with Cloud native buildpacks.
00:04:58 [W] My name is Ben hail.
00:04:59 [W] I lead the Java language on all of the cloud platforms at VMware with me is Terrence.
00:05:03 [W] Hi. I'm Terrence. I work at Salesforce and work on the Rook platform there and help co-create the buildpacks API.
00:05:10 [W] So we're all here today to learn about how Cloud made a buildpacks are going to help us build images that we can run in production. But all of this is framed in the discussion of what is it mean today in a modern way to deploy
00:05:28 [W] Cloud native buildpacks are going to help us build images that we can run in production. But all of this is framed in the discussion of what is it mean today in a modern way to deploy and distribute applications into production.
00:05:30 [W] We see over and over again.
00:05:36 [W] That is the languages and Frameworks that we use proliferate within our development teams.
00:05:48 [W] It's becoming harder and harder to treat application artifacts as the immutable artifacts of pass to our systems gone are the days when we can build a jar and passage r3c. I pass it out through CD pass it to a production team.
00:05:52 [W] We just don't get to do that anymore many of the common languages that we see people using are actually interpreted rather than compiled.
00:05:59 [W] This means we're Distributing Source repositories.
00:06:06 [W] Effectively rather than actual compiled single file artifacts the end.
00:06:07 [W] We also see a new trend in developers wanting to be able to both test their applications in the environment that they're going to run in. This is really good idea, but also have full control of that environment that their applications are running in rather than
00:06:21 [W] So see a new trend in developers wanting to be able to both test their applications in the environment that they're going to run in.
00:06:22 [W] This is really good idea, but also have full control of that environment that their applications are running in rather than relying on another team to configure that for them.
00:06:25 [W] We've seen so many times a development team does forgets everything working on their local development systems gets it all working in their QA environment throws it over the wall to production where something is configured differently.
00:06:40 [W] Lee and everything breaks, so all of that leads us to the following statement
00:06:43 [W] Docker images are the lingua Franca for platform portability.
00:06:48 [W] What do I mean by this effectively? What I'm saying is that this is the new immutable artifact that we want to pass around and it's great because it contains everything it contains the operating system file system.
00:07:05 [W] It contains the application file system.
00:07:10 [W] It contains the command that we're going to actually run the application with it gives us a nice self-contained environment that runs exactly the same everywhere.
00:07:14 [W] That means it's going to run the same on your laptop.
00:07:19 [W] It's going to run the same on the data center.
00:07:20 [W] It's going to run in the public Cloud.
00:07:22 [W] It's going to run on the your local doctor demon.
00:07:23 [W] It's going to run on kubernative.
00:07:24 [W] It's going to run everywhere exactly the same.
00:07:27 [W] dr.
00:07:34 [W] Files are probably how most people create the document is that Ben's talking about integrate their easy to use they provide a lot of control to developer, but it's a double-edged sword.
00:07:43 [W] Are probably how most people create the document is that Ben's talking about integrate their easy to use they provide a lot of control to developer, but it's a double-edged sword.
00:07:52 [W] It requires a lot of work hard in these doctor files for production use and you have to resort to thing what I like to call dockerfile gymnastics.
00:07:54 [W] As example this the official Alpine python Docker image is a hundred thirty seven lines long and the main run command that does the bulk of the work is about 80 lines a single run command.
00:08:08 [W] that is a lines long to configure install and install and setup icon.
00:08:19 [W] So what if you could actually go and create a good Docker image without doing all that work all that doctor found gymnastics that most people
00:08:24 [W] Doing today. So Benson to go ahead and download that.
00:08:26 [W] So the question Terrence has asked is what if we could create a good Docker image, but without result resorting to dockerfile gymnastics. So what we're going to demonstrate here today is the pack CLI.
00:08:43 [W] The pack CLI is a command line utility created by the cloud native buildpacks project that creates an application image this case called applications demo from some sort of source in this particular case.
00:08:56 [W] It's the demo 001 snapshot jar yugabyte.
00:08:58 [W] Sing a builder so a bunch of buildpacks in this case called Builders adopt opentracing K.
00:09:04 [W] So we'll go ahead and check that off.
00:09:05 [W] We see it.
00:09:05 [W] Go to work.
00:09:09 [W] We say oh there could be 16 buildpacks but five of them are going to participate here. We look at what exactly happens in this particular build.
00:09:13 [W] A lot of things but specifically its contributed a JRE because this is a Java application as contributed some other stuff to make running inside of containerless bit easier an executable jar buildpacks figured out what the command line for this.
00:09:37 [W] easier an executable jar buildpacks has figured out what the command line for this particular application could should be it's pretty conventional Java setting its class path setting its Java Ops and then calling a particular class inside of it and
00:09:46 [W] And then because we know that this application is a spring boot application.
00:09:52 [W] It can come in here and do all sorts of things like such figuration given its web application type. In this case. It's a reactive web application contributing some things around spring cloudbees endings slicing up the application into multiple slices adding a bunch of image labels to the image itself.
00:10:05 [W] It's done. It goes off and creates a particular image in this case.
00:10:10 [W] It's called applications demo at TAG latest and we can see that all of that build took only 12 seconds to do.
00:10:17 [W] So that's the demo of cladding Bill packs and climate Bill packs are a cncf Sandbox project that's built on top of the technology called buildpacks.
00:10:28 [W] And buildpacks have been running in Productions on a millions of apps and 2011 ranging for applications that are startups all the way up to Enterprises.
00:10:42 [W] And what they do is they provide a higher level abstraction on top of the standard dockerfile allowing app developers to do what they do best, which is delivering business value to their customers and we're able to do this with a set of features like
00:10:55 [W] on top of the standard dockerfile allowing app developers to do what they do best, which is delivering business value to their customers and we're able to do this with a set of features like faster builds by using various layers
00:10:58 [W] Olds by using various layers not having to kind of rerun instructions that don't need Iran being able to reproduce those images and reliable way the buildpacks themselves that are being used to actually build these images
00:11:10 [W] and composable and at the end a we're producing a Docker image similar to how a Docker file also produces Docker images and that makes them poor portable via those high standard that Ben was talking about before
00:11:27 [W] To go and take a deeper dive or second look at cloud and Bill Paxton the kind of look into these features and more detail.
00:11:36 [W] So Terrence just set off a whole bunch of different things that buildpacks can do that are kind of advantages.
00:11:50 [W] You might say over something like a normal Docker file. So let's take a look at the first one.
00:11:51 [W] What does it mean to reuse layers?
00:11:56 [W] So what we're going to do is we're going to rerun the exact same command we ran previously.
00:12:03 [W] So we're going to do that build. We see detection pick the same five build packs. But this time we see something even more interesting. We see that as we analyze the previously existing image it.
00:12:07 [W] Notice that there was a bunch of layers that already existed we download the metadata not the data from those layers, but just the metadata which gives us the ability and this case the adopt openjdk buildpacks to say. Hey, I've already delivered
00:12:22 [W] .8. I don't need to do it again. What I want you to do is create an image, but use the layer that already existed in that image.
00:12:32 [W] Same thing in the spring boot application.
00:12:34 [W] I already did the work I needed to do because of the web application type or around spring cloudbees and dings so I don't need to do those again.
00:12:41 [W] I don't need to transfer that data and what we see now is that that same bill that took more than 10 seconds last time his immediately shrunk to 6 second. So we're probably seeing it being twice as fast the second time around.
00:12:53 [W] But that's not the only kind of Advantage we can get that kind of layer reuse we can also take a look at what exactly is going to be used when builds happen.
00:13:09 [W] So if we do a pack and spect Builder, we're going to take a look at that adopt openjdk Builder that we used before we said that buildpacks encourage composability and modularity and we see that in this particular Builder.
00:13:20 [W] We see that there are 15 different buildpacks that all
00:13:23 [W] When we build an image the first one here, this is the adopt openjdk buildpacks.
00:13:31 [W] You can remember we saw the executable jar buildpacks participate.
00:13:34 [W] We saw the spring boot buildpacks participate as well.
00:13:44 [W] And there are many others the chose not to participate but could have if we'd given it a different set of of input.
00:13:47 [W] So if we see that this is sort of how the builders going to behave what if we took the took a look at a different Builder
00:13:51 [W] One here. This is the adopt opentracing K buildpack.
00:13:53 [W] You can remember we saw the executable jar buildpacks participate.
00:13:54 [W] We saw the spring boot buildpacks dissipate as well. And there are many others the chose not to participate but could have if we'd given it a different set of of input.
00:13:56 [W] So if we see that this is sort of how the builders going to behave what if we took a look at a different Builder
00:13:57 [W] Let's take a look at a Bell Soft liberica Builder and they'll soft liberica is just another distribution of java, like adopt openjdk or Oracle or sap or any of a number of others and what we'll see is because of the way the buildpacks are built in a modular way in the way
00:14:09 [W] Tribution of java like adopt openjdk or Oracle or sap or any of a number of others and what we'll see is because of the way the buildpacks are built in a modular way in the way. We compose them most of the buildpacks Fourteen of the fifteen buildpacks of we're in
00:14:13 [W] Actually the same as they were before but we've been able to replace just the job of distribution that we want to use.
00:14:21 [W] say we support contract with Belle saw we might want to use them instead of adopt openjdk.
00:14:35 [W] So now if we do that same build, but with the Bell Soft Builder this this whole time or the this time we see the same 5 of 16 participating and what we see here.
00:14:40 [W] that the Bell Soft buildpacks gets involved it contributes its version of
00:14:44 [W] No.8 if there's any changes to the way memory calculation is done or certificates are loaded.
00:14:59 [W] Those all are re contributed as well. But only this buildpacks has changed if we take a look at the spring bootie buildpacks that we get to reuse those previously cash layers because the buildpacks
00:15:04 [W] So we see all of these buildpacks participating during a bill, but what is it exactly that they do build.
00:15:19 [W] So we're going to use the utility that I absolutely love called Dive and we're going to take a look at the layers inside of an application.
00:15:20 [W] so if we take a look at the first couple of layers of this application, you'll start recognizing that file system on the right as the kind of thing that typically gets built when you're installing a new operating system installing a set of packages what
00:15:43 [W] Here is a standard of Boon to bionic installation with all of the packages that normally come with that.
00:15:57 [W] We then take that stack image, which basically that base OS and we will instead will then start putting stuff on at the first thing we put on it is launcher and the launcher is a bit of the life cycle that we leave in your application.
00:16:07 [W] For guaranteeing that the environment is set up right and that we start your application with the proper command line every time you try and run with this particular image, but then we also start seeing the buildpacks themselves are contributing things.
00:16:23 [W] We see the battle soft liberica buildpacks dolls.
00:16:29 [W] This thing called a class count or some stuff around Java Ops eventually it installs an entire JRE side of this particular image hundred 40 Meg's there but we go even further than that. We can see the executable jar does some stuff with the classpath
00:16:38 [W] It's what we see over here on the right with this class path environment at launch. We see spring cloudbees endings go in we see the thing that it's going to make a change because this happens to be reactive web application type and then eventually we got to the point where it's we see our
00:16:52 [W] Re side of this particular image hundred 40 Meg's there but we go even further than that. We can see the executable jar does some stuff with the classpath.
00:16:55 [W] That's what we see over here on the right with this class path environment at launch. We see spring cloudbees and things go in we see the thing that it's going to make a change because this happens to be a reactive web application type and then eventually we got to the point where it's we see our application
00:16:56 [W] And this particular case spring boot applications are really well known they understand what it means to go into an image.
00:17:02 [W] And so they actually can be sliced up.
00:17:06 [W] We effectively have a layer that has all of your dependencies on it.
00:17:11 [W] Another one that has the bootloader application if there were snapshot dependencies.
00:17:11 [W] We put that on a layer another layer here. That is the classes of your particular application this case a demo application all of these end up on separate layers and that may seem like a little bit of Overkill.
00:17:26 [W] But this is really really useful when it comes time to transferring data.
00:17:32 [W] It means that the data that changes a lot things like your application as you are developing. It can be separated much smaller, 5.3 kilobytes versus 20 Meg's of dependencies and only that 5.3 kilobytes would be transferred out to Edge nodes
00:17:42 [W] Aided inside of Registries things that don't change as much things like your dependency list, which you might only change once a quarter or once every six months basically can be reused and D duped and not transferred to Edge nodes much more easily because you're not sort of
00:17:58 [W] With this kind of application code that changes quite a lot.
00:18:04 [W] So that's what we see in here. The buildpacks are all creating these layers that contain certain bits of the filesystem. All those are glued together and a normal standard oci image and we say that that oci image is portable.
00:18:20 [W] Means that I can do a Docker run TTY and we can literally use this Docker and this Docker image that we created to start an application and Docker and here we go.
00:18:32 [W] running spring boot application and while I'm not going to demonstrate a completely you'll have to trust me on this one. We also
00:18:39 [W] can use that exact same image as you see right here.
00:18:44 [W] This is normal kubernative deployment descriptor says exactly what my container is going to be sets for example the the probe so we know when the application is live and ready but we're going to use the exact same image in this particular case kind of start the exact same
00:18:58 [W] Going to do it with the exact same environment variable set all of that's embedded inside of that image.
00:19:07 [W] It will run here. It'll run on Heroku and a run on cloud Foundry.
00:19:08 [W] It'll run on any platform exactly the same as long as that platform understands Docker images.
00:19:16 [W] That's really really awesome.
00:19:17 [W] So all this is great for your you know app as an application developer your you know, building these images, but what you have to do what happens when you actually have to run these images in production. What do Claudia buildpacks guest room and one of the nice things is that
00:19:35 [W] Canonical packs in the way, we build our applications through the layers and stuff that you saw get contributed in a very specific way.
00:19:50 [W] Is that how we build them is actually standardize and that provides a lot of benefits to operators who need to actually deal with stuff like compliance and security of your application image once it's running in production and that allows us to help with
00:19:59 [W] You mean features that we provide as part of the climate buildpacks e business one of them is Bill materials which shows what is actually inner image?
00:20:15 [W] And so this can help with auditing or kind of clients story there too. As you can without having to crack open your Docker image.
00:20:17 [W] You can actually see what's in that particular image as well as a feature that we like to call get with base.
00:20:28 [W] base. So think along the lines of like what you do when you have a git rebase and so the Osa image manifests back.
00:20:29 [W] has ordered pointers for various layers and this is different from kind of the older Docker image view one Speck which treated them as kind of this tree like structure which meant that if you're changing that like kind of from line when you're going to do an operating system managers update you actually
00:20:44 [W] entire tree because like your parent root tree is now different to you can't like make any assumptions about kind of a child properties at all in that it validated but one nice things with this new OCA image manifest is that they're pointers
00:21:00 [W] One nice things are with this new OCA image manifest is that they're pointers.
00:21:09 [W] And so that means that if you have stacking images built on top of operating systems that comply to this application binary interface compatibility. So basically when you update your operating system
00:21:15 [W] Eight your operating system from one version to the next if Ava interface hasn't changed.
00:21:19 [W] You don't actually have to rebuild all those layers on top of kind of your stack image because they comply to the same API interface. And so what this looks like in practice if we take a sample note buildpacks ATS building a note application.
00:21:33 [W] The node.js layers complied this Avi come out build the against this operating system and it once we need to update this operating system.
00:21:43 [W] It's going to have an API compatible operating system update and that means we can actually do a lift and shift and just rewrite the Manifest layer, which is this Json text file with pointing to the new layers which massively speeds up the image update as well as the push to
00:21:56 [W] Chapter push these layers up and this scales really? Well, when you have to do this across and Enterprise Fleet of you know, thousands or tens of thousands of images svensson. Go ahead and show what kind of these day to operations look like while using cloudbees buildpacks.
00:22:12 [W] So this next demo here is going to focus Less on application developers. Although this information that we're going to see is pretty interesting and it's going to focus more on what your applications can do to help the operations teams that are around you.
00:22:29 [W] So one of the really really interesting questions that a lot of security teams and compliance teams really care about are what sort of inputs went into the creation of this image that I'm currently running right now as an application
00:22:43 [W] Tools inside of pack is what we call pack inspect image.
00:22:48 [W] So inspect image allows us to take a look at some information about the the image itself.
00:22:57 [W] So give it a second.
00:22:59 [W] It comes in and tells us of all of those 15 buildpacks here were the five that were going to do their thing.
00:23:03 [W] Right?
00:23:12 [W] We solve else off liberica executable jar all of these things participated and we can even see which versions they were and we can see the command that was going to get run.
00:23:14 [W] This is all embedded in metadata on the image. One of the key things about this information is we get this not by downloading.
00:23:19 [W] The entire image all you know hundred Meg's or whatever it is.
00:23:34 [W] We download a very small amount of data a couple of tens of K. If actively that contain all of this it allows our compliance teams to iterate over large numbers of images currently in production and ensure that
00:23:38 [W] What they think they are find out if there are any existing vulnerabilities.
00:23:50 [W] So this is the kind of information about what exactly was run to build this particular image, but we can go further than that as well.
00:23:52 [W] You can say Pac inspect images and we can take a look at something called the bill of materials.
00:24:05 [W] So whenever an image is created by specification, the buildpacks can contribute say hey here are some things that we put into this particular image. So for example, we can take a look and see.
00:24:08 [W] See that we put in Bell soft. Liberica version 11 .08.
00:24:23 [W] Here's where we would have downloaded it from if we needed to download it. If you want to validate it here is the shop 256 hashtag that we can even tell you what the license was for this dependency that we put into your image. If you want to do sort of license compliance kind of testing and we do that for
00:24:28 [W] Anything that we put into the buildpacks itself our memory calculated the class counter things about how we configure link local DNS all sorts of things that come from the buildpacks, but even Beyond things that come from the buildpacks. So for example, here
00:24:44 [W] Entities that your application contains so if you're running a normal screen boot application probably you're writing a rest API that returns Json payloads. Well, guess what? You're probably going to use Jackson.
00:24:59 [W] So which version of Jackson is in your application?
00:25:01 [W] Well, you could download the image Boot It Up take a look inside, you know use a fine command and like go and be a shell but that's actually really expensive time and transferwise, right? You've got to move a lot of bytes to do that. Or you can take a look at this metadata and the bill of materials that we've
00:25:18 [W] - and we can find out that you're using Jackson core version 2.0 11.0 again. If you aren't trust trust worthy of our metadata here is the hashicorp go and validate that hashicorp Zac Lee the version that we claimed it was and it goes beyond
00:25:29 [W] Our spring user right? So let's go ahead and take a look down here in Spring spring boot version 2.3 .0 if you want to go a little bit further, you might take a look for something like spring cores really common.
00:25:42 [W] We're using spring core version 5.2 .6. So in addition to the metadata about how we built this we also have metadata about what exactly we put into it when we did the build but also what we were presented with what our application was when it was
00:25:56 [W] You built this. We also have metadata about what exactly we put into it when we did the build but also what we were presented with what our application was when it was built.
00:26:01 [W] We don't have to sort of look back and try and corroborate this with a given commitment figure out what the answer is we look this up during the build and we put it on as metadata that can be inspected and a very light and quick way.
00:26:11 [W] The final thing that we we talked about as an operator feature is something called rebasing and so rebasing as we said is the act of taking a bunch of layers that
00:26:27 [W] Tekton a very light and quick way.
00:26:27 [W] The final thing that we we talked about as an operator feature is something called rebasing and so rebasing as we said is the act of taking a bunch of layers that
00:26:29 [W] Heated by the buildpacks.
00:26:32 [W] Well as your application that sit on top of an operating system and move all of those to a different version of the same ABI compatible operating system.
00:26:44 [W] So in this case, I'm going to put the time command on the front of it so we can find out exactly how long something like this takes what we're going to do at time pack rebase.
00:26:48 [W] We're rebasing that applications demo.
00:26:52 [W] We're going to change what the Run image is underneath it and this particular case.
00:26:56 [W] We're going to a different version. This version is 0047, which is a slightly
00:26:57 [W] a newer version than the one we've been doing the demo on so far.
00:27:02 [W] So if we take a look at what the time says, we we managed to change the operating system underneath this entire application in one point three nine seconds, right?
00:27:19 [W] If we were working against a registry.
00:27:33 [W] This is a weird Oddity. Am using a Docker demons actually much slower to do in locally against the document. If we were doing this against a real live Docker registry even a Docker registry over a network link, we would have expected this to be closer to a quarter to a tenth of a
00:27:34 [W] We get this done because we're transferring back and forth.
00:27:42 [W] very small bits of metadata, like on the order of three or four kilobytes of metadata versus hundreds of Meg's of data being transferred but most importantly we didn't execute any of the rest of the build we didn't have to untie our orange are the the
00:27:53 [W] To untoward the Jerry we didn't have to do any installer out of file system transferred almost no data back and forth.
00:28:00 [W] So that's great.
00:28:11 [W] We've been doing a lot of stuff with this packs. Eli and pack is really just a platform but really, you know built for your local CLI for your local development, but that's not the only place you can run buildpacks buildpacks are out there
00:28:18 [W] it's on being used by the address for the cloud on Google app engine trying out here oku VMware and Capac even all the way to
00:28:29 [W] Java Frameworks, like spring boot that are using it and really targeted towards developer productivity.
00:28:43 [W] And so we're going to demo and show what it looks like to actually if you're a swing boot developer what it takes to actually just build a Docker image that is ready for production.
00:28:50 [W] So is Terrence said spring boot can act as just another platform the same way that we consider the pack CLI to be one platform the same way we consider vmware's Capac to be a platform or Heroku to be a platform.
00:29:06 [W] It turns out that platforms can come in all shapes and sizes.
00:29:16 [W] One of my favorite platforms given my history. As a member of the spring team is actually spring boots. Maven plug-in can be a platform. So in this particular case, we're going to go ahead and run a maven command Maven test. Skip spring boo.
00:29:24 [W] Build image what this does is it goes off to Maven as you normally expect it to and it actually builds this jar file for us, right. The last thing we see is here is where it's jarring up the application itself and then it immediately kicks off a
00:29:36 [W] Currently without you ever leaving Maven you could have done the same thing with Gradle as well.
00:29:43 [W] We see that exact same output detecting a bunch of buildpacks contributing the JRE to the layer and this particular case. It's Jerry 8 because of that's how we built this particular application.
00:29:56 [W] We have this command that we ran all spring boot stuff gets added image labels opening taner and we see that it actually created this particular image one of the really cool things that building an image this way does because it's inside of a running.
00:30:06 [W] Build system it can learn things. It knows which version of java you actually want.
00:30:13 [W] Is this a job aid application.
00:30:14 [W] Is it a job 11 application?
00:30:16 [W] Is that a job of 14 application?
00:30:21 [W] It knows the name of the application you specified what this was is part of Maidens metadata and most importantly it knows what the version of this particular application is so we could run run TTYL demo.
00:30:31 [W] 001 snapshot that's what it's called. And we see this spring boot application. That was just built.
00:30:41 [W] so in closing cloudevents buildpacks brings a ton of advantages to buildpacks in this document world through some of the features that we've showed throughout this talk like faster builds reproducible images
00:30:59 [W] King Claudius buildpacks brings a ton of advantages to buildpacks in this document world through some of the features that we've showed throughout this talk like faster builds reproducible images being able to reuse
00:31:01 [W] Various layers and what have you in addition it provides because of our standardization and higher level abstraction things that Docker file is simply can't do and that's not because dr. Folson fish is just that are standardization allows us to have things like composability
00:31:15 [W] With all that power and flexibility things like the bill materials that buildpacks can provide as well as stuff. Like we basing send you a bunch of time when you actually need to do image updates across your entire fleet and its cognate buildpacks are available.
00:31:31 [W] sir entire fleet and its kind of buildpacks are available through local development through tools like pack as well as various Cloud providers out there and one of the big goals that we're trying to achieve with this project gets new developers where they are which
00:31:41 [W] They are which is right at their application whether their focus on delivering value to their customers.
00:31:47 [W] So go out and try climbing buildpacks a day.
00:31:54 [W] We have version Point twelve of the pack. See line.
00:31:55 [W] Just go through Brew or what have you to go installed that packs Eli go to our documentation or fairly active on slack where a lot of the kind of conversations around development outside of GitHub are as well
00:32:09 [W] taxi line just go through Brew or what have you to go installed that packs Eli go to our documentation or fairly active on slack where a lot of the kind of conversations around development outside of GitHub are
00:32:11 [W] Us where you can get the announcements and various things as climbing buildpacks are involved.
00:32:17 [W] Thank you, and we're now open up for questions.
00:32:21 [W] Okay, great everybody bunch of great questions so far chattering. I heard you two had someone there.
00:32:40 [W] There were we've been trying to answer them all in public so far. But in the meantime of waitress in unit 1 we go over some of the ones that I think I've highlighted between the first one that really jumps out
00:32:58 [W] Represent that's just amazing. Pop country.
00:33:04 [W] Garlic hungry. Can I run them on the desktop? Etcetera? Etcetera boundary is not a requirement for buildpacks now nor was it ever even previous generation?
00:33:13 [W] That's Terrence on this called can happily a test you he helped invent them for haru-kun cloud Foundry adopted them certainly hope with her popularization, but I found researchers one invitation probably of buildpacks goes even further than this
00:33:26 [W] Music create oci images and murders the audience's they can run it on on cloud Foundry.
00:33:36 [W] They can run on genetics. They can run locally owned property macquaire any platform that understands oci so certainly not
00:33:45 [W] I'll do the next one here.
00:33:53 [W] Is it possible to build multi Arch images with this at the moment?
00:33:58 [W] We don't have multi or support we are aware of it many of us use Mac's and are eyeing out silicon. So we definitely want it for our own use, but we also recognize that arm as a platform in the data center is a
00:34:10 [W] I personally think it's going to be pretty popular. And therefore we definitely want to be able to make images that are multi Arch as much as you want them to be too. So we're going to work on that.
00:34:23 [W] We've already been discussing these sort of core team of the specification.
00:34:30 [W] Try Terrance. Can you answer the next one?
00:34:32 [W] Do you have to trust the Creator?
00:34:33 [W] Yeah.
00:34:36 [W] So ultimately since buildpacks are an open specification. You have to trust the go back author and
00:34:41 [W] kind of where those are coming from.
00:34:49 [W] So I think historically when you're using a vendor kind of pre Cloud native buildpacks days, they'd be coming from a trusted vendor like your pivotal or Cloud Foundry or Roku, and that means
00:34:58 [W] People trust Spacey those vendors produce quality buildpacks that also you know are safe and secure and oftentimes almost all these buildpacks are going to be open source. So as a security team
00:35:14 [W] These things you can go through and cut our audit and check those things out yourself and with climate Bill packs with things like build materials and other things you can kind of validate or just inspect the actual resulting image nowadays
00:35:30 [W] Standard auditing containerd Tools in addition to the ones that we have as part of kind of the buildpacks ecosystem.
00:35:40 [W] But ultimately, it's kind of on you similar to like if you were to pull a Docker image from Docker Hub that's you are kind of trusting that when you're inheriting that image at the end of the day
00:35:57 [W] You similar to like if you were to pull a Docker image from Docker Hub that you are kind of trusting that when you're inheriting that image at the end the day and the security of that
00:36:05 [W] Do you want to take that spring boot question button the can you let the spring build image?
00:36:15 [W] Let Maven release a new software version?
00:36:16 [W] Sorry, no offers.
00:36:20 [W] Okay.
00:36:23 [W] see
00:36:29 [W] so this question about is it possible create your own custom buildpacks all the buildpacks that we've kind of Dem or been has demo today are part of the keto and the ones they maintained on that team there but like I said before in the previous question
00:36:51 [W] Pax specification is an open specification and even kind of in the preclinical buildpacks days.
00:37:02 [W] We had a whole ecosystem of kind of buildpacks ranging from people just installing different software packages, like nginx to like Joe on the core team built a Minecraft buildpacks for running Minecraft
00:37:16 [W] Factors, like nginx to like Joe on the core team built a Minecraft buildpacks for running Minecraft inside of an application. So creating. Your own buildpacks is very much a thing
00:37:22 [W] Applications so creating your own buildpacks is very much a thing that we encourage and support and want to see more of in addition to kind of the ones from the various vendors like your VMware
00:37:32 [W] Force or Google that are making them as part of kind of production commercial offerings is part of the products, but very much care about a healthy buildpacks.
00:38:02 [W] Yeah, that answers one of the questions that I pushed up there about whether or not there's a central repository.
00:38:14 [W] definitely want that to happened to help the community. I'll grab the next couple.
00:38:22 [W] is it expected that we would publish the bomb some worms and assume that it would be obtained on demand. We attach it to the image itself rather than having some sort of external actor or some sort of external server repository for this stuff is it is co-located and
00:38:33 [W] Run that see we just attach it to the image itself and then you can decide what exactly you want to do with it.
00:38:48 [W] So for example, when you create an image, and it's put apart and it's put into the image is meditating you may as part of your build system choose to download that all the image label and put it someplace because it makes sense inside of War Enterprise or inside
00:38:54 [W] Outlet that all the image label and put it someplace because it makes sense inside War Enterprise or inside of your software delivery process. Alternately.
00:38:59 [W] You may just query against the registry itself.
00:39:03 [W] One of the really nice things about living in a meta data rather than in the file system is downloading the Manifest for images as really quick right we're talking hundreds of kilobytes not hundreds of megabytes. So if you can sort of write something
00:39:14 [W] Is downloading the Manifest for images as really quick right? We're talking hundreds of kilobytes not hundreds of megabytes.
00:39:16 [W] So if you can sort of write something that reconciles and I think you'll see platform start to do this reconciles hear the things that are currently running in my kubermatic sponsor, not all the images on my server, but just in kubernative he's if I know the name of all of those images
00:39:26 [W] Running in my kubermatic spok seccomp all the images on my server, but just in kubernative he's if I know the name of all of those images are running I can then go back and reconcile that against the registry itself downloading build materials and I can render any bill of materials for
00:39:33 [W] And the registry itself downloading Bill materials and I can render any bill of materials for what is running this exact second rather than some point in the past.
00:39:38 [W] The next question is what about the distro list buildpacks?
00:39:44 [W] So digital is buildpacks for people who don't know what those are distro list is with popularized by the Google team and it's effectively a very very very lightweight operating linux-based operating system
00:39:56 [W] Agents assigned to it. And while this has the byproduct of being small certainly has very very small file system size footprint what it actually brings to the table is it's incredibly secure it has if you have almost
00:40:12 [W] Almost everyone abilities to The Honorable to and so inside a copy of buildpacks.
00:40:27 [W] We have the concept of a stack and you might think of a stack is sort of an operating system files system, right? So the demo that I did in presentation, I was based on what we call the bionics a quic is basically going to bionic the default version
00:40:34 [W] Tea bags and coincidentally has like 66.
00:40:38 [W] New solvent but the keto project also ships a it's not standardized yet.
00:40:46 [W] We should we call the tiny snack.
00:40:51 [W] It looks a lot like District list except it's based on a computer instead and have installed six packages sometimes own stuff with SSL on like that basically all of it and certain things can already go on this go
00:41:01 [W] Run really really well in this trellis. We are in the final stages now of converting the Keda buildpacks actually to run on top of this tree list as well.
00:41:14 [W] So now Java applications will be able to run with just a jvm and almost no operating system.
00:41:18 [W] You got me one question.
00:41:27 [W] Yeah, there's one more about is their way of stopping that output of Pac-Man Nats a Docker file.
00:41:32 [W] And so we aren't actually using Docker file underneath kind of building needs oci images at all.
00:41:41 [W] all. So there isn't a way but when we do produce a no CIA image it is no see I am image so you could inherent like you write a Docker file that uses a from line of the producing documents, but there isn't a way to basically componentconfig.
00:41:50 [W] Firts the kind of things that pack or whatever platform that you're running buildpacks in into a Docker file because that is just not the print of that. We're using under the hood and we're actually just creating the images
00:42:05 [W] Image so you could inherit like you write a Docker file that uses a from line of the producing documents, but there isn't a way to basically convert the kind of things that pack or
00:42:07 [W] as part of that process
00:42:08 [W] Can you expose additional commands? The first one is the eyes are built.
00:42:22 [W] The answer is yes today. We have an integration with tekton.
00:42:26 [W] We have a circle cri-o as well and generally as demand is coming up for individual platforms.
00:42:33 [W] We are committed to implementing Integrations with those platforms as of her Grant if we do want this to be part of ci/cd.
00:42:40 [W] And then the final one can build pack integrate with any open source on durability scanner than build the docker images.
00:42:52 [W] We are talking about an open source project. So I don't want to talk too much about the commercial side, but in my day job as a commercial software engineer, we actually do this. We integrate five different security scanner.
00:42:59 [W] loodse buildpacks, even though their name is build basically mean run arbitrary behavior during of something and if that is running vulnerability scanner running code analysis tool integrating with you know
00:43:15 [W] or something like that bold moves things wrong table really big advantages of using something like
00:43:27 [W] So with that, I think we'll go ahead and call it.
00:43:36 [W] We're going to Toots and I will be moving over to slack channel for containerd strap where we're happy to answer any question.
00:43:41 [W] We didn't already into here or any that you haven't yet. Thank you very much. Thank you.
