CloudEvents - v1.0 and Beyond - Discovery/Subscriptions: DPPR-4286 - events@cncf.io - Tuesday, August 18, 2020 11:37 AM - 59 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:02:35 [W] All right, welcome everybody today Clemens and I are going to be talking to you about cloudevents in particular the the status of cloudevents project and where we're headed in the future.
00:08:07 [W] Hopefully we'll have time for questions at the end.
00:08:10 [W] So let's go ahead and jump right into it cuz I have a lot of material here.
00:08:15 [W] Here, so, let's start with cloudevents itself.
00:08:30 [W] So not going to go into deep detail here. But for those of you don't know cloudevents is it is a specification for defining common metadata for events and where that metadata appears in the messages that are transporting those events now, it seems very
00:08:37 [W] Very high level and it is but we're really doing this mainly to Aid in delivery of events from point A to point B.
00:08:47 [W] This is not about defining yet another common event format or anything like that.
00:08:48 [W] I'll show you an example in a minute.
00:08:51 [W] This is simply about aiding in the delivery of events across middleware to its final destination and most importantly to enable people to do that without having to understand or parse the business logic of the event itself.
00:09:02 [W] Okay.
00:09:04 [W] Okay. So let's jump into a quick example to show you what that actually means. So let's say you have this event flowing over http.
00:09:12 [W] Right. Nothing in here to special was taken from HTTP event.
00:09:19 [W] In order to turn this into a cloudevents OU add a couple of bit of extra metadata as HTTP headers in this case and you can see just for little bits of metadata.
00:09:25 [W] And these are the only four that are required the spec version to see the cloudevents version that is the type of the events. This tells you for example, whether it's a create versus the Gleek type of event where the event came from, you know, what is the entity that was sending out the events?
00:09:35 [W] Just for a little bit of metadata.
00:09:36 [W] And these are the only four that are required the spec version to see the cloudevents version that is the type of the event. So this tells you for example, whether it's a create versus oblique type of event where the event came from, you know, what is the entity that was sending out the events?
00:09:37 [W] Some unique identifier.
00:09:38 [W] Okay now obviously look at that.
00:09:40 [W] It doesn't seem too exciting. But with that basic information little where can now route the message appropriately to make its way to its final destination much in the same way.
00:09:54 [W] You can actually see the HTTP headers doing that pray for the hdp layer.
00:09:54 [W] Okay, let's head.
00:09:56 [W] actually very very simple concept. But with that one little extra bit of information middleware can now be Eventing agnostic in terms of understanding the business logic. All they need to do is look for
00:10:08 [W] these common bits and metadata to Route the event the corporately okay, very very simple concept, but we're hearing lots of Kudos from the community how this is making life easier because they no longer have to have specialized middleware for every type of event that flows through the system now, obviously the final
00:10:20 [W] Dent in the business logic to get a job done. But in terms of routing this is the type of information that should be the bare minimum that people need to get their job done. Now this example right here is what we call the binary format just adds couple TCP header. So your your original message should remain basically
00:10:36 [W] The binary format just adds couple ECB headers.
00:10:37 [W] So your original message should remain basically unchanged.
00:10:39 [W] However, there are some people who wanted to have everything encapsulated inside the body as for those particular cases.
00:10:45 [W] We actually defined some Syntax for example here in this Json version where we actually put everything into the body itself, but you can see it's the exact same data right?
00:10:51 [W] You got the same for piece of metadata the content type of the data attribute and data you can hold a business logic right all the exact same information now the content type of HTTP header level obviously telepresence
00:11:01 [W] As you that this is not just a normal Json object or Json payload, but it's a cloudevents Json payload.
00:11:13 [W] So that's how you can distinguish between the left hand side, which is just application Jason which is binary and the structure side on the right hand side.
00:11:16 [W] We just have occasional sighs Jason or / out of its last station. Okay, so that's it at very very high level very simple thing. But we gained lots of Kudos about and lots of different people are picking it up across the industry in terms of the deliverables.
00:11:28 [W] This is the big news.
00:11:30 [W] did go 1.0 for the Recently. So yay for that.
00:11:31 [W] And in terms of what we're actually producing we have different specifications not just the spec itself in terms of what the metadata is, but also how it appears in different formats, right HTTP favors am QP that kind of stuff different encoding right?
00:11:45 [W] Well, so do the Jason we also a bro, and we also included a primer because then there are a lot of technical decisions we made which don't really go into a spec itself, but we wanted to understand why they made the decisions we made so we create a primer as a background for people understand
00:11:59 [W] And some design choices now, we do have some sdks out there with a whole bunch of different languages which see on the screen.
00:12:07 [W] Most of them are very very active in particular the go one in the C sharp and JavaScript and Java are very very active.
00:12:14 [W] So, please take a look at those and get a chance.
00:12:15 [W] They're not that complicated.
00:12:18 [W] They're just mainly they're helping you to serialize and deserialize these cloudevents.
00:12:19 [W] Okay.
00:12:25 [W] So what's next for us? Obviously more customer feedback now that it's out there people tend to wait until things go one point though for the adopted. So we're hoping to get more feedback from there and we have been getting a lot of Kudo so far.
00:12:30 [W] They said and how are beyond that though?
00:12:35 [W] We're not just sitting back and waiting for that feedback.
00:12:36 [W] We are starting to look at what additional pain points the community has relative to the inventing space not just for functions and services stuff like that. But in general what are the pain points people are experiencing?
00:12:47 [W] Okay, and with that let me then turn it over to Clements going to talk about some of these additional work on it. We're doing specifically aimed at addressing some of those paper works.
00:12:57 [W] yes, and for those we have two areas Discovery in the subscription API is in the schema registry which I'm going to discuss both and what's important to note is that we in cloudevents we
00:13:09 [W] Waiting for the feedback.
00:13:10 [W] We are starting to look at what additional pain points the community has relative to the inventing space not just for functions and services stuff like that. But in general what are the pain points people are experiencing?
00:13:11 [W] Okay, and with that let me then turn it over to Clements going to talk about some of these additional work items are doing specifically aimed at addressing some of those paint books.
00:13:13 [W] yes, and for those we have two areas Discovery in the subscription API is in the schema registry which I'm going to discuss both and what's important to note is that we in cloudevents we
00:13:15 [W] Have been core specification where we were set of specifications where we have transport bindings and in codings.
00:13:19 [W] we're really mostly focusing on delivery of cloudevents, but that's just the end of the story because before you can deliver a cloudevents you obviously have to indicate your interest in that cloudevents and then you also have to
00:13:33 [W] Publishing that cloudevents and that's the thing that we're tackling in. This next round of specification is that we're working on.
00:13:40 [W] So the first element is how to discover which cloudevents are available for subscription today. What you do is you read read documentation typically so you go on on the
00:13:56 [W] And you find a list of events that's being raised and for that to be automatable.
00:14:07 [W] We need to have a way to learn about Services be able to filter those Services based on some criteria and then learn about which service exposed with
00:14:18 [W] Or reversely allow a knowing about some events that you can handle and then learning which services in your vicinity or some other criteria are supporting those events.
00:14:34 [W] So question is questions that we have is who produces events which are present events are produced which subscription options are available.
00:14:43 [W] How do I get the events deliver to it to me?
00:14:44 [W] And then where and how do I subscribe?
00:14:48 [W] Thanks.
00:14:55 [W] So what we've done here is we're not very prescriptive. And that's a theme in cloudevents overall is the principle that we're not prescriptive about how you really how we should Implement your service and
00:15:04 [W] And there may be some reference implementations of these things down the road. But ultimately what we're defining here interfaces. So we are defining this abstract Lee a data model that defines for instance here in this in this way.
00:15:20 [W] What a service is for Discovery and also defines and that's obviously leaning on the core specification that we have cloudevents the defines what a type is.
00:15:31 [W] And then in based on this we then Define a HTTP and a grpc API that we have today in the drafts and we might have further protocols such as ATP
00:15:47 [W] So we Define an interface and when you implement that interface, then you have a discovery service the notion of service.
00:15:59 [W] That's the concept inside of the discovery service.
00:16:01 [W] It's very simple.
00:16:06 [W] It's just some software entity that the mint's events so that gets registered in the discovery service that service since it emits events maintains a subscription and point and really what the service description here.
00:16:16 [W] it just enumerated types of events that are available?
00:16:19 [W] Isabel for subscription with some further information and then we have a type collection type collections really for the reverse lookup of which services are available. And this is an interface that can be implemented
00:16:33 [W] Is or can be implemented in multiple places and it's obviously also allowed to Federate those Discovery Services.
00:16:46 [W] You can really create a catalogue of services and you can make those Keda catalog available everywhere with the same interface. You can imagine having a local cache that exists somewhere near your consumers
00:16:55 [W] And of course Discovery mechanism will also allow the the catalog to be adjusted to the circumstances that you have, you know near your endpoints if it's required to subscribe via a
00:17:11 [W] We're going to get to that in a second to be able to deliver those events into your into your respective endpoint that you have. Then that sort of translation can also be done in that Discovery
00:17:27 [W] This case not it's not expressed or explicitly because the interface is kept very simple, but the flexibility is there to allow this next Once you have discovered which events are available
00:17:43 [W] To be able to subscribe to them and again today in cloudevents in the base cloudevents PEC. That's something that we've made a matter of of out of bands agreement some protocols.
00:17:59 [W] Syncope or mqtt or Kosta already have built in facilities to subscribe.
00:18:15 [W] So if you are designating a subscription manager that is a cue or sorry or topic inside of a message broker, then it's implied effectively what that subscription protocol is if you're using
00:18:25 [W] Or topic inside of an event message broker then it's implied effectively what that subscription protocol is if you're using HP for instance, but for other for HTTP, for instance, HP doesn't have a built-in.
00:18:32 [W] Instance but for other for HTTP, for instance, HP doesn't have a built-in subscription notion.
00:18:41 [W] So in even though those subscription services are fairly common or these consumption patterns are fairly common with with webhooks. It's something that we have not seen being sufficiently standardized so we have
00:18:49 [W] Are fairly common where these consumption patterns are fairly common with with webhooks. It's something that we have not seen being sufficiently standardized.
00:18:52 [W] So we have to find a way to go and create a specification that technologists the existence of these existing protocols like FTP and equity which have built-in subscription Notions and then
00:19:02 [W] Testing protocols like FTP and impurity which have built-in subscription Notions and then at the same time add a ability to for protocols that don't have that like HTTP to also allow you to do a subscription gesture and that's why you wrote
00:19:12 [W] subscription API specification acknowledges those or enumerates tufin subscription fees that exist in those other protocols supported by cloudevents and then explicitly introduces an API,
00:19:28 [W] Can then be implemented using HTTP or can be implemented using grpc or implemented any other protocol that specifically needs this to go and effectively manage subscriptions and for that we've introduced the notion of a
00:19:44 [W] Effectively manage subscriptions and for that we've introduced the notion of a subscription manager next.
00:19:46 [W] So the subscription manager is the one that implements a subscription API and the subscription manager might act on behalf of itself.
00:20:03 [W] So it may really be the The Entity that emits those events but it also made may act on behalf of others.
00:20:06 [W] So you have that very often in larger setups where you are with very very many producers and those many producers produce events into a middleware of sorts and then if you are interested in
00:20:18 [W] Events from a particular publisher or a group of Publishers. Then you are subscribing on that middleware on behalf of those producers.
00:20:32 [W] So one of the obviously examples here is sources iot we have sometimes thousands and or hundreds of thousands of devices looking into a cloud endpoint and if you're interested in specific events
00:20:41 [W] Devices you would not subscribe to every single device but you really would go and go to the subscription manager which has the pool of events to go and pull out the events that you need for those subscription for the subscription manager as said we're in numerating
00:20:57 [W] Isms of existing protocols that we have defined this HTTP API to help with the cases where more API and API abstraction to help with the cases where that is not available.
00:21:13 [W] We also have two delivery Styles and that is the push delivery at the pull deliveries were weirdest distinguishing between those two.
00:21:25 [W] We're typically for cloudevents as we defined it today. Most mostly the
00:21:28 [W] Delivery is assumed to be push which means the producer or the subscription manager acting on its behalf.
00:21:40 [W] Torres has those events by establishing connection and sending the event along or this can also now the definition here allows for pull delivery style where you are effectively having the subscription manager.
00:21:50 [W] Being accused for instance on behalf of the producer. So both of those things are possible next.
00:22:05 [W] So those who are effectively complementing the the the mechanisms that we have today in cloudevents by closing the loop. We have delivery something that's defined now, and now we have Discovery and subscription that we're adding to it.
00:22:12 [W] a really important further element this schema registry next
00:22:17 [W] every cloudevents can carry a payload with event details mostly you for more structured data structure data, if you're sending a sending it to another party will require often for that other party to be able to validate
00:22:35 [W] Every cloudevents can carry a payload with event details mostly you for more structured data structure data, if you're sending a sending it to another party will require often for that other party to be able to validate
00:22:37 [W] Richard data is correct based on some syntactic rules that can be expressed in a schema.
00:22:50 [W] And then there's often also a need for sterilization where you want to have an in-memory data structure to be serialized out using an efficient format and those efficient formats often leave the
00:22:59 [W] Out like you're familiar with what Jason looks like.
00:23:04 [W] Jason is very repetitive and puts all the metadata elements and the type information kind of into the document itself.
00:23:13 [W] And there's a number of far more efficient serialization formats, which don't do that and they keep that information outside in schema documents.
00:23:23 [W] But then once you use that the question is, where do you put those documents? So the goal of the schema registry is to allow store these documents and Axle access those data.
00:23:29 [W] Givens in a consistent way so that you can go and pro and build software elements AC realizer and a validator that can then lean on those schemas and on hints that come with the event and then can go and
00:23:44 [W] Up and they keep that information outside in schema documents.
00:23:45 [W] But then once you use that the question is, where do you put those documents?
00:23:46 [W] So the goal of this schema registry is to allow store these documents and Axle access those documents in a consistent way so that you can go and pro and build software elements AC realizer and a validator that
00:23:47 [W] extra data or serverless that structured data and the goal is for that to be a project neutral and vendor neutral so that that works for cloudevents, but that also works for other messaging and Eventing infrastructures because
00:24:00 [W] Works for other messaging and events and infrastructures because we often see that things get born as cloudevents but then get forwarded through other messaging infrastructures as well.
00:24:10 [W] And so we don't want to constrain this to the case of cloudevents and cloudevents also is just using in the the binary format is just using a message payload like any other message or events and use case would
00:24:22 [W] the the binary format is just using a message payload, like any other message or events and use case would so it would it doesn't simply doesn't make sense to constrain the registry just to cloudevents use cases next
00:24:29 [W] In the registry just to cloudevents use cases next.
00:24:35 [W] So that's one of the principles that we have is at the bottom what I just said that it's should be scenario neutral.
00:24:37 [W] It should also be protocol neutral.
00:24:46 [W] So the registry data model is abstractly defined and HTTP binding that we have so setting and receiving messages schemas via HTTP that's well-defined right now with an open API document but the the
00:24:52 [W] t-that's well-defined right now with an open API documents, but the the registry per se the data model is abstract kind and we allow it allows for local bindings, and we certainly anticipate to have a name QP binding
00:25:03 [W] Hopefully more Bindings that somewhat depends because it's a request for response model requirement depends on the capabilities of the respective protocols, but grpc is also certainly in the cards.
00:25:19 [W] And of course you want to keep this as simple as possible.
00:25:26 [W] We don't want to turn this into a massive mayadata store with super powerful capabilities.
00:25:33 [W] So there's no goal here to rival the capabilities of patchy Atlas or something like this, but
00:25:33 [W] Ali is like you should be able to implement this registry a pi over a plain file system or cloudbees door and it's just there to store those store those schemas and manage those schemas in the
00:25:48 [W] While providing the core capabilities we need next so this complements the event delivery model that I just talked about.
00:25:58 [W] by allowing you the producers to manage and validate or someone on behalf of the producers to manage Mobility the schemas and then really think about the data field in the cloudevents that how the that can
00:26:14 [W] Model here.
00:26:16 [W] what's in the green works for cloudevents as we have to find it but also works for other Eventing scenarios as well.
00:26:31 [W] So this is kind of you for you to get visualize what this is about is really for serialization deserialization you or validation on either side and it really pertains to the data element that sits inside of the cloudevents EXT.
00:26:40 [W] Finally the structure of the skins of this schema registry.
00:26:48 [W] We've structured this such that there is a notion of groups the group they can group. So a schema registry is split up into groups. Those groups can be by application or by some other criteria.
00:27:00 [W] They're really also there as an anchor for Access Control. So you may want to go and limit access to schemas by groups because they may carry important secrets. So you go on to make them accessible.
00:27:12 [W] Everybody then within that you have schemas, which really are containers four sets of schema documents that represent the same data structures.
00:27:25 [W] And then of course those those scheme has evolved and so the documents are really the leaves of this.
00:27:29 [W] We have various schema version starting with schema version one where if you're adding fields or if you making feels absolutely but you don't remove them.
00:27:39 [W] Then you're still within the same backwards compatible schema of
00:27:40 [W] Members we have some rules for how to add and manage those schema. So it's a very simple structure to manage effectively schema documents next.
00:27:57 [W] And that's where we are.
00:28:03 [W] We will take some live questions in at the end of this presentation following now, if you want to learn more about cloudevents go to cloudevents IO our specification repository is
00:28:15 [W] Cloudevents / spec that's where you'll also find the latest versions of all of those things. And we also have loo weekly called Thursdays at 12 p.m.
00:28:29 [W] Eastern time us or 1800 Central European Time.
00:28:33 [W] And in the repo is also the dial-in information.
00:28:34 [W] And then you can also follow dog and myself on Twitter or send us email if you have any further questions.
00:28:41 [W] All right, cool.
00:28:44 [W] Thank you comments.
00:28:44 [W] All right, thank everybody will stop the recording here and take questions on live.
00:28:48 [W] Thank you all.
00:28:49 [W] Here we are here we should be.
00:28:57 [W] Yeah.
00:29:01 [W] Hey you guys everybody has any questions, please put them in the chat. We have two questions that I'm going to read out there both from Co Tom Kirk over so I'm going to summarize those.
00:29:12 [W] The first one is about whether why there's support for a QP.
00:29:18 [W] QP. What service would that be good for and the answer? Is At Your Service boss or Apache?
00:29:25 [W] Active in queue or Pepsi Cupid or sap?
00:29:31 [W] I think Enterprise messaging with the call. It's IBM mq.
00:29:33 [W] of course and software age use Universal midst of doing so effectively all the Brokers that support Inc P.
00:29:45 [W] The first one is about whether why there's support for a QP.
00:29:47 [W] What services would that be good for and the answer? Is At Your Service boss or Apache activemq or patchy Cupid or sap?
00:29:48 [W] I think Enterprise messaging with the call.
00:29:48 [W] It's IBM mq.
00:29:48 [W] of course and software age use Universal Minister. Jinx it effectively all the brokers.
00:29:50 [W] That's supporting QP.
00:29:51 [W] They know how to support effectively topics in a particular feature set of ATP. And so that's where that would be useful and then the following question that someone had was whether the subscription specification also
00:29:56 [W] In a particular feature set of a pee-pee.
00:29:57 [W] And so that's where that would be useful and then the following question that someone had was whether the subscription specification also covers filters and the answer is yes, it does.
00:30:04 [W] have to find a very simple set of filters that allows you to constrain the kinds of events that are coming they're eligible for that particular subscription.
00:30:15 [W] Since that's that's in my field.
00:30:22 [W] There's another question that just came in from Alexis how fast do you think different middleware will integrate with schema registry implementation thinking of things such as the currents kafka's kubevirt the street well, so there is a proprietary
00:30:35 [W] For Kafka, but there is the Kafka Apache Kafka project person per se does not have a schema registry.
00:30:50 [W] And because it doesn't we believe there should be one that is in the public in the plug were public realm and driven by it open project.
00:31:01 [W] And since we needed one specifically for cloudevents, we all thoughts and phone consensus here this fairly large group of companies that
00:31:06 [W] Creating a definition would be a good idea.
00:31:10 [W] There are some existing projects that are involved here in the cloudevents group, which are already doing schema Registries and we're kind of lining on this specification and are all looking to
00:31:23 [W] At this so how fast do I think this will integrate? Well this it's a matter of what their respective product priorities are the people have and really what the demand is if you are asking your vendor or preferred.
00:31:39 [W] These are the people have and really what the demand is. If you are asking your vendor or preferred OSS project for that support and your point that specification that might happen faster.
00:31:49 [W] Dog, do you want to take that one?
00:31:54 [W] But clinically understand understand cloudevents is something that competes with Kafka and the cloud native of Rina. So to me, it doesn't compete with it and more such as much as it complements it right.
00:32:10 [W] It's more about adding metadata to the existing message flows.
00:32:13 [W] So the middleware can send the messages appropriately, right?
00:32:18 [W] That's actually one of the key selling points of cloudevents is that we're not trying to reinvent transports.
00:32:19 [W] not. Trying to invent a one-size-fits-all even format. It's mainly meant to augment the existing message flows.
00:32:26 [W] So that you can just do better routing and processing of those messages.
00:32:31 [W] We're not really here to reshape.
00:32:32 [W] Everybody's World completely and rock them.
00:32:34 [W] It's just to make the life easier for what they're currently doing and we specifically made a binding of cloudevents to various transports including the Apache Kafka grpc API.
00:32:46 [W] That's what we have from the other questions.
00:32:59 [W] I have a shy group.
00:33:01 [W] Yes.
00:33:02 [W] Who are we not a half minutes or so?
00:33:06 [W] Just to make the life easier for what they were currently doing and we specifically made a binding of cloudevents to various transports including the Apache Kafka grpc API.
00:33:11 [W] That's what we have from the other questions.
00:33:11 [W] I have a shy group.
00:33:12 [W] Yes.
00:33:12 [W] Or wait another half minutes or so.
00:33:13 [W] So are these cloudevents SDK is going going to or need to support the schema based structure binary encoding?
00:33:37 [W] Oh geez crap camera here comes I believe that the all all receivers about cloudevents are actually supposed to support both.
00:33:44 [W] Yes. I think it's up to the sender's to decide which one they want to use but I believe the specification tells people that support both.
00:33:50 [W] Are you getting back some interoperability?
00:33:54 [W] So I think the question is do they have to support once we introduce commanders chemo registry.
00:33:59 [W] Oh, I see and the answer is no they don't have to because the the data is something that's not handled per se
00:34:14 [W] The the answer is no they don't have to because the the data is something that's not handled per se by the SDK, but the data is something that
00:34:16 [W] To the application its payload.
00:34:24 [W] So if we have a special case for Jason because that's so common that when we decode basis and presented to the application as Json, but generally the
00:34:34 [W] Say there's some the content-type will say there is a fro and then they will be a binary that contains the the Avro then it's really up to the application to go and pull the data out.
00:34:49 [W] So the the cloudevents sdks per se don't have to do this, but I can imagine that some of the sdks will be special casing something like everyone will understand this but the core as that we the course that we have today.
00:35:01 [W] They will not necessarily be required to decode everything that
00:35:05 [W] can be possibly used.
00:35:06 [W] So Thomas tufin question, what does it take for kubernative to adopt cloudevents?
00:35:13 [W] He's implying that the joke, but actually there is some discussion going on in Grenada is to to support cloudevents, especially for their for the events that do get sent out to be honest.
00:35:23 [W] I'm not a hundred percent sure where they are with that.
00:35:24 [W] I do know it is up for discussion. Technically if they want to support it from an agency perspective. It's just adding a couple of extra HP headers and that's about it.
00:35:33 [W] it. So there's not a whole lot for them to do to support it. And at that point you can then integrate with anybody that uses it for example
00:35:37 [W] Know that K native would love it if they did that because I know they have an API server eventsource and they would need to do any kind of total of the event as it came in at that point.
00:35:49 [W] Yeah.
00:35:52 [W] Okay.
00:35:59 [W] Okay.
00:36:19 [W] Are we allowed to I generally like to end Co seconds early.
00:36:25 [W] Okay.
00:36:34 [W] Well then I think I'm going to Jordan and thank you all for joining and clicker questions.
