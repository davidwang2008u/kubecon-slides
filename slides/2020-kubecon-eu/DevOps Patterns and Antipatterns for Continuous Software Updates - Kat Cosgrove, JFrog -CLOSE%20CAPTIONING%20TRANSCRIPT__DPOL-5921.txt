DevOps Patterns and Antipatterns for Continuous Software Updates: DPOL-5921 - events@cncf.io - Wednesday, August 19, 2020 11:23 AM - 1155 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:11:34 [W] Hey all thanks for coming to see me. This is devops patterns and anti patterns for continuous software updates.
00:16:33 [W] A little bit about me first.
00:16:40 [W] My name is Kat Cosgrove and I'm a developer Advocate at jfrog before that. I was an engineer on the iot team here. And if you want to get ahold of me, I am on Twitter at Dixie three flat line, or you can just shoot me an email Twitter is faster though.
00:16:52 [W] I am not on that zero inbox technology.
00:16:56 [W] So if you try to email me, my apologies in advance slides will be up after Cube Khan is over at jfrog.com show notes.
00:17:04 [W] Before we start talking about continuous updates.
00:17:11 [W] I would like us to think about some things that we take for granted first.
00:17:15 [W] Why do we update software at all?
00:17:20 [W] Obviously, there's some software that doesn't really require updates. For example, BC.
00:17:24 [W] Cat Cosgrove and I'm a developer Advocate at jfrog before that.
00:17:34 [W] I was an engineer on the iot team here. And if you want to get ahold of me, I am on Twitter at Dixie three flat line, or you can just shoot me an email Twitter is faster though.
00:17:35 [W] I am not on that zero inbox technology.
00:17:35 [W] So if you try to email me, my apologies in advance slides will be up after Cube Khan is over at jfrog.com show notes before we start talking about continuous updates.
00:17:37 [W] I would like us to think about some things that we take for granted first.
00:17:38 [W] Why do we update software at all?
00:17:39 [W] Obviously, there's some software that doesn't really require updates. For example, BC.
00:17:40 [W] It's a command line calculator you type 2 plus 2 and you get for this kind of software is not updated very frequently as you can see here. Frankly. I am not sure what these updates were, but you can see that it hasn't been updated for 20.
00:17:46 [W] Here's and that's probably okay.
00:17:48 [W] This is an exception though.
00:17:48 [W] Most software is updated and it's updated frequently for a lot of different reasons.
00:17:49 [W] The first reason software is updated is simply us where users and we want shiny new features. Lots of them.
00:17:55 [W] We are super greedy.
00:17:57 [W] We want them frequently.
00:17:58 [W] We want them. Now yesterday is better. Honestly if I could get it.
00:18:02 [W] You might relate to this a little bit if you had a phone back in the 90s one of those Nokia's with snake. If you didn't have the one with snake, you couldn't just install it. You had to buy a whole new phone. There were even special
00:18:18 [W] But you can see that it hasn't been updated for 20 years and that's probably okay.
00:18:19 [W] This is an exception though.
00:18:19 [W] Most software is updated and it's updated frequently for a lot of different reasons.
00:18:20 [W] The first reason software is updated is simply us where users and we want shiny new features.
00:18:20 [W] Lots of them.
00:18:20 [W] We are super greedy.
00:18:20 [W] We want them frequently.
00:18:20 [W] We want them now yesterday is better. Honestly if I could get it.
00:18:21 [W] You might relate to this a little bit if you had a phone back in the 90s one of those Nokia's with snake. If you didn't have the one with snake, you couldn't just install it. You had to buy a whole new phone. There were even special
00:18:25 [W] Thousands and the early ones were still really really clunky about updates and moving data from one phone to the next.
00:18:36 [W] remember having to buy a data cable to move over from a Samsung Galaxy to the pixel to and Silent app updates are also relatively new this transition was driven entirely by users.
00:18:48 [W] The second reason we want updates is security old software is really really dangerous a bad breach is kind of becoming the digital version of an oil spill.
00:19:00 [W] It can be extremely destructive think of it like stopping distances when you're learning how to drive two components make up the stopping distance, you're thinking distance or the time it takes you to recognize that there's a problem and
00:19:13 [W] On the brakes and the actual braking distance, which is the time. It takes to stop the car. Once you've reacted and hit the brake pedal to reduce the stopping distance. You have to reduce both components better materials to make better brake pads
00:19:29 [W] Both components better materials to make better brake pads better pavement more advanced tires and to reduce the thinking distance. That's a little bit harder.
00:19:40 [W] We eventually just have to replace human drivers with self-driving cars or some kind of like semi-intelligent autopilot to react much faster.
00:19:47 [W] It's similar with security vulnerabilities.
00:19:50 [W] There's the time it takes to identify that a problem exists the time it takes to fix it, which is often just
00:19:54 [W] Updating your dependencies and the time it takes to deploy the fix. This is where continuous updates become a big deal because the faster you can update the better off you'll be
00:20:08 [W] A couple of examples you might remember about three years ago.
00:20:16 [W] There was an exploit that effectively shut down hospitals in the UK after ransomware took over their networks.
00:20:21 [W] It was identified immediately, which is great. But the fix was upgrading the operating systems. Now, these hospitals were still using Windows XP which had reached its end of life by then and was no longer being supported with security updates.
00:20:34 [W] So the ransomware was able to take advantage of an unpatched flaw and completely
00:20:38 [W] Takeover it took literally years to deploy the fix in this case upgrading every single computer and every hospital from Windows XP to something a little bit more modern.
00:20:49 [W] Tio because the faster you can update the better off you'll be
00:21:00 [W] a couple of examples you might remember about three years ago.
00:21:00 [W] There was an exploit that effectively shut down hospitals in the UK after ransomware took over their networks.
00:21:01 [W] It was identified immediately, which is great. But the fix was upgrading the operating systems. Now, these hospitals were still using Windows XP which had reached its end of life by then and was no longer being supported with security updates.
00:21:05 [W] So the ransomware was able to take advantage of an unpatched flaw and completely take over.
00:21:07 [W] For it took literally years to deploy the fix in this case upgrading every single computer and every hospital from Windows XP to something a little bit more modern.
00:21:14 [W] Another example you almost certainly remember is the Equifax Scandal because we're still feeling the effects of that one today and probably will be for a while attackers use a vulnerability in an old version of a package called struts this
00:21:17 [W] Old version of a package called struts. This had actually been present for months though. It was unexploited.
00:21:20 [W] It took them two months to find an upgrade all usages of the vulnerable version and deploy to fix and I know we're only talking about vulnerabilities and Enterprise environments and they're going to be slower to update just like by their very nature you can say well
00:21:23 [W] And they're going to be slower to update just like by their very nature. You can say well in our environment this isn't the case.
00:21:29 [W] We're young. We use all of the cool technology.
00:21:30 [W] We know what we're doing.
00:21:32 [W] We know how to update immediately.
00:21:34 [W] So this would never happen to us.
00:21:35 [W] That's great and all but it's not really enough last year Spector and meltdown went public people mostly talked about meltdown because like ten lines of JavaScript could expose passwords from different parts of memory, and that's terrifying but I would
00:21:51 [W] Talked about meltdown because like 10 lines of JavaScript could expose passwords from different parts of memory, and that's terrifying but I would argue that the Specter is the more dangerous of the two.
00:21:54 [W] The problem with Specter is that while most malware exploits coding errors or just generally poor design Specter exploits good design.
00:22:06 [W] It's a tax work by observing how well designed applications affect the memory and what decisions the CPU makes based on certain conditions in the code from there.
00:22:18 [W] They assume that other software reasoning the same way will lead to the same decisions. The better you your code is written the more vulnerable. It is to Spector glass attacks. So
00:22:27 [W] What are you gonna do write bad code just to confuse speculative execution?
00:22:31 [W] No, that's absurd what then okay. This code is vulnerable and now it's a race against the attacker.
00:22:38 [W] We need to identify the problem as fast as possible and we need to deploy the fix as fast as possible. And we need to update as fast as possible.
00:22:49 [W] That's what this is.
00:22:50 [W] The talk is all about updating as quickly as we can on the bright side.
00:22:56 [W] We're actually in surprisingly good shape when it comes to continuous updates the state of devops report which many of you may be familiar with surveys more than 30,000 organizations annually on their practices.
00:23:06 [W] And we need to deploy the fix as fast as possible and we need to update as fast as possible.
00:23:22 [W] That's what this is.
00:23:22 [W] The talk is all about updating as quickly as we can on the bright side.
00:23:22 [W] We're actually in surprisingly good shape when it comes to continuous updates the state of devops report which many of you may be familiar with surveys more than 30,000 organizations annually on their practices.
00:23:24 [W] They're looking to measure a few different metrics the lead time how long it takes to go from code to production the frequency of deployments what percent of deployments fail and need to be rolled back and how long it takes to recover from one of those
00:23:27 [W] failures based on those responses organizations are grouped into categories by performance and only about 20% of them have what would be considered Elite Performance to qualify as an elite organization
00:23:36 [W] To deploy multiple times per day. These organizations are able to provide more features to users faster and to be more protected from vulnerabilities because they can deploy immediately once a problem is identified and fixed their also recovering from those failures
00:23:52 [W] In the 1990s, the concept of extreme programming was hot extreme programming advocated for Rapid feedback, which meant releasing faster and more often and then scrum showed up and it wanted to reduce cycle time to the absolute minimum and Toyota
00:24:10 [W] And then scrum showed up and it wanted to reduce cycle time to the absolute minimum and Toyota production system said to decide as late as possible and deliver as fast as possible and then combine said to push smaller more incremental changes all
00:24:19 [W] Push smaller more incremental changes all of these translate to Dear God, please, please please release faster. It is not really A New Concept.
00:24:28 [W] So you want to update faster? Great cool.
00:24:35 [W] There's no doubt that it leads to a better more secure product, but it can also go terribly terribly wrong. And here's how
00:24:40 [W] Our first example is of course Java three years ago, Mark Reynolds announced that Java would be updating more often gone were the days where a Java update takes a year or a year and a half to release
00:24:56 [W] And it would be every six months.
00:25:00 [W] That was Java 8 and 5 versions have come out since then so.
00:25:05 [W] How's that going?
00:25:08 [W] Let's look at the state of developer ecosystem report by jetbrains from 2019.
00:25:22 [W] They serve a developers and look for a variety of Trends. But in particular we care about the results on which versions of java are being used in production.
00:25:23 [W] 83% of people are still on Java 8 5 versions old.
00:25:29 [W] Yikes, so we just made a case for faster updates Java announced that they were going to update more frequently.
00:25:40 [W] Why the hell are so many people still on Java 8.
00:25:41 [W] To understand what happened?
00:25:46 [W] We need to understand how we actually decide to update.
00:25:47 [W] So this is how users decide how to update something new is available and user comes to a decision.
00:25:59 [W] Do I want it? There's nothing interesting in it.
00:26:02 [W] We say no and continue on our way. If yes, we ask another question, are there any risks? This is an easy question with things that don't matter much like the Netflix app on your smart TV or the Twitter app on your phone
00:26:15 [W] Our risks we don't say no immediately.
00:26:22 [W] We asked if we trust the update now, this one is a little bit harder.
00:26:26 [W] There are really a lot of companies or vendors that we just kind of blindly trust but in the early 2010's we did tend to blindly trust apples. So I will use them as an example back then if there was an update for Mac OS you most
00:26:38 [W] Hands, we did tend to blindly trust Apple. So I will use them as an example back then if there was an update for Mac OS you most likely just went for it.
00:26:42 [W] Even though it should absolutely be considered a high-risk update.
00:26:44 [W] This isn't is true. Now most people I know waited months to upgrade to Catalina and did the same thing with High Sierra.
00:26:52 [W] So why don't we trust our vendors anymore? Did they forget how to do QA
00:26:57 [W] we tend to get better at the things we do so, I don't know if that's the right answer.
00:27:02 [W] The competing hypothesis is increasing complexity.
00:27:11 [W] You can see here that the number of artifacts involved is growing pretty rapidly which is making things way way way more complicated using agile as a starting point. We see see I little bit of complexity and then CD rolls up
00:27:24 [W] A lot but also add some complexity infrastructure as code does the same microservices enter the playing field Docker becomes a thing serverless enters the ring and then the rising popularity of iot makes things
00:27:39 [W] Max there's another problem at play here though.
00:27:43 [W] It's not just the code.
00:27:47 [W] It's the data.
00:27:49 [W] We have a lot of it.
00:27:56 [W] This is a prediction of the global data sphere by 2025. Now this report is from Seagate and obviously they have a dog in that race, but it's still today.
00:28:04 [W] We think of petabyte-scale a lot of data and we're rapidly moving into exabytes and zettabytes right now.
00:28:12 [W] It's mind-boggling but by 2025 we're looking at a hundred and seventy-five zettabytes of data what this means is that
00:28:14 [W] Aging environments kind of need to die. It doesn't make economic sense anymore to replicate your production environment for staging big companies are already testing in production.
00:28:29 [W] And I know it's like a meme that you should never Deploy on Fridays and you should never test in production, but you can be testing and production so data and complexity are major contributors to the issue of guaranteeing quality. What do we do about it?
00:28:41 [W] We have another question in our decision tree now.
00:28:49 [W] Can we verify that the update is going to be worth the work involved? If we can't we just don't update we skip that version if we can we have to spend time going through user acceptance testing and verification and
00:29:00 [W] Us as software providers because users do not want to deal with all of this.
00:29:10 [W] this. So we have to make sure that every update includes so many appealing features they'll be willing to deal with it.
00:29:12 [W] A balance has to be struck features that we want versus the cost of accepting the update.
00:29:22 [W] Can we get around this somehow is there like a cheat code does the Konami Code work here?
00:29:26 [W] I wish it did but it does not we do have a cheat code though.
00:29:32 [W] It's auto-updates.
00:29:36 [W] This only works for things that are high-risk like your browser or your Twitter app.
00:29:41 [W] I would wager that most of you have no idea what version of Chrome you're running. These are low risk.
00:29:42 [W] So they happened without notifying you I don't know what version of Twitter is on my phone.
00:29:52 [W] Your phone's OS is a high-risk update though. You probably do know what version of Android or iOS you're running this one requires human intervention.
00:30:00 [W] So we end up back at the previous decision of are the features worth the risk of updating.
00:30:06 [W] Are they worth the work?
00:30:07 [W] Now let's talk about building trust if we can get consumers to trust us again the issue of how to update faster kind of starts to go away.
00:30:18 [W] Let's talk about what could go wrong.
00:30:19 [W] OS is a high-risk update though, you probably do know what version of Android or iOS you're running this one requires human intervention.
00:30:32 [W] So we end up back at the previous decision of are the features worth the risk of updating.
00:30:32 [W] Are they worth the work?
00:30:32 [W] Now let's talk about building trust if we can get consumers to trust us again the issue of how to update faster kind of starts to go away.
00:30:34 [W] Let's talk about what could go wrong.
00:30:35 [W] Onhub was a router from Google eventually Google Wi-Fi. One of the really appealing features was itself improving system today kind of it's just an over the air update.
00:30:37 [W] It was a cool concept back then lots of slick marketing attached to it, but one day in 2017, they released a bat update.
00:30:42 [W] These updates are automatic. Remember, so nobody said yes, I would like this and for some reason on some users this update rolled the device back.
00:30:50 [W] Factory settings because it now doesn't have access to the internet because it's factory.
00:30:59 [W] Google wasn't able to roll that update back or push a patch everyone affected had to run through their entire network config process again. So the problem here was that an update went catastrophically
00:31:10 [W] Rolled the device back to its factory settings because it now doesn't have access to the internet because it's factory.
00:31:11 [W] Google wasn't able to roll that update back or push a patch. Everyone affected had to run through their entire network config process again.
00:31:12 [W] So the problem here was that an update went catastrophically wrong in a way that prevented an over-the-air fix from reaching the device in this example.
00:31:17 [W] It's not really harmful. It's kind of just a little
00:31:20 [W] Little bit inconvenient, but if you think about it that could that could be really really dangerous for some Edge devices.
00:31:31 [W] There are devices out there in some very very isolated places.
00:31:34 [W] That would be expensive impractical or maybe outright impossible to get to so it's not really viable the solution here is to
00:31:46 [W] enable local rollbacks
00:31:48 [W] you have another version of the software saved on the device and automatically roll back to it.
00:31:59 [W] If a problem is detected.
00:32:02 [W] This isn't a new idea either actually Windows 98 could do this.
00:32:11 [W] If you changed your desktop resolution to something incompatible with your monitor. The whole screen would go black as an answer to this problem Windows would require you to confirm that you want to keep the new settings if you didn't click yes after a certain amount of
00:32:20 [W] Time it would assume that you couldn't because your screen is black and you can't see anything and revert for you local rollbacks today are a little bit more complicated than just remembering a previous resolution setting obviously, but it's the same idea.
00:32:34 [W] As an answer to this problem Windows would require you to confirm that you want to keep the new settings. If you didn't click. Yes, after a certain amount of time, it would assume that you couldn't because your screen is black and you can't see anything and revert for you
00:32:42 [W] Cars, the Jaguar I pace is a very beautiful very expensive electric car most cars electric or not have multiple computers in them. And in 2019 a software problem with the braking system was found to be the cause of a regenerative
00:32:56 [W] Failure. However, Jaguars and most cars actually can't update over the air at all.
00:33:05 [W] So they had to issue a recall.
00:33:06 [W] Physical recalls are very expensive.
00:33:15 [W] You have the pr cost of issuing One to begin with but you also have a cost in actual money to rectify the issue at hand even bigger problem.
00:33:21 [W] You can actually Force the user to do it.
00:33:26 [W] They have to take a day off work and drive the car into a service center and get a rental.
00:33:26 [W] that's a pain. So the solution here is to implement over-the-air software updates and don't rely on your users to be willing to fix it for you preferably.
00:33:37 [W] continuous updates
00:33:38 [W] So what is the difference between over-the-air updates and continuous over the air updates?
00:33:47 [W] Let's look at another example.
00:33:48 [W] One of the problems with Tesla's autopilot was Phantom breaking the conditions are good.
00:33:58 [W] Nothing's in the way or on the road weather is nice, but out of the blue the car Slams on the brakes.
00:34:04 [W] It sounds like a serious problem right and it took a while to fix but why?
00:34:08 [W] Because of this chess game update.
00:34:11 [W] Bundled effects. And with that is the chess game is as important as fixing Phantom breaking kind of depends really if you actually have the autopilot feature and you use it then no, it's absolutely not fixing the Phantom break takes priority,
00:34:41 [W] Don't have autopilot and you just really like playing chess while you wait for your car to charge then it probably is more important than the Phantom breaking fix.
00:34:52 [W] The problem here is that if you do batch updates features that are important to one side of users have to wait on features that are irrelevant to them but important to a separate set of users and that sucks instead if you implement continuous Updates this
00:35:07 [W] You can deliver the features as they come out.
00:35:12 [W] You might ask yourself.
00:35:16 [W] Why the hell is she talking about iot and mobile development?
00:35:19 [W] I'm A Cloud native developer.
00:35:20 [W] This is Cube Khan, and we're mostly cloudy knative developers here.
00:35:23 [W] How is this relevant?
00:35:26 [W] The thing is our problems is cloud native developers and software providers kind of pale in comparison to the struggles of iot developers and we can learn from them.
00:35:34 [W] They don't control the availability of the target device.
00:35:41 [W] They don't control the state of the target.
00:35:44 [W] They may not know the version of the target.
00:35:46 [W] They may not have access to the device.
00:35:53 [W] So our lives doing server-side updates are way easier than the lives of those solving problems for iot and yet we still managed to screw it up like repeatedly.
00:35:58 [W] This example is a little old but it was so impactful than that.
00:36:06 [W] It's worth mentioning now and we can still learn from it.
00:36:08 [W] This is the night Capital disaster Knight Capital was a trading firm that specialized in automated trading on the New York Stock Exchange.
00:36:19 [W] They decided to roll out a new system. And for some reason they decided to reuse some old apis, but some of the endpoints had changed somehow one of the eight servers was not updated new client sent requests, but one of those machines can't a
00:36:32 [W] This example is a little old but it was so impactful than that.
00:36:39 [W] It's worth mentioning now and we can still learn from it. This is the night Capital disaster Knight Capital was a trading firm that specialized in automated trading on the New York Stock Exchange.
00:36:40 [W] They decided to roll out a new system. And for some reason they decided to reuse some old apis, but some of the endpoints had changed somehow one of the eight servers was not updated new client sent requests, but one of those machines containerless
00:36:46 [W] Code with an API that behaves differently Engineers decided to roll back the working code from those seven updated servers increasing the load on the one server running old code.
00:36:55 [W] There is also no monitoring no alerts and no debugging so they had to sit there trying to figure out what's going on in real time.
00:36:56 [W] Losing money made it over minute over the course of the 42 minutes. This was live.
00:36:57 [W] lost over 400 million dollars and went out of business as a result. Absolutely horrifying.
00:37:01 [W] So what could have fixed this the problem here is the humans are just really bad at repetitive tasks. Those servers were all being updated manually, but humans get tired or bored or distracted or they're depressed or somebody's just having a bad day and they
00:37:14 [W] In real time losing money made it over minute over the course of the 42 minutes. This was live.
00:37:15 [W] They lost over 400 million dollars and went out of business as a result.
00:37:15 [W] absolutely horrifying.
00:37:15 [W] So what could have fixed this the problem here is the humans are just really bad at repetitive tasks. Those servers were all being updated manually, but humans get tired or bored or distracted or they're depressed or somebody's just having a bad day and they aren't working
00:37:17 [W] % it's normal. You can't expect anybody to be perfect all the time.
00:37:20 [W] time. So the answer is to just automate Everything Computers. Don't get bored.
00:37:24 [W] They also weren't updating frequently not deploying regularly makes every infrequent update feel more stressful which humans don't really handle well and it leads to mistakes.
00:37:40 [W] The answer here is to just update more frequently get better at it.
00:37:43 [W] It takes practice.
00:37:44 [W] make it a habit that way the chances of you making a mistake because you're anxious go down pretty radically.
00:37:51 [W] Another problem is that they reused some State on the target machine. Now. This could be a good decision or a bad one. It kind of depends. But regardless you need to know the state of the device that you're updating reverting an update might require reverting the state
00:38:08 [W] happen
00:38:11 [W] cloudflare is always an outstanding example.
00:38:21 [W] This example is from July of 2019. But we all just went through it again this past July almost exactly a year later a very large portion of the internet runs on cloudflare.
00:38:29 [W] So when it goes down a lot of the internet goes with it.
00:38:32 [W] Cloudflare fights Studio s attacks with routing rules. These routing rules are deployed frequently to combat attacks. And in this case a deployment of a single misconfigured rule caused the outage and the culprit was something nobody
00:38:49 [W] Stealing with reg X in this case.
00:38:55 [W] It's spiked CPU usage to a hundred percent their status page displayed the affected region as Earth which is cute but kind of problem.
00:39:03 [W] The problem here was that they released a bug that affected all users instead.
00:39:12 [W] They should have released to a small number of users first that way if a problem occurs, you can just stop the release and either revert or patch the affected users. Your potential blast radius for problem is radically reduced.
00:39:24 [W] Some problems are also really hard to trace by relying exclusively on user feedback by and large.
00:39:35 [W] It is hard to get users to give you information that actually helps you nail down the problem.
00:39:36 [W] I'm guilty of this you are guilty of this we all do it.
00:39:40 [W] Nobody is perfect.
00:39:41 [W] don't pretend you are and the solution here is to just always Implement tracing monitoring and logging in your services and applications. So you don't have to rely on a user to find your problem for you.
00:39:52 [W] Next up is rollbacks above fix isn't always immediate and problems aren't always easy to solve Meanwhile. Your user is hanging out with a buggy a poor device.
00:40:04 [W] So what do you do you implement Rolex the ability to deploy a previous version without a delay not every platform supports that though.
00:40:16 [W] Is Implement tracing monitoring and logging in your services and applications so you don't have to rely on a user to find your problem for you?
00:40:20 [W] Next up is rollbacks a bug fix isn't always immediate and problems aren't always easy to solve Meanwhile. Your user is hanging out with a buggy a poor device.
00:40:22 [W] So what do you do you implement Rolex the ability to deploy a previous version without a delay not every platform supports that though.
00:40:24 [W] I think neither Apple app store Google Play support rollbacks.
00:40:26 [W] You would have to take the previous version in that case rename it is the next version and sysdig.
00:40:28 [W] It for review again.
00:40:29 [W] So we need an alternative.
00:40:29 [W] Feature Flags can help you out here.
00:40:35 [W] You embed two versions of the affected feature in the app and enable or disable them with API calls. So if a feature update causes problems for set of users, you just use feature Flags to disable it for that user pretty easy.
00:40:48 [W] Another dramatic example is Movie Pass rip in order to complete an app update.
00:40:56 [W] They shut down for several weeks.
00:41:02 [W] They initially didn't even say how long they were going to be shut down and obviously Movie Pass had other problems. It arguably wasn't sustainable from the very beginning and this probably was not their death knell, but it certainly didn't help and
00:41:11 [W] It feature in the app and enable or disable them with API calls. So if a feature update causes problems for set of users, you just use feature Flags to disable it for that user pretty easy.
00:41:14 [W] Another dramatic example is Movie Pass rip in order to complete an app update.
00:41:15 [W] They shut down for several weeks.
00:41:16 [W] They initially didn't even say how long they were going to be shut down and obviously Movie Pass had other problems. It arguably wasn't sustainable from the very beginning and this probably was not their death knell, but it certainly didn't help and
00:41:19 [W] Ever really should have happened.
00:41:19 [W] We need zero Talent time updates. If you shut down for five weeks to reform an update. Your users are not going to wait for you.
00:41:25 [W] Why should they there's no reason?
00:41:28 [W] It's an unreasonable ask instead.
00:41:30 [W] Your update should be small and they should be frequent. They should never ever ever cause downtime for the user just to put out an update.
00:41:37 [W] So to recap continuous updates are frequent automatic tested progressively delivered State aware observable and extra credit support local rollbacks.
00:41:52 [W] Where does that put us on our decision tree an update is available.
00:41:59 [W] Do we want it doesn't really matter if it's something low-risk like a game on your phone or Twitter app that's going to happen automatically.
00:42:09 [W] Otherwise, are there any high risks? If no, we update if yes, we've implemented several layers of safety nets in case there's a problem so we know the update is probably trustworthy.
00:42:21 [W] Let's just update it. Then problem solved. Nobody has to think about it.
00:42:26 [W] Way better that way.
00:42:28 [W] This has been devops patterns and anti patterns for continuous software updates.
00:42:38 [W] I hope I was able to teach you something valuable or at least keep you entertained for a while.
00:42:40 [W] Again.
00:42:42 [W] and for extra credit support local rollbacks
00:42:50 [W] Where does that put us on our decision tree an update is available.
00:42:51 [W] Do we want it doesn't really matter if it's something low-risk like a game on your phone or Twitter app that's going to happen automatically.
00:42:52 [W] Otherwise, are there any high risks? If no, we update if yes, we've implemented several layers of safety nets in case there's a problem so we know the update is probably trustworthy.
00:42:56 [W] Let's just update it. Then problem solved. Nobody has to think about it.
00:43:03 [W] Way better that way.
00:43:03 [W] This has been devops patterns and anti patterns for continuous software updates.
00:43:04 [W] I hope I was able to teach you something valuable or at least keep you entertained for a while.
00:43:04 [W] Again.
00:43:05 [W] My name is Kat Cosgrove and thanks for having me.
00:43:06 [W] me. I hope you enjoy the rest of coupon and don't hesitate to let me know. If you have any questions. Once again, you can reach out to me on Twitter at Dixie three flat line.
00:43:07 [W] Thank you.
00:43:07 [W] Bye.
00:43:08 [W] Hello everyone.
00:43:10 [W] I'm going to handle some of the questions. I've got in the queue here first up how to ensure the rollback functionality works perfectly for any bugs occurring in the new software.
00:43:21 [W] At Dixie three flat line.
00:43:22 [W] Thank you.
00:43:22 [W] Bye.
00:43:22 [W] Hello everyone.
00:43:22 [W] I'm going to handle some of the questions.
00:43:23 [W] I've got in the Q here.
00:43:23 [W] First up how to ensure the rollback functionality works perfectly for any bugs occurring in the new software.
00:43:24 [W] I don't believe that perfect actually exists in technology.
00:43:30 [W] We can't ever predict everything that could potentially go wrong, but we can make sure that we catch it when it does and that we can respond quickly which is what this is all about. Like we want to be
00:43:41 [W] To react quickly to a problem and either fix it immediately or at least be able to like mitigate the damage.
00:43:52 [W] So a lot of the strategies I mentioned in this talk tie-in like heavily with making sure that a rollback can actually solve your problem effectively. The the most important for me at least
00:44:05 [W] Probably the observability but like you you have to know what's going on.
00:44:12 [W] You can't be blind. You can't rely on a bug report from a user to know that something is wrong.
00:44:19 [W] So observability is probably the most important in my eyes for making sure that rollback handles the problem as close to perfectly as possible.
00:44:31 [W] again, I don't really believe that perfect exists in technology.
00:44:34 [W] See, what are your thoughts on verbosity and distribution of changelogs. I'm a fairly verbose person in general and I as an engineer do appreciate having
00:44:51 [W] See, what are your thoughts on verbosity and distribution of changelogs. I'm a fairly verbose person in general and I as an engineer do appreciate having
00:44:53 [W] Logs when a new version of something is pushed but I recognize that there's a difference between me and engineer wanting to know like the tiny details of what was changed and a user who's less technically inclined.
00:45:07 [W] That information giving too much information to users can create confusion.
00:45:16 [W] It can be a barrier if you present them with a crazy long changelog. It might just be overwhelming and they may not know what's going on.
00:45:30 [W] So my my thought on that would be to have the change log of available make sure that it is complete and available, but I don't know that it should be directly presented to every yugabyte.
00:45:38 [W] User at all times. It should be you know a little bit tucked away but available, I do believe that the change log should be extensive though.
00:45:51 [W] It should include everything even if it seems minor for me.
00:45:54 [W] Let's see.
00:45:56 [W] Bluegreen deploys can address workloads validation after an update?
00:46:04 [W] When will there be a more proactive validation of infrastructure and config as code even before deploying workloads to the passive side of a Bluegreen and smoke testing customizable validation of infrastructure as code and config as code would
00:46:18 [W] That is a very big long question that probably merits an actual conversation for me.
00:46:29 [W] So I am in the cncf slack workspace in the ci/cd channel and I will be happy to have a conversation with you about it there. That is that is a whole conversation.
00:46:39 [W] I think personally I do really really like infrastructure as code and config as code.
00:46:47 [W] I think it has some shortcomings, but I
00:46:49 [W] You I do really really really liked it. I recently tried Pulu me because I don't really like writing gamble directly and it's been it's made it a lot less painful easier to configure things and get
00:47:04 [W] All conversation. I think personally I do really really like infrastructure as code and config as code.
00:47:05 [W] I think it has some shortcomings but I do I do really really really liked it. I recently tried Pulu me because I don't really like writing gamble directly and it's been it's made it a lot less
00:47:06 [W] The problem I have in my project in regards to continuous delivery is the problem of database migrations.
00:47:20 [W] What strategies can you recommend to handle that in the topic of canary deployments a few containers dependent on the old schema part depending on the new database schema can these coexist so you totally can automate database
00:47:29 [W] And there is a really outstanding talk from a conference.
00:47:35 [W] I spoke at jfrog swamp up a few months ago.
00:47:40 [W] that was specifically about automating database migrations and schemas.
00:47:47 [W] So please DM me on Twitter or hit me up in the ci/cd slack Channel or just email me at catc at jfrog.com and I will get you a link to that talk and those resources because it's like 40 minutes long.
00:48:00 [W] And it's really really interesting and it's it's really it's really cool.
00:48:06 [W] But that is that is totally something that you can you can automate and it does it reduces a lot of pain a lot of pain.
00:48:13 [W] What patterns are working good when we have a small number of very rich important customers.
00:48:27 [W] I need more context there.
00:48:32 [W] What does the rest of your infrastructure look like?
00:48:37 [W] How much hand holding to these customers expect? It's a little
00:48:41 [W] that's it.
00:48:48 [W] Yeah, that's a little too too vague to really give an answer, but I don't I don't see why you wouldn't use all of these patterns with any of your customers. If you have the resources to do it the fact that you have a very small
00:48:57 [W] Customers who have a lot of money and if I assume you're relying on the lots of money from these small number of very rich clients that you should want to keep them super happy.
00:49:13 [W] So I personally I would be implementing all of these patterns if they make life easier for just some random, you know middle middle class.
00:49:25 [W] Individual user then like why wouldn't you be building out this kind of system for your very expensive very very rich customers.
00:49:38 [W] I would I would go with all of them personally.
00:49:42 [W] That's just me.
00:49:45 [W] Let's see. What else do we have?
00:49:47 [W] Lots of congratulations.
00:49:54 [W] Thank you. Everyone who congratulated me and said nice talk.
00:49:57 [W] I appreciate it. It's my first time speaking at keep going on.
00:50:02 [W] How does jfrog make continuous delivery easier?
00:50:04 [W] Well, we have lots of tools specifically to make continuous delivery easier from managing your build artifacts to your ci/cd to vulnerability detection
00:50:17 [W] Distributing and deploying your binaries.
00:50:23 [W] We do have a booth in silver Hall be I believe and we have a bunch of our solution Architects and engineers and sales people there who can actually just give you a Hands-On demo
00:50:37 [W] A free tier of most of our tools now so you can also just like spin it up and try it for yourself.
00:50:48 [W] But if you want a Hands-On demo and somebody to walk you through it head on over to our booth and we'll be happy to take care of that for you.
00:50:53 [W] more questions here
00:50:59 [W] I think I got to all of them.
00:51:07 [W] Was that jfrog question from a colleague?
00:51:17 [W] I don't think so.
00:51:22 [W] Actually not a not a colleague. Who's whose name? I recognize.
00:51:26 [W] So if you are a co-worker of mine, I'm sorry.
00:51:28 [W] I didn't realize that was a good worker, but I don't think it was I don't recognize the name and just so everyone knows my slides will be up later.
00:51:41 [W] I think coupon themselves are doing that. They'll have the videos up later too, but
00:51:42 [W] The slides are up at jfrog.com show notes.
00:51:49 [W] So if you just want the slides there there video que con will deal with see.
00:51:55 [W] mmm
00:52:01 [W] Colleague I don't think so.
00:52:08 [W] Actually not a not a colleague. Who's whose name? I recognize. So if you are a co-worker of mine, I'm sorry.
00:52:09 [W] I didn't realize that was a co-worker, but I don't think it was I don't recognize the name and just so everyone knows my slides will be up later.
00:52:10 [W] I think coupon themselves are doing that. They'll have the videos up later to but the slides are
00:52:10 [W] But jfrog.com show notes.
00:52:11 [W] So if you just want the slides there there video coupon will deal with see.
00:52:12 [W] Think that's it, and it's time for me to wrap it up.
00:52:14 [W] Thank you so much for coming to watch me and for answering my question answering asking me questions again, I will be in the slack channel for ci/cd and the cncf slack workspace and you can get a hold of me. Also on Twitter
00:52:23 [W] Thank you so much for coming to watch me and for answering the question answering asking me questions again, I will be in the slack channel for ci/cd and the cncf slack workspace and you can get a hold of me.
00:52:24 [W] Also on Twitter at Dixie three flat line.
00:52:25 [W] Thank you. Bye.
