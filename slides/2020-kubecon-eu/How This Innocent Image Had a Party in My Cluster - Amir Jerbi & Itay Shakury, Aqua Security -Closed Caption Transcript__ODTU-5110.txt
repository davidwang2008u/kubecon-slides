How This Innocent Image Had a Party in My Cluster: ODTU-5110 - events@cncf.io - Tuesday, August 18, 2020 6:52 AM - 93 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:03:22 [W] Hello everyone.
00:03:25 [W] My name is Natasha Cory.
00:03:27 [W] I'm with the open source team in aqua security.
00:03:28 [W] I and my name is Emil jlb.
00:03:52 [W] Hello everyone.
00:07:47 [W] My name is Natasha Cory.
00:07:49 [W] I'm with the open source team in aqua security.
00:07:50 [W] Ina my name is Emil gel be I'm the CTO and co-founder of Aqua security and today's session. We are going to talk about the party that we've identified in a one of our class tells and how we could have stopped that party by
00:08:06 [W] Secure with the controls of kubernative the focus of this talk is going to be scanning of your container images.
00:08:15 [W] So let's start.
00:08:17 [W] So today when we are talking about scanning of your containerd images we are basically looking for three things.
00:08:26 [W] We are looking for vulnerabilities for Marvel and for Miss configuration inside of the container images.
00:08:36 [W] So what does it mean let's give you a small background of that.
00:08:39 [W] So one abilities mean bed code usually its components that are outdated all components that are known to be vulnerable. Basically they
00:08:49 [W] Is code that an attacker can leverage and exploit in order to get access to the system or to collect data.
00:08:57 [W] There is a database of vulnerability is called n VD H. Vulnerability has a unique identifier description accessibility between low to critical and it also has defected components.
00:09:10 [W] components. What is the component and the version that has those vulnerabilities?
00:09:12 [W] And in the market today, we use the nobility scanners in order to identify those vulnerabilities in containerd images.
00:09:22 [W] So they have open source vulnerabilities like creepy though also commercial options for vulnerability scanners.
00:09:27 [W] in the end with the database or in some cases other f****** colleges database of vulnerabilities and the result will be the list of components that are vulnerable each components will usually have the name of the vulnerability
00:09:52 [W] How to fix the vulnerability basically it will have the instruction about you need to fix by applying a patch upgrading your component to a newer version.
00:10:02 [W] The second thing that we are scanning today for containerd images is misconfigurations so that there are scanners today in the market that can find whether your containerd image has hard-coded SSH Keys week ciphers of
00:10:18 [W] You don't have any any configuration of PLS set up in your containerd image.
00:10:24 [W] How could it passwords those red configurations? The outcome of them will be that if you are running this containerd image weakened version will be calling attacking so an
00:10:38 [W] It's the fact that you don't have SL set up to steal data from the organization or the fact that you have had for the secrets, you know the to steal those secrets and leverage them to connect to your infrastructure.
00:10:53 [W] And the last item that we are scanning is Mal will basically malware scanning means that we are taking the containerd image.
00:11:00 [W] We are looking at all of the files inside of it. We are taking the files and creating a sharp signature out of them and then comparing these shot against the
00:11:11 [W] Database of malware in the screenshot. You can see a very popular database called virustotal basically you VI dash of value of a file and as a result, you get all of the malware's that are that were found for this shop value.
00:11:23 [W] So the question is if I have a scanning for vulnerabilities scanning for Miss configuration and scanning for malware. Am I protected?
00:11:32 [W] And the answer is no there is still a blind spot.
00:11:39 [W] There is something called evasive malware divisive model world of the malware that are basically hiding right there are inside of your containerd image and hiding using either encryption or in some cases.
00:11:53 [W] They are using techniques like tal files seven layers of style files, right?
00:12:01 [W] So they're hiding inside of your containerd image and what they are doing they are waiting.
00:12:04 [W] We Run The malware and decompress themselves and start attacking your organization
00:12:14 [W] and the technique for adding an evasive malware into your container image is something called a supply chain attack.
00:12:23 [W] So what does it mean it means that you as a developer you are building a containerd image you are leveraging open source components you are leveraging public containerd images and inside of those open source components. There might be an evasive malware
00:12:37 [W] Got control on a GitHub project was able to contribute code to the GitHub project.
00:12:48 [W] And basically this code is a Marvel. It's a malware that is hiding inside of the component and the same goes for containerd image.
00:12:59 [W] We're in the public registry that you might be downloading and using an inside of this container image. There is an evasive Marvel.
00:13:02 [W] What we have seen in the in the wild we actually have seen cases and this is a good example.
00:13:08 [W] You can see a screenshot of it.
00:13:09 [W] Well images that do not have any vulnerability when you scan them. You do not see any malware.
00:13:18 [W] Basically those images have invasive malware and as an example, we have honey pots in the internet in those honey pots.
00:13:27 [W] We have week configurations of my of the kubernative and okay and what we have seen we have seen a hackers trying to attack Us by running.
00:13:32 [W] Legitimate container images they pass all of the scanning.
00:13:37 [W] everything was okay with them. But as you are running those container images basically, they will download malware from the internet this model will then start searching for SSH keys and other include other tokens
00:13:51 [W] And they will try to connect to other infrastructure components in your environment in order to do lateral movement and to steal data.
00:14:00 [W] This is the party that we've seen basically an innocent man innocent containerd image running inside of our infrastructure using of course evasive malware and then taking control on the entire environment.
00:14:14 [W] And I will now move it to it.
00:14:20 [W] I in order to talk about how can you protect against it? And so thank you for stopping the fact that image scanning is important.
00:14:28 [W] However, it's not comprehensive enough.
00:14:33 [W] There are some blind spots as you pointed pointed them out and it's probably because we were looking at the container images in hoping to understand what the containers would do in runtime now, there is a
00:14:44 [W] Relation, of course, but we know that once we start the container from the image.
00:14:53 [W] It has a life of its own it is free to do whatever it wants and we cannot predict what's going to happen at runtime just by analyzing the image.
00:15:04 [W] So that logical conclusion is that we need to look at the containers at runtime in addition to scanning those images.
00:15:10 [W] Which brings us to discuss runtime security runtime security is nothing new.
00:15:19 [W] In as much as for information as we can looking for suspicious patterns or anomalies or interesting behavior and then applying some policies that will allow us
00:15:37 [W] This kind of behavior.
00:15:40 [W] There are a lot of solutions for that in the market mature and effective Solutions Aqua security. The company that we are from is one of the leaders in this space, but this is not what this talk is about when it comes to malware assessment specifically.
00:15:56 [W] You agree that it's better to make the assessment before we reach the production.
00:16:03 [W] I mean if we already know what to look for if we already know what the patterns are looking like what the behavior is like we could be making this assessment before production.
00:16:16 [W] In other words. What I'm saying is let's shift left the runtime security from the production into earlier stages such as the
00:16:27 [W] build and test phases of the containers. So now we will need to actually run the containers as part of the pipeline which leads to production.
00:16:41 [W] We need some kind of a Sandbox some kind of isolated environment where we can run. This may be malicious containers and containerd technology is not enough.
00:16:50 [W] I mean containerd technology is providing some kind of logical isolation, but this is not suitable for man were assessment. We need something better.
00:16:56 [W] That we are using virtual machines in the cloud for that with get some information around it to make it more practical for us.
00:17:04 [W] So we're spinning these sandboxes is virtual machines in the cloud and then we are running those containers inside of them.
00:17:17 [W] Dinner e debugging troubleshooting tools that you may have used other context because now it needs to be able to handle malware and malware may be evasive may be tricky Amir gave a few examples for how
00:17:41 [W] Evasive so we need something that is very robust and very comprehensive and luckily for us.
00:17:51 [W] We have just the perfect technology to build something like that on which is easy bof Indians.
00:18:00 [W] This is not a talk about EDF.
00:18:04 [W] We've actually done under talks about Edith Piaf which you are welcome to check out but I just want to emphasize in this context tikv PF is what allows us to plug into the kernel.
00:18:12 [W] and the colonel is exactly where we want to be in order to handle this tricky and evasive malware because the malware is running in a container in user space in on top of the container runtime on top of the operating system
00:18:27 [W] and the colonel is exactly where we want to be in order to handle this tricky and evasive malware because the malware is running in a container in user space on top of the container runtime on top of the operating
00:18:29 [W] Eventually, it will make some code into the kernel.
00:18:40 [W] This is how operating system store and we will be down there waiting for this to happen and collect this information.
00:18:43 [W] And if you f is Jennifer gives us the opportunity to instrument this critical parts of the kernel and extract the information that we need in order to make this as the suspect.
00:18:55 [W] So we've built some tooling around that we've made an open source project in GitHub.
00:19:02 [W] It's called Tracy.
00:19:06 [W] It's a Tracy is a CLI tool that uses EP of technology and it particularly useful in the context of assessing containers and maybe man were inside of the sandbox and this is
00:19:17 [W] Made an open source projects in GitHub.
00:19:18 [W] It's called Tracy.
00:19:18 [W] It's a Tracy is a CLI to the to the CP of technology and it particularly useful in the context of assessing containers and maybe malware inside of the sandbox.
00:19:19 [W] And this is what we are using as well. And this is what I will be using now for the demo. So actually, let's switch gears into the demo.
00:19:24 [W] All right.
00:19:30 [W] So what I want to do for the demo is work you through a few examples for patterns that we've seen in malware and especially I want to show you how it looks like from the operating system point of view.
00:19:42 [W] And also how you can use Tracy in order to detect those patterns.
00:19:44 [W] So the first behavior that I want to demonstrate is something that Amir has discussed.
00:19:54 [W] This is a malware that is downloading an executable from the internet and then executing it.
00:20:05 [W] So if you scan the image, you will find nothing using static scanning, but if you ran the image is very easy to see that it's downloaded some so what I'm doing here, I'm using W get which is a utility that is
00:20:12 [W] Utility that is almost on any Linux and I am saving the output into a local file for drops and I have a file here that I've prepared.
00:20:25 [W] This is just a very simple hello world executable.
00:20:33 [W] And after I download it I need to make it an executable.
00:20:34 [W] And then I can actually execute.
00:20:38 [W] In the background, I will start Tracy.
00:20:43 [W] with the following Flags, so I'm telling Traci to trace the exact ve system call which is what used to start music YouTubers the socket and connect system calls which are used
00:20:59 [W] Kate with remote endpoints the VFS right function, which is instrumenting rights into files.
00:21:09 [W] files. So basically these three events.
00:21:10 [W] Tells us that there was a file download if we take a close look there and finally the file change mode adds system call which is used by shimoda binary in order to make the permission change.
00:21:25 [W] And I'm going to also filter the output from Tracy because it's going to be a little bit noisy for only things that originated from this shell here because I want you to be more readable.
00:21:40 [W] So let's check for a second.
00:21:41 [W] The process ID here and this process ID is included in the output of Tracy so we can just filter for it.
00:21:49 [W] Right, so I am starting Tracy and then I will initiate this sequence of commands.
00:22:02 [W] Which will again just to remind you download from this URL to this file make it an executable.
00:22:10 [W] forgot.
00:22:11 [W] Specify the file name and then execute it.
00:22:16 [W] So it's downloading.
00:22:18 [W] Lower like I stopped racing now.
00:22:29 [W] And we can observe the output.
00:22:30 [W] So what can Tracy tell us first of all Z which is my shell has executed the WX command and these are the arguments.
00:22:43 [W] This is very useful because it maybe I didn't have access to the original script here, but I can still see from the always point of view.
00:22:48 [W] what happened then I see that W get to control and it started to do some stuff.
00:22:54 [W] we see the socket and connect a few times.
00:22:57 [W] Here, I guess that this is the IP that we are downloading from over HTTP and then there's a VFS right because we are writing to the file actually here.
00:23:10 [W] So these four events here are what copies from the socket into the file.
00:23:17 [W] You can see the arguments here is the path to the file and some sizes. I guess it's for its for events because the download is being done in chunks. So we have Fortune.
00:23:26 [W] Uncie once W get is finished downloading the file.
00:23:32 [W] --zh is executing the change mode executable with these arguments.
00:23:38 [W] And then tomorrow it is using this system called to do what it's supposed to do.
00:23:49 [W] So this is the arguments for small the name of the file and the requested permission.
00:23:54 [W] I guess that this is the IP that we are downloading from over HTTP and then there's a VFS right because we are writing to the file actually here.
00:24:00 [W] So these four events here are what copies from the socket into the file.
00:24:01 [W] You can see the arguments here is the path to the file and some sizes. I guess it's for its for events because the download is being done in chunks. So we have for Chauncey.
00:24:03 [W] What's W get is finished downloading the file.
00:24:06 [W] that is executing the change mode executable with these arguments.
00:24:06 [W] And then she mode is using this system called to do what it's supposed to do.
00:24:07 [W] So this is the arguments for smog the name of the file and the requested permission.
00:24:08 [W] So we request read write and execute for the user for the group and so on and finally the shiz executing the dropped binary.
00:24:09 [W] So this is how a dropper looks like for Tracy and this is how you can detect it.
00:24:11 [W] But actually we can do something even better.
00:24:12 [W] You know we've instrumented this.
00:24:13 [W] BFS rights functions here
00:24:17 [W] So we were at the right time and the right place to be able to actually see the binary data to look at the data itself and we can ask Tracy to make a copy of this data for us. So welcome
00:24:33 [W] So this is how a dropper looks like for Tracy and this is how you can detect it.
00:24:34 [W] But actually we can do something even better.
00:24:34 [W] You know we've instrumented this.
00:24:34 [W] VFS writes functions here
00:24:34 [W] So we were at the right time and the right place to be able to actually see the binary data to look at the data itself and we can ask Tracy to make a copy of this data for us. So welcome going to do next.
00:24:35 [W] feature of Tracy
00:24:39 [W] That basically means we want to capture all of the write operations.
00:24:56 [W] So whenever there's a VFS writing to a file. I want you to capture it and telling Traci but not everything the topical because there's a lot of things going on in the computer. We want just to filter it for stuff that happens in the current directory.
00:25:06 [W] So in our case, we know that this is the file download and I'm asking Tracy to save the result also into the current directory.
00:25:15 [W] So I will start Tracy and I will start another download.
00:25:22 [W] starting another Donald
00:25:32 [W] Tracy collects a lot of information and actually I stopped it in the in the middle.
00:25:40 [W] Don't actually completed the download so we can take a look here.
00:25:47 [W] and see that there is a
00:25:51 [W] a new directory that's called This is actually the mountains base for the machine and we can look inside of it.
00:26:00 [W] Not a Donald face. He collects a lot of information. And actually I stopped it in the in the middle.
00:26:07 [W] Don't actually completed the Donald so we can take a look here.
00:26:07 [W] and see that there is a
00:26:07 [W] a new directory. It's called This is actually the mountains base for the machine and you can look inside of it.
00:26:08 [W] And see that there's a fight actually this file is owned by root, which is not us because we started Tracy a soothing so I'm not just gonna fix that real quick.
00:26:15 [W] I'm going to just change the ownership to be me and now we can look at the file, but it's a binary file.
00:26:22 [W] So there's not a lot to see here.
00:26:27 [W] However, we can try to execute it because they know it's a binary file.
00:26:29 [W] We actually know that it's the hello world and indeed this is the
00:26:33 [W] So this is very cool because not only Tracy told us there is a dropper here.
00:26:39 [W] It actually gave us the evidence and said here is the file that we downloaded and this is from the kernel and not from W get
00:26:46 [W] Great, so let's continue.
00:26:52 [W] So the next demo that I want to show you is an interesting technique that's called packing.
00:27:03 [W] It means that we take them out where we embedded within another executable and that other executable is shipped with the container and then when it's executing it will unpack the
00:27:16 [W] And indeed this is the lower.
00:27:18 [W] So this is very cool. Because not only Tracy told us there is a dropper here. It actually gave us the evidence and said here is the file that we downloaded and this is from the kernel and not from W get
00:27:19 [W] Great, so let's continue.
00:27:19 [W] So the next demo that I want to show you is an interesting technique that's called packing.
00:27:19 [W] It means that we take them out where we embedded within another executable and that other executable is shipped with the container and then when it's executing it will unpack the the embedded.
00:27:21 [W] Malware and Ronnie's we're going to use well-known tool for that.
00:27:25 [W] It's called upx.
00:27:25 [W] It's on GitHub and just using that to pack the hello world executable.
00:27:33 [W] And I want to show you how Tracy says that.
00:27:38 [W] So I'm going to show open the output directly for the back.
00:27:45 [W] It's on first.
00:27:48 [W] Okay.
00:27:53 [W] So the reason that this is very interesting is because there is no exact ve happening here after the the original executable and start so because there are two
00:28:04 [W] Okay.
00:28:05 [W] So the reason that this is very interesting is because there is no exact ve happening here after the the original executable start so because there are
00:28:06 [W] The malware and the rapper you'd expect to exactly--i in this load. But actually there is only one because the way that you'll be X for example works it allocates memory.
00:28:21 [W] For the mummer, by the way, you PX is not meant for mirantis to using it for this demo and it allocates a memory region.
00:28:33 [W] It makes this memory region executable it copies the binary data for the mud were there and then it changes execution to that place.
00:28:46 [W] This is all legitimate operation that the process can do the process can manipulate its memory addresses. It can jump to whatever instructions they want. So there's nothing particularly malicious there.
00:28:52 [W] However, we can identify the pattern that is very typical to upx and and look at it.
00:28:58 [W] So this is what we see here.
00:29:03 [W] We see a series of em up and I'm protective ends and we can look at the arguments.
00:29:15 [W] For example, we see that there is an M protect here and protected the system for used to change the permission of a memory region.
00:29:21 [W] So it takes an address the pointer to the
00:29:23 [W] he takes length, which together gives us a memory region and then the requested permissions and we see that they requested executable permissions here, which probably means that they are going to execute something from this region if this
00:29:37 [W] I wasn't originally meant for execution.
00:29:42 [W] This is alerting.
00:29:46 [W] So actually we know that this is alerting and this is why we have embedded this insight into Tracy.
00:29:57 [W] So there is a nice flat for Tracy that is called - - security alerts.
00:29:59 [W] And this makes Tracy and needs additional information additional alerts which are not raw data.
00:30:07 [W] For example, this one this men brought alert event is not a system called.
00:30:14 [W] It's not a function.
00:30:15 [W] It's not raw data.
00:30:17 [W] This is Tracy trying to tell you that hey the met the protection change to executable.
00:30:23 [W] This is interesting.
00:30:24 [W] You should note and again Tracy here is telling you hey memory.
00:30:29 [W] That friggin with write and execute permissions.
00:30:35 [W] I wonder what that could be and finally Tracy is telling you again.
00:30:46 [W] Hey protection change from write and execute to execute which we know is the is the final step before upx actually jumps to that memory region and this is why at this point we decide to
00:30:53 [W] memory
00:30:55 [W] Region into a file so you can analyze it. So we saved this. This is actually achieved if you add the - - capture leg.
00:31:06 [W] Which we have seen before right before that. We've used capture captured right?
00:31:18 [W] But in this case, we've used capture men, which means whenever you see something in a lot like this.
00:31:21 [W] I want you to also capture this memory region into a file so I can further analyze it.
00:31:27 [W] Great.
00:31:31 [W] So we've seen how Tracy can help us identify the behavior of an emery Packer such as UPS.
00:31:36 [W] The next example is another technique that is called file less.
00:31:42 [W] Finest execution is is leveraging a Unix system called. It's called MSD Creator. Sorry Clinic system of men if they create creates a fine that doesn't have any
00:31:58 [W] file system
00:32:00 [W] It is purely in memory and we can use this special file in order to create an executable and execute it actually without ever saving anything to disk so we
00:32:15 [W] Software such as anti-malware software which are constantly scanning the disk or even Escape security image scanners such as a mere mention that are scanning for malware for no
00:32:32 [W] We'll be able to put the mud where in memory and executed from there without ever touching the disk.
00:32:40 [W] So for that I'm going to use.
00:32:41 [W] Another nice utility that I found its called else exact and it's just a nice way to exercise this technique and exact will create a man of the file. It will rate from start and it puts and right into this file and then it will use
00:32:57 [W] Execute this Menifee fine.
00:33:01 [W] All right. So the command that I'm going to write that I'm going to run is something like the following so w get again.
00:33:16 [W] I'm pointing to a remote location this time.
00:33:22 [W] I'm not giving it a file name because I don't want it to save the file to disk. I wanted to save to just download the file and it meets the contents into standard outlet. This is what the - means.
00:33:32 [W] But then I am redirecting standard output into Alpha exam and exactly read from standard input if we find the contents of this file and it will write them into the Manifest file and then executed so basically
00:33:47 [W] be able to
00:33:50 [W] stream the bytes from the file here on the remote server.
00:33:55 [W] Directly into the memory to the name of the file and then execute it without writing anything to this.
00:34:02 [W] This is very cool.
00:34:05 [W] This is like hackers love this. So let's look at how Tracy
00:34:09 [W] Is able to detect that?
00:34:12 [W] Alright, so this is how the output for Jesse looks like. I have added another event here that I want to trace which is the name of the creator.
00:34:26 [W] of course, so we started the command with FX tekton W gets it's a 5 so both of them starts him intensely.
00:34:37 [W] These are the arguments and then immediately self exact.
00:34:43 [W] Has invoked the name of the create system for and it created a member of defile it received the file descriptor 2 3 and then W get started to download the file.
00:34:56 [W] file. This is the similar Behavior to what we've seen before except that this time.
00:34:59 [W] The VFS right is not writing into a file on this.
00:35:04 [W] There's no real path here.
00:35:07 [W] This string here is not a bad.
00:35:08 [W] It's just symbolizes this pseudo file.
00:35:15 [W] done writing into this name of the file and the exact is executing this file descriptor number three, and this is how we achieve the execution without ever writing to disk, but Tracy was able to
00:35:32 [W] Alright, so we've seen a few techniques that are actually being used out in the wild and I wanted to stress this that this can meet you in the real world.
00:35:50 [W] For example a mere mention supply chain attacks.
00:36:01 [W] Let's think of a scenario when we need some kind of utility and we found the solution is a perfect container on Docker Hub.
00:36:08 [W] Let's say that we were looking for a web service that Returns the current data.
00:36:10 [W] For example, so I've created something like this here.
00:36:15 [W] It is called rotten dead. You will soon see why.
00:36:17 [W] And it's actually working.
00:36:22 [W] It is actually a web server that I can I can make it an HTTP request to and it will return the current date and time and I run this on my infrastructure, but what I don't know is that it actually has
00:36:34 [W] In my work on my servers and it is used all of the evasion techniques that we've just discussed actually a few other that we didn't in order to evade us or any tools that we were using and if we were to scan this
00:36:50 [W] Using any static image scanning tool.
00:36:56 [W] So let's use for example 3, which is an excellent.
00:36:59 [W] Static scanning tool by Aqua. So it is k / rotten dates. This is the image.
00:37:07 [W] 3D will basically say everything looks fine. Right because it looks at the image.
00:37:15 [W] And there is no indication by looking at this file.
00:37:21 [W] There's anything bad with it.
00:37:31 [W] However, as you can see is zero incidents, but however, if we run Tracy it will tell us a lot of things. So I've actually run Tracy here with this container and this is the output so this is a very long file.
00:37:37 [W] All right, this is we're not going to go over that.
00:37:40 [W] don't worry, but I just want to show you that all of the indications that we've just seen
00:37:45 [W] Are in there. So for example an FD create there it is.
00:37:49 [W] It's in there.
00:37:55 [W] For example, the security alerts the Tracy.
00:37:58 [W] the Tracy generates
00:38:01 [W] everything is here including the captured files. The Tracy has captured for us during the execution of the container.
00:38:12 [W] All of the information is in here.
00:38:16 [W] You just need to know how to search for it and you actually need to know what you're looking for.
00:38:19 [W] Next point that Tracy is an excellent analysis tool, but you do need to know what you're looking for.
00:38:29 [W] You need to know that a file is attack exists and how it looks like and there are many other things that we didn't discuss him.
00:38:38 [W] So we have another offering product offering that we called ETA its Dynamic threat analysis DTA basically wraps the entire session into a
00:38:53 [W] Basically, we create a Sandbox for you.
00:39:00 [W] We run the potentially malicious container in there and we run trace in there. This is the same open source Tracy that we've just seen and you can also use it for your needs.
00:39:12 [W] We just run it in the sandbox and we collect the output and we show you this lovely dashboard that summarizes all of the information.
00:39:18 [W] but the real
00:39:20 [W] interesting thing here is not the pretty dashboard.
00:39:36 [W] The really interesting thing here is that we have to all of the experience that our research team has from studying malware and we have created an extensive library of signatures
00:39:39 [W] the really interesting thing here is that we have to all of the experience that our research team has from studying malware and we have created an extensive library of signatures
00:39:41 [W] Are interesting for you for example, here is the file as a type of the way.
00:39:55 [W] This is this the scan results for the same container the Rotten Bait on Turnin that we've just seen so we see here the file is attack and this is the line we see here the upx executing and here is the evidence.
00:40:02 [W] We see here something else that we didn't see before that. This IP address might be might be have a bad reputation or something. We see here.
00:40:12 [W] The Dropper W getting so
00:40:14 [W] We have the knowledge of what what we think is potentially malicious and we have given this image in general score a risk score of hi so you can use this summary
00:40:29 [W] W getting so
00:40:30 [W] we have the knowledge of what what we think is potentially malicious and we have given this image General score a risk score of hi so you can use this summary
00:40:31 [W] Like to make a decision if you want to run this container or not.
00:40:34 [W] So this is D ta it's actually free to start and you can scan a lot of images with it for free, but I just want to mention that Tracy is completely open source, so you can actually take Tracy and combine it
00:40:50 [W] Like elastic search to automate the process of analyzing the events or you can just use Tracy for analysis or research purposes if you want to investigate specific containers.
00:41:05 [W] Thank you time. So to summarize we are talking today about the party that we've identified in our cluster and the fact that static scanning that are looking for vulnerabilities malware misconfigurations cannot address.
00:41:22 [W] The issues because this part is basically because of invasive Marvel.
00:41:31 [W] We also talked about the fact that runtime security can help you because the runtime Security will detect and prevent malicious activity.
00:41:42 [W] But the reason he to shift F the reasoning to find the bad behavior of the invasive module before you go production, and this is what we presented today.
00:41:47 [W] We presented the dynamic pert analysis technique to take a container image running run it in a sandbox and and basically
00:41:55 [W] We observe the behavior all before going to production.
00:42:02 [W] I hope that you find this information very helpful. And if you have any questions, we are here QA. Thank you very much.
