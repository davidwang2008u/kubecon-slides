Serverless Integration on Kubernetes with Apache Camel K: BEZT-8957 - events@cncf.io - Wednesday, August 19, 2020 7:44 AM - 43 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:45 [W] Hello everybody, welcome to this session about serverless integration and kubernative suidobashi calm, okay.
00:00:54 [W] My name is Nicola Ferrari work for red hat and today we are going to talk about first of all a patchy camel.
00:00:55 [W] with diseased cattle Ki which fits in the serverless space and special ink a native and then I will show you a demo and the talk a bit about future development. I'm gonna call the Ferrari to say that work is
00:01:07 [W] Principal software engineer for adapt my Twitter handle is neon the score Ferrari who want to be updated with the latest news about Apache camel because I work on Apache Kamala work on cam. Okay, also on Reddit integration and from time to time also contribute
00:01:22 [W] Gay knative. So let's start talking about Apache camel. I know that some of you may not know about it.
00:01:37 [W] So this will be a brief introduction, but I'm not going into too much details of will just give you an idea.
00:01:42 [W] I think that many of you have experienced this Joy of developing things software development is fun after all so when we start a new application, for example, many of time many times we want to do it with the best of breed of technologies that is available what to do.
00:01:53 [W] Do it serverless and we want to use whatever is needed at best suited for the application that we want to write but sooner or later you are like that.
00:02:08 [W] Well, your application doesn't live alone in the world because there are a lot of other application that you need to connect to because you want to use their data because they want to use your data.
00:02:17 [W] So it's an ecosystem.
00:02:21 [W] We are putting your application not alone, but it needs to communicate with others and communication is
00:02:23 [W] Hard so when you want to connect to do integrate even two systems, you need to face a lot of communication problem. So one application may be synchronous. The other one would be asynchronous.
00:02:36 [W] They may use different protocols different languages.
00:02:42 [W] the business domain so you have to map objects from one side to the other and different data access pattern and once you fix all these problems you have another set of problems like what happens if the other application becomes an available how to deal with
00:02:54 [W] Consistency issues when there are failures in the other side only on your side and also sometimes you cannot change the other side because we have different ideas and you have to do all the integration from your side. So these are some of the problems that
00:03:09 [W] Integrate two systems, so we need some tools.
00:03:13 [W] of K. And we need to let the perfect tool that can help us integrate.
00:03:27 [W] So system should have for example connectors to be able to connect to any kind of Technology protocol that is available from the other side. Also software the service.
00:03:33 [W] It should be based on well-known integration patterns, for example, because we don't want to reinvent the wheel anytime we need to connect another system and also it should work.
00:03:42 [W] On and off The Cloud of kubernative.
00:03:46 [W] Okay knative but also without that and it should allow you to integrate systems with a simple language. For example, a domain specific language that can allow us to say let's move data from here to here like this
00:04:00 [W] Is Apache camel as you camel is a project and Apache project that started some years ago and allow you to integrate system with these.
00:04:15 [W] so let's make an example to make this clear. So that's the positive want to create your application using K native, but you have to connect and share that with other plication one developed with pulsar. And the other one that uses Kafka under the hood.
00:04:26 [W] So how do you share that with them?
00:04:30 [W] For example, you can create a camel integration that
00:04:30 [W] it has this simple language of from Pulsar to Canady with some transformation in the middle.
00:04:38 [W] So this is a camel language.
00:04:40 [W] It's a domain specific language that allow you to move data and you can look at the language at the not going to show explain all the details of the language, but it's self explaining.
00:04:54 [W] I'm taking data from a pulsar Topic in specific namespace and converting it into a cloudevents that can be received by my
00:05:01 [W] Gation that inside Canada will talk more about the connective later and I can do it to also in the other side want to move data from connective to Cafe.
00:05:16 [W] What I can do is to listen for all events generated by my application on connective and then send them to ask a topic after doing some transformation. For example in this example.
00:05:25 [W] From S3 using one of the many components AWS 2 is 3 that is available in Apache camel with these two Integrations.
00:05:35 [W] Basically you can do whatever you want in the party area in the middle.
00:05:44 [W] So use whatever you need and specifically we provide a lot of useful things for building applications that are serverless and based on Creative as we will see.
00:05:46 [W] Okay. Apache camel is a project that is smaller than 10 years. So but this is something really cool because
00:05:53 [W] We have a huge Community.
00:06:01 [W] We have a lot of new users also reason to because we have started creating new some as also sub-project.
00:06:03 [W] One of them is come. Okay and camel supports a lot of components 346 as the last time I check it all that components allow you to connect to a specific protocol specific external system like the ones that you see here in the
00:06:17 [W] Twitter sales for but also all protocols and software as a service but also middleware and other platforms that are available out there. So everything you can imagine can be connected with
00:06:33 [W] She come on no date.
00:06:36 [W] And so now we can talk about this subproject called camel K.
00:06:45 [W] So capital K is we say it's a lightweight integration platform born and kubernative switch serverless superpowers.
00:06:55 [W] So it's approach that we've started two years ago and it's about running the camel DSL the camel coded in the grid system directly on a kubernative cluster latest release 1.0 was released at the two months ago,
00:07:02 [W] P so they have come okay simple this you create this simple DSL this simple language that tells how to connect two systems or more systems.
00:07:17 [W] You don't not limited only to and once you've created this file you have the CLI called camel with the K and you type camel run the name of the file that contains your integration and you have connected
00:07:27 [W] Bishop Plus or kubernative glass started it works in any environment and this integration basically run as a pod with other resources created the for let this integration run everything in camel
00:07:42 [W] Is called dream and the so you have just read this code and everything else is managed by an operator.
00:07:55 [W] It's called the temple cave greater that you can install on my class. So it's available on Helm. It's available operator Hub. And the basic workflow. Is this the developer creates a file with integration routes.
00:08:04 [W] Routes are the things that I've shown you before the connects systems.
00:08:12 [W] These routes is rapid rapid into a integration custom resource.
00:08:15 [W] It's a cooperate as custom resource called integration.
00:08:20 [W] Then the operator takes this custom resource and converts it into running potent functions services and whatever is needed to run that integration from the code everything as I said is called driven it it means okay.
00:08:30 [W] Let's skip this slide. It means that you can write the integral.
00:08:34 [W] Raishin here. And it says that in this case the I'm creating exposing an API am using the knative HTTP camel component and then sending the data into K. Knative.
00:08:45 [W] It means that for the operator point of view the Pareto parses this code and says, okay, we need to use the knative GTP component, which is a common Library they connected component which is another common library. Then it picked all these
00:09:00 [W] That needed it creates a container image for running this integration caramel. And if they would is based on Java, but we will see that we will have more optimization in the latest in the latest slides this
00:09:15 [W] It's a container image for you creates all the services to the deployment of secrets in the conflict match to let this run and it can run as a serverless integration on kubernative S. So this is how it works.
00:09:30 [W] Let's get this and talk about Kennedy of a bit.
00:09:38 [W] So camel Kay loves Canadian. So this is a love story that started two years ago because the to project stuff that almost at the same time.
00:09:47 [W] This is not the official logo come.
00:09:51 [W] Okay, but somebody put the common log and the knative logo together.
00:09:57 [W] So it reads as camel and K. So we like this but it's not the official logo. Come on cake and workouts without k-
00:10:00 [W] But yeah, it's better when they went together just this just to be on the same page.
00:10:11 [W] I'll give you a brief really brief introduction about Canadians.
00:10:12 [W] Okay knative is about serverless and it's a series of building block for running serverless application of kubernative.
00:10:22 [W] The building blocks are divided in two main parts one is called kinetic serving that is about Auto scaling and the other one is about kinetic event.
00:10:29 [W] event. It is about even driven applications. Okay.
00:10:30 [W] So when we talk about kinetic serving the most important building block is a custom resource called kinetic surface. You can create a heavy service to run your container and if there is a request for your container for
00:10:45 [W] Your service then a pot will be created to serve the requests. But as soon as no request a ride for a certain amount of time, this pod is destroyed the solid the services scales that 0 and it works. Also when you receive multiple requests are multiple pot can be
00:10:59 [W] The baby can't be of services or to service requests in parallel.
00:11:07 [W] when you think I'm okay with Canadians, sorry.
00:11:08 [W] So basically nothing changed from a developer point of view.
00:11:15 [W] So you created the camel DSL in this case.
00:11:18 [W] I'm creating a rest and point called Pat with the post method that whatever you said to this end point is sent first to system one and then the response from system 1 is sent to system-to-system one of system to our just to
00:11:31 [W] One of the three hundred and fifty and sixty components that are available in your pajamas and it can be any software as a service or any protocol that you can imagine these rest DSL is camel T cell is converted automatically into a key
00:11:47 [W] This is so you have a discounting at the matically but from a developer point of view.
00:11:52 [W] Everything is called The Driven income. Okay, talking about Katie Eventing. It's about even driven application. The most important building block here is called broker.
00:12:06 [W] So the broker is an abstraction is an interface for a publish/subscribe resource.
00:12:12 [W] can send event to the broker and you can let services without the ones that you see on the right to treat be triggered when ascertain even to the even put certain finops.
00:12:17 [W] Features that is published into the broken.
00:12:21 [W] This is how it works when it comes with caramel cake and okay is really awesome to be useful in this concept subcompacts because you can rent can create even sources from many components that you have so you can take for example all the tweets that talk about a certain topic and
00:12:35 [W] To the broker so that application can subscribe later but also works in the other side for example suppose that you want to send emails so to your customers and so you can create a comic integration that converts an event into an email
00:12:49 [W] Descent actually to the customers and so from your application you can just publish an event and that will be converted automatically to an email that goes to your customers but not anything here can be should be done with command K.
00:13:04 [W] You can use camel case whenever it's needed to do integration with other systems or do Transformations and use your that the culture that is best suited for all the rest and so you can plug whatever you want.
00:13:13 [W] It can't be venting.
00:13:16 [W] Just one thing before we start the demo. I told you that the main way to use camel case is to
00:13:19 [W] eight file with the camel DSL and then this file with the scam LCL is converted to an integration custom resource and then the operator creates some branding poet skated services and whatever is needed to run the integration, but there is a second
00:13:34 [W] Run come up, especially when you want to quit sources.
00:13:41 [W] You can direct to create a camel source.
00:13:50 [W] That is the custom resource that belongs to Canadian. So this is released together with k8s and so it wraps academic integration. So they have the same power the same expressive power, but the camel source is
00:13:56 [W] Buddy bill for example with the Cayenne toolings.
00:14:02 [W] That is the the de facto CLI.
00:14:08 [W] It's the official CLI for 4K knative so it recognized by that but also from out by all the tooling that is based on top of the Kami tevinter faces just that but from under the hood, they are almost the same thing so
00:14:18 [W] We can now start the devil's. Okay, this demo is about Bitcoins, you know, probably that today one Bitcoin is worth about $9,000. That seems something crazy.
00:14:33 [W] But the question is should I buy more Bitcoins or should I say well if I have someone some Bitcoin in my portfolio, so let's try to answer this question by Building A system that can predict this if the price is going up or
00:14:45 [W] It's going down.
00:14:47 [W] So we will use an existing machine learning algorithms that some other team has developed and create something using come. Okay. So listen for the real data that comes from the Bitcoin Market push this dead inside the kinetic broker
00:15:01 [W] And since then create some bridge to send this current value of the Bitcoin versus u.s.
00:15:16 [W] Dollar to this coin machine learning algorithm list and from some prediction from from it and then send the prediction back to the broker where there will be some sinks. In this case. I'm creating a sink that will convert the prediction into a message that will of go into my smartphone.
00:15:22 [W] So I see that if I need to buy or sell Bitcoins directly and I'm using the telegram component of from Apache camera.
00:15:30 [W] Let me share my screen.
00:15:34 [W] And we can start the demo.
00:15:35 [W] Okay.
00:15:38 [W] I hope you can see the screen now.
00:15:47 [W] I have here another shift class there where I've already created a namespace called The Camel k- and I've installed The Chemical Operator that can be also installed globally.
00:15:50 [W] I've also enable the Decay knative broker here.
00:16:01 [W] So you see here two parts in the latest version of connective. The broker is multi-tenant meaning if you can create it in your name space, but it won't create these two poles because they will be Global here. I have a deployed also the carcass base the machine.
00:16:05 [W] Doug we will talk more about Park was later and it's scaled down to zero because this is a connective serving service.
00:16:13 [W] Okay, let's do magic with come. Okay, so let's start with this.
00:16:26 [W] So this is an example made with Didact so you can follow it on instructional the round it only on your own you can find the links in the slides.
00:16:27 [W] Okay.
00:16:28 [W] We want to listen some prediction from some prediction in the even measure from the broker and then transform this prediction into a message to our telegram chopped.
00:16:42 [W] So in order to do this, you can create for example using the camel CLI metafile. Like I look Java and it will create a file but here because we don't have a lot of time I will show you directly the integration already done.
00:16:53 [W] So this is the the sink that will sin transform Anna prediction into a message to our smartphone you can
00:17:01 [W] Read it as this so we start from a Canadian event the called of type the prediction dot carcass. We can Define our own types, which was for me to a strings of predictors suggest to buy or sell at this price and then we send
00:17:13 [W] Telegram for telegram shot.
00:17:21 [W] So this is this is using the telegram component in all that in Apache camel.
00:17:23 [W] We have a lot of components.
00:17:28 [W] It is camel Apache dot org and you have read a lot of components. You can filter here in for example, a telegram from Colonel component It is Well documented here on to use it Etc. In this case. Also this builds a plug-in for the IDE so
00:17:39 [W] Can also about the completion here of the properties that are available for the company, even if this is a string so we convert an event into a message at or telegram both.
00:17:50 [W] So we'll see the message here in this telegram chatter, but also my smartphone and we reply to with the naphtha string to the to the to the broker because the broker expect that we can written some response. But in this case, I just want to consume this event
00:18:03 [W] send it to a telegram to run these integration and the Run telegram simple Java and it also as lot at this property file, it is declared here in the moat line and this property file contains authorization
00:18:18 [W] And to talk with telegram if we go back to openshift that is running remotely on the cloud.
00:18:33 [W] We have created this camel came to grips with its appalled. It is running currently, but it will scale down to zero if there are no event coming to that and currently there are no events because we have just a ploy to this piece.
00:18:42 [W] So we want first of all to create some data but before going to do it, let's see what has been created.
00:18:47 [W] Okay. The my laptop is
00:18:50 [W] Cuba City l so. Hey get ite ite means integration.
00:18:56 [W] There is an integration branding we can see it also from this panel here that belongs to the vs code extension weaveworks this code blue plug in so you can get for example ksv. See you see that there is
00:19:08 [W] practice application that is running as a Canadian service, but also telegram seeing is running as kinetic service and you can
00:19:18 [W] Also, the three girls that are available in connective and we have a trigger here for created for telegram.
00:19:25 [W] why I will show you so these three girls says basically with whatever is set to the default broken connective with the attribute type equal to prediction dot quad plus should be sent to the service called the telegram sink, but
00:19:40 [W] It added all these llamo by hand. This comes from the operator because what we have done is to Pelican a typical Chemical Operator to create a trigger from prediction dot carcass from the default program so that all this has been created
00:19:55 [W] Take Em okay operator you can add those additional filters. You can also receive the different kind of event on the same integration.
00:20:03 [W] Okay.
00:20:06 [W] Let's go back to the diagram and create the source.
00:20:18 [W] So as I said before sources can be created as a comic integration done with the camel CLI, but they can also be created as custom results belonging to Canadians. So camel sources. These camels source is a yam or that contains the camel the SL but written in
00:20:22 [W] We have many DSL and so even tempted to write them in Java. We have could write them in yellow as you see here, but also improving the culture in and also in JavaScript if you want, so this is a variant of academic integration.
00:20:36 [W] We start from the timer component.
00:20:36 [W] I'm are creates a periodic trigger. Basically every 10 seconds.
00:20:42 [W] We use the exchange componentconfig Amal to get from by Nancy the current value of Bitcoin versus u.s. Dollar which transformed that into adjacent and then we log and
00:20:52 [W] Set the content type set the cloudevents hyper to Market with going to use the T.
00:21:00 [W] So remember this and send it to the default program.
00:21:01 [W] So to create this we do cooks it keeps it out apply in self Market source, and it has been created.
00:21:09 [W] Yes now, so if I get if I type swords and so so he's using the kinetic CL is it is source that has been created and it has also created a comic ain't aggression.
00:21:22 [W] You see here.
00:21:25 [W] We can follow the logs and you will see that.
00:21:26 [W] Yes, it's generating some Json with this currency pair Bitcoin is the T the opening value and last is the value that we are interested in to as you see here.
00:21:40 [W] So last is the last observed value of Bitcoins versus u.s.
00:21:41 [W] Dollars.
00:21:44 [W] As the dean to as you see here, so lastly is the last observed value of Bitcoins versus u.s.
00:21:52 [W] Dollars.
00:21:53 [W] So let's close this this is running in a cluster as you see here this icon is because this is a stand-up kinetic Source.
00:21:56 [W] Okay, let's create the last piece of the picture. So this predictor that reached the Greco's machine learning algorithm adjust.
00:22:00 [W] let's see one moment the machine learning algorithm it contains samples and point that can receive a Json.
00:22:06 [W] But it needs to receive only a table value.
00:22:11 [W] So the current value not the full Json that week reduce using the source. So we need some basic transformation using camel.
00:22:15 [W] So let's do it just show you briefly the code without focusing too much Williston from the Json produced by the source using a connective components. So it will create another trigger
00:22:29 [W] We said this is internet HTP component don't care about the road is just the tooling.
00:22:36 [W] We send it to Parker's mlperf in the sampling Point using a post. We set the content type and do set the transformation from the Json to only the last value here and reply nothing to the broker and we
00:22:49 [W] The response from the class from the work with service, which is a simple service is not the real machine learning algorithm and we evaluated if the response is not empty.
00:23:05 [W] We omit the prediction. The prediction is something like buy or sell and the value at which you need to buy also this is sent as cloudevents.
00:23:14 [W] But a telegram sync integration.
00:23:17 [W] Okay, let's run it I'ma run prediction breach. So it will run in the cluster.
00:23:24 [W] This is in already created.
00:23:28 [W] We can follow the logs from here.
00:23:40 [W] So it's already starting and you should see these also here in JavaScript console. We see that work was and telegram has been scaled down to zero but now carcass is starting up because this integration is calling it and if this generates some prediction also the
00:23:43 [W] Run in the cluster.
00:23:44 [W] This is in already created.
00:23:44 [W] We can follow the logs from here.
00:23:45 [W] So it's already starting and you should see these also here in your Bishop console.
00:23:47 [W] We see the carcass and telegram has been scaled down to zero but now carcass is starting up because this integration is calling it and if this generates some prediction also the telegram integration will start Taft.
00:23:48 [W] Let's Okay, we see here that the prediction has been emitted. So the telegram and point started and we should see
00:23:52 [W] here once this is ready the prediction to sell of to buy Bitcoin.
00:24:00 [W] Yeah, no by and then sell so I told you that then today a machine learning algorithm is not so efficient.
00:24:06 [W] But yeah, you see that there are a lot of variation in the price of Bitcoin. So I think it's okay to say bye and then said okay, but this completes the demon and I'm going back to the presentation now.
00:24:17 [W] Okay, I think we are back to the presentation.
00:24:25 [W] And let's talk a bit about the future.
00:24:30 [W] So what I've shown you is that not showing this to you, but actually with this is what happens when you run an integration transfers are Java pose and you can also enable Quark.
00:24:44 [W] squared which is a framework for building is efficient Java applications, but we do now is to create a Java application with openjdk with the jvm. And then when the park was framework what we are going to do in the future
00:24:57 [W] we have working currently on this is to compile knative Li the code into a and active Viner that is comparable to what we achieve with We Run The co-optation for example, but it has the food power of all the components that are
00:25:10 [W] Simple but it has the food power of all the components that are available in common. We have started that project recently.
00:25:15 [W] It is called camel carcass that is about to running all the common components as knative plication on top of artists why it is because if other integration now can use
00:25:28 [W] Why these because if other integration now can use for example even 200 megabytes and so you may be incentive knative to for example, peer-run together the of integration for example, the telegram
00:25:37 [W] To for example fear ran together the print aggression for example, the telegram seeing and the prediction bridgecrew Dev ran all together so we can kind of run all the files that you want to run and give it a name and it would run as a single integration, but you don't want to do it you want to
00:25:47 [W] A lot of the pieces of your code. So with what cause if you can lower the amount of memory that is use it front row and that may get by to just 25 megabytes and also the stuff that time we have seen the telegram has started up in five.
00:26:03 [W] So I've received the five seconds later the message on my telegram chatter.
00:26:08 [W] No not on my smartphone, but with work was a to get be less than one second without this. So mandrel is a new project to run car could run and grab the mlperf oppan.
00:26:19 [W] jdk and we are going to leverage that. Another thing that we are going to use is camelids. So this is we are working also on this white cabinets because pay of you and also a lot of people don't know anything about the parsec Ava I don't know how to write a line of Cambodia cell,
00:26:33 [W] Connectors that are available in camel so come on. Let's the are above that experts will create those connectors for Twitter for Salesforce full service now and then make them available so that you can pick one of them and then
00:26:48 [W] This for example the query I want to search all the tweets on Twitter that talk about carcass configure the transition token, then choose a destination.
00:27:04 [W] This will be available also on top of chicken. So for example, this nation can be the Canadian procure on a kinetic Channel you can affix service directly or whatever you want to even a casket topic and this will run without writing a line of
00:27:14 [W] Don't think something which we are working on is Yaks ux is a framework for testing for example integration, but also general-purpose service on the cloud.
00:27:28 [W] The ACT is based on bdd style testing.
00:27:31 [W] So you define a feature fire like this.
00:27:44 [W] Let's test this feature that they appear a Gateway work. So given this URL when we send the get translation point and we won't receive at 100. Okay. So this is seems natural language, but this is excitable VI accept it.
00:27:48 [W] Is based on camber? So this will run and with can check can be used to check if your service or your integration the case of couple K are working correctly.
00:27:54 [W] Okay other important future developments are webassembly because sometimes you need to have a boat for example this so they can also see needs to have a product is always running because we were doing polling from the time and service because there is no way book available
00:28:08 [W] Well, that is always running because we were doing polling from the dining service because there is no way book available. But for many points that we've books and we are working on improving the number of components that can use web books to be called when there is a new data and not to
00:28:17 [W] To be cold when there is a new data.
00:28:18 [W] I'm not to be always online and be cold and cold Kayla is another point where we're working on to have upscaling not only for http-based standpoint, but also for others and if you want to learn more about the
00:28:31 [W] He's another point where we're working on to have upscaling not only for http-based standpoint, but also for others and if you want to learn more about the pudgy caramel, then there are other talks and most of them are from detonation closets and
00:28:37 [W] Then there are other thoughts and most of them are from detonation closets and drawers and Tina of talk a bit about that.
00:28:38 [W] Also.
00:28:40 [W] We have a talk with by linkerd Brigade sodium and me and definition above comment K. If you want to learn more about the details because we have not a lot of time. So if you like it come okay go use it as contribute with anything you have
00:28:53 [W] If you like it come okay, go use it as contribute with anything you have in mind.
00:28:55 [W] He also signed an inbox if there are yes, there are don't expect it to be perfect.
00:29:03 [W] But we we want you to join the community and help us to improve it in the future.
00:29:09 [W] So follow me on Twitter need underscore Ferraro. And yes, that's it. Thank you very much.
00:29:13 [W] Okay, so thank you for attending this session and I hope you have enjoyed it. Also the demo.
00:29:30 [W] hope I have not talked too much about the details of Apache camel. If and if yeah, you know, there are a lot of things to say.
00:29:36 [W] But yeah many of you don't know Apache camel, so it's difficult to explain it in details. So I will answer some questions that have been asked at the in the chatbots.
00:29:48 [W] First of all, someone is asking what is actually a budget camel Apache camel is a framework is a Java framework. It is been around for a lot of time.
00:30:03 [W] It is one of the main Apache projects and it is based on many components that are a small libraries that are used inside can cuddle cake. I'm okay is written in go because it's basically a controller and operator for kubernative, but
00:30:16 [W] Is a still Java running on jvm.
00:30:23 [W] And so it supports many languages like grow.
00:30:24 [W] We called leniency almond and XML all of them can run on the jvm.
00:30:29 [W] And we plan is as I said in the in the presentation to also run Integrations on fire Crews with the advantage because he's a framework for highly efficiently.
00:30:39 [W] I'll efficient job application that can run in the cloud and advantage of carcass is to make sure that some applications
00:30:46 [W] ocean some integration in this case can be compiled at natively.
00:30:52 [W] So we want to compile our integration natively to be small and to be much more efficient when and the reactive especially when running is connective Integrations. Another question that was asked is
00:31:05 [W] If you can run this demo on kind of cluster for example on a local cluster.
00:31:15 [W] It's easy to run comma K or mini Cube. The reason is simple because camel K as I explained in some slides that needs to create some images because what you write is the DSL, but what you can run on a kubernative plaster is a
00:31:28 [W] so this container image needs to be put somewhere and while you have an open shift default registry that can okay users automatically while you can enable for example on minikube register that is available out of the box
00:31:44 [W] The rage is the internal register is not available on kind. But of course, come on K can be also installed on kind.
00:31:55 [W] We also Run part of our CIA on a kind cluster.
00:31:59 [W] So yeah, it's possible to install it.
00:32:07 [W] We will make sure we have also guide on how to install come okay on time because this question has been asked at the frequently in recent times.
00:32:09 [W] So this is it not show need to there is another question about can I develop kubernative?
00:32:15 [W] Escrow in job if we don't take cookie knative what what this means is that we would come.
00:32:27 [W] Okay, when you write integration, the Integrations are Mighty realize that in what is most suitable to run your code.
00:32:34 [W] So if you create a periodic integration they come and kill Prater understands that instead of creating a deployment.
00:32:35 [W] that is always running the comic operator. If you use the chronosphere the timer component of Apache camel, it creates a kubernative scrounge up after the box and you don't need
00:32:45 [W] Knative of to have this con job running but it works on any kubernative cluster and even easier to burn at this place.
00:32:53 [W] So this is it I think as I said most of the questions and yeah, yeah, others have been replied in line in the in this peak in the question of you.
00:33:06 [W] Well, it creates a kubernative scrunch up after the box and you don't need Canadians were to have this coredns job running but it works on any kubernative cluster and even easier kubernative glass.
00:33:07 [W] So this is it.
00:33:08 [W] I think that's our most of the questions and yeah, yeah, others have been replied in line in the in this peak in the question of you.
00:33:09 [W] you. So, thank you.
00:33:09 [W] And thank you for joining and yeah, see you.
