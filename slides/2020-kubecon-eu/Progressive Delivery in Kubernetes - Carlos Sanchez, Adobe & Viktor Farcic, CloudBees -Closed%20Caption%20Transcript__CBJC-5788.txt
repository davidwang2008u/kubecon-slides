Progressive Delivery in Kubernetes: CBJC-5788 - events@cncf.io - Tuesday, August 18, 2020 8:23 AM - 74 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:02:14 [W] hello and welcome to
00:02:18 [W] Hello and welcome to this talk about Progressive delivery in kubernative.
00:07:10 [W] My name is Carlos Sanchez.
00:07:11 [W] And I'm Victor parsec.
00:07:19 [W] So I am a cloud engineer Toby. I wrote some open source a lot of it like the Yankees Piniella is plugging and I've been a longtime open source contributor.
00:07:29 [W] Welcome to this talk about Progressive delivery in kubernative is my name is Carlos Sanchez.
00:07:30 [W] And I'm Victor parsec.
00:07:31 [W] So I am a cloud in the air Toby. I brought some open source a lot of it like the Yankees four letters plugging and I've been a longtime open source contributor.
00:07:32 [W] To about to maybe bring a clip from the issue puppet and other things and Victor.
00:07:38 [W] Victor Works in cloudbees and as a product manager and then he published some books and courses and he's a Google developer expert all the good stuff. A lot of Open Source
00:07:54 [W] And we're here today to talk to you about Progressive delivery.
00:07:59 [W] When have you heard we have you heard the first time about Progressive delivered after.
00:08:06 [W] I heard the first time from you.
00:08:14 [W] Well, I heard the first time from lunch starkly.
00:08:15 [W] They wrote this blog about the history of progressive delivery.
00:08:21 [W] So that was the first time and then James Governor from Red monk motives in Twitter.
00:08:29 [W] He was pushing it and place a wall.
00:08:33 [W] I love this term it takes it defines very clearly what we are
00:08:37 [W] Find to do so let's still it right.
00:08:41 [W] Exactly.
00:08:46 [W] We're not going to invent out anything new. Right, right.
00:08:51 [W] So what is perceived delivery? Is this a new term to coin a bunch of different things that have been around for a while. So it's groups together all these deployment strategies that
00:09:01 [W] There's nothing deployments where you know, you could play something if it's broken, it breaks all your customers.
00:09:18 [W] So we are trying to avoid that and that's all these techniques falling to the progressive delivery as work is a
00:09:22 [W] so when you deploy a new version, you are not replacing a system versions then but you just deploy things that are running in parallel with previous versions that you have to reply and
00:09:39 [W] Whether you want to send life traffic, this is important.
00:09:44 [W] This is all in production happening. So you can send life traffic to the all version or to the new version based on whatever parameters you decide and then you evaluate whether these
00:09:58 [W] Behaving correctly if it's so then you can send more traffic to the new version.
00:10:10 [W] But if for whatever reason the new version doesn't behave I do suspected then you can start rolling back to the old version and this is very immediate or fast and just
00:10:20 [W] You just are so good at effective.
00:10:23 [W] So the main advantage really of continues Progressive delivery all running in parallel.
00:10:34 [W] It is really about avoiding downtime because if you do not run to release his imperil L. It is physically impossible to be able to deploy a new release without downtime. So running in parallel is a prerequisite for any
00:10:47 [W] Nose on downtime or zero downtime deployments and then on top of that we have all the benefits that cover just mentioned that we can decide how much traffic goes to one really is how much to another and increase the reliability and
00:11:03 [W] In rolling out something.
00:11:06 [W] So it's not about avoiding downtime and limiting the blast radius.
00:11:17 [W] So if something goes wrong, just some people notice what the issue and also allows you to have first like idea to production type of workflows where you are.
00:11:29 [W] Confident that things are going to Arnold going to post a big issue in production.
00:11:36 [W] So there's a number of techniques that you may have heard of this is nothing new.
00:11:55 [W] So we have like terms like running updates for this is something that you could have them with virtual machines.
00:11:59 [W] You can do it very easily and kubernative with containers with parts. And basically, it's just you have them contain Parts running and then you have rate 120 version and instead of a great.
00:12:10 [W] all the thing at once you operate one so that one is successful or to have some maybe metrics and you operate two three, four five and so on until you operate all of them, so
00:12:24 [W] Have a lot of control, but at least you're not affecting all the users of the same time.
00:12:31 [W] So rolling up, this is not that much about control.
00:12:41 [W] It's more about avoiding downtime by replacing One release that one replicate the time there is always a replica running bit of the boulder a new release of boat. So it's not that much about having control.
00:12:54 [W] Troll who gets to see what and you cannot even control much better you roll back or Draw forward. It's more about reducing downtime than anything else.
00:13:07 [W] Yep, as I said, this is very easy to do in kubernative.
00:13:13 [W] Then we have it's a default deployment.
00:13:20 [W] It's a default deployment many mechanism in kubernative. In other words, if you use kubernative deployment or stateful set you're getting rolling updates no matter what you what you do unless you explicitly change the deployment strategy to something else.
00:13:32 [W] And then we have lingering deployment.
00:13:39 [W] This is something that I think came from Martin folder or mean. He was the first one kind of going through the definition where you have two different sets of
00:13:51 [W] my strategy to something else
00:13:52 [W] and then we have lingering deployment.
00:13:53 [W] This is something that I think came from Martin folder or mean. He was the first one kind of going through the Finish where you have two different sets of
00:13:54 [W] What clusters or machines one set with the all version one set with a new version?
00:14:05 [W] And then you have some router load balancer in front and when you want to deploy to the new version you just flip the switch on the load balancer and say all the traffic goes to the new version the main issue
00:14:15 [W] Green deployments is that it's somehow assumes that the best way to roll back or to roll forward is by having everything duplicated.
00:14:31 [W] It assumes in a way and simply because it was created long time ago. It assumes that rolling back for back for example would require creating onto of new virtual machines for the require. A lot of many many different steps.
00:14:40 [W] The to avoid the downtime no matter whether we're going forward or backwards.
00:14:47 [W] everything is to run in parallel, but now assuming that we are using kubernative for most of our workloads. Then the difficulty of going forward or going back is basically non-existent.
00:15:01 [W] So the whole idea about running everything twice in parallel forever and ever is kind of based.
00:15:08 [W] that could be probably avoided so it is much better suited in in environments where deployment takes time and scheduling takes time and what so not
00:15:21 [W] Under we have Canary deployment which is like probably the best way of doing things today.
00:15:31 [W] Who are you have sort of Life same thing of with blue green deployment where you have two versions running at the same time is just that even need to have a
00:15:44 [W] and you start you are able to start sending users to the new version and you can start sending like a few percentage at a time and based on different metrics so you
00:16:01 [W] Typically, what companies do is okay, first only employees access the new version.
00:16:17 [W] So if there's anything wrong with any of our social and political is detected before it reaches to external users.
00:16:18 [W] And then you will start saying 10% or 5% and then then 15 20 30 40 percent of users are going to the new version while the other ones are start with the old version then you keep rolling.
00:16:34 [W] Like Brazil version, then you keep rolling the percentage of users that are going to the new version and another another percentage goes to the L version and you can
00:16:46 [W] Roll out with any time I missed our and stretch it and send everybody to the by so the old version.
00:16:52 [W] so the main difference I would say between rolling updates and country deployments is that we drawing updates you're using very simple health checks normally to decide whether to go forward or to go back without really control who sees what
00:17:10 [W] there is you would basically use heavily rely on metrics to decide whether whether something is successful and if it is successful whether to move it forward another 10% 20% or whatever the percentage is,
00:17:26 [W] You can say even that Canary deployments is a form of testing where you are you create you deploy a new release you allow certain percentage or certain region or certain users to see it your test. Test test and and by testing
00:17:42 [W] With metrics are varied query metrics evaluate the results and then decide to go for forward or backwards.
00:17:56 [W] So it is in a way similar to what we'll what we would do when deploying to integration environment staging environment production except that this is all happening in production and the use cases our test cases are based on input from the
00:18:05 [W] of users rather than imaginary test cases and the last
00:18:14 [W] way of doing things and that you can combine.
00:18:23 [W] This is interesting Parable feature flags that you can combine them with any of the other ones and feature flags and Canary deployments make that pretty good combination.
00:18:32 [W] So they are like teacher flashlight toggles to switch that you can turn on and off anytime.
00:18:38 [W] What are your application runtime?
00:18:40 [W] That's that's interesting part so you can deliver new features that are
00:18:45 [W] by default
00:18:46 [W] to production and then you can enable them or disable them if there is any issue with them, right?
00:18:57 [W] So you build new nice.
00:18:59 [W] I don't know like you I and then you can flip the switch and start showing that new guy to specific subset of users and
00:19:09 [W] If something is wrong, you just switch the flip the switch again and go to the old version.
00:19:21 [W] So it's very nice because you don't even we were talking about rallying deployments and rolling applications. And so on WE feature flashes even have to compile anything again all of the play anything again, it's all
00:19:31 [W] You still need to run multiple replicas of your application do some form of let's say maybe rolling updates to prevent downtime, but you do not necessarily need to measure
00:19:51 [W] decide who sees which release depending on where you're folding forward in traffic, but rather by enabling and disabling features in that new release, so it's usually combination of running multiple replicas in some form of
00:20:07 [W] many deployments what so not combined with the fine-grained ability to enable or disable specific features while Canary deployments are allowing you to enable or disable visibility or specific release
00:20:23 [W] Bet on the future level.
00:20:25 [W] Yeah, and I think we heard this before right monitoring is the new testing in the sense that if you have good monitoring you can know when users are experiencing issues in production.
00:20:42 [W] I'm not only that but you could react to the issues automatically. You can rely on metrics to decide whether you want to continue our Canary roll out whether you want to disable the feature fly because
00:20:57 [W] And you can do very cool things.
00:21:04 [W] I like the devops god. I used to say to make that or is he a man to propagate that or to all serving the automatic way that is what devops is and this is the first time we mentioned devops in the
00:21:16 [W] Serving the automatic way that is what devops is and this is the first time we mentioned devops in the old talk so that it is must be a record.
00:21:18 [W] I bet no other talk managed to get this far without measuring those and something I experience and I learned from that is like if you have an automatic create a destroy something by mistake.
00:21:36 [W] That means that you are not automating enough.
00:21:38 [W] Oh, yeah, actually if you want to be secured the best way to do is to do nothing.
00:21:44 [W] And then the second best level is not to do anything automatically and then you get to automation.
00:21:50 [W] So let's go on to an example on how you can you practically do Progressive delivery on kubernative specifically Canary deployments.
00:22:04 [W] Let's talk about is fear. If you have a heard about this tier is a servicemeshcon probably heard about five different of them is there is one and is the allows us to do.
00:22:17 [W] MTN example on how you can you practically do Progressive delivery on kubernative specifically Canary deployments.
00:22:18 [W] Let's talk about is fear. If you haven't heard about this tier is a servicemeshcon probably heard about five different of them is there is one and is the allows us to do.
00:22:20 [W] First in things with with your services and kubernative.
00:22:26 [W] So STL connects Services allows to secure those connections to a like automatic encryption and
00:22:36 [W] also control the flow.
00:22:43 [W] So the siding what profit goes to what service and providing us observability metrics on this services and interesting part is that you don't have to do anything to your application you all get
00:22:54 [W] Saving what profit goes to what service and providing us observability metrics on this services and interesting part is that you don't have to do anything to your application.
00:22:56 [W] you all get you get all these things for free when you run a servicemeshcon like his TL.
00:23:00 [W] Similar with other ones but this example just uses his ear and another interesting project.
00:23:12 [W] Most interesting project on the sense of canary deployments is Flagger.
00:23:20 [W] open source project allowed to make the promotion of of canary deployments using is the and Prometheus metrics so
00:23:26 [W] When you deploy a new deployment of kubernative Flagger, is there listening to events and see if the new deployment if you have enabled Slugger on the okay
00:23:42 [W] Puppies that deployment wallpaper, so it keeps two versions of this deployment the previous version and the new version and it uses is the control to start sending traffic instead of sending all the
00:23:57 [W] Bradley rolling out from to the new version and you can customize whether you are sending you know, 5% 10% 15%
00:24:13 [W] Whatever number you want to set.
00:24:16 [W] This new traffic goes to the new version and the metrics for Misty are ending in Prometheus and fly looks at those mattresses, you know, this metric is okay or is not okay.
00:24:32 [W] okay. So based on those metrics, it does continue their rollout or otherwise, that's a rollback and it starts sending all the traffic to the previous version.
00:24:45 [W] it does this by creating virtual services in each Tio primary and Canary services and deployments of your application and
00:25:04 [W] Continuously looking at is the virtual service metrics in Prometheus and you can even get messaging is like when when this rolls are allowed to are happening because I mean who doesn't
00:25:20 [W] Canary services and deployments of your application and
00:25:21 [W] Continuously looking at is the virtual service metrics in Prometheus and you can even get messaging is like when when this rolls are allowed to are happening because I mean who doesn't
00:25:23 [W] Just like messages.
00:25:23 [W] You also get graph on R Group on the dashboard where you can see side by side all version and new version.
00:25:41 [W] So again, all sorts of things like response errors response times and you can see both old version and the new version.
00:25:49 [W] And it's really cool.
00:25:53 [W] It's a really cool project. You should totally check it out.
00:25:55 [W] one of these you'll notice that you were hearing about flogging combination with this Theo
00:26:04 [W] but if that's not your flavor, that's okay because plugger support basically almost any service service measure available on top of that. It supports even without servicemeshcon work with engineer sync dress and a few others.
00:26:20 [W] So think of is to in this context is example, not necessarily the requirement for Flagger.
00:26:24 [W] Now, let's go on to the demo.
00:26:30 [W] Yeah, then with time let's take a look at flag of the definition first.
00:26:38 [W] It is kind Canary.
00:26:40 [W] That's not really anything special what matters is that we are setting provided to assist you in this specific case.
00:26:47 [W] That it supports even without servicemeshcon work with nginx Ingress and a few others. So think of is to in this context is example, not necessarily the requirement for Flagger.
00:26:54 [W] And now let's go on to the demo.
00:26:54 [W] Yeah, demo time.
00:26:55 [W] Let's take a look at Flagger definition first.
00:26:55 [W] It is kind Canary.
00:26:55 [W] That's not really anything special.
00:26:55 [W] what matters is that? We are setting provided to assist you in this specific case.
00:26:56 [W] We are specifying that the target reference the application is running as a deployment and it is called God mo7 fogger will be monitoring metrics in Prometheus and depending on the outcome of those metrics decide to move forward
00:26:59 [W] Openmetrics in Prometheus and depending on the outcome of those metrics decide to move forward or roll back.
00:27:02 [W] We have an application.
00:27:04 [W] It's a kubenetes deployment we have flogger and we have we still Gateway everything else required for that application, like destinations rules and virtual services and what so not all that will be created by flogger out of the box the
00:27:17 [W] Destination rules and virtual services and what's the not all that will be created by flogger out of the box the moment. We deploy the first release actually, we already deployed the first release so we are going to see how the second
00:27:24 [W] Comes along because that's the more interesting part.
00:27:29 [W] So let's take a look at the deployments. Now, this is important because here we can see that we have a database that one is not important, but we have got them on seven and go demo seven primary. Now Gordon was seven is the deployment that we deployed the other one the primary is
00:27:43 [W] If logger and that is actually the release that flag will consider the production release while whatever we deploy our selves will be copied by flogger and converted into
00:27:59 [W] Release when the time comes even if all the conditions are fulfilled another thing important here that we can see that we have HP Acres on the product is scalar.
00:28:11 [W] And here we have services that are already that were already created by Flagger write all those here except the database were created by fogger managed by fogger. We don't need to do much over there.
00:28:24 [W] And the most important one is kind of resource, which there is only one right now and it is initialized.
00:28:35 [W] When does the beautifly right you all to focus on your application and then it will from The Seer the canary cri-o the it will create all these things for you magically.
00:28:46 [W] To do next is deployed release or two and I will show you here the llamo. This is basically exactly the same yamuna's of the initial release.
00:29:00 [W] The only the only real difference between this deployment in deployment.
00:29:03 [W] It is currently running in production is in the tug on the right side.
00:29:06 [W] You will see very soon elope request will be sent to the application will Loop so that you can see how it progresses right the current version of the application the one
00:29:18 [W] Running in production is supposed to output something something version or one and as calorie starts rolling out the new release you will see increasing of the percentage of the outputs.
00:29:31 [W] That state that the release that is running is all O2.
00:29:36 [W] Okay, so as you can see all the outputs are from the existing release from it says version of one.
00:29:47 [W] So what we're going to do is apply the new deployment the deployment of the new release. So the only thing that we are changing in the system ourselves is updated version of Cobie data is deployment.
00:30:00 [W] New deployment the deployment of the new release. So the only thing that we are changing in the system ourselves is updated version of kubernative deployment.
00:30:01 [W] We're not changing anything else. We are not doing any other action except deploying.
00:30:04 [W] Overwriting the existing deployment with the different image with a different tag.
00:30:11 [W] And we can see that we have two deployments the new one all seven got the most 7 is currently running 0 replicas that will soon increase when horizontal products killer kicks in.
00:30:28 [W] Sin, and if you look at the virtual Services, we can see that we still have only one.
00:30:35 [W] And this makes a lot more sense when you have multiple replicas and even the HPA the horizontal pull out the scanner running.
00:30:45 [W] So you have more example and if you look at the service right now, which will service from. Mr. In this case. We can see that there are two destinations this the two routes one sending hundred percent to the existing
00:31:00 [W] Our primary and zero percent of the traffic is being sent to the country release to the new release.
00:31:13 [W] And the reason for those 0% is because Canary Flagger did not kick in yet soon.
00:31:23 [W] You will see the change of that percentage once new deployment is operational and Flagger discovers that there is a change of that deployment.
00:31:26 [W] Yeah, Flagger basically is stopping your new deployment from getting accessed and then it slowly turning around for the users and now we can see that the percentage is changed.
00:31:41 [W] scent is going to the production release why 20% is going to the new release and if you pay attention to the right hand side of the terminal you will see that occasional outputs are now saying version or
00:31:57 [W] At least 20% of one out of one of every out of every five requests are responding currently with version or two.
00:32:06 [W] And this is random, but you could also said I like HTP Heather's other sort of rules.
00:32:19 [W] Exactly currently rules if I remember correctly. The definition are based on the error rate.
00:32:29 [W] I think or something like that simple one, but yes, definitely in real production usage.
00:32:37 [W] You should change that to be real metrics real queries real error detection user satisfaction or whatever else you deem important to decide whether to move forward or not.
00:32:50 [W] So let's describe cannot respond more time.
00:33:00 [W] And now we can see that it increased to calorie weight increase to 40% So it's so that there are no problems.
00:33:01 [W] No errors.
00:33:10 [W] No issues with the new release and it decided to move forward another 20% If you pay attention on her right hand slide terminal side of the terminal you will see the top proximately 40 percent of the responses are version or two while 60 60
00:33:16 [W] Centaur version or one and we can see that canaris is a now progressing and 60% are now 60% of the traffic is currently being redirected to the new release by default and this can be changed
00:33:31 [W] Once it reaches 60 percent it is configured to finops eyes the release. It assumes that if 60% of your users of the traffic or whatever. The criteria is has been valid. There is no point probably to
00:33:46 [W] Progressing to 80% it will jump straight to hundred percent and finalize the deployment of the new release. So soon within a few moments all the traffic everything coming into this application will be redirected to the new release.
00:34:02 [W] That's about it.
00:34:06 [W] Now. It is promoting meaning that it is removing the country release and it is changing the primary release to be the new release.
00:34:17 [W] And basically this is the activity of the process did not finish yet.
00:34:18 [W] Basically this finishing our application all the traffic of our application is now going to the new release and you can see from the output on the right hand side of the screen that all the responses are now or two.
00:34:31 [W] That's it.
00:34:32 [W] We're successful the weaveworks.
00:34:33 [W] One that it works in production just apply it and that's it.
00:34:37 [W] Okay.
00:34:41 [W] Well, thank you for listening to us today.
00:34:46 [W] We hope you learned that you can do progressively very canary deployments on kubernative is very easy.
00:34:56 [W] You don't have to be Netflix or Facebook or a big Corporation to do this.
00:34:59 [W] You can just use open source projects to do it right Victor.
00:35:01 [W] Absolutely.
00:35:05 [W] Basically, it's almost too easy.
00:35:10 [W] Main difficulties whether you really understand under which conditions a really successful because you will need to tell in this case flogger what those conditions are and that is probably the most
00:35:21 [W] Complicated part because it's very easy to say. Okay just move forward 20% every five minutes but figuring out what are the potential errors that the machine system needs to discover.
00:35:36 [W] In order to decide whether to move forward or move back is is the complicated part outside of the so if you know your system well, if you know under which conditions something is a success or a failure than it's fairly easy.
00:35:52 [W] Yeah, and it's not only metrics about you know, HTTP traffic. You can also have your own metrics like business level metrics like how many items are people putting on their shopping
00:36:05 [W] It's or how many credit card transactions we have.
00:36:11 [W] So you could also another very nice to have those type of business level metrics that mean more to you.
00:36:19 [W] exactly
00:36:23 [W] Well, we thought that is a thank you.
00:36:26 [W] Thank you.
00:36:30 [W] Yeah, thank you for being here virtually.
00:36:30 [W] And see you next cubicle.
00:36:34 [W] A lot of questions.
00:36:52 [W] I think the most popular one.
00:36:53 [W] Has been Canary deployments and databases as usual.
00:37:02 [W] Oh, yeah, exactly so that there is an easy solution for that just use a database as a service and then forget about it other. I'm not sure that's
00:37:15 [W] people want to hear about
00:37:16 [W] now that lets actually in all cases. The real issue is more changes of your schema and data then upgrades of database itself.
00:37:31 [W] You don't really update your database every month the version of your database, but what you do is change the schema much more frequently and do some transformation of data and what's not
00:37:44 [W] but the Golden Ruler
00:37:47 [W] But I think it's got something on the top.
00:37:54 [W] Okay, there is a chat. Oh my
00:37:56 [W] I was a dancer in like there's a best practice whether you do Canary rollouts or not that it's let's say you have to change the database first thing you do is change the app so it can work with both versions of the database that
00:38:12 [W] Way if you have to roll back for whatever reason whether you use Canary or not, you just are safe.
00:38:25 [W] So you change the app you deploy the new app that can work with both versions of the database.
00:38:30 [W] Maybe you've run that for a bit in production. And then you change the database because that way if there's any problem you need to roll back your app. It's going to be able to work with folks worships. And this is not trivial and it's easier with more like
00:38:40 [W] Cloud services than traditional databases, but that's that's a best practice for for any the database deployment and I would say not only for the database deployment.
00:38:55 [W] It's a you need to be backwards compatible on for anything, right?
00:39:03 [W] That's a debased show but also your application and anything else you have right? If you're not backwards compatible, you will never ever ever ever ever be able to do no downtime.
00:39:11 [W] I meant because it is impossible to do it without running two versions of something in parallel.
00:39:17 [W] Other questions were like 10 Flagger run with other servicemeshcon, 's and there's definitely yes. If you go to the website, there's a few others that are supported.
00:39:33 [W] Actually, since not long ago, I think maybe half a year or something like that.
00:39:39 [W] It works even without servicemeshcon that it works with. The engine is seeing this controller alone and few others, so it doesn't even have to be servicemeshcon.
00:40:04 [W] Becoming a requirement, isn't it?
00:40:07 [W] Just because it's cool.
00:40:10 [W] It yeah, I mean, what's the purpose of being an engineer if you don't do cool stuff?
00:40:17 [W] Are you going to give me a talk now that we need to do stuff the terms money as well?
00:40:22 [W] Okay other question about whether we should do Progressive delivery or Canary deployments with one application at a time or a group of apps, what would you do this in the case that you have to do? It across multiple apps?
00:40:42 [W] Depends if those obser microservices for real that means that they're independently Deployable.
00:40:54 [W] That means that you're you're not having a control anymore and you cannot orchestrate what is deployed when right because you have different teams working with different Services different applications and going by their own Rhythm and that means that inevitably
00:41:07 [W] There will be some deployments in parallel and all that jazz.
00:41:14 [W] So it's it's not really a question its innovative inevitability.
00:41:18 [W] I would say.
00:41:21 [W] I know that you're trying to talk Carlos, but when I cannot hear you.
00:41:29 [W] I sign language Carlos sign language.
00:41:37 [W] No.
00:41:39 [W] Okay.
00:41:46 [W] No, yeah.
00:41:47 [W] All right.
00:42:01 [W] So people asking about whether you need Flagger and Helm or just Flagger and you don't need to use Helm or you can use the mail without Hammer without Helm for for Flagger
00:42:03 [W] Helm adjust the deployment mechanism you can deploy with Helm you can deploy with directly.
00:42:18 [W] Llamo doesn't really matter what what what you're using to Define your application because ultimately everything ends up being young as 2 Cube API no matter what is directly you see yama, lure you see Helm or something else.
00:42:25 [W] Right.
00:42:26 [W] Yeah Flagger will pick it up.
00:42:30 [W] However, you deploy to kubernative Flagger will pick it up from the kubernative say Pi will detect the changes to the deployments and flour will not do the jungle for you,
00:42:45 [W] But it will simplify great llamo that you need to write.
00:42:52 [W] you will move from 500 lines of yambol to buy them for tea.
00:42:55 [W] Okay, and what else?
00:43:03 [W] And whether you can specify rules to trigger the wrong bag, or do a rollback manually.
00:43:14 [W] Just you know, sorry you can specify the rules to roll back out automatically and nothing prevents you from rolling back manually by deploying another flogger definition that specifies
00:43:32 [W] the older talk
00:43:33 [W] But then it will go through the same process depends whether you want to roll back instantly or you want to do Progressive route back.
00:43:42 [W] Right Flagger, it's all about automating it. So because at some point if you want to do it manually it becomes a problem. Somebody else asked about manual checks. So being
00:43:59 [W] Able to increase the rollout we do manually.
00:44:09 [W] There's a point where you probably would not be able to cope with amount of deployments or the amount of rollouts and it's also tricky when you have multiple changes rolling out at the same time weather, especially if you want to do a
00:44:17 [W] long ternary over days what if you have multiple changes coming in every day, but you want to Canary them for more than a day so that that quickly increases complexity and that's something that
00:44:32 [W] You're not going to be able to manage manually.
00:44:34 [W] Okay, I think we are done.
00:44:43 [W] I don't know how much time we have left, but I've got done. Thank you Hanukkah salad now, okay.
00:44:54 [W] Okay, how I mean this the slides were going to be are available follow us on Twitter.
00:45:03 [W] We'll post a link and the video will be available at some point over.
00:45:09 [W] I think I heard of our September. So feel free to ask us any questions on Twitter or dislike Channel cute. Couple.
00:45:19 [W] Yes.
00:45:21 [W] We are going to be around and there's a cube cons ci/cd.
00:45:24 [W] Channeling is like where you can post all these questions and any any others about ci/cd.
00:45:32 [W] Okay.
00:45:36 [W] Well, thank you.
