Startup Containers in Lightning Speed with Lazy Image Distribution: KFJL-7059 - events@cncf.io - Tuesday, August 18, 2020 6:53 AM - 90 minutes

Participant: wordly [W] English (US)
Participant: wordly [W0] English (US)

Transcription for wordly [W]

00:01:28 [W] Hi, I'm going to Canada from.
00:01:33 [W] Hi, I'm going to grab a from entity.
00:06:47 [W] I'm mainly working in the continual runtime and a main channel of surgit snapshot a project which is known cause of project of contrary.
00:06:53 [W] Today, I'm going to talk about speeding up containerd startup by lazy pulling images.
00:07:01 [W] First of all begin to read the summary of this talk poo is one of the time consuming steps in containerless Telco third digit snapshot new gossip project of containerd e is trying to
00:07:16 [W] We'll beat by lazy playing images level eating storageos image by Google for the runtime optimization is also held with an extended version of started which is called Easter did it.
00:07:32 [W] The diagram shows the containerd startup performance for three types of person 3.7 images.
00:07:45 [W] It pulls the image from Dhaka half too easy to Oregon and once print hello world Thursday the reformatted python image with sturdy the snap shorter reduces the time to take
00:07:56 [W] Operation by legible, but run takes longer than the Legacy image. And if Saudi date for moderate image mitigate the runtime performance drawback with the
00:08:11 [W] Communication and we will discuss in more detail with the following slides.
00:08:17 [W] There are also other on cri-o alternative image distribution strategies in containerd ecosystem.
00:08:27 [W] So I'll believe free introduced some of them in this talk.
00:08:30 [W] First of all, don't you think that pull is time consuming? As you know, Paul is one of the most primitive operation for controllers. It's very general work role that we pull
00:08:48 [W] Problem registry the numpad can run them or knows.
00:08:53 [W] But unfortunately every that showed that pulling packages account for 76% of countenance that time but only six point four percent of that data is read.
00:09:07 [W] Of course some work runs along but we are not enough actually.
00:09:14 [W] We can catch images on those. But the first time of the pull cord cord start is still slow and we can also try to minimize image size, but not
00:09:29 [W] All images easily minimize Apple.
00:09:36 [W] Let's say we cannot avoid using some large base images including language runtimes Frameworks etcetera.
00:09:42 [W] Before taking a deeper look at the poop of math problem. Let's briefly recap. The oci Dockers bags for image distribution.
00:09:57 [W] In the specs a container is defined as a set of layers in images spec. It defines layers and metadata and emitter later.
00:10:13 [W] Yeah image benefit Etc or contained and
00:10:17 [W] Lear is defined as Terror and optionally path compression and brutally FF can be composed by merging layers.
00:10:28 [W] in distribution spec
00:10:31 [W] It defines HTTP API of registry and Leah can be fetched as a blob named with a Content addressable Digest.
00:10:44 [W] And register is optionally support HTTP when you request which enables us to fetch the Purser ranges in a blob on the registry.
00:10:56 [W] When it comes to Performance, there is a problem on the current oci Dockers picks. A container is a set of Turbo layers. So a container
00:11:16 [W] Can be started until the only has become locally available.
00:11:26 [W] Even if some most of the content won't be used on contain a startup.
00:11:28 [W] as shown in the diagram
00:11:31 [W] illya blob is defined as a turbo optionally plus compression.
00:11:38 [W] This means we need to scan the entire blob even for extracting single file entry.
00:11:47 [W] If the blob is Jeep compressed, it's not sick of all anymore and we cannot extract it empowerus Lon. We need to scan the blob from the top
00:12:03 [W] Initially because of them we need to wait long time for the poor and the extraction completion or containerd startup.
00:12:13 [W] It starts with the snap shooter is a non grata project of continuity continuity is a conditional runtime project in cncf which is also used by Daka.
00:12:30 [W] Storageos it snap shorter is a plug-in for containerd E which provides lazy poor functionality for continuity and Lady pole here means containerd the doesn't download the entire image on probation
00:12:46 [W] But fetch if necessary chunks of contents on demand.
00:12:50 [W] It means we can start continuous before the entire image content being locally available. So we can speed up the contrast startup performance lazy people in starts this top shoulder
00:13:07 [W] Live ologies storageos image by Google which is standard compliant so we can later pull images from standard containerd Registries including Docker hub.
00:13:20 [W] Let's do the Demo First i ball python 3.7 image from Dhaka hop and run print hello world in the continent with continuity in a very normal way.
00:13:40 [W] The image size is around three hundred and thirty eight megabytes on the registry.
00:13:48 [W] So pull Dex accordingly.
00:13:48 [W] We need to wait for poor long time and if the image takes one gigabyte or to yugabyte to a larger we need to wait for longer and longer.
00:14:01 [W] it's called cold start problem. In this case. The people talk about solid two seconds.
00:14:08 [W] Next I literally pull surgery date formatted python image from Docker Hub. In this case. The people took about 7.2 seconds.
00:14:24 [W] It's a surgery date format image but not squashed.
00:14:31 [W] Wanted to is lost this speeding up is the power of legible.
00:14:42 [W] I'm pulling this image in Tokyo, and if you are in different locations, you should get different results.
00:14:44 [W] For example in the benchmarking results in Oregon, which I will talk about later the time to take for lazy people. It's shorter.
00:14:52 [W] So how did you put it provided star DT snapshot that leverages storageos that image which is compatible to the current or ci/cd Oka image specs which means the started the image
00:15:11 [W] Can be lazily pulled from standard Registries and it can also be run by Legacy run times. But in this case not lazily prude.
00:15:21 [W] In the following diagram a registry is shown on the left side in the node is shown on the right side on the Node star Jesus snapshot.
00:15:36 [W] It's plugged into containerd e 4 continents spawned by containerd e storageos a snapshot amount. The containers route ofs snapshots as Hugh's on Mount most of the layer content or not
00:15:49 [W] Unloaded it instead started a snap shorter lazily downloads file content access to by continents on demand from the standard registry.
00:16:01 [W] Again started at images are complaint to OC a talker.
00:16:12 [W] So Legacy runtimes also can pull and run it from Registries again, but in this case not Leslie and started it snap shorter itself is implemented as a remote snapshot a
00:16:22 [W] And remote snap shorter is a type of plug-in of continuity.
00:16:28 [W] Containerd e allows remote snap shoulders to remote remount containerd Wordly FS Snapshot from remote tour to containers on the Node. So you can also Implement your own remote
00:16:43 [W] Shorter if you want to use remote towards other than registry.
00:16:48 [W] So what is targeted Sardis? It is an archive or compression format. Its proposed by Google C lfs project.
00:17:06 [W] Sarge is it stands for SQL boasts stickable Target it so it's speakable, but still valid charge is it?
00:17:15 [W] So it's usable as a valid oci Docker image layer.
00:17:21 [W] And entries and can be extracted separately.
00:17:31 [W] So it gently can be fetched separately from Registries using HTTP when you request.
00:17:35 [W] The standard Registries optionally but I think most of Registries and support HTTP range request so we can download blob content per file entry on demand which enables us lazy image bullying.
00:17:52 [W] of the shown in the following diagram the normal third you that Leah is not see couple and we need to scan the entire blob even forgetting single entry on the other hand sarge is it is
00:18:08 [W] Surely the concatenation of gzip compressed file entries.
00:18:14 [W] This is still valid gzip so we can decompress it in file or chunk granularity and it contains an index called Toc at the
00:18:28 [W] all of the studies that blob so we can get the offset information of each entry contained in the Sturgis to probe Toc also contains metadata of all files stored in
00:18:43 [W] The study that archived so we can mount this layer without seeing each the header of each file.
00:18:51 [W] But network-related overhead can't be ignored for only one fetching with targeted, especially on slow networking environment.
00:19:06 [W] Because the read access to a file on storageos, it induces downloading that file entry from the registry.
00:19:17 [W] he started it neighbors to prefetch files that likely accessed during runtime and we call these files as prioritized files and file system can perfetct and
00:19:33 [W] British with these files with a single HDD boob we create a strange request or mount.
00:19:40 [W] So we can access this prioritized files locally as shown in the diagram.
00:19:54 [W] You study that allows to group file entries based on the priority.
00:20:02 [W] Let's say we know the filed marked with red boundary is likely accessed.
00:20:04 [W] So prioritize file during runtime and he started indicate the this information about likely access.
00:20:11 [W] Files of the order of fire entries when storageos snapshot amount this layer the files marked with red boundary or proceeded by a single HTTP
00:20:27 [W] Injury kissed and Precast other files files marked with Green Boundary also downloaded aggressively in the background.
00:20:36 [W] And leveraging E30. Is it CLL converted by the project?
00:20:47 [W] Provides workloads based optimization just every countenance built with purpose and work roads are defined in the dockerfile with the entry point user info Etc.
00:21:03 [W] Then stored in the image the serial converter runs provided image in a sandbox environment and profiles all file accesses and it regards these access
00:21:18 [W] Cells are also likely accessed during runtime.
00:21:24 [W] So these forests are prioritized files in this Target in storageos.
00:21:33 [W] Nope. Shorter will prefetch and Progressive with files where Mount Steve E30 that image.
00:21:38 [W] As shown in the diagram the original image is shown on the left side and this contains workloads information.
00:21:51 [W] So entry point commands user cetera and the converter command Branch this image in sandbox and profiles file accesses and generate East Ajit it again
00:22:03 [W] When stars if it stops short amount this image, these accessed files are British and British breakfast in Precast so we can access these files locally.
00:22:16 [W] And some benchmarking results with storageos snapshot it it measures the containerd startup time which includes pulling down image from Docker Hub and for luggage containers running
00:22:33 [W] Clint Hurdle World program in the container for Server contains it wait for the reading it so it waits until up and running email message. It's printed from the container.
00:22:47 [W] This method is based on hello bench and we took 95 percentile of 100 operations.
00:22:57 [W] In the be used easy to Oracle instance as the host and Docker have at the registry.
00:23:06 [W] and in Python 3 .7 the time to take for post argit, it's shorter than the other see images because continuity with storageos snapshot the only pulls image metadata and
00:23:27 [W] Sergey that index files but the wrong performance is slower than the you see when we use ether G's at on the other hand runtime performance drawback is mitigated compared to storageos
00:23:42 [W] It but the time to take for creating container is longer the sarge is it because during the containerd creation storageos snapshot a waits for the oppressed with compression?
00:23:56 [W] In GCC two point nine point two point zero lazy people also shortened the time to take for probation in both of starches that and ethology that cases for
00:24:17 [W] summation run takes longer even with authority that it is because startup performance compiles hello world C program, but the source code isn't included in the image,
00:24:32 [W] But provided at runtime by mounting the source code directory currently the Project's optimization command doesn't support mounting external directory.
00:24:46 [W] So workloads to mediation current profile the file accesses during this workloads.
00:24:52 [W] But this should be should be improved by adding volume functionality to the optimization command and enabling it to profile file accesses.
00:25:04 [W] even with such a runtime volumes
00:25:07 [W] and for glassfish 4 point 1 which is a server image and least people also shortened the time to take for put operation in both storageos
00:25:28 [W] Jesus and Easter Jesus cases, but such is it takes longer for the server initial rotation and it's targeted image mitigates this for ethology that image,
00:25:43 [W] Okay, waiting for the perfect completion during create occurs again.
00:25:49 [W] Put operation is a fundamental operation in containerd life cycle.
00:25:59 [W] So the performance Improvement will be beneficial for many kinds of workloads.
00:26:05 [W] But I be some of them here. The first one is speeding up based image Distribution on image build.
00:26:14 [W] It's a bit silly for base image in Dev stages in multi-stage build because these images aren't included in the result image.
00:26:30 [W] The second one is spinning up deaf pipeline or building testing environment.
00:26:35 [W] Studied it was invented through the discussion in go Community for speeding up the Builder image distribution in the build system.
00:26:47 [W] The third one is sharing large scientific.
00:26:54 [W] thought we're stuck. For example Mao Frameworks. For example, May Frameworks tend to be loads.
00:27:05 [W] can be over than one yugabyte.
00:27:06 [W] And the final one in the list is improving cold start performance for example intervals environment.
00:27:17 [W] Of course, we need more investigation here for finding out. What is the word bottleneck of constant problem.
00:27:24 [W] And but please be careful that storageos snapshot project is still in our stage.
00:27:35 [W] It needs more performance Improvement for the implementation and visible performance seems to be affected by the internet condition and instance a location Etc.
00:27:50 [W] And also be careful for the Ford trainers until the layer contains a fully cached on nose.
00:28:00 [W] And of course feedbacks and suggestions for use cases and implementations Etc are always welcome.
00:28:11 [W] There are also other or cri-o alternative lazy image digital distribution in the community and this some of them first one is slacker.
00:28:32 [W] It uses NFS infra folder distribution of Wordly face snapshots of containers and Registries are used for sharing snapshot IDs among host.
00:28:44 [W] And serve him if he's is a field file system by turn for sharing high-energy physics software and worldwide infrastructure.
00:28:56 [W] And software stack can be mounted and lazily downloaded from servian FS repository via http.
00:29:06 [W] Dave implementation of containerd he's remote snapshot a based on survey May face again remote stamp shorter is a plug-in for containerd E like storageos a snapshot but
00:29:23 [W] One can use any file system and store store as buckets.
00:29:29 [W] And there is an ongoing discussion towards integration of term vmfs and Portman.
00:29:38 [W] And five grain is proposed by Akira yasuda entity.
00:29:50 [W] It is an OC. I complained image format, but uses continuity manifest as the years an image can be mounted in files are proved. Lazily. And each file
00:30:01 [W] Is treated as a Content addressable blob. So the application in file granularity is also in the scope.
00:30:12 [W] And yeah, then ongoing discussion towards OC IV to its proposed by Alexis.
00:30:28 [W] Awry Susie. Oci V2 is not official spec yet. But brainstorm is in progress.
00:30:32 [W] In the discussion, they see fit support amount of over multiple file system are also included.
00:30:42 [W] And finally cri-o FS priming for fuse overlay FS.
00:30:55 [W] It is proposed by Giuseppe scriven Red Hat. It is a plugging of use overlay faith for mounting storageos 8 layers.
00:31:01 [W] Finally we cap pull is one of the time consuming steps in containerd life cycle storageos knob shorter Newcastle project in containerd E is trying to solve it by lazy pulling images
00:31:19 [W] deleting started at image by Google
00:31:22 [W] eight standard compliant so it can be pushed to and it can be lately pulled from standard Registries and workloads based runtime optimization it also
00:31:37 [W] Held with ethology. There are also other OCR alternative image distribution strategies in containerd ecosystem.
00:31:47 [W] And of course feedbacks and suggestions are always welcome.
00:31:53 [W] You can access to our apple on G top.com thrust containerd e / storageos snap shoulder.
00:32:00 [W] And thanks.
00:32:20 [W0] Hi, I'm good.
00:32:24 [W0] And yeah, I'm a speaker of this presentation in a I'm gonna answer four questions posted.
00:32:40 [W0] unfair for questions posted We R QA with speaker chatbots and okay, and the first one
00:32:48 [W0] chatbots and
00:32:49 [W0] Okay, and the first one is yeah, there's some people who ask about faults trans issue.
00:33:00 [W0] it is very good answer and I'll post the response on the
00:33:12 [W0] Chatbots, okay.
00:33:17 [W0] Yeah, one of the question was yell.
00:33:30 [W0] We have seen some down times in Dhaka having our private Registries.
00:33:36 [W0] So if we use targeted we might be in a bad situation when registry goes down it it's currently learning pods may go in a coder bus requiring a file system layer not existing in the
00:33:45 [W0] So my face is new types of runtime failure.
00:33:54 [W0] Yeah, this is this is actually a very good question and there is
00:33:58 [W0] Also another question, please elaborate about the fort to Radiance of surgit snyk shooter.
00:34:08 [W0] Yeah afford to reruns is actually is one of the major concerns in Star DT snapshot of project and what it started snapshot actually aggressively.
00:34:23 [W0] Loose the entire layer in background and during runtime.
00:34:32 [W0] So one thoroughly fully cast on load.
00:34:37 [W0] You don't need to worry about that. And as such is it also has prefetching functionality.
00:34:46 [W0] So the code bus Perfection at the code path a prediction is correct. You don't need to worry about that. But yeah.
00:34:54 [W0] and I you can also use a state of directories shown on the roadway surface in the container for checking the live - of the rotor a phase or
00:35:09 [W0] Start seated snapshot state in state director. He's en route with is there some informations and about connections between the root of
00:35:25 [W0] Is saying that you can use it for leave - checking for to leave - and of course keep the fourth story last issue is
00:35:41 [W0] Under the discussion. So contributions are always welcome if you have any good ideas for yet this for Trans issue
00:35:57 [W0] for yeah this for Trans issue and
00:35:58 [W0] and okay.
00:36:02 [W0] let's go to
00:36:06 [W0] Are the cushions?
00:36:12 [W0] Yeah, and I do we yeah, one of the question I got is about the configuration of started snapshot a and okay.
00:36:24 [W0] I'll also answered this question in public mode.
00:36:39 [W0] The question was high and do we need to configure surges and srg that plugins both and the answer is no because started as nakshatra support
00:36:46 [W0] Of started and Easter these images. So once you run the started demoing on your node and Prague it into containerd e
00:37:02 [W0] They did he pull on started image and ethology to image from registry.
00:37:10 [W0] and
00:37:20 [W0] Okay, and yeah are the question was yeah.
00:37:28 [W0] The majority on about this project. How old is this project?
00:37:34 [W0] Yeah, as I mentioned in the presentation, it's still a novice stage.
00:37:41 [W0] And yeah.
00:37:43 [W0] and any
00:37:49 [W0] suggestion for use cases and using your touring this snapshot of our out on your environment is very welcome for us. And yeah and any types of
00:38:05 [W0] So always work on.
00:38:08 [W0] and
00:38:12 [W0] okay, and
00:38:18 [W0] let's go to other locations. Mmm.
00:38:29 [W0] Yeah, okay.
00:38:58 [W0] I got one of the creation about as I use cases of started.
00:38:59 [W0] It's not be shorter.
00:39:00 [W0] Yeah, the question is how reliable is this really easy process in a ci/cd flow in any other any figures about the Improvement
00:39:15 [W0] Are there no benchmarking or majoring for?
00:39:22 [W0] Yeah application of stars. It is not suit our own ci/cd pipeline. But yeah, so yeah, so
00:39:39 [W0] if you tried if you try or when you try use study snapshot on your ci/cd environment here. We are very big on for how the performance even is improved.
00:39:55 [W0] Government, and yeah, but actually just started image and he just started it
00:40:10 [W0] Um, which invented started it started from the discussion in Golan Community to improve their development environment.
00:40:25 [W0] So yeah, so I believe the ci/cd I'm sorry snyk snapshot
00:40:40 [W0] improve the performance even on even on ci/cd environment and
00:40:50 [W0] Yeah.
00:40:54 [W0] Okay any other questions?
00:41:11 [W0] Okay. Any one of the question I got is any demo to create started it or you started image.
00:41:28 [W0] You can find it on the GitHub repository of stars ETF snapshot.
00:41:36 [W0] and if if you want
00:41:45 [W0] Yeah, if you want I of course I can show you the demo.
00:41:50 [W0] after the presentation whenever yeah.
00:41:57 [W0] Okay.
00:42:49 [W0] Hmm, I think
00:43:01 [W0] okay.
00:43:08 [W0] Okay. Um, I want another I got an another question.
00:43:26 [W0] Can I you can I only use storageos that in a frame mode without registry?
00:43:30 [W0] The image layer in background and during runtime.
00:43:49 [W0] So once the layer fully cast on the Node you can use the image even if your machine was node become.
00:44:01 [W0] of line
00:44:03 [W0] in a
00:44:11 [W0] okay.
00:44:20 [W0] and next
00:45:13 [W0] okay.
00:45:24 [W0] Another question is could I uh, could I use it
00:45:25 [W0] On minikube or micro K8 Dev environment.
00:45:33 [W0] Would it make sense?
00:45:36 [W0] Hmm?
00:45:37 [W0] Yeah, I think.
00:45:48 [W0] You can use you can use it as long as you have.
00:46:01 [W0] Yeah, you have enough version of continuity on your node.
00:46:08 [W0] and other questions
00:46:53 [W0] and other questions
00:46:55 [W0] Okay, it's time to end the session and thank you very much for watching my presentation.
00:47:39 [W0] And yeah, if you have any questions, please ask me anything on slack channel of cubicle.
00:47:48 [W0] Yeah.
00:47:49 [W0] Thank you very much.

Transcription for wordly [W0]

00:01:28 [W] Hi, I'm going to Canada from.
00:01:33 [W] Hi, I'm going to grab a from entity.
00:06:47 [W] I'm mainly working in the continual runtime and a main channel of surgit snapshot a project which is known cause of project of contrary.
00:06:53 [W] Today, I'm going to talk about speeding up containerd startup by lazy pulling images.
00:07:01 [W] First of all begin to read the summary of this talk poo is one of the time consuming steps in containerless Telco third digit snapshot new gossip project of containerd e is trying to
00:07:16 [W] We'll beat by lazy playing images level eating storageos image by Google for the runtime optimization is also held with an extended version of started which is called Easter did it.
00:07:32 [W] The diagram shows the containerd startup performance for three types of person 3.7 images.
00:07:45 [W] It pulls the image from Dhaka half too easy to Oregon and once print hello world Thursday the reformatted python image with sturdy the snap shorter reduces the time to take
00:07:56 [W] Operation by legible, but run takes longer than the Legacy image. And if Saudi date for moderate image mitigate the runtime performance drawback with the
00:08:11 [W] Communication and we will discuss in more detail with the following slides.
00:08:17 [W] There are also other on cri-o alternative image distribution strategies in containerd ecosystem.
00:08:27 [W] So I'll believe free introduced some of them in this talk.
00:08:30 [W] First of all, don't you think that pull is time consuming? As you know, Paul is one of the most primitive operation for controllers. It's very general work role that we pull
00:08:48 [W] Problem registry the numpad can run them or knows.
00:08:53 [W] But unfortunately every that showed that pulling packages account for 76% of countenance that time but only six point four percent of that data is read.
00:09:07 [W] Of course some work runs along but we are not enough actually.
00:09:14 [W] We can catch images on those. But the first time of the pull cord cord start is still slow and we can also try to minimize image size, but not
00:09:29 [W] All images easily minimize Apple.
00:09:36 [W] Let's say we cannot avoid using some large base images including language runtimes Frameworks etcetera.
00:09:42 [W] Before taking a deeper look at the poop of math problem. Let's briefly recap. The oci Dockers bags for image distribution.
00:09:57 [W] In the specs a container is defined as a set of layers in images spec. It defines layers and metadata and emitter later.
00:10:13 [W] Yeah image benefit Etc or contained and
00:10:17 [W] Lear is defined as Terror and optionally path compression and brutally FF can be composed by merging layers.
00:10:28 [W] in distribution spec
00:10:31 [W] It defines HTTP API of registry and Leah can be fetched as a blob named with a Content addressable Digest.
00:10:44 [W] And register is optionally support HTTP when you request which enables us to fetch the Purser ranges in a blob on the registry.
00:10:56 [W] When it comes to Performance, there is a problem on the current oci Dockers picks. A container is a set of Turbo layers. So a container
00:11:16 [W] Can be started until the only has become locally available.
00:11:26 [W] Even if some most of the content won't be used on contain a startup.
00:11:28 [W] as shown in the diagram
00:11:31 [W] illya blob is defined as a turbo optionally plus compression.
00:11:38 [W] This means we need to scan the entire blob even for extracting single file entry.
00:11:47 [W] If the blob is Jeep compressed, it's not sick of all anymore and we cannot extract it empowerus Lon. We need to scan the blob from the top
00:12:03 [W] Initially because of them we need to wait long time for the poor and the extraction completion or containerd startup.
00:12:13 [W] It starts with the snap shooter is a non grata project of continuity continuity is a conditional runtime project in cncf which is also used by Daka.
00:12:30 [W] Storageos it snap shorter is a plug-in for containerd E which provides lazy poor functionality for continuity and Lady pole here means containerd the doesn't download the entire image on probation
00:12:46 [W] But fetch if necessary chunks of contents on demand.
00:12:50 [W] It means we can start continuous before the entire image content being locally available. So we can speed up the contrast startup performance lazy people in starts this top shoulder
00:13:07 [W] Live ologies storageos image by Google which is standard compliant so we can later pull images from standard containerd Registries including Docker hub.
00:13:20 [W] Let's do the Demo First i ball python 3.7 image from Dhaka hop and run print hello world in the continent with continuity in a very normal way.
00:13:40 [W] The image size is around three hundred and thirty eight megabytes on the registry.
00:13:48 [W] So pull Dex accordingly.
00:13:48 [W] We need to wait for poor long time and if the image takes one gigabyte or to yugabyte to a larger we need to wait for longer and longer.
00:14:01 [W] it's called cold start problem. In this case. The people talk about solid two seconds.
00:14:08 [W] Next I literally pull surgery date formatted python image from Docker Hub. In this case. The people took about 7.2 seconds.
00:14:24 [W] It's a surgery date format image but not squashed.
00:14:31 [W] Wanted to is lost this speeding up is the power of legible.
00:14:42 [W] I'm pulling this image in Tokyo, and if you are in different locations, you should get different results.
00:14:44 [W] For example in the benchmarking results in Oregon, which I will talk about later the time to take for lazy people. It's shorter.
00:14:52 [W] So how did you put it provided star DT snapshot that leverages storageos that image which is compatible to the current or ci/cd Oka image specs which means the started the image
00:15:11 [W] Can be lazily pulled from standard Registries and it can also be run by Legacy run times. But in this case not lazily prude.
00:15:21 [W] In the following diagram a registry is shown on the left side in the node is shown on the right side on the Node star Jesus snapshot.
00:15:36 [W] It's plugged into containerd e 4 continents spawned by containerd e storageos a snapshot amount. The containers route ofs snapshots as Hugh's on Mount most of the layer content or not
00:15:49 [W] Unloaded it instead started a snap shorter lazily downloads file content access to by continents on demand from the standard registry.
00:16:01 [W] Again started at images are complaint to OC a talker.
00:16:12 [W] So Legacy runtimes also can pull and run it from Registries again, but in this case not Leslie and started it snap shorter itself is implemented as a remote snapshot a
00:16:22 [W] And remote snap shorter is a type of plug-in of continuity.
00:16:28 [W] Containerd e allows remote snap shoulders to remote remount containerd Wordly FS Snapshot from remote tour to containers on the Node. So you can also Implement your own remote
00:16:43 [W] Shorter if you want to use remote towards other than registry.
00:16:48 [W] So what is targeted Sardis? It is an archive or compression format. Its proposed by Google C lfs project.
00:17:06 [W] Sarge is it stands for SQL boasts stickable Target it so it's speakable, but still valid charge is it?
00:17:15 [W] So it's usable as a valid oci Docker image layer.
00:17:21 [W] And entries and can be extracted separately.
00:17:31 [W] So it gently can be fetched separately from Registries using HTTP when you request.
00:17:35 [W] The standard Registries optionally but I think most of Registries and support HTTP range request so we can download blob content per file entry on demand which enables us lazy image bullying.
00:17:52 [W] of the shown in the following diagram the normal third you that Leah is not see couple and we need to scan the entire blob even forgetting single entry on the other hand sarge is it is
00:18:08 [W] Surely the concatenation of gzip compressed file entries.
00:18:14 [W] This is still valid gzip so we can decompress it in file or chunk granularity and it contains an index called Toc at the
00:18:28 [W] all of the studies that blob so we can get the offset information of each entry contained in the Sturgis to probe Toc also contains metadata of all files stored in
00:18:43 [W] The study that archived so we can mount this layer without seeing each the header of each file.
00:18:51 [W] But network-related overhead can't be ignored for only one fetching with targeted, especially on slow networking environment.
00:19:06 [W] Because the read access to a file on storageos, it induces downloading that file entry from the registry.
00:19:17 [W] he started it neighbors to prefetch files that likely accessed during runtime and we call these files as prioritized files and file system can perfetct and
00:19:33 [W] British with these files with a single HDD boob we create a strange request or mount.
00:19:40 [W] So we can access this prioritized files locally as shown in the diagram.
00:19:54 [W] You study that allows to group file entries based on the priority.
00:20:02 [W] Let's say we know the filed marked with red boundary is likely accessed.
00:20:04 [W] So prioritize file during runtime and he started indicate the this information about likely access.
00:20:11 [W] Files of the order of fire entries when storageos snapshot amount this layer the files marked with red boundary or proceeded by a single HTTP
00:20:27 [W] Injury kissed and Precast other files files marked with Green Boundary also downloaded aggressively in the background.
00:20:36 [W] And leveraging E30. Is it CLL converted by the project?
00:20:47 [W] Provides workloads based optimization just every countenance built with purpose and work roads are defined in the dockerfile with the entry point user info Etc.
00:21:03 [W] Then stored in the image the serial converter runs provided image in a sandbox environment and profiles all file accesses and it regards these access
00:21:18 [W] Cells are also likely accessed during runtime.
00:21:24 [W] So these forests are prioritized files in this Target in storageos.
00:21:33 [W] Nope. Shorter will prefetch and Progressive with files where Mount Steve E30 that image.
00:21:38 [W] As shown in the diagram the original image is shown on the left side and this contains workloads information.
00:21:51 [W] So entry point commands user cetera and the converter command Branch this image in sandbox and profiles file accesses and generate East Ajit it again
00:22:03 [W] When stars if it stops short amount this image, these accessed files are British and British breakfast in Precast so we can access these files locally.
00:22:16 [W] And some benchmarking results with storageos snapshot it it measures the containerd startup time which includes pulling down image from Docker Hub and for luggage containers running
00:22:33 [W] Clint Hurdle World program in the container for Server contains it wait for the reading it so it waits until up and running email message. It's printed from the container.
00:22:47 [W] This method is based on hello bench and we took 95 percentile of 100 operations.
00:22:57 [W] In the be used easy to Oracle instance as the host and Docker have at the registry.
00:23:06 [W] and in Python 3 .7 the time to take for post argit, it's shorter than the other see images because continuity with storageos snapshot the only pulls image metadata and
00:23:27 [W] Sergey that index files but the wrong performance is slower than the you see when we use ether G's at on the other hand runtime performance drawback is mitigated compared to storageos
00:23:42 [W] It but the time to take for creating container is longer the sarge is it because during the containerd creation storageos snapshot a waits for the oppressed with compression?
00:23:56 [W] In GCC two point nine point two point zero lazy people also shortened the time to take for probation in both of starches that and ethology that cases for
00:24:17 [W] summation run takes longer even with authority that it is because startup performance compiles hello world C program, but the source code isn't included in the image,
00:24:32 [W] But provided at runtime by mounting the source code directory currently the Project's optimization command doesn't support mounting external directory.
00:24:46 [W] So workloads to mediation current profile the file accesses during this workloads.
00:24:52 [W] But this should be should be improved by adding volume functionality to the optimization command and enabling it to profile file accesses.
00:25:04 [W] even with such a runtime volumes
00:25:07 [W] and for glassfish 4 point 1 which is a server image and least people also shortened the time to take for put operation in both storageos
00:25:28 [W] Jesus and Easter Jesus cases, but such is it takes longer for the server initial rotation and it's targeted image mitigates this for ethology that image,
00:25:43 [W] Okay, waiting for the perfect completion during create occurs again.
00:25:49 [W] Put operation is a fundamental operation in containerd life cycle.
00:25:59 [W] So the performance Improvement will be beneficial for many kinds of workloads.
00:26:05 [W] But I be some of them here. The first one is speeding up based image Distribution on image build.
00:26:14 [W] It's a bit silly for base image in Dev stages in multi-stage build because these images aren't included in the result image.
00:26:30 [W] The second one is spinning up deaf pipeline or building testing environment.
00:26:35 [W] Studied it was invented through the discussion in go Community for speeding up the Builder image distribution in the build system.
00:26:47 [W] The third one is sharing large scientific.
00:26:54 [W] thought we're stuck. For example Mao Frameworks. For example, May Frameworks tend to be loads.
00:27:05 [W] can be over than one yugabyte.
00:27:06 [W] And the final one in the list is improving cold start performance for example intervals environment.
00:27:17 [W] Of course, we need more investigation here for finding out. What is the word bottleneck of constant problem.
00:27:24 [W] And but please be careful that storageos snapshot project is still in our stage.
00:27:35 [W] It needs more performance Improvement for the implementation and visible performance seems to be affected by the internet condition and instance a location Etc.
00:27:50 [W] And also be careful for the Ford trainers until the layer contains a fully cached on nose.
00:28:00 [W] And of course feedbacks and suggestions for use cases and implementations Etc are always welcome.
00:28:11 [W] There are also other or cri-o alternative lazy image digital distribution in the community and this some of them first one is slacker.
00:28:32 [W] It uses NFS infra folder distribution of Wordly face snapshots of containers and Registries are used for sharing snapshot IDs among host.
00:28:44 [W] And serve him if he's is a field file system by turn for sharing high-energy physics software and worldwide infrastructure.
00:28:56 [W] And software stack can be mounted and lazily downloaded from servian FS repository via http.
00:29:06 [W] Dave implementation of containerd he's remote snapshot a based on survey May face again remote stamp shorter is a plug-in for containerd E like storageos a snapshot but
00:29:23 [W] One can use any file system and store store as buckets.
00:29:29 [W] And there is an ongoing discussion towards integration of term vmfs and Portman.
00:29:38 [W] And five grain is proposed by Akira yasuda entity.
00:29:50 [W] It is an OC. I complained image format, but uses continuity manifest as the years an image can be mounted in files are proved. Lazily. And each file
00:30:01 [W] Is treated as a Content addressable blob. So the application in file granularity is also in the scope.
00:30:12 [W] And yeah, then ongoing discussion towards OC IV to its proposed by Alexis.
00:30:28 [W] Awry Susie. Oci V2 is not official spec yet. But brainstorm is in progress.
00:30:32 [W] In the discussion, they see fit support amount of over multiple file system are also included.
00:30:42 [W] And finally cri-o FS priming for fuse overlay FS.
00:30:55 [W] It is proposed by Giuseppe scriven Red Hat. It is a plugging of use overlay faith for mounting storageos 8 layers.
00:31:01 [W] Finally we cap pull is one of the time consuming steps in containerd life cycle storageos knob shorter Newcastle project in containerd E is trying to solve it by lazy pulling images
00:31:19 [W] deleting started at image by Google
00:31:22 [W] eight standard compliant so it can be pushed to and it can be lately pulled from standard Registries and workloads based runtime optimization it also
00:31:37 [W] Held with ethology. There are also other OCR alternative image distribution strategies in containerd ecosystem.
00:31:47 [W] And of course feedbacks and suggestions are always welcome.
00:31:53 [W] You can access to our apple on G top.com thrust containerd e / storageos snap shoulder.
00:32:00 [W] And thanks.
00:32:20 [W0] Hi, I'm good.
00:32:24 [W0] And yeah, I'm a speaker of this presentation in a I'm gonna answer four questions posted.
00:32:40 [W0] unfair for questions posted We R QA with speaker chatbots and okay, and the first one
00:32:48 [W0] chatbots and
00:32:49 [W0] Okay, and the first one is yeah, there's some people who ask about faults trans issue.
00:33:00 [W0] it is very good answer and I'll post the response on the
00:33:12 [W0] Chatbots, okay.
00:33:17 [W0] Yeah, one of the question was yell.
00:33:30 [W0] We have seen some down times in Dhaka having our private Registries.
00:33:36 [W0] So if we use targeted we might be in a bad situation when registry goes down it it's currently learning pods may go in a coder bus requiring a file system layer not existing in the
00:33:45 [W0] So my face is new types of runtime failure.
00:33:54 [W0] Yeah, this is this is actually a very good question and there is
00:33:58 [W0] Also another question, please elaborate about the fort to Radiance of surgit snyk shooter.
00:34:08 [W0] Yeah afford to reruns is actually is one of the major concerns in Star DT snapshot of project and what it started snapshot actually aggressively.
00:34:23 [W0] Loose the entire layer in background and during runtime.
00:34:32 [W0] So one thoroughly fully cast on load.
00:34:37 [W0] You don't need to worry about that. And as such is it also has prefetching functionality.
00:34:46 [W0] So the code bus Perfection at the code path a prediction is correct. You don't need to worry about that. But yeah.
00:34:54 [W0] and I you can also use a state of directories shown on the roadway surface in the container for checking the live - of the rotor a phase or
00:35:09 [W0] Start seated snapshot state in state director. He's en route with is there some informations and about connections between the root of
00:35:25 [W0] Is saying that you can use it for leave - checking for to leave - and of course keep the fourth story last issue is
00:35:41 [W0] Under the discussion. So contributions are always welcome if you have any good ideas for yet this for Trans issue
00:35:57 [W0] for yeah this for Trans issue and
00:35:58 [W0] and okay.
00:36:02 [W0] let's go to
00:36:06 [W0] Are the cushions?
00:36:12 [W0] Yeah, and I do we yeah, one of the question I got is about the configuration of started snapshot a and okay.
00:36:24 [W0] I'll also answered this question in public mode.
00:36:39 [W0] The question was high and do we need to configure surges and srg that plugins both and the answer is no because started as nakshatra support
00:36:46 [W0] Of started and Easter these images. So once you run the started demoing on your node and Prague it into containerd e
00:37:02 [W0] They did he pull on started image and ethology to image from registry.
00:37:10 [W0] and
00:37:20 [W0] Okay, and yeah are the question was yeah.
00:37:28 [W0] The majority on about this project. How old is this project?
00:37:34 [W0] Yeah, as I mentioned in the presentation, it's still a novice stage.
00:37:41 [W0] And yeah.
00:37:43 [W0] and any
00:37:49 [W0] suggestion for use cases and using your touring this snapshot of our out on your environment is very welcome for us. And yeah and any types of
00:38:05 [W0] So always work on.
00:38:08 [W0] and
00:38:12 [W0] okay, and
00:38:18 [W0] let's go to other locations. Mmm.
00:38:29 [W0] Yeah, okay.
00:38:58 [W0] I got one of the creation about as I use cases of started.
00:38:59 [W0] It's not be shorter.
00:39:00 [W0] Yeah, the question is how reliable is this really easy process in a ci/cd flow in any other any figures about the Improvement
00:39:15 [W0] Are there no benchmarking or majoring for?
00:39:22 [W0] Yeah application of stars. It is not suit our own ci/cd pipeline. But yeah, so yeah, so
00:39:39 [W0] if you tried if you try or when you try use study snapshot on your ci/cd environment here. We are very big on for how the performance even is improved.
00:39:55 [W0] Government, and yeah, but actually just started image and he just started it
00:40:10 [W0] Um, which invented started it started from the discussion in Golan Community to improve their development environment.
00:40:25 [W0] So yeah, so I believe the ci/cd I'm sorry snyk snapshot
00:40:40 [W0] improve the performance even on even on ci/cd environment and
00:40:50 [W0] Yeah.
00:40:54 [W0] Okay any other questions?
00:41:11 [W0] Okay. Any one of the question I got is any demo to create started it or you started image.
00:41:28 [W0] You can find it on the GitHub repository of stars ETF snapshot.
00:41:36 [W0] and if if you want
00:41:45 [W0] Yeah, if you want I of course I can show you the demo.
00:41:50 [W0] after the presentation whenever yeah.
00:41:57 [W0] Okay.
00:42:49 [W0] Hmm, I think
00:43:01 [W0] okay.
00:43:08 [W0] Okay. Um, I want another I got an another question.
00:43:26 [W0] Can I you can I only use storageos that in a frame mode without registry?
00:43:30 [W0] The image layer in background and during runtime.
00:43:49 [W0] So once the layer fully cast on the Node you can use the image even if your machine was node become.
00:44:01 [W0] of line
00:44:03 [W0] in a
00:44:11 [W0] okay.
00:44:20 [W0] and next
00:45:13 [W0] okay.
00:45:24 [W0] Another question is could I uh, could I use it
00:45:25 [W0] On minikube or micro K8 Dev environment.
00:45:33 [W0] Would it make sense?
00:45:36 [W0] Hmm?
00:45:37 [W0] Yeah, I think.
00:45:48 [W0] You can use you can use it as long as you have.
00:46:01 [W0] Yeah, you have enough version of continuity on your node.
00:46:08 [W0] and other questions
00:46:53 [W0] and other questions
00:46:55 [W0] Okay, it's time to end the session and thank you very much for watching my presentation.
00:47:39 [W0] And yeah, if you have any questions, please ask me anything on slack channel of cubicle.
00:47:48 [W0] Yeah.
00:47:49 [W0] Thank you very much.
