The Past, Present, and Future of Cloud Native API Gateways: REEF-4833 - events@cncf.io - Thursday, August 20, 2020 7:35 AM - 49 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:04:44 [W] hi everyone, and welcome to the past present and future of cloud native API gateways my
00:04:57 [W] Hi everyone, and welcome to the past present and future of cloud native API gateways. My name is Daniel Bryan down the product architect of data and I'll be the presenter for this session.
00:09:52 [W] I always like to do a high-level tldr for my talks going to set the direction where we're going to go and provide some key takeaways early on edge gateways of undergone a series of Evolutions driven by architecture when I say h gateways. I mean the gateways of the edge of your data center that are getting traffic from
00:10:09 [W] I mean the gateways at the edge of your data center that are getting traffic from users to your back-end systems over the past 20 or so years architectures have clearly changed adopting microservices in Cuba net. He's moving to that cloud native way of working.
00:10:20 [W] Changes the architecture microservices and functions, but also the work flow changes to and therefore you need to choose your Cloud API Gateway solution intentionally and the kind of hidden message in this talk will is it's not just about the cloud native API Gateway.
00:10:36 [W] Part of your platform the change in architecture the change in workflow dictate different requirements to our platform components.
00:10:48 [W] So you need to think about the API Gateway.
00:10:50 [W] You also need to think about the way you do continuous delivery and The Way You observe your system to but this talk is primarily focused on on the Ingress Gateway.
00:10:57 [W] This is me at Daniel Bryan UK on GitHub Twitter and so forth.
00:11:03 [W] I work at the product architect of data wire.
00:11:07 [W] I also do a lot of work in the Java space right for him folk. You've done a book with my buddy.
00:11:14 [W] Abraham were in prayers. You can find me on Twitter and their data where slack and on the kubernative slack. If you want to chat. Please do reach out to me.
00:11:20 [W] when I say the edge in this talk, I'm talking about the boundary between your data center and your users Edge is one of those kind of overloaded terms, but this is what I mean when I'm talking about Edge in this talk.
00:11:27 [W] Now the thesis as I mentioned at the tldr is that the evolution of the edge has been driven by application architecture over the past 25 years or so.
00:11:39 [W] So think back to 1995.
00:11:42 [W] I was actually in high school here, but just getting into doing a bit of work on the side and I was loving job.
00:11:48 [W] I was in a lot of java j2ee Java monolithic applications back in the you know in the 90s. We weren't even sure if the web the web browser was going to be the delivery mechanism applets were there and a bunch of other things too, but fun.
00:11:57 [W] Thesis as I mentioned at the tldr is that the evolution of the edge has been driven by application architecture over the past 25 years or so.
00:12:07 [W] So think back to 1995.
00:12:07 [W] I was actually in high school here, but just getting into doing a bit of work on the side and I was loving Java.
00:12:08 [W] I was in a lot of java j2ee Java monolithic applications back in the you know in the 90s we weren't even sure if the web web browser was going to be the delivery mechanism applets were there and a bunch of other things too, but fundamentally it was a
00:12:13 [W] Client server type architecture with a database in the back end in front of these monolithic applications were Hardware load balancers. The primary target user was sysadmins.
00:12:16 [W] It wasn't developers.
00:12:17 [W] The purpose was mainly focused on high availability and scalability.
00:12:19 [W] You may have multiple things at the back and running and you would low bounce user traffic across them. And if one thing failed you route accordingly
00:12:20 [W] Back in the UN 2000s.
00:12:24 [W] This is similar architecture dotnet Java monolithic client-server approaches.
00:12:32 [W] This is when we started to see the rise of software proxy software Edge Gateway. So haproxy in 2001 nginx, Tim both doing fantastic work and the early 2000s.
00:12:42 [W] the software load balancer was still targeting sysadmins.
00:12:46 [W] It was kind of, you know pre devops telepresence really a thing back. Then purpose was still very much the same as the hardware load balancers.
00:12:49 [W] High scalability high availability and it offered very much the same features, but the beauty of being a software was it was more malleable. You could easily more easily configure it and it also is often cheaper to run. You didn't require dedicated Harbor any more to run the actual load balancer.
00:13:04 [W] Is when we started to see the rise of software proxy software Edge gateways haproxy in 2001 nginx Ting both doing fantastic work and in the early 2000s the software load balancer was still targeting sysadmins was kind of, you know pre devops
00:13:06 [W] 2005 time this is when I started my career just finished college or university Web 2.0 was all the rage as silly as it may seem now.
00:13:14 [W] This was massive.
00:13:24 [W] I did a lot of work in the e-commerce space lot of work with Google Maps to Ajax was a big thing. Anyone who talks about Ajax probably shows their age like me, but this was a really big thing it drove interactivity with the web which we hadn't seen before with the standard request and response
00:13:29 [W] Pre Ajax. It was all I make a request that get the response back and make another request.
00:13:36 [W] I got a whole HTML page back Ajax and the Excel xmlhttprequest object fundamentally changed all this we could make smaller calls and dynamically update our web page and this is the time was revolutionary.
00:13:49 [W] It did put more strain on the back end though no longer we doing one big request and response you are now doing the initial big request and response, but lots of smaller requests to fill in bits of the web page in the document.
00:14:00 [W] Dom dynamically, so this drove the rise of something called an application delivery controller ADC the primary target again, we're still sysadmin admins, but it was all about acceleration at the application Level so high availability.
00:14:14 [W] Offload tell LT LS offload as we say now lots of caching aggressively compression is zipping all the responses and and still doing some of that load balancing stuff to F5 nginx doing a lot of work in this space a big IP and things of course
00:14:30 [W] Nginx, which is quite interesting too. But these are the kind of primary to Harbor and software providers to be fair.
00:14:39 [W] There was many others as well.
00:14:42 [W] But these are the two I bumped into the most of my work in London 2010 time.
00:14:53 [W] This is the rise of the kind of I generation and the proliferation of apis, you know, there's been a lot of work with Google Maps lot of work with striping and so forth and this is when we started to see the API Gateway pop up, you know, the Target now is not only sysadmins at the
00:14:59 [W] But it was API developers to Kang started popping up mashape and so forth and there was an ecosystem developing around these apis you could we monetize these apis and this Gateway was very much focused was evolving around this concept
00:15:15 [W] More the layer 7 protocol.
00:15:22 [W] Typically, this was HTTP, but it was looking at the HTTP application Level protocol to do interesting things based on HTTP headers with route accordingly pre this it was mainly layer for IPs and so forth.
00:15:33 [W] Deaf portals analytics.
00:15:40 [W] How do you monetize and this is really the first generation of when we started to see this kind of hybrid sysadmin and developer focused product at The Edge 2015.
00:15:50 [W] This is when we started to see some of the challenges with scaling particular like rails apps. I did a lot of work rails love rails and but you know Twitter in particular was struggling with a Ruby on Rails app.
00:16:02 [W] I was doing a lot of work Consulting at the time and seeing similar things rails was fantastic to get you up and running quickly, but as your system
00:16:04 [W] Took more load.
00:16:08 [W] It was actually quite a challenging to scalar certain point and this is when the rise we saw, you know, the monolith kind of being becoming a router and pulling out these mini Services, as you know, people weren't calling it microservices perhaps at this time, but there are pulling out Services. They had an application delivery
00:16:20 [W] Doing you know TLS offload and doing cashing up front but the monolith still doing a chunk of work typically off and so forth, but it was routing out to Individual Services to sort of fill in bits and pieces of the requests being sent back to the user.
00:16:35 [W] Services to sort of fill in bits and pieces of the requests being sent back to the user.
00:16:44 [W] This is when you see the rise of the second generation of API Gateway, it takes some of the routing and cross-functional concerns away from the the monolith the mini lift as we saying here and pulls them into a single location before
00:16:49 [W] Every piece of traffic was going through the model S the you know, Twitter's monorail it was making routing decisions. And therefore you want to extract some of that functionality into an API Gateway to allow you to shrink down that monolith and this is what we saw with the rise of just 2nd. Gen API gateways
00:17:04 [W] Still the same deal sysadmins devops as it was being sort of called Now API developers very much in the mix here to you wanted to centralize cross-cutting app concerns.
00:17:19 [W] So things like off and rate-limiting you didn't want to do them in each micro service or each mini service.
00:17:21 [W] You want to pull them up into a Gateway authentication rate limiting monitoring and routing. These are the main kind of features on awful with this second. Gen API Gateway.
00:17:30 [W] So enter Cloud native applications is what we all know and love is what we're here for a coupe bomb.
00:17:35 [W] A lot of us are focusing on modularization.
00:17:41 [W] You know, it's not new per se like David parnas talked about this in the 70s and I'm sure folks before him and talked about it as well.
00:17:45 [W] But our latest incarnation of modularization is microservices.
00:17:50 [W] They are built released and operated by independent teams.
00:17:52 [W] That's the beauty of microservices. We can split up our application.
00:17:54 [W] We can work independently on it. We can release independently and we can scale independently.
00:17:58 [W] As Microsoft has become popular.
00:18:03 [W] There's been a rise of Interest around things like container technology kubernative.
00:18:06 [W] I did a bunch of work on Mase Osprey this kind of thing.
00:18:12 [W] It does create some more challenges with matching up the users requests to the backend Services.
00:18:13 [W] There's different locations.
00:18:17 [W] Now your apps might be running in Cuba Nettie's and the end in function as a service.
00:18:19 [W] Now, there's more Protocols are popped up no longer.
00:18:21 [W] Do you have to have just one protocol in one Mana left? You can have multiple Services each doing different protocols each doing different being
00:18:27 [W] Because that's just the way the app works some of the more modern microservices you can you know round robin.
00:18:40 [W] no problem at all. And there's often different author requirements again back-end systems Heritage systems that have been around for a long time often integrate with custom all solutions and so forth and you need to support that as well as supporting a more modern, you know auth0
00:18:55 [W] With idps, so this notion of a cloud Gateway, which I introduced the, you know front it needs a bunch of different things. You need to API Gateway type management capabilities, you know authentication Dev portal
00:19:11 [W] That's right match for sort of for the developers. You also need Operational Support like a DC like traffic management capabilities.
00:19:19 [W] You need that sort of resilience that timeouts is retries is rate limiting that kind of thing and as he did on the previous slide, you also need to weave in this real-time service Discovery, we all know and love containers in Cuba Nettie's and working on ephemeral hardware and cheap commodity
00:19:34 [W] Things fail all the time in the cloud as the cliche goes.
00:19:43 [W] So you need to make sure that a request coming in and being routed to a Target that Target still exists.
00:19:44 [W] This means the typical client knative API Gateway you see now is a combination of a bunch of these things from the past you've were weaving in these kind of The Primitives of hardware and software lobe answers. We're weaving in application delivery controller acceleration
00:20:01 [W] Bi Gateway clearly this API management needed as well. And there's also this Dynamics service discovery.
00:20:09 [W] The biggest challenge though is microservices lead to an even bigger change at an architecture and a workflow level developers are now on call.
00:20:23 [W] It is not always popular in some of the places I go into but we are being encouraged to own the services we right.
00:20:27 [W] Yeah, Netflix talked a lot about this notion of fullcycle development.
00:20:30 [W] They see the clearly steal the still value operations.
00:20:31 [W] They clearly still valued platform teams, but they are very much supporting teams. These teams create platforms create apis create Automation and so forth and we
00:20:44 [W] Developers can consume that in a self-service manner to get our job done release functionality to the end user.
00:20:47 [W] Application name is fundamentally a responsibility and hopefully the Authority for delivering a service right from the coding testing deploying releasing.
00:20:57 [W] This increased agility increases the feedback loop and that's what we all want in this no modern world, right?
00:21:03 [W] You've read the book by. Dr. Nicole Falls green accelerate just humbled a file with a lot of work in this space Gene Kim, you know, there's a good correlation with getting fast feedback and you know doing delivering a lot of value and having a high performing organization.
00:21:18 [W] Development they see too clearly steel still value operations.
00:21:32 [W] They clearly still valued platform teams, but they are very much supporting teams. These teams create platforms create apis create Automation and so forth and we as developers can consume that in a self-service manner to get our job done release
00:21:33 [W] Architecture with our API Gateway now RH Gateway, we have to think about the workflow and this, you know, we kind of have to update their thesis. Now the evolution of the edge will be driven by application architecture and the development workflow and this
00:21:46 [W] Changes we've seen quite a lot of the data why team when folks tried to adopt the class glad knative Gateway in the community space.
00:21:54 [W] So the two biggest challenges we've seen at the edge with Cuba Nettie's and microservices.
00:22:04 [W] The first one is scaling The Edge management, you know back when I was working on my Java monolith development team and I we owned the whole monolith. We own things like author and the tracing and the rate limiting and the circuit breaking they were typically implemented as Java libraries.
00:22:14 [W] So if we want to change them, no be we just change them in the code.
00:22:22 [W] The API Gateway is typically owned by the Ops Team, you know, sometimes we did need to change the API Gateway maybe open a port to do some
00:22:24 [W] You protocol support and to do that. We just raised a ticket opposite then have a look give us some feedback and eventually complete it.
00:22:35 [W] No, and we had to Bear some of these things in mind when we were going to release functionality.
00:22:40 [W] We had to sort of you know, make sure we raise the ticket early enough in the in the cycle to get those new changes out.
00:22:42 [W] But this is kind of how he worked in the monolithic days.
00:22:46 [W] Obviously now, we're pulling up a lot of these cross-cutting concerns like AWS tracing caching and so forth into the API Gateway.
00:22:51 [W] they're no longer libraries, but I as a developer still need to in-toto.
00:22:54 [W] Interact with these things these things maybe they caught experience of how the application had the backend Services work. Now the only season good work being pulled up into this API Gateway which Ops unit often owns. The challenges is more and more
00:23:09 [W] You changes out but this is kind of how he worked in the monolithic days. Obviously now we're pulling up a lot of these cross-cutting concerns like AWS tracing caching and so forth into the API Gateway.
00:23:11 [W] They're no longer libraries, but I as a developer still need to interact with these things these things maybe they caught experience of how the application had the backend Services work.
00:23:12 [W] Now the only season good work being pulled up into this API Gateway which Ops unit often owns. The challenges is more.
00:23:14 [W] And more services being spun up if I've got ten microservices, 20 30 40 whatever if I'm raising tickets to all the Ops folks.
00:23:20 [W] This is actually, you know going to be a way to slow the feedback cycle down really we as developers need this self-service way of configuring the various Edge Management Properties, you know, given what we want when we expose our API
00:23:32 [W] Services 20 30 40 whatever if I'm raising tickets to all the Ops folks.
00:23:32 [W] This is actually, you know going to be a way to slow the feedback cycle down really we as developers need this self-service way of configuring the various Edge Management Properties, you know, figuring what we want when we expose our API
00:23:33 [W] Of us at requirements with microservices.
00:23:42 [W] I don't have to just run rest across all my openebs platform. I can run rest on one service.
00:23:42 [W] So once a strong contract and some streaming capability grpc for the next service and then I might want to say web sockets for like a online chat thing as well.
00:23:56 [W] That's not a problem because we've each got individual microservices on the teams. We can choose the right tool for the job the right protocol for the job and off we go now we still want to mix and match various cross-cutting.
00:24:04 [W] Concerns with these Edge requirements so I might want say often all my services maybe except the marketing service where you know, you just kind of rock up and you get the marketing info. No author acquired. I might want retries on my rest on my Jason are HTTP API, but I
00:24:19 [W] Match various cross-cutting concerns with these Edge requirements. So I might want say often all my services maybe except the marketing service where you know, you just kind of rock up and you get the marketing info no author acquired.
00:24:21 [W] I might want retries on my rest on my Jason are HTTP API, but I don't want retries on my, you know, grpc API for example, so I need some way of configuring these things in a scalable and a scalable way too broadly speaking
00:24:29 [W] I am you know grpc API for example, so I need some way of configuring these things in a scalable and a scalable way too broadly speaking in the work. I've done with the with data wire and Consulting as well this three strategies. We see for folks when they're
00:24:35 [W] I earned and Consulting as well this three strategies we see for folks when they're moving to This Cloud native way of working and they realize they want to update the way they're working at the edge.
00:24:42 [W] They've adopted kubernative. You say the three strategies we see in this space is folks either deploying additional kubenetes API Gateway like a new Gateway in the kubeedge this cluster the other extend their existing API Gateway solution, and some folks also deploy
00:24:56 [W] Stack and we see a lot of Greenfield projects very much number three, but we see a lot of Heritage projects one to doing their thing and some of them are awesome migrating the way to 3 and it will become clear as I walk through these strategies briefly. Now why folks are doing this
00:25:11 [W] Ons for all of these approaches here now, I'm gonna cover this in like 10 minutes or so. So if you want to know more I've written a blog post. You can find it on the Ambassador blog on I.T.
00:25:22 [W] on I.T. Next bunch of other places as well. I go into much more depth at the team and I have kind of done quite a bit of thinking about this and chatter to lots of end users and lots of customers so you can download a PDF a deep dive into some of the ideas that I'll kind of do a whistle-stop tour of now.
00:25:37 [W] So the first solution is deploying an additional kubenetes API Gateway and this is issue simple as it sounds you deploy an additional in cluster Gateway you either do it below the existing Gateway.
00:25:51 [W] You can see in the image on the left. We've got our traditional snack above and then we spin up a new kubenetes class. Then we put a new gateway gateway in and the existing API Gateway simply passes through rights through traffic targeted at the kubevirt is cluster without doing anything and the
00:26:02 [W] Go right through to the existing system for other functionality.
00:26:07 [W] You can also deploy this under the layer for lobe answer.
00:26:20 [W] Sometimes folks will have like a big IP type low balance upfront workloads Loeb. And so these kind of things and you can simply then rank to the old API Gateway of the left or level or all the new kubenetes Gateway.
00:26:24 [W] This is kind of good. If you're doing IP addresses and subdomains that kind of stuff you can do it at their kind of layer for level of writing now the pros for this there is minimal changes to the cortege infrastructure and increment incremental migration is pretty
00:26:33 [W] Easy in this example the cons however is there is increased management of working with two gateways as much as easy to spin up a new Kuma T / - spin up a new Gateway.
00:26:44 [W] That's the kind of incremental approach.
00:26:53 [W] Now, you've got to wait wait to API gateways in the mix and the Ops Team platform team to be guess to know the quirks of both and also know the quirks of how they interact.
00:27:00 [W] I've had some quite gnarly problems with a sort of format on the left of the diagram where we had an API Gateway passing through to a new kubermatic API Gateway the old API get with us.
00:27:03 [W] Ripping out various headers various like HTTP headers, and that was causing knowing the problems in the communities cluster.
00:27:12 [W] We just you know, we found it really hard to debug where that problem was. It is also challenging to expose all the functionality to each independent micro service team. So it's fine. If you could do everything you need in the kuma Nettie's well new API Gateway, but if you need to modify the other Gateway outside,
00:27:24 [W] Raising ticket situation and and that can be a bit slow in terms of getting out of fast feedback.
00:27:34 [W] You try and push push as much Edge functionality as possible into the new Gateway.
00:27:35 [W] That's definitely a sort of a good thing we've seen and then you get those like the development teams Microsoft has teams can move faster because they can do more things via the kuma Nettie's convict ability of either kubernative Z animal for Edge functionality does need to remain centralized stuff
00:27:49 [W] Do more things via the kubernative. He's a convict typically of either kubermatic. Zmo. The edge functionality does need to remain centralized stuff that does need to remain in that existing API Gateway.
00:27:54 [W] You definitely want to set up things like SLA.
00:27:57 [W] So, you know, we raised a ticket and want to open new port and the API Gateway is like are a 24 hour turnaround SLA, for example, 24 hour service level agreement and then we need to use those essays and factor into our release Cycles if we know we're going to be doing something that's a opens a new
00:28:10 [W] Also does some kind of new protocol support an existing API Gateway.
00:28:16 [W] We as microservices engineering teams need to figure that out pretty much up front and then encode that in
00:28:19 [W] Moving on to the second strategy extending an existing API Gateway.
00:28:30 [W] This is implemented by modifying or augmenting the existing API Gateway solution.
00:28:32 [W] I've seen some teams do this custom do it. Do it manually with some go code or bash scripts or whatever and there also is support for existing say Hardware low balances and the actual event itself is written say a custom Ingress controller or a custom operator that kind of thing
00:28:45 [W] teams do this custom do it just to manually with some go code or bash scripts or whatever and there also is support for existing say Hardware low balances and the actual event itself is written say a custom Ingress controller or a custom operator that kind of thing
00:28:47 [W] Is the dots between the API endpoints exposed in the API Gateway and the backend services.
00:28:53 [W] So we as developers.
00:28:59 [W] We write our deploy, you know our deployment services in Cuba Nettie's we might put some annotations on there some other kind of metadata and when we deploy that Yama let me do you know cou couple apply or deployed via gitops pipeline the Ingress controller or the operator looks at the
00:29:09 [W] Services and then out of bound calls out to the API on the API Gateway and makes the config changes for us.
00:29:21 [W] So we're not manually hacking around in the existing API Gateway.
00:29:33 [W] We're specifying all are writing config in kubenetes annotations. And then the English controller or the operator is automating that update into the API Gateway. Now Pros for this now, you can reuse existing tried and trusted API Gateway.
00:29:36 [W] That's why we've seen a lot of folks in our building on their own functionality onto the existing API Gateway and you can Leverage
00:29:39 [W] The Integrations you've got with your API Gateway with all the other on-premise infrastructure and services. The cons though. Is that the workflow must change to preserve a single source of Truth in the API Gateway configuration.
00:29:51 [W] We often seen with some vendors.
00:29:56 [W] There's limited config provided by the annotations in there in the community as well too.
00:30:00 [W] So is as much as the dream is to kind of have all your config in the kuma tease ya mlops the Ingress controller operator calls into the existing Gateway and does the changes. Sometimes you still need to do those changes out of bounds and it creates going to work.
00:30:10 [W] A model where I can do most of the coding most of the changing of config in the communities world, but then occasionally I have to raise tickets with existing Ops Team to make tweaks on there on the API Gateway. We do recommend that you shift away from the traditional API, you are driven configuration model of
00:30:24 [W] much as possible, you know still have the Ops Team offering functionality to tweak the Gateway should typically driven by tickets, but you want to push as much as you can into this self-service way of working in, you know, using kubernative the animal and we've definitely seen the
00:30:40 [W] And here in that you need a standardized way of updating the API Gateway that doesn't conflict with what's being specified in the kubenetes world.
00:30:54 [W] We had a few gnarly bugs with folks who worked with where their have clashes between the config.
00:30:56 [W] They've got in their kubenetes world and the actual conflict being loaded say from the existing Heritage World, maybe routes overlap or some kind of conflict in the way. The protocols are supported. So you do need to be very careful about syncing up the the old and the new world here.
00:31:10 [W] We also have to say before adopting this strategy.
00:31:14 [W] Look at an architectural roadmap.
00:31:15 [W] Look at where you're going in the future.
00:31:25 [W] We do see some folks manually augmenting or adding extra stuff into their existing API Gateway not realizing that there's a bunch of other changes coming down the road more microservices supporting function as a service moving into a different Cloud the whole bunch of other things that when folks
00:31:31 [W] committing extra code into their existing API Gateway if they pause they might have realized that moving to strategy three kind of going a bit more Green Field at the edge might have been the way forward and of course you once you've committed resources into this strategy and do extending your opinion Gateway
00:31:47 [W] You get that sunk cost fallacy where folks are already committed now to extending is the API Gateway and it's not really fit for purpose As you move and adopt more and more of the cloud native way of working.
00:32:00 [W] So strategy 3 this is deploying an in cluster Edge stackrox Lawrence stack now everything from the waft. So, you know to the lobe answer and the API yet way is deployed actually in the kubernative cluster and it replaces your existing architecture or more
00:32:16 [W] If you've got a bunch of stuff that's already running and making you money outside of Kuma Nettie's.
00:32:24 [W] This can be a big lift strategy 3 can be a big lift.
00:32:27 [W] We see a lot of Green Field folks approaching this and a lot of Heritage Brownfield Solutions wanting to get towards this space but recognizing it's going to take them a while to do that.
00:32:36 [W] This is simply deploying all your components into communities and the Ops Team typically owns this and provide kind of sane defaults or some level of guardrails and the dev teams can configure all components of the edge stackrox.
00:32:46 [W] Stations with crd s these kind of things it makes it really nice and we as developers on each one microservices.
00:33:01 [W] We can say, you know, press different rules for the laughs or this, you know, the CDN now the caching and so forth. We can tailor individually within the communities llamo config. What we'd like for our Individual Services, which is very powerful,
00:33:08 [W] Doing this as a service and we as developers. We simply consume it which now I like quite a lot.
00:33:17 [W] So the pros in the edge management is simplified into a single stack.
00:33:20 [W] It's all running in kubenetes is no pass-throughs. Nice. Yeah, and it does very much support the single way of working the single source of Truth things, like gitops gitops can be challenging to implement when you've got strategy one or two.
00:33:32 [W] We've got a mix of things going on because there is often no single source of Truth. So, you know, this is very much kubernative knative way of working.
00:33:38 [W] The cons are obvious, right?
00:33:47 [W] It's a large architectural shift asking your Ops Team your platform team to move everything into the cluster is a big ask Ryan.
00:33:49 [W] Probably, you know, if you've got an existing systems.
00:33:52 [W] This is going to be very much a incremental migration approach probably with like trashy to overtime to get towards where strategy threes at and perform teams often have to learn new proxy Technologies in a bunch of folks have been sitting using old-school proxies. And then when they Rock up to
00:34:05 [W] They're more in tune with things like Envoy, but Envoy is different than say some of the older Hardware Lo bounces.
00:34:15 [W] They have to learn the quirks of our Envoy Works compared to their old systems the beauty of this stuff as I mentioned already is that each microservice team is empowered to maintain their Edge con fig we can configure everything by a CID.
00:34:24 [W] He's violent ations and this removes the burden of raising tickets with the Ops Team to get things done.
00:34:30 [W] The hdac a great all these different distributed configs into a single consistent configure The Edge is very easy. If we've got everything in our kubelet easy animal to look at the animal and figure out exactly how each service is configured no longer do we have to look at multiple locations,
00:34:44 [W] Hardwell Oban said to understand what's configured their versus what's configured in kubenetes and so forth.
00:34:50 [W] I mentioned before a lot of folks when they do move this way working. They don't bring their old systems with them often Harbor low balances.
00:34:59 [W] It's quite tricky to bring into kubenetes world.
00:35:02 [W] So they do often look at things like Envoy now, I did a while.
00:35:04 [W] We know Matt Klein and the lifting.
00:35:06 [W] Well, they've done fantastic work many other folks from Google and other places have built on top of the proxy now and it's just a fantastic piece of Kit, you know, we've built Ambassador on on web proxy and so we are all in on Envoy.
00:35:18 [W] So in conclusion over the past 25 or so years API gateways Edge Gateway has undergone a series of Evolutions.
00:35:28 [W] This is primarily been driven by architecture.
00:35:29 [W] We've moved from Hardware to software as we've got more things in the back end and more requests are being made in a dynamic fashion software is more malleable.
00:35:37 [W] We can update it more quickly.
00:35:38 [W] It's often easier to scale is often cheaper to scale compared with Hardware to we've moved from layer for routing level networking to layer 7. We're now making decisions on writing.
00:35:48 [W] In based on HTTP metadata such as headers cookie values and we can even do really funky stuff like, you know, if a person is viewing this page with a user agent that indicates they're on an iPad a version X. We can write them to this service versus
00:36:02 [W] In a dynamic fashion software is more malleable.
00:36:03 [W] We can update it more quickly.
00:36:03 [W] It's often easier to scale is often cheaper to scale compared with Hardware to we've moved from layer for routing level networking to layer 7.
00:36:04 [W] We're now making decisions on rating based on HTTP metadata such as headers cookie values and we can even do really funky stuff like, you know, if a person is viewing this page with a user agent indicates, they're on an iPad a version X. We can write them to this
00:36:06 [W] Say Raptor this service.
00:36:10 [W] So there is an increased Demand by Engineers biases developers to make finer grained routing decisions and that we need the layer 7 awareness to do this.
00:36:16 [W] We've moved from centralized management, you know one platform team one development team to decentralize now, the platform teams are you know, super valuable, but they often provide services to be consumed in a decentralized fashion by individual
00:36:29 [W] I need that self-service functionality as you adopt this client knative way of working adopting microservices adopting kubevirt 'is this is a change in workflow. In addition to architecture microservices are fantastic. They're primarily focused on scaling
00:36:44 [W] Microservices are fantastic.
00:36:45 [W] They're primarily focused on scaling developer work independent release being able to scale independently and so forth.
00:36:55 [W] This is a change of workflow. Now, we are multiple teams working around microservices working around a bounded context. And therefore we do need to scale a hedge management appropriately individual teams individual element teams need to be able to do a
00:37:03 [W] This kind of model for consuming what the platform were Ops Team are producing for them so we can just say I want this, you know waft configuration this routing configuration and so forth all in our way.
00:37:18 [W] We're normally doing development which often this kubenetes, you know, config files kubernative xaml files these days we need to support multiple protocols and cross functional requirements. And again, we're developers need to be able to self-service convict how this is set up, you know, we need to say, oh, I want grpc.
00:37:30 [W] want it to configure this way and to know bouncing done this way this kind of thing.
00:37:34 [W] Bottom line is about choosing your solution intentionally as I hinted at in the beginning of the presentation As you move to Cloud, you know, in terms of cloud technology is cloud native architectures Cloud native ways of working you often need to rethink the
00:37:49 [W] using your solution intentionally as I hinted at in the beginning of the presentation As you move to Cloud, you know, in terms of cloud technology is cloud native architecture is cloud native ways of working you often need to rethink the traditional approaches the
00:37:51 [W] Traditional platform components that you've used you can't simply lift and shift your old way of working and you can simply lift and shift your old technology or you can sometimes but you don't get the full benefits of what this whole Cloud native World offers.
00:38:05 [W] Lift and shift your old technology or you can sometimes but you don't get the full benefits of what this whole Cloud native World offers.
00:38:07 [W] So choose your solution intentionally really think about the needs of the edge.
00:38:13 [W] We think about the needs of your services and how they're going to evolve over the coming time.
00:38:15 [W] So many thanks for watching the talk. If you want to learn more the team and I have put together a PDF and accompanying blog post and so forth available at the first URL there.
00:38:25 [W] We also checked a lot of interesting people both customers and thought leaders in the space like Katie command G Dave Cydia Kelsey Hightower charity Majors.
00:38:34 [W] We put those up on our website as podcasts. You can find those on Soundcloud or on the Ambassador website. And of course, we blog extensively to so we'd love to hear your thoughts and any of this content you can find me hanging out in the data wire OSS slack Channel you can find me.
00:38:45 [W] Twitter and gets up and so forth that Daniel Bryan UK a thanks a lot.
00:38:49 [W] Hello everyone.
00:38:54 [W] Thanks for coming along today and I appreciate all the great questions as well.
00:38:59 [W] I'll power through as many as I can in the next five minutes or so because we have got a limited time frame here.
00:39:03 [W] You can join me on the cncf slack and you can answer questions ask me questions there as well.
00:39:08 [W] So I'll answer them in the order they came in and the first question we've got some man away.
00:39:11 [W] Where do you draw the line between API Gateway and servicemeshcon a question want to get asked a lot at bottom line is API gateways for your north-south engrish traffic and servicemeshcon.
00:39:20 [W] West Surf, the service comes we are seeing servicemeshcon, so do cluster cluster now multi cluster comes and but the API Gateway is very much of the edge of your system.
00:39:33 [W] As many as I can in the next five minutes or so because we have got a limited time frame here.
00:39:36 [W] You can join me on the cncf slack and you can answer questions or ask me questions there as well.
00:39:37 [W] So I'll answer them in the order they came in and the first question we've got some man away.
00:39:38 [W] Where do you draw the line between API Gateway and servicemeshcon a question want to get asked that a lot?
00:39:39 [W] Bottom line is API gateways for your north-south engrish traffic and servicemeshcon East-West serves the service calms. We are seeing servicemeshcon, so do cluster decay.
00:39:41 [W] Laughter now multi cluster comes and but the API Gateway is very much at the edge of your system.
00:39:45 [W] We are starting to see some Gateway is sorry some servicemeshcon, 'for gateways. So sto offers a Gateway. Our console have got Ingress gateways in terminating a reserve just come in but more often than not they're quite sort of fundamental quite basic in a sense.
00:39:51 [W] They may be optimizing for services reaching into the cluster.
00:39:54 [W] They'd maybe don't support so many details around authentication authorization. They're great options.
00:39:57 [W] Sure, but dedicated API gateways tend to offer richer functionality and we'll customer and user facing functionality at the edge of your system like integration with idps or zero key cloak all that good stuff and
00:40:10 [W] They maybe don't support so many details around authentication authorization.
00:40:11 [W] They're great options for sure. But dedicated API gateways tend to offer richer functionality and we'll customer end user facing functionality at the edge of your system like integration with idps or zero key Global that good stuff.
00:40:11 [W] Section that kind of stuff next question from Andy Gracie. Look we're crashing - Andy Andy Andy asks, can we agree on what an API Gateway is as vendors.
00:40:26 [W] So I'm like an API Gateway vendor kind of the honest answer is no and there's a series of great blogs out there.
00:40:29 [W] You can search around Christian Post has done some good work.
00:40:32 [W] I've shared some my thoughts examine human and others have shared their thoughts API gateways kind of like devops.
00:40:36 [W] Yeah. It's a big thing.
00:40:39 [W] It means many things to many people in some ways. We can all agree that API gateways focus on the edge.
00:40:45 [W] Age but in terms of functionality around develop portals monetization, there's a kind of in the committee's world.
00:40:52 [W] There's a tension between Ingress as like an Ingress proxy and an API Gateway an Ingress proxy.
00:40:56 [W] Envoy is a good example of that.
00:40:59 [W] We built an ambassador on top of envoy but there's many other can Contour glue nginx haproxy.
00:41:05 [W] We all offer subtly different things and so it's a tricky great.
00:41:09 [W] It's a tricky and so I appreciate that.
00:41:10 [W] It's a great question. It's a tricky question.
00:41:12 [W] I definitely encourage you to do research When selecting your API Gateway based on what you want requirements.
00:41:23 [W] I know and the learn k8s people so learn k8s dot IO they're putting together.
00:41:27 [W] Danieli. There is putting together a matrix of properties of API gateways, so it's not published yet.
00:41:30 [W] I've been chatting to him behind the scenes a little bit.
00:41:38 [W] I know he's doing that very soon. So you can hopefully find out more info and match your requirements for an API Gateway against what all the vendors are offering.
00:41:39 [W] That's Danielle.
00:41:40 [W] It's an in-class The Edge track with we're labeling some more as a concept. If you like. There's many vendors in this space. You know, look again. I mentioned Contour Ambassador nginx kind of Congo moving this way as well.
00:41:56 [W] really, it's More Concept around putting all the things that the edge in your cluster and allowing us as developers learn to control them using in kubenetes World things like crd s so we can literally Define the wave properties say using a
00:42:10 [W] And a custom configure I did a lot of work with varnish back in the day.
00:42:18 [W] For example, I was always writing varnish BCL code there were separate to my nginx convict that was separate to my Java config.
00:42:28 [W] So a bunch of us are gonna come in together in the industry around this Edge stacked term as a way. We can control all the functionality using the same kind of format or roughly same format ci/cd s and more critically using the same deployment pipeline.
00:42:36 [W] Sure Services, your deployment stand into kublr at ease. You can then push the crd is associated with your gateway down the same pipeline do the same verifications that kind of thing next question by Valentino. Our authorization checks
00:42:52 [W] Gateway level or is it only authentication another good question and we see a whole bunch of things going on us.
00:43:06 [W] I always say so like check stupid at the front door. One of my mentors taught me that one so you always want to do something like checking for stupid things.
00:43:09 [W] So DDOS attacks people trying to hack your system. You want to check that kind of thing at the front door of your system on the API Gateway, we have customers that do all their off author all their authorization.
00:43:21 [W] So all then or Z at the edge and don't do much further up the stack up strimzi.
00:43:23 [W] Mmmmm, but we also have folks that do check strict dragging it to the edge.
00:43:31 [W] Maybe some kind of DMZ and then they do a bunch of checking on their individual microservices particularly around authorization.
00:43:35 [W] So it's very much a matching up what you need your requirements, but definitely working with a lot of customers and moment who are insisting on TLS internally for examples of terminate TLS at the Gateway, but then re-establish TLS by a servicemeshcon
00:43:48 [W] Not in this space to making sure all the traffic is is encrypted console also offers cool things like ACLS and intentions so you can kind of segment your network at a service level not like IPS and ports and there's lots of options out there.
00:44:04 [W] I definitely say do your research and have a look around at what's out there and how match it to your requirements is always super important conscious.
00:44:14 [W] I'm getting close to time here.
00:44:14 [W] I think.
00:44:15 [W] I've got another question around running multiple gateways and we definitely see that we see some folks doing hierarchies of gateways. So again, like a Gateway say in the DMZ and then gateways further down into into the actual cluster as well.
00:44:31 [W] So I can jump on the slack. I can have a chat to you on them. We've only got a few seconds left now, so I'll just wrap up but it's been great fun chatting away.
00:44:44 [W] We're on the hash to - kublr Khan - app Dev slack channel will be a thread there. I'll be jumping into my team pulling around is
00:44:46 [W] L keep the conversation going with questions are great really appreciating this virtual world.
00:44:53 [W] It's nice getting some interactivity on slack and whatever and so please join me on slack and and thanks once again for turning up. Appreciate your time.
00:44:58 [W] by now.
00:44:59 [W] On the hash to - koukin - app Dev slack channel will be a thread there.
00:45:20 [W] I'll be jumping into my team. Follow me around as well.
00:45:20 [W] Yeah, keep the conversation going.
00:45:20 [W] We look questions are great really appreciating this virtual world.
00:45:21 [W] It's nice getting some interactivity on slack and whatever and so please join me on slack and and thanks once again for turning up. Appreciate your time. Bye now.
