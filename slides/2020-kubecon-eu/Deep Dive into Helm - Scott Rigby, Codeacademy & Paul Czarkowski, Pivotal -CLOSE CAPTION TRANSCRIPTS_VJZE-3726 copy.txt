Deep dive into Helm: VJZE-3726 - events@cncf.io - Thursday, August 20, 2020 8:23 AM - 375 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:15 [W] Welcome everyone to the home Deep dive.
00:06:58 [W] My name is Paul and this is Scott Scott.
00:07:00 [W] Why don't you introduce yourself?
00:07:00 [W] Great.
00:07:02 [W] Hey, I'm Scott Rigby.
00:07:08 [W] I am a Brooklyn based artist and software engineer who is also part of the helm team.
00:07:11 [W] I helped with Tom charts and I helped with related Automation and tooling and also with Helm governance.
00:07:16 [W] My name is Paul Tchaikovsky.
00:07:18 [W] You can find me on Twitter @ PG Koski.
00:07:20 [W] I'm a Helm charts maintainer. I work at VMware and I am one of the hosts.
00:07:26 [W] Of 10 2 dot TV cool, just so you all have a mental progress bar of this short chat.
00:07:35 [W] We've just discussed we are we are going to describe Helm at its current version Helm 3 will give you a few notable announcements will be talking about important things that you probably want to know that Helm does functionality wise
00:07:46 [W] Bribe Helm at its current version Helm 3 will give you a few notable announcements will be talking about important things that you probably want to know that Helm does functionality wise and the tools in the community The Wider ecosystem.
00:07:48 [W] To cover Helm security and finally ways that you can get involved with health community.
00:07:55 [W] So in case you missed it, the current version of Helm is Helm three, if you run home to it is way past time to upgrade Helm 3 is nearly a year old and has made some major changes things
00:08:09 [W] Focused on home three it is easy to upgrade from helm to helm three both on your laptop.
00:08:23 [W] But also in your kubernative clusters Helm to charts will continue to work in Helm 3. We are backwards compatible there.
00:08:29 [W] all of your existing charts will continue to function most of the differences are architectural and in the software itself the big difference, of course that Everyone likes to applaud at is there is no more tiller.
00:08:37 [W] So we have a Helm 223 plug-in, which is provided by the helm Community which does most of the work.
00:08:48 [W] You just need to make a choice. If you want to follow the Strangler pattern and slowly replace releases or if you want to do like a full in place 1-Shot upgrade.
00:08:58 [W] So this is the helm 223 plug-in. It's really simple you can see from this screen.
00:09:02 [W] Helm 223 convert postgres will upgrade your post. Press release to helm 3.
00:09:09 [W] But rather than just showing you this why don't we actually kick off and give you a demonstration to show you just how easy it is to upgrade a cluster that has a bunch of Home releases installed on it.
00:09:22 [W] So Helm 3 or just Helm because we now for at least a year now and so it's time we just let go of Helm to write I don't want even talk about Helm to and so the way we do that is we get everyone
00:09:33 [W] Helm to up to helm three so as a community we have put together documentation blog posts and tooling to help you migrate from Helm V2 to V3 and get killer out of your life
00:09:49 [W] I'm going to take you straight to a command prompt and demonstrate just how easy it is.
00:09:57 [W] I have Helm to and Helm three as separate binary.
00:09:59 [W] So we're going to run home to version.
00:10:04 [W] We want to see what releases are running and you can see we've got four applications running in.
00:10:04 [W] ourselves. And we want to migrate from Helm to the helm three without disrupting these and that's where the helm 223 plug-in comes in.
00:10:16 [W] So we're going to go ahead and install that plug-in.
00:10:17 [W] So let's do a dry run conversion of one of our releases and we do that by doing Helm 2223 convert will choose discourse and we'll do a dry run and you can see that happened really quick feel confident now that I can run this across my cluster across all of my
00:10:38 [W] So we're getting the helm to output and we're passing that through to helm 2223 convert.
00:10:44 [W] And you can see this runs through pretty quick and we're already complete we want to verify that we're complete.
00:10:55 [W] So we're going to run home 3ls all namespaces. You can see our release data is now available to helm three. Let's take our help to config on my local workstation and convert it into Helm 3.
00:11:08 [W] The now finally we want to clean up tiller and this will not just clean up tiller on the cluster, but it's also going to clean up Helm to on my workstation.
00:11:25 [W] So Helm 2223 clean up we have now removed all vestiges of Helm to from our lives great. Now first you short announcements. One of the biggest announcements is that Helm has graduated
00:11:38 [W] Cncf incubation to a graduated project.
00:11:44 [W] We'd like to thank everyone who got us here. Specifically the Helm coredns maintainers maintainers of Helm charts many of whom have worked tirelessly to support the community charts for so long.
00:11:56 [W] Also the helm various Helm project maintainers.
00:12:05 [W] There are projects within the helm organization including chart Museum the helm Hub, which is based on monocular also maintains by the helm team Helm plugins and also the helm
00:12:08 [W] containers who helped with governance and things like that and finally the rest of the community everyone who has contributed to community charts various Helm issues and pull requests and all of the users who helped make this a great project. So thank you very much due to
00:12:23 [W] To the events this year.
00:12:36 [W] We have extended the deprecation timeline for Helm to and also for the stable incubators charts Repose bug fixes were extended until August 13th of this year and will be
00:12:40 [W] Officially deprecated on November 30 this year.
00:12:45 [W] So those are important dates to remember and will help you plan for when you do your Helm to the helm three upgrades and you might be asking yourself.
00:12:54 [W] Where are the stable and incubator Community charts going to be hosted now if they're if they're to be deprecated, how are your projects going to continue to function if you require those Community charts are now moving from the
00:13:07 [W] Previous stable an incubator repose to a more distributed model those distributed chart repos are all aggregated in the same way.
00:13:16 [W] So if you're worried about how am I going to find my charts?
00:13:16 [W] It's easy. You can find them now aggregated at Helm Hub and artifact hub.
00:13:22 [W] Artifact Hub is likely the successor to helm Hub.
00:13:29 [W] And so many Helm repos are publishing to both at the moment the actual source code for the charts primarily is being adopted by the maintainers of the software that's installed by those charts this issue here in the screen and you'll see
00:13:41 [W] A link later at the end of this talk can help you?
00:13:44 [W] keep track of the progress of moving those charts from these repos to their eventual homes.
00:13:59 [W] And if there are charts that haven't been moved and you really care about this you work for an organization or you're an individual and want to group together with others who want to help take ownership of that chart then please do so open an issue and
00:14:05 [W] We can work through that process together.
00:14:07 [W] Additionally.
00:14:10 [W] There's an excellent collection of curated charts by friends of Helm bit Nami who have worked also tirelessly on the community charts in the past those charts have been in the bit Nami repo for quite a while.
00:14:22 [W] They were just mirrored in the community charts and now they are the source themselves so you can still see those where they were and now you can make PRS directly against those Repose. This is helping the charts maintainers to
00:14:36 [W] and more of their time working on the tooling around Helm the best practices guides and so on that we've been doing such as charts testing and charts release or tooling this can be used for
00:14:49 [W] Community members who want to host your own distributed home Repose that are aggregated by the Helm of we just met so chop testing is a tool that automates the testing of your Helm charts inside of git repositories.
00:15:04 [W] So when you push a change to a Helm chart up to get it will detect which charts of changed inside of your repo and then it will perform linting and tests.
00:15:12 [W] Just those charts chart will Lisa
00:15:16 [W] will release charts to a self-hosted Helm chart repository it effectively helps turn your GitHub repository into our Helm chatbots cream. So it creates chart packages.
00:15:30 [W] It uploads those packages to GitHub releases and then it updates the index engine hubpages chart testing is what we use in community charts today. The chart release our is not being used in community charts primarily for legacy reasons, but
00:15:43 [W] Chart repos are using it today and it's recommended to use.
00:15:49 [W] We also have GitHub actions for Helm charts these actions essentially wrap what Paul was just describing so that if you are using GitHub for you the source code for your charts pretty much all of this is automated for you.
00:16:01 [W] You just have to do the configuration and then they have very same defaults as well.
00:16:07 [W] How about we just show folks how that works.
00:16:12 [W] Creating a chart is just that simple.
00:16:16 [W] Let's change to a branch.
00:16:24 [W] And we'll add our chart to the Reaper.
00:16:30 [W] All right, and we can grab this URL here and open up our favorite web browser to a created the pull request and you can see we now have an actions kicked off lint and test charts.
00:16:49 [W] So all you need to do in order to enable this in your charts repo is copy this
00:16:56 [W] GitHub workflows so we have one workflow for Linton test and you can see it's pulling our chart testing action and it will actually create a kind cluster and install your chart and then we have our release and this will happen when
00:17:11 [W] In with merged into our main branch and that will run our chart release action.
00:17:18 [W] Well actually create the package.
00:17:22 [W] It will create a release in GitHub and upload that package to that release it will then update the index dot HTML file in your gh-pages branch. So let's have a look at that action and see how it's going so you can see
00:17:33 [W] The sake of time let's assume that it has worked and we're now ready to merge.
00:17:41 [W] So let's go ahead and hit the merge button.
00:17:42 [W] It will see the second action kicking off and this is the release action.
00:17:54 [W] And so it's going ahead is saying there's a new chart its packaging up and it's uploading it and it is done.
00:18:02 [W] So now here under releases you can see we have a new release and this is named for the chart and it has our chart package if we switch to our GitHub Pages branch.
00:18:10 [W] You'll see we have an index.html and if we search for coupon you'll see that this has been updated for Kook on therefore. We should be able to go ahead and install it.
00:18:26 [W] So let's add our repo to repo update and attempt to install our chart.
00:18:30 [W] And there you have it.
00:18:45 [W] So we've installed the helm chart that we just created from our very own Helm chart repository without having to do any real work because we have the GitHub actions to do that for us.
00:18:58 [W] Announcements you can always go to the helm blog at Helm duck, sh blog.
00:19:04 [W] Okay. Now we're going to cover some things that some functionality that many people don't know about helm.
00:19:08 [W] Yeah things that are either new and Helm three or just aren't well known.
00:19:13 [W] It's got tell us about how the chatbots Yamaha has changed.
00:19:18 [W] One note is when you're perusing Community charts many charts are still in the chart API version 1 that was the chart the version of Helm charts that Helm to created when you implemented the helm create command.
00:19:33 [W] Using the current version of Helm it implements Helm charts API V2 the major version bump was to allow additional functionality afforded by Helm three, we added a type field so you can identify whether it's a standard application
00:19:48 [W] In chart or a library or common chart?
00:19:52 [W] Library charts provide you a way to put reusable functionality and definitions in a chart that can then be reused by other charts allowing you to keep your charts as dry as possible.
00:20:06 [W] We've also moved dependencies into chart dot llamo and we've removed the requirements files that was just for consolidation and clean up and having less clutter in your chart.
00:20:19 [W] It's got why don't you tell us about the new?
00:20:24 [W] Yeah Paul.
00:20:24 [W] So this is one of the exciting features that help through provides as well.
00:20:31 [W] many people have asked. Is there a way to validate values and there have been various tactics and tools to help make that happen at least within an individual organization. So that developers can have consistency
00:20:42 [W] minimize errors the helm team introduced the ability to validate values passed which are built into Helm itself now so you can use Json schema to help make sure that happens the way to do that is to make sure that there's a values not schema dot Json file
00:20:58 [W] Inside of your hearts holder and this gets run on Helm install upgrade template and lent so that if someone were for example to pass a value that didn't match the type that you defined it would give you an error early and you wouldn't have to go tracking
00:21:13 [W] Later, and that's super important because we all know that the animal is not typed and so being able to put some typing in there is really great.
00:21:26 [W] Helm comes with a test framework so you can ensure the stability of your charts as well.
00:21:32 [W] The way that you do that is you can install one or more values files inside of a CI directory inside of your chart.
00:21:36 [W] Each of those are run during Helm testing so that you can test various use cases.
00:21:42 [W] cases. You can also add very specific test by creating Resources with the
00:21:45 [W] the helm test hook annotation which will ensure that there are automatically install on tests and cleaned up for you, but will not be installed on a regular install or template that tied together with your CI test values gives you a lot of
00:21:58 [W] Form integration tests as part of developing and deploying your Helm charts.
00:22:06 [W] So we also added experimental support for oci Registries.
00:22:12 [W] However, it is incredibly experimental feel free to play around with it. But expect it to break.
00:22:18 [W] We are waiting for the Upstream o CI Community to stabilize the apis before we move on from calling it experimental inhale.
00:22:27 [W] So is disabled by default and you can
00:22:31 [W] enable it by setting the environment variable Helm experimental oci. If you're interested in oci, you can run Helm help chart and Helm help registry and find out details on how to use it and you can read
00:22:43 [W] Proposal on how we support oci from the above link Scott now that there's no more Atilla.
00:22:51 [W] How do we actually store what releases are installed on a cluster releases are now stored a secret spy default and the release information is stored in the name space where each releases is released.
00:23:07 [W] And the release information is now stored within the namespace of each release Helm users can see this pretty quickly just by looking at Secrets within the release name space itself.
00:23:23 [W] We've also made changes to how we deal with ci/cd think of them as kernel level things as opposed to most applications that charts and soul which are user space.
00:23:35 [W] it because cides is so crucial and so critical to the kubernative cluster while we
00:23:37 [W] Install ci/cd s we don't want to upgrade or delete them by default because that can really mess with your cluster. If you don't want to install ci/cd zat all you can skip them with skip cides
00:23:52 [W] CID install hooks that we use in Helm to and now ignored with a warning in the new versions of hell. If you are using Helm to install your cri-o as Paul mentioned make sure that they are not templated.
00:24:07 [W] They should just be pure um, oh that's right. If you do really want to install cides with hell you can template those see IDs and put them in the helm templates directory and you can even do that in a dependency chart and Pull It in as a dependency
00:24:21 [W] Our best practice is to not install cides as part of the installation of an applicant's got tell us what's changed in the go SDK.
00:24:30 [W] Yeah.
00:24:41 [W] Well, the biggest changes that Helm now has a go SDK, all of the code has been restructured for a much better developer experience before if you had ever tried to write your own code
00:24:45 [W] That leverage telomere under the hood you may have noticed that you had to rewrite a lot of what the CLI did now the helm CLI consumes the exact same SDK that you are application would consume if you create one up from scratch yourself and the packages that
00:25:00 [W] Look at is make sure to look at the action package.
00:25:05 [W] There's the chart and chart util package and finally the wrapping CLI and all of the sub-packages around that just digging through the code.
00:25:14 [W] I think it's very readable and you'll have a pleasant experience and a perfect example of where we can see improvements with that is the chart releaser currently exits out to helm package.
00:25:26 [W] Whereas now we can actually call the package chart library with do comb through the
00:25:32 [W] SDK and do it directly inside of our application instead of shelling out and so here's an example of how easy it is to use.
00:25:45 [W] This is a really simple go Application that is going to list the helm releases in a particular name space. Now, this is one of my favorite new features the post renderer it allows you to not only use hell but you can also tie in
00:25:53 [W] Or ytt, or similar tools and that allows you to take a Helm shot at someone else's has developed and make minor changes to it what major changes to it outside of the chart itself?
00:26:09 [W] itself? For example, if you just want to add labels or annotations, you could call out to hashicorp bolt to fill out Secrets or collect Keys could even perform a security audit before you ever hit the cluster.
00:26:21 [W] So we have plenty of documentation on how to do it. But rather than boring you with more details. Why don't we just show you a demo?
00:26:29 [W] So let's take a look at the post renderer.
00:26:34 [W] I've already created some assets to make things quick.
00:26:38 [W] So let's have a look at we have we have our post renderer script and then we're using ytt.
00:26:39 [W] So we have some ytt. Files so quick look at the post renderer.
00:26:43 [W] It's pretty simple.
00:26:50 [W] It's a bash script. It takes in standard in from Helm which will be the rendered templates. It will pass them through ytt.
00:26:53 [W] And then it will output standard out which will then go back into Helm and that will become what is sent to kubernative.
00:27:03 [W] Zon a say a Helm install.
00:27:08 [W] Let's take a look at our why can t files so we have a WordPress passwords.
00:27:15 [W] WordPress password and it's going to Overlay a different password on top of it that maybe we're fetching from hashicorp volt. But for the sake of the demo, we have a file in here, which is just setting it.
00:27:26 [W] So let's go ahead and run Helm template and we'll just look at the word prick password if we add in the post renderer.
00:27:35 [W] like so
00:27:37 [W] you can see we have a WordPress password like so so we can pass that back through yq and base64 decoder.
00:27:50 [W] And there is the value that we have set from our ytt.
00:27:58 [W] So that's the post render a working. Now, of course, we may want to actually embed this in a Helm chart.
00:28:06 [W] chart. So what would that look like so we could have a Helm track called blog in its chart dot? Yeah mlops.
00:28:13 [W] We've set a dependency on WordPress.
00:28:19 [W] So here we could do a template dot post renderer that will use the WordPress as a dependency and we'll load it up. And therefore we now have a Helm template that looks like this.
00:28:31 [W] You see we have ytt.
00:28:34 [W] There. We have our post render and I've been and then we can do a Helm package.
00:28:38 [W] And there we have a package that we can then upload to our repository.
00:28:44 [W] Yeah, I'd love to mention one thing at one of the big benefits that I see for the future of distributed Helm charts is that they can stay simpler now and still allow people to fulfill their education has without having to have pull requests that
00:28:59 [W] If else trees for every single use case Under the Sun that increases complexity and I think as many people have seen in community charts. It can lead to Spaghetti code this helps to keep them cleaner potentially. So looking forward to seeing that in the future.
00:29:14 [W] So now we'd like to introduce you to a few tools that extend Helm. There are a lot more than this.
00:29:27 [W] This is just a short list, but this gives you an idea of some of the common tools. And also what's possible one of the from my point of view indispensable plugins is to help deaf plug-in this works for any client.
00:29:34 [W] Both for the end user when you're imperative Lee running Helm commands and for let's say even during the ci/cd process where you want to look back and see oh what actually changed when I did an application of a new release
00:29:44 [W] Death can automatically spit out that dip for you and show you this is exactly what changed between releases you can also use it to debug and in my favorite tool from this list is Helm file.
00:29:59 [W] I use Helm file a ton and it is a great way to take multiple Helm charts and orchestrate them together as code.
00:30:07 [W] So it's almost like the helm for Helm in a way and it becomes really important when you start to have a large number of charts. I've seen what happens when you end up with like 15 to 22.
00:30:14 [W] Tendencies because you're trying to install a bunch of stuff at the same time.
00:30:21 [W] Helm file makes it much easier to do that without having to commit such atrocities.
00:30:28 [W] If you want to have Helm releases in code in the get-ups format.
00:30:29 [W] You can use weaveworks home controller of that recently released.
00:30:35 [W] There are also other Helm controllers.
00:30:36 [W] This is just one example from the list of them or you can write your own.
00:30:39 [W] And in this contest which is a great way to test your Helm charts against Opa rules to make sure that your Helm charts are going to follow your best practices as described in tools, like open
00:30:54 [W] The agent before they're ever installed to your plastic so you can have that at the ci/cd age of your ci/cd of your Helm charts themselves.
00:31:03 [W] So that gives you that fast feedback of something is not quite right even though it's not exactly an error.
00:31:10 [W] It's a very cool tool.
00:31:13 [W] and of course Helm is very extendable.
00:31:18 [W] So if you want to solve a particular Edge case that you have you should write your own tool open source it and maybe next year up on stage will be talking about it.
00:31:26 [W] And now for everyone's favorite topic security with teller removed the main thing you need to be concerned about provenance of your charts.
00:31:33 [W] Everything else is delegated to context.
00:31:36 [W] And to be and to be clear what is meant by that you mean like with the idea of Bad actors for example is just check the chart.
00:31:46 [W] Yeah, like who wrote the chart?
00:31:49 [W] Is it the charter supposed to be all that sort of stuff. Right? Right exactly things like signing charts and so on.
00:31:55 [W] I wonder if we should mention that hacking Helm session.
00:31:55 [W] Yeah.
00:31:55 [W] Yeah.
00:31:56 [W] Yeah.
00:31:56 [W] Yeah.
00:31:56 [W] Yeah.
00:31:56 [W] Yeah.
00:31:58 [W] Yeah. I think we kind of cover some of the top Providence we definitely did.
00:32:00 [W] Yeah, I think like as if that's as we could all of the other security concerns generally are already some
00:32:10 [W] That should be dealing with when operating with kubernetes so our back piece EP what are your network policies?
00:32:15 [W] Do you have auditing?
00:32:17 [W] We do cover many more in-depth edge cases and hats in a previous session that pollen. I did called hacking Helm but for all intents and purposes.
00:32:30 [W] This is the primary difference now in moving to helm three.
00:32:39 [W] what you saying Scott is that Helm basically just inherits you that so whatever security settings you have for your user in kubenetes Helm as a client just inherits those permissions.
00:32:44 [W] Exactly the helm client can be used by a human.
00:33:00 [W] The better can also be used in the cloud. If you're a cluster administrator Helm has full cluster administrator access if you're limited to a specific name space because you're on a team within an organization your hump client follow suit similarly.
00:33:02 [W] Right. And so if you were like a read-only like Jenkins service account, then Helm is just a read-only jacket service.
00:33:09 [W] Exactly.
00:33:12 [W] It's got how about you? Tell folks how they can get involved in the helm Community.
00:33:19 [W] There is an ongoing effort as I mentioned earlier to migrate or move or adopt the community charts into their eventual forever home.
00:33:30 [W] I had posted the link. We have posted linkerd Li ER and please see it here again.
00:33:31 [W] Please get involved in this effort.
00:33:38 [W] This is very important because the helm charts are what make Helm so valuable you can also use
00:33:39 [W] The chart testing and chart release of tools and GitHub actions to host your own charts.
00:33:47 [W] The easy to adopt Community charts whether it's you as a person who cares about a particular application or you as someone who works for a company that writes a particular piece of software.
00:33:58 [W] We make it very easy for you.
00:34:02 [W] Yeah and Helm as a project as it continues to grow and people are expanding their own efforts Helm is looking for new maintainers. So please connect with us on slack and on the
00:34:14 [W] Let's see where you want to get involved.
00:34:18 [W] You don't have to be a hardcore Helm chart maintainer or hardcore go programmer to be a valuable member of the helm Community. We're always looking for help with the documentation with writing blog posts, basically.
00:34:31 [W] Whatever you're passionate about we want to have you come and help us make Helm better in whatever way you feel comfortable. It's got haven't you summarize what we've just talked about.
00:34:46 [W] Well, I think for a complete summary of our entire talk we may be bias, but we think Helm is awesome. And you probably should be using it.
00:34:52 [W] Did that sound convincing? I mean sure did okay, and as promised here is the list of helpful links here is a link to the slide deck. So if you are seeing this in some channel, that doesn't give you that link. That should help you get
00:35:11 [W] Deck itself where you can follow our links that we peppered throughout the presentation and gain further information.
00:35:18 [W] There's a link to the helm docks.
00:35:24 [W] We also have the link to the migration efforts that we talked about before where if you're still using home to an in-depth list of changes for Helm three four those who care there's a link to helm Hub which will help you get to all of the existing charts and
00:35:34 [W] To quickly jump to our various tools.
00:35:38 [W] There's the list.
00:35:40 [W] Well, that's it folks.
00:35:42 [W] Thank you so much for attending our session.
00:35:48 [W] Hopefully you've learned a little bit about how and if you want to join our community, please do we would love to have you see you later.
00:35:49 [W] Bye.
00:35:53 [W] Hey Scott.
00:36:01 [W] Hey.
00:36:03 [W] So I guess we got some questions to answer. So I'll take right off on the First Street higher asks us.
00:36:13 [W] Are there any GUI solutions to work with Helm the answer is yes, I believe there's a bunch the one I am most familiar with is kubeedge PS by bit Nami, but there's a number of other catalog type web Guru. He's at
00:36:27 [W] Installed Helm.
00:36:31 [W] I believe Rancher has something built into their systems.
00:36:37 [W] I'm pretty sure I've seen some stuff on the IBM distribution of kubernative.
00:36:40 [W] So I'm sure that they have an open source version of that as well.
00:36:42 [W] So there's a bunch out there. If you want to get into more feel free to hit me up on Twitter or slack and we can chat about that.
00:36:49 [W] Scott you got great.
00:36:58 [W] Yes. Next question. I've been trying to preempt by answering some of these in case people had to pump out early but one is let me just read this out loud if my Helm chart
00:37:11 [W] To find an API version 1 API V1.
00:37:17 [W] What do I do to switch to API V2 what changes have been made to helm charts between API versions 1 and V 2. So I initially just added a
00:37:30 [W] Sorry, I initially I initially added a just a link to the dots.
00:37:41 [W] I don't know if we want to go over all the details now. There are some there are some notable changes, but I would say first take a look at the at the helm docks at the helm dot sh / docks.
00:37:53 [W] There's a there's a specific topic for Helm V2 to V3 migration.
00:37:56 [W] covers the details to the Chart architecture of their just a few changes. I think we noted it in the
00:38:04 [W] It's and we'll be posting those slides so you can see those there too. But there's also a link to help you with exact migration steps exact migration
00:38:17 [W] Own migration use cases so you can decide which steps to take and there's also a plug-in to help you.
00:38:25 [W] So I hope that answers the question for now.
00:38:26 [W] All right, Nicholas asks, if there's a way to create a chart from a kubenetes application that's already deployed and it's prerequisites.
00:38:42 [W] So there's not an official way to do it.
00:38:44 [W] There is a tool called Helm commandeer that attempted to do that.
00:38:55 [W] But often what I'll do is I will do a coop cuddled get - oh, yeah. I'm all right and grab the output.
00:38:57 [W] Stick that in a templates directory and that's most of a chart. Anyway, are they kind of just paste in the boiler boiler plate fits to add the extra labels and the name mutations and stuff.
00:39:12 [W] It's fairly straightforward and easy to do you can just do a Helm create a subtle beside it and kind of look at the differences in deployments and stuff like that.
00:39:24 [W] So if the helm Commander doesn't do exactly what you need, you can still do it fairly easily the old-fashioned way.
00:39:28 [W] Cool next question by actually, I think it was one up by relatively similar to the last but maybe a bit different by Pierce. It's about get
00:39:44 [W] Um, excuse me, Helm Repose themselves and chart versions chart API versions released I if I understood it to be for that reason, the question was can repost contain multiple versions of a chart.
00:39:58 [W] There's there was some trouble with this in our Rancher clusters. It seems that there's only one version allowed.
00:40:05 [W] Yes, that is true and I made a quick note on here, but the
00:40:12 [W] This is the case. Even if you have a V1 version of a chart and then you have V version V2 version of that same chart in your Helm repo repo. And the reason for that is that Helm repo index does not is not aware of chart API
00:40:27 [W] Versions that was never that was never a feet and ask and so that was never a feature and so some of the you know, I mentioned that we could chat on slack but just a very quick note to that. What is that?
00:40:41 [W] One of the workarounds for example is simply just namespacing yet. So preliminary early naming it different so that you can have your V1 chart if you want to continue to support that through the end of the helm
00:40:57 [W] Support life cycle and in November and then you know use the have the helm V2 chart with a just a slightly different key name. You could even call it V2.
00:41:09 [W] You could call it what it really whatever you want as long as it's not the same name. And then after that point you can actually just renamed renamed back move it do an in place move and just do the major version bump.
00:41:22 [W] I just note that that's that's one of the workarounds but there may be some other interesting ones depending on your use case.
00:41:29 [W] It's got I see in slack.
00:41:35 [W] We have a question about Helm controllers.
00:41:39 [W] Tom says they seemed natural and convenient. You see any downsides or gotchas?
00:41:42 [W] Gotcha.
00:41:48 [W] So write the flux on control.
00:41:48 [W] Yeah.
00:41:51 [W] Yes.
00:41:52 [W] Well, so I would just say that the flux home controller is very new.
00:42:00 [W] I don't have any real world experience with it yet.
00:42:03 [W] Unfortunately, I'm pretty excited to to do that.
00:42:07 [W] But it's it's based on the flux operator.
00:42:13 [W] It's just been completely renewed Vision to be a pure controller for flux for the flux to
00:42:16 [W] Cat so I would say that I want to make sure to distinguish those when talking about the benefits and the downsides and I think the flux came themselves have seen some overtime.
00:42:31 [W] Downsides as kubernative he's has matured or changed over time and and and the use has exploded which is why they completely re-architected it. So it's purely focus on the helm controller of this point personally
00:42:47 [W] For now, I don't see.
00:42:49 [W] I don't see any downsides.
00:42:52 [W] but that's maybe lack of use of our
00:42:57 [W] right.
00:43:04 [W] I think we're probably at time so I don't see any other questions that we need to answer right away.
00:43:12 [W] So look, thank you all for attending our session.
00:43:16 [W] We had a lot of fun preparing it and doing it and hopefully you enjoyed watching it.
00:43:21 [W] Yeah. Thanks. Please join us on slack.
00:43:25 [W] guys.
00:43:26 [W] Bye.
