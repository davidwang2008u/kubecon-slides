Tutorial: KubeEdge Hands on Workshop -- Build Your Edge AI App on Real Edge Devices: RDAR-6446 - events@cncf.io - Monday, August 17, 2020 11:05 AM - 179 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:06:05 [W] All right. Yeah, I think my screen is sharing right?
00:06:22 [W] I'm sorry, there's some voice back.
00:06:27 [W] is that we had limited comparing to the central cloud data center while there are a lot of devices and also many data being produced and
00:11:20 [W] prepare process DNA age
00:11:23 [W] in the middle. It's basically the
00:11:27 [W] age of the core Network or we understand its kind of age of the The Operators Network.
00:11:38 [W] So in this location, the implications might be different, like people want to run their live streaming. Well casting their or wrong some
00:11:53 [W] Gaming like VR game server side there and also doing some online education.
00:12:01 [W] So in this location, if we also look at the way I perspective. There are a lot of like transcoding applications running there. So around
00:12:17 [W] 30% a inferencing will be down there because we the more the most of the influencing applications that are running in the end users that all right.
00:12:32 [W] The central cloudbees Is We I think we are quite a few familiar today.
00:12:42 [W] The applications can be quite different so we can run Mei Chen e as well as some well knowing the influencing the data center and also we can do transcoding.
00:12:54 [W] So one common understanding that is from the central Cloud today age the hash right and the underlying Hardware architecture quite different.
00:13:10 [W] So in the central Cloud today, they are men more they stay on the x86, right and also but on the age different the we know that the arm-based.
00:13:23 [W] Hardware
00:13:24 [W] need less power supply supplements, right and also they are some of the more smaller x86 adverse can be run in there.
00:13:41 [W] So the hash rate is quite different and also the underlying architecture is quite different.
00:13:46 [W] So the major consideration why we build a
00:13:54 [W] Each platform top of kubenetes why we choose our native technology to build is they're actually the think the benefits are quite well-known already.
00:14:10 [W] Kevin that is using containers as the core pieces of application.
00:14:26 [W] We know that containers. We just want need to build once and I can run everywhere and also the the container image have different multiple layers so we can
00:14:35 [W] Easily optimize the base image layer to reduce the image size as well as the system of overhead of the application.
00:14:50 [W] and also communities today, we all believe that it's already defied de facto standard of the application obstruction, especially in the cloud if we can
00:15:06 [W] use the cloud native technology to build the age Computing platform and also build the
00:15:16 [W] the platform across cloud and age we can get a
00:15:24 [W] very good experience that we manage the applications in the cloud and the age with the same experience and also for communities in the cell.
00:15:38 [W] And we aren't we know that all the applications are only talking to the API server, right?
00:15:51 [W] And also they have the bananas in self have the declarative API and also in support multi multiple group of API and the different API
00:16:00 [W] Chance and also have the extensible functionality like ci/cd. We can easily extend the API if we need some more new obstruction on the
00:16:15 [W] To run the applications on the cloud on the edge and also for communities itself. We can easily to add new components like we use the
00:16:30 [W] Beauty operations operators for some customized applications in technology today
00:16:39 [W] But there are still some challenges. So one big challenge is that especially for industry and iot, the H nodes are the resource on the age of quite limited so
00:16:54 [W] For a vanilla to the net he's even the light weight distribution.
00:17:01 [W] We know that it need less water at least 1 Gigabyte, right and also like even even we try to restore public or some of
00:17:14 [W] Agent notes the plant itself more than 100 megabytes.
00:17:21 [W] While we know that are some did we note on the edge in-toto? It may have like one 128 megabytes or 256.
00:17:37 [W] Megabytes, so the operator the operator operating system itself also needs memory.
00:17:52 [W] And also if we run the container on time, it takes for example containerd e in the at least 70 megabytes.
00:18:01 [W] So the resource limitation is one of the biggest challenge to manage the applications on the edge.
00:18:07 [W] and also the age and the cloud between cloud and age Network environment is quite different so many cases the
00:18:21 [W] The age May locating a private Network or behind a firewall.
00:18:32 [W] It has very limited bandwidth to the central and also the latency latency is quite a different in different cases.
00:18:44 [W] It's not guaranteed latency comparing to all the nodes communicating with each other instead.
00:18:50 [W] I de de de vendeur wore yesterday inside a club in cloudbees.
00:19:00 [W] so the network is quite unstable and also one of the big motivation of managing the applications around the age is that we want to
00:19:11 [W] Deal with some of the business serving on the edge, right?
00:19:24 [W] It is a make it able to process some of the requests on the edge directly to save the
00:19:26 [W] the end Trend latency
00:19:30 [W] And besides that we also want to the age have some of the autonomy capability so they can manage the applications themselves.
00:19:46 [W] I mean when disaster
00:19:48 [W] operate and we recovered the a you should able to recover the applications themselves and not not rely on the central Cloud to to to recover all the
00:20:03 [W] Occasions and also the age May in some cases the age may get off line for quite a long time.
00:20:15 [W] So it definitely would break if we obviously rely on the central Club.
00:20:21 [W] And also on the age we know that the agent notes have very different by Adventure.
00:20:38 [W] Some are based on the arm and some are based on x86 and also especially for the iot devices and the infrastructure device.
00:20:47 [W] are very
00:20:48 [W] Different devices and also they have very different device protocols.
00:21:04 [W] So for the end users if they want to develop the applications of the age they need to deal with the multiple different little device protocols.
00:21:11 [W] It adds the context context with bility of developing a application. So communities and the canonical
00:21:18 [W] the native technology today not yet has a very simplified solution of speeding up the application development.
00:21:30 [W] Oh, that's also the another big challenge.
00:21:35 [W] So with that background analysis, so kubeedge.
00:21:49 [W] we think that first of all, we definitely want to build based on the Nellie's as well as the general climate in that technology and besides that for especially
00:21:59 [W] To the cloud and age coordination cases.
00:22:11 [W] We we think that we have for stepped out of the husband.
00:22:14 [W] First of all is kubeedge provide seamless cloud and age coordination mechanism.
00:22:26 [W] basically even if the edge nodes are located in price.
00:22:27 [W] private Network or behind a firewall or if it doesn't have a
00:22:32 [W] Public IP address it's okay.
00:22:41 [W] So the bi-directional communication terminal itself will deal with the T upstream and downstream synchronization
00:22:51 [W] And it supports both both the data and the user data.
00:22:57 [W] And also for age autonomy kubeedge introduced the node level meter persistency.
00:23:13 [W] So even if it's disconnected to the cloud the nginx doesn't need to wait for the list of watch response from the master it
00:23:22 [W] Recovered by the self.
00:23:34 [W] So it's it's they're being ready faster and they saved the bandwidth between cloud and age by the way for the general architecture.
00:23:41 [W] are two types in the in the ecosystem. So one idea is that around in the whole communities cluster or maybe a light.
00:23:52 [W] medical genetics cluster on the edge another one is putting the nodes which the kubeedge started with running notes on the age because we think that it's
00:24:06 [W] easier to do the
00:24:09 [W] resource optimization for word the very limited use cases and it's easier to coordinate with the central clock.
00:24:22 [W] Okay.
00:24:24 [W] For the resource restriction. So what kubeedge optimize these that it removed the some of the relevant functionalities like the cloud provider
00:24:40 [W] Sorry integration. And because on the age we definitely have a very different dorji type so also because we introduced at the node level meter data persistency.
00:24:56 [W] So we kind of replace the static part functionality to make it the read from the local mayadata.
00:25:09 [W] So like
00:25:10 [W] Like being kubeedge 1.3 itself need 70 yugabyte when it started up and also kubeedge support the
00:25:25 [W] You standard ci/cd.
00:25:54 [W] elf and they can have a lot of resources to run their own applications and also for the cri-o cryo project itself need the wrong 30 megabytes, then we
00:26:09 [W] Even laws a run kubeedge on the even model agent up.
00:26:18 [W] So that's quite valuable to especially the resource resource constraint situations.
00:26:28 [W] And also for the Aged device communication kubeedge introduced the extensible framework to make users able to Define their own.
00:26:44 [W] Device protocol so and also for the underlying framework kubeedge provide a device memory lane.
00:26:59 [W] So it helps convert from the actual device to Telco to a general Telco currently Its mqtt So for application developers developers, they just need to
00:27:11 [W] Rely on mqtt and they can talk to all the devices on the edge.
00:27:18 [W] So that helps a lot of for the end users to build their applications on the edge, especially when dealing with multiple devices that consist of different protocols.
00:27:34 [W] All right. So this is a very general overview of the kubeedge texture.
00:27:50 [W] So it it have basically three apart.
00:27:57 [W] one is on the cloud the central in the public Cloud Datacenter and also one is not the H and then otherwise about the devices.
00:28:04 [W] So in the cloud if we look to the left, it's quite similar to the vanilla communities.
00:28:14 [W] So we know that there is manage all the resources resources as objects write any status change would finally
00:28:27 [W] reflect on the object status
00:28:31 [W] Dell what kubenetes did is that we have a child Court to deal with or D stuff on the edge.
00:28:42 [W] And we do the shadow management.
00:28:48 [W] He said to Burnett. He's so forgiving that is it can find some note marked with a label that is located on edge, but actually know that
00:29:00 [W] scheduler just to see the node object and they just see there are some positive to get scheduled so they will do as usual and Club core will--
00:29:17 [W] watch all the resources that are relevant to the age and it will help to dispatch all the
00:29:28 [W] updates to different agents. So today a contest from a user user perspective with content each controller
00:29:44 [W] and the club Court will
00:29:45 [W] watch all the resources that are relevant to the age and it will help to dispatch all the updates to different agencies.
00:29:46 [W] The Cloud Hunt but inside they are more of the other modules.
00:29:51 [W] I will introduce later the
00:29:55 [W] fire directional communication turnout today. We are relying on the messaging over websocket because we know that most web socket is supports.
00:30:09 [W] Both upstream and downstream with with one connection and also we support the messaging over quick.
00:30:20 [W] The web so Katie implementation today is more reliable performance. So it's the websocket is you different now.
00:30:34 [W] Alright, so at the age the most importantly are the edge Corps the besides lies lightweight kubelet. We also have a the level meter data persistency and
00:30:50 [W] yeah, we are we actually have a age harp that symmetric to the cloud how to deal with the messaging stuff and the party directional communication and also
00:31:07 [W] The messaging stuff and the party directional communication and also for the containerd runtime integration. We support a standard as your I so it's easy to
00:31:14 [W] coordinate with either dr. D or cry or other long time and also we support because we support a cri-o we support a scene and also for the CSI.
00:31:31 [W] We supported the cri-o we support a scene and also for the CSI.
00:31:36 [W] It's easy to integrate with the see a SCSI of the H Cube H itself. We actually we introduced a some CSI pluggy to hook the
00:31:46 [W] quest for the age to so users can just integrate the
00:31:50 [W] existing third-party DSi implementation and they can have the same experience managing the storage on the edge.
00:32:02 [W] And one of the big challenge is that how if we have a very big deployment and highly distributed so we may have our age
00:32:18 [W] Biggest challenge. Is that how if we have a very
00:32:19 [W] Big deployment and highly distributed so when they have our age nodes located in multiple age Sage sites, so that means that the
00:32:26 [W] A multiple age Sage site. So that means that the different age notes May located in different private Network.
00:32:30 [W] The network environment is quite different with the those in the data center about the in the data center in the cloud a to kubenetes. It's very it's actually a very simple
00:32:46 [W] take actually a very simple Network each node can talk to each other directly based on the know the IP because they are located inside of a same VDC right if you provide in the
00:32:58 [W] the cloud but the only in the edge Computing cases, it's quite different that different The Edge nodes May located in different private Network the first term for the
00:33:14 [W] Talk to each other because they even don't know which IP address is reachable to that note.
00:33:23 [W] And also for the whole networking the big challenges are how we are.
00:33:32 [W] How we store the thing I implementation because almost all over the CIA implementation today will I say relies on the data center Network?
00:33:45 [W] and also on top of that how to deal with the service and the other like us
00:33:55 [W] so today the the basically idea is that qh1 to with you. You reuse the servicemeshcon idea.
00:34:11 [W] so so basically
00:35:58 [W] But that is cluster in the cloud.
00:36:15 [W] And also you have some notes on the edge you want to manage and also you have some of the devices you want to manage from the the end, but actually
00:36:20 [W] This whole texture is very flexible.
00:36:27 [W] If for example in the manufacturing cases, the the factory may not want to have the data in the public Cloud. They want to hold on Prem deployment
00:36:38 [W] Then they can actually just installed the communities. They basically currently are the the part Market Marked with count in their Center
00:36:53 [W] Central Central room in the factory and also they can have the HHS in different work rooms. And also the the networking between the
00:37:09 [W] The cloud coredns age where they can they don't need to have the wired Network. They can just rely on wireless like Wi-Fi or 4G or we know that 5 G is definitely better
00:37:24 [W] But if even its 4G is okay.
00:37:32 [W] Okay, and also they can have the devices on their product line.
00:37:36 [W] So the the whole architecture is quite flexible really depends on how the end-user want to deploy that.
00:37:43 [W] So the Cloud Core so the Cloud Core itself is actually just the doing the shadow management of T up the stuff to you resources on the
00:37:59 [W] That for a standard vanilla kubenetes note each kubelet.
00:38:08 [W] We'll manage. We'll update the denote the resource as well as part that's running on that node to the master and on the for each Computing device he
00:38:21 [W] Is the difference that is that the actually the edge nodes are located on the edge. So
00:38:29 [W] Cloud whole flood core here will cook our Dia updates and distribute it to the remote nodes.
00:38:39 [W] Inside Cloud Core currently we have the five-part basically five modules.
00:38:59 [W] We we actually want to reduce the number of processes May to make it easier to deploy and manage.
00:39:07 [W] So H controller device controller and the same controller are in one process. They can be deployed as a pot.
00:39:11 [W] And also the cloud Hub can be deployed as a porter in are in communities.
00:39:19 [W] So each controller is a shadow management for actually the community score apis, especially the known part and
00:39:31 [W] perfume ad for services
00:39:36 [W] and and also Dr. The secrets and then the points.
00:39:42 [W] so the device controller so actually for the industry and the iot cases kubeedge provided instead of the device API device crd to simplify
00:39:58 [W] And with three part particular device protocol. So the device controller here is responsible to deal with the device CRTs
00:40:13 [W] Of cycle of device CRTs and also it's responsible for the shadow management of the real iot devices on the edge for this
00:40:28 [W] It's actually helping control needs its responsible to deal with the consistency.
00:40:44 [W] It will periodically check this tedious in to bananas and those successfully persisted on the age if there's any
00:40:56 [W] Inconsistency detected it will trigger the ring concernment.
00:41:02 [W] And also this is a very useful useful in the disaster recovery.
00:41:13 [W] So this system did doesn't need to check the whole things. They can they just need to check the current status between cloud and age and kubeedge CS driver.
00:41:26 [W] Here is actually a plug-in to hook the storage provisioning Etc.
00:41:37 [W] Hello.
00:42:14 [W] Sorry, there were some.
00:42:27 [W] Network issue on my side I'm back now.
00:42:33 [W] Let me share my slide.
00:42:49 [W] Okay. So the admission web hook here is dealing with the the crd validation and also in the long term. We will integrate the
00:43:01 [W] best the properties for example, we know that communities by default it will
00:43:10 [W] Mark all the nodes that are reachable if the node is disconnected.
00:43:19 [W] it will Market to reach post videos and evict all the pots.
00:43:32 [W] But in the uh Computing cases, we know that the difference there is that even some of the nodes are offline.
00:43:37 [W] It's kind of a expected status so user should.
00:43:40 [W] Able to customize the eviction period of time or how long they want to the they want their application stay on that note.
00:43:55 [W] That's one of the that's one of the scenario.
00:43:58 [W] And also like other steroids like that. So even if for example the estate of node is offline.
00:44:12 [W] but the Pod May the one of the agent on my get crushed when it's offline the
00:44:24 [W] Dandy portworx
00:44:33 [W] then when it come back there are data inconsistency between cloud and age in that case. We cannot simply synchronous or the status
00:44:49 [W] From Cloud to Edge because it will cause the part of fiction again.
00:45:03 [W] So in the longer term, we will enforce the perfect best practice in the relevant in Computing cases inside the admission admission web hook.
00:45:12 [W] So here is a little more detail about how kubeedge make it happen to able to manage a remote network node on the and
00:45:29 [W] So so this is when I think you are guys are very familiar with that. It's actually a
00:45:39 [W] diagram how vanilla kubernative spin up a application
00:45:48 [W] so so mighty workloads controllers.
00:45:56 [W] We know that it's dealing with the workloads API parsec o management. So it basically fetch the workloads like deployment updates and also updated code number of corresponding
00:46:08 [W] Hot and also for scheduler, it's actually just keep watching the a Scourge unscheduled parts and schedule them to some of the notes and also
00:46:23 [W] For kubelet H come lad just the watch the parsec edulearn to its current corresponding node and the manage the the product life cycle after schedule, right?
00:46:38 [W] So if you look at all the labels marketable 0 is basically tells us the when the system spinner, right the controller's the schedulers.
00:46:54 [W] Kublr heads will create watch to the API server right with the future with their own Futures, right?
00:47:05 [W] And also then for example, we say that a and use user created one deployment with Kuma Kudo command to look at the
00:47:23 [W] With the Department of llamo and also the underlying it ci/cd interaction at CD interaction.
00:47:34 [W] It's basically just a persistent thing the metadata updates right? So once the deployment llamo is submitted it will be stored in the
00:47:47 [W] It's CD and then I guess ever got notification from that CD.
00:47:54 [W] The department is created and their the deployment controller get a notification that deployment is successfully created and then the deployment controller without that.
00:48:07 [W] actually creating the replica sets and their replicas sets created the number of pots right and then the portworx.
00:48:16 [W] Parts get persistent persistent and then the part I guess ever forward the notification that part part successfully successfully created to the scheduler
00:48:31 [W] And scheduler will schedule parsec reading multiple scheduling policies and finally update the pot step right to to fill up with the know the name we call that binding.
00:48:46 [W] But buying the pot to window and then the specific note the kubelet will get the update that poddisruptionbudgets.
00:49:11 [W] And so what Q beige hooked in this life cycle four parts is actually is actually the step out of line here.
00:49:30 [W] So how kubeedge work in this case actually after the schedule scheduled a pod?
00:49:45 [W] It's not directly the kubelet guarding of the creek notification, but the cloud corn so actually the age controller got the notification so actually age
00:49:57 [W] controller will get all the product in it notification, but it will filter it deal with only the part that that are scheduled to the agent knows
00:50:12 [W] Because the age controller know everything so it can easily to a few other day to know spy name and get the corresponding pot and then it will.
00:50:26 [W] Build up with a message and Lady Cloud Hub to Sandy and notification to the corresponding node. So here
00:50:38 [W] the reason why we have a cloud, huh? Bandage Hub here is that we know that the H nodes May locate in private Network.
00:50:54 [W] It doesn't have a public IP address or it may be behind a some of the firewall, right? So actually the the when the system starting up th core is
00:51:04 [W] actually create starting the
00:51:07 [W] Communications it will request it to the Cloud Core to build a bi-directional communication terminal and then it will the Eternal will keep their and was
00:51:24 [W] Departed scum the cloud Hub knows that and it will send it the message to the corresponding Edge Corps.
00:51:33 [W] All right, so when the age core of the club hop got the notification first of all where it will let B Be nimitta manager.
00:51:44 [W] No submit a manager here is basically a node level metadata persistency. So for the metadata storageos,
00:51:53 [W] Each back end here on the HTML code we using actually using sqlite country because it's it's kind of only actually caching the nodes
00:52:08 [W] On the note. So SQL Lite. It's a very lightweight and simple storage for database for storage in like the
00:52:23 [W] metadata is if any inconsistency happened or if it's broken, we can still synchronize from the central cloud from the community say Pi server from the at CD because
00:52:39 [W] There they have the whole set of the data there.
00:52:45 [W] So then when persistency succeeded the media manager will forward the event to the HD HD is actually a light weighted kubelet.
00:53:01 [W] And the HD will spin up the pot on the you know, okay, so so I actually if you are ignore the Cloud Core steps in the middle.
00:53:17 [W] It's actually quite similar compared to the vanilla kubelet behavior in the cloud. So basically we we had added Mew few more steps to forward to the
00:53:29 [W] notes on the age
00:53:32 [W] Okay. So on the edge side, we actually also keep the idea that we want. We want to run how stuff inside the process
00:53:48 [W] So make it easier to manage So currently we have the following modules and for different use cases users are able to disable the
00:54:04 [W] Model if the it's not usable in that case, for example, if some of the user like running kubeedge in a CDN cases they may not be
00:54:18 [W] Yeah, device management functionality so they don't need that.
00:54:31 [W] All right. So for the edge Harbor it's a symmetric implementation compared to the cloud Hub.
00:54:38 [W] It's still dealing with the bi-directional communication.
00:54:39 [W] Okay. So me to manage here is actually a node level metadata persistency.
00:54:50 [W] Right? The HD is the lightweight kubelet implementation. So basically we we
00:54:56 [W] We are actually reconstructed of vanilla kubelet modules 2.
00:55:04 [W] Remove the like cloud provider storageos limitation.
00:55:13 [W] And device string here is actually to deal with your device of status updates between cloud and also persisted on the edge node for the applications to process
00:55:29 [W] In the boss is actually the client implementation to talk with the mqtt broke.
00:55:44 [W] And also the management here is a like I said, I'd say a multi-layer functionality to deal with both service and
00:55:53 [W] This as well as DCI, so the difference between each mesh and cni-genie here. Is that scene I so the kublr 8 qh in the kubeedge project.
00:56:08 [W] We don't want to rebuild DCI even even though the current cni-genie limitation.
00:56:15 [W] Cannot deal with cross private network communication.
00:56:22 [W] We want to make it that is that the existing third party and I they can still deal with the crust know the communication inside one network when it's cross subnet.
00:56:37 [W] crash communication which mesh will help to forward like use the for example petabyte-scale now or we rely on some data Bank notes to forward the packages
00:56:53 [W] For the monitoring currently we support the the standard The Matrix in the face.
00:57:02 [W] All right, so that that's basically how kubeedge works and the way I will quickly go through the few updates about latest Cube which release so we just have our
00:57:22 [W] 1.4 release and by the end of last week. So since since last week time we met we we improved the componentconfig.
00:57:37 [W] And comfy so now you can easily use declarative basically the community style of API to config kubeedge components. And also we provide the minimal configure and also the
00:57:52 [W] Full default config command to help generate config file with defaults for the know the setup. We are providing the age no door to automated registration
00:58:07 [W] And and also automatically enforce the TLs between Edge nodes and the cloud hop and Cloud Core.
00:58:21 [W] And also we introduced the D automatically set of akane rotation. So users don't need to worry about certificated exploration in each Computing cases.
00:58:32 [W] We also have a installer to it's called the K and me.
00:58:42 [W] So again, we are reusing the idea we have in the vanilla communities in the data set Center. The encasement recently is we added the center will support and
00:58:55 [W] Especially we added the rest rest be and support so so now user can easily use one command K the me join to set up a node in the rest Raspberry Pi.
00:59:10 [W] also for the club had the high availability availability problem is that we we implemented active standby mode for also integrated with Randy skates
00:59:27 [W] Another thing I want to highlight here. Is that Cube kubeedge itself the Cloud Core, even it just it just have one active instance at the same time it can
00:59:42 [W] Manage one up to 1,000 H nodes. So we think it's a good status from now and with the community are keep working to improve the scalability.
00:59:57 [W] Okay, and then another thing is that we proved the Dr. Reliable message delivery delivery between between cloud and
01:00:13 [W] the whole system more stable
01:00:16 [W] and for containerd runtime, we the community verified the integration of trial and the cutter containers and also both the x86 and arm
01:00:32 [W] actor especially on the 7 + V 8r verify and for the observability users are now able to use
01:00:48 [W] Kogai-dono logs to collect all the logs from the pods on the edge node 2 D to the club basically to the to the where you run the command and also
01:01:01 [W] The Matrix we supported communities metre server for collecting both those in the cloud and those are in the age to basically kubeedge the idea is that we want to extend the
01:01:16 [W] You look to win that is to make one cluster able to manage both note Class Clown notes and ages.
01:01:24 [W] All right, and that the big Improvement in 1.4 is the device management. So we actually are modified a bit that the API so added more
01:01:41 [W] Prodi-g the capability of customizing the TD industrial protocol and also added the functionality
01:01:56 [W] For users to process some data on the age. For example, we know that in many cases the the iot device May produce a lot of
01:02:11 [W] Massive data, we need to use some future to to reduce the data and fetch the one we want.
01:02:20 [W] So so with the data section and the data pipeline integration, it's easy to to do that and also for the the basic basic properties.
01:02:34 [W] We move the property visitors from to as model to to actually device instance API. So because we think that we found that in many cases the device properties May.
01:02:50 [W] Be different in different on different devices instances.
01:02:56 [W] All right.
01:02:59 [W] For the community are released development So currently kubeedge is doing a release every three months.
01:03:17 [W] basically, it's We are following the semantic version is back and community. So actually we are also doing quite communities way. We do we will you are.
01:03:31 [W] View the feature planning in the beginning of each release cycle.
01:03:38 [W] And also we will do the code phrase when it has to do with its to wasted two weeks away to the final release of each recycle the
01:03:50 [W] Except only bug fixes and document updates on the until the release out to make the release stable. And another thing I want to highlight is that
01:04:02 [W] because we know that the DD lying a hardware architecture reality So currently both x86 and arm are supported as a knative architecture through how
01:04:18 [W] And knative architecture through how release life cycle for the code a code is actually very general right there from the Butte to test ship and run.
01:04:30 [W] We have the on base to see I and also we have the cross Butte course testing scripts and test cases.
01:04:39 [W] So a little bit about the community updates currently we have around 400 contributors all over the world and more than 130 contributors
01:04:58 [W] And we also have the over 30 organizations working inside the community.
01:05:10 [W] It's covering the cloud provider it service provider Hardware Hardware vendors and also the iot vendors and economic economic academics.
01:05:21 [W] And also kubeedge Community currently.
01:05:28 [W] It's moving to the sake based governance model.
01:05:36 [W] So recently we started two new six one is device iot see that Sig is more focusing on the device management cases on the age and also
01:05:47 [W] That's a is more focusing on the device management cases on the age and also responsible to support the improve the extensibility of
01:05:53 [W] To support the and improve the extensibility of integrating more industrial progress.
01:06:03 [W] Another is the cgroup me see it's it's focusing on improved kubeedge to become a relevant reference architecture of
01:06:14 [W] Infrastructure for 5 G and M EC and the currently the the Sig is collaborating with cncf TRG Telecom user group and also the rfh project.
01:06:30 [W] We have a to brew irrelevant blueprints inside cradle Aquino is the project under age.
01:06:43 [W] All right.
01:06:48 [W] So this here we have a few contributors here so we can found that the community members member companies include the cloud
01:07:00 [W] A few contributors here so we can find that the community members member companies include the cloud providers.
01:07:03 [W] I it service providers and we also have the telecoils and also the hardware and iot vendors kubeedge itself turns to have more data
01:07:15 [W] hardware and iot vendors kubeedge itself turns to have more DNA
01:07:16 [W] 20-year doctors and the so the biggest use case is the Kleine Highway provincial electronic tolling system.
01:07:30 [W] It's currently managing.
01:07:32 [W] More than 50,000 those so very impressive.
01:07:38 [W] Yeah, this is more a little more details about the use case.
01:07:51 [W] So basically the so actually in China the highway system is very complicated and also the tolling system they have is highly distributed
01:08:00 [W] In-toto there.
01:08:05 [W] There are more than 100,000 notes to manage So currently they use the kubeedge and in the cloud the kubernetes to manage the whole infrastructure so they can do
01:08:18 [W] The Count 2 together model to recognize the car number plate and also shape the models to the inference in most
01:08:34 [W] And also shaped the models to the inference in most inferencing model to the age and the age notes will recognize the car plate and also trigger the
01:08:44 [W] The car plate and also trigger the electronic tolling so one of the progress currently that the system is.
01:08:54 [W] dealing with over 300 million data records Pradesh a and for the car passing through the toll station it improved
01:09:10 [W] II II II II sand the for truck it reduced the from 29 almost 30 seconds to 3 seconds, so very impressive currently the
01:09:26 [W] and the user are still doing more work to adopt deeper kubeedge to introduce the VA Go corporate system and
01:09:42 [W] Provide the the central video cloud and improve the AI algorithm to make the whole system smarter.
01:09:55 [W] All right, so future plan. We still want to improve the the observability and then maintainability so and the simplified like
01:10:11 [W] to improve the the observability and then maintainability so and the simplified like a remote debug from the cloud to the edge and
01:10:15 [W] Box from the cloud to the edge and also improve the cross subnet communication. So currently the implementation is relying on the Gateway nodes in the future. We want to
01:10:27 [W] Hang on the Gateway notes in the future. We want to implement with Peter Peter nalini technology.
01:10:36 [W] And also like other Technologies like ST1 and also for applications. We will we are going to provide decentralized security.
01:10:46 [W] Physically the identify identification for authentication for the applications on the Edge from community-wide. We think we're currently applying for cncf
01:11:02 [W] still under voting princely and we want to improve a better Keda Builder experience and also the have more contributor events and we
01:11:18 [W] I'm more contributor events, and we also organize more the events. And also we made two more out across Community canonical aberration.
01:11:29 [W] So these are the used for use of resources about the community.
01:11:39 [W] All right, then I will share with you the demo because of the time I record recorded.
01:11:49 [W] recorded with your video
01:11:52 [W] Okay, so
01:11:59 [W] hold on a second.
01:12:03 [W] Alright, so the first demo is the device management, that's actually with this device developed against the device.
01:12:22 [W] cri-o DV 1 Alpha 1, but it's I think it's it's simple enough to easy enough for the the body attendees to get the idea that how qh
01:12:35 [W] Alright, so the first demo is the device management, that's actually with this device developed against the device.
01:12:37 [W] cri-o DV 1 Alpha 1, but it's I think it's it's simple enough to easy enough for the the body attendees to get the idea that how qh
01:12:39 [W] See our D works and can manage the devices on the Node because this one in this case we are actually connecting the device with wires.
01:12:51 [W] So we actually the mapper here is converting the mqtt to the to the
01:12:58 [W] Trudy what to to the Isle of the Raspberry Pi so it's a little bit different to the real world.
01:13:11 [W] We are actually converting to a from a MTG to a industry of protocol.
01:13:22 [W] Alright, so in this in this department, we use Kudo to get notes and then we can find that one.
01:13:26 [W] We have one notes on the edge.
01:13:27 [W] It's a Raspberry Pi and that one.
01:13:29 [W] Our time was based on the debate 117.
01:13:34 [W] Yeah, and then we have the traffic light upon. This one is actually a device mapper implementation to deal with the traffic light management covered from the sea are D change it to the
01:13:52 [W] So to get notes and then we can find that one.
01:13:53 [W] We have one notes on the edge.
01:13:54 [W] It's a a Raspberry Pi and that one that time was based on the to page 117.
01:13:56 [W] Yeah, and then we have the traffic light upon. This one is actually a device mapper.
01:13:57 [W] I implementation to deal with the traffic light management covered from the cri-o.
01:13:58 [W] D change it to the to the light.
01:13:58 [W] That could be a gpio gpio output and here by default it is off.
01:14:05 [W] So, let me just go few seconds back.
01:14:08 [W] Sorry here.
01:14:14 [W] Yeah, so so the we introduced that the device between section in the device TR D status.
01:14:26 [W] So the training basically they have to part one is divided desired.
01:14:30 [W] Another one is to report it. So simply you can change the desired from off to on and it will turn on.
01:14:39 [W] the corresponding light to on
01:14:43 [W] In this case, we actually do coded the gpio details in the mapper. So from at the ci/cd side you it's very simple.
01:14:59 [W] CID side you it's very simple, okay.
01:15:01 [W] alright save it and then you can find out the red light is on and also we can change to change the
01:15:13 [W] the green light on
01:15:16 [W] and it just says saved and the open my design and also we can change like the yellow light.
01:15:26 [W] Or we can just turn off the red light.
01:15:31 [W] And also turn off the green light.
01:15:35 [W] Yeah. This one is very simple actually.
01:15:41 [W] Yes, that's more iot relevant.
01:15:44 [W] It's and the actually the the load is how you design your mapper and how you deal with the the device
01:15:56 [W] Our simple actually because there's more iot relevant.
01:15:57 [W] It's and the actually the the load is how you design your mapper and how you deal with the the device
01:15:58 [W] So I'm not going to throw too much details here. If you have any questions where you want no more details. You can also enter the examples repository on
01:16:12 [W] Kubeedge GitHub, you can find the body code there.
01:16:17 [W] All right, and another one demo here is the
01:16:31 [W] the facial recognition
01:16:36 [W] Alright, so here I must using the reservoir of high as a genoud and for the camera.
01:16:47 [W] I'm using the latest.
01:16:49 [W] It's a 8 8 million.
01:16:52 [W] Camera eight million PX.
01:16:58 [W] I think yeah.
01:16:59 [W] And go through quicker.
01:17:08 [W] Okay. So right here on the right is actually a Kuma Keda Lon terminal and on the left. It's turning on the remote view of the
01:17:21 [W] Node because we want to view the video there. Okay, so I Trend the model in the cloud and it's based on the
01:17:36 [W] So respirator pie we can we have the CPU there we can rely on CPU to do the facial emotion recognition there.
01:17:52 [W] So here we can sound the the way I changed the application and also upload it to the cam and also sorry.
01:17:59 [W] All right Studio spice kind of covering.
01:18:12 [W] All right, so we because we also want to preview the the emotion recognition. So I set up the environments to display the video window.
01:18:19 [W] And also I mounted the the responding hardware and is the reservoir. Hi so made the containerd able to fetch the
01:18:30 [W] video frames
01:18:32 [W] All right, then.
01:18:38 [W] Let's apply these llamo.
01:18:39 [W] Okay, you can find out the video window is out so you can find it.
01:18:55 [W] It's actually a recognizing the emotion rapidly.
01:19:02 [W] The emotion recognition so I set up the environments to display the video window.
01:19:11 [W] And also I mounted the the Chris ponding hardware and is the reservoir. Hi so made the containerd able to fetch the video frames.
01:19:12 [W] All right, then.
01:19:12 [W] Let's apply this llamo.
01:19:13 [W] Okay, you can find out the video window is out so you can find it.
01:19:13 [W] It's actually a recognizing the demotion rapidly.
01:19:15 [W] Okay, so and also a little bit details inside the image actually are
01:19:17 [W] We have the trend of models inside there and the underlying AI framework. We we used petabyte-scale here in this time.
01:19:26 [W] But oh hello is a open source framework. It's it's kind of equivalent to the tensorflow.
01:19:34 [W] Yeah, actually are you can find out the so this image is actually the image size is around 500 megabytes and most of the space is used by the
01:20:00 [W] details inside the image actually are
01:20:01 [W] We have the channel models inside there and the underlying AI framework. We we used petabyte-scale here in this time, but weather is a open source
01:20:03 [W] H and the for the model here, it's actually a very small model.
01:20:11 [W] It's only about 80 80 megabytes.
01:20:14 [W] Yeah.
01:20:15 [W] All right, that's worry about the demo because it's online tutorial.
01:20:25 [W] So we don't have a very good including to action experience about trying it out but yourself, but please feel free to ask any questions here.
01:20:39 [W] I need the community to ask the questions. We are the most of the community vendors members. We are available on the stack.
01:20:51 [W] Let me share the Community Resources.
01:21:00 [W] All right, and while these for resource sharing will check if there's any
01:21:06 [W] questions
01:21:10 [W] All right.
01:21:18 [W] I'll show maybe I need to stop sharing and there's answer the question.
01:21:19 [W] Okay.
01:21:21 [W] Yeah, let me repeat the question first the from Alexander.
01:21:41 [W] high is age have a websocket client or server in regards to the cloud hub.
01:21:50 [W] In other words. Is it who initiates the website connection?
01:22:01 [W] All right, so so actually Cloud hobby is the website server because in the cloud weaveworks.
01:22:02 [W] And for each each node, when it's spinning up, it will send a request to the cloud Hub to initiate the web search in the connection.
01:22:26 [W] So it means that each Hub is the website client and the the cloud have is the server.
01:22:36 [W] All right, and another question from
01:22:43 [W] From Alex.
01:22:48 [W] Thanks for the Tas tutorial.
01:22:53 [W] I was wondering maybe you tell us more about the CID abstraction provided for device in the kubeedge.
01:22:57 [W] Thanks thing about this.
01:23:01 [W] Thank you for your thank you for your question.
01:23:02 [W] This is a very good question.
01:23:07 [W] So actually we we change it a little bit on the device ERD in ladies 1.4 release.
01:23:12 [W] Lady stop date. You can actually find out the either GitHub or from kubeedge Community website take uh Community website is kubeedge dot IO + qh GitHub is actually
01:23:28 [W] Github.com / Cube Edge and you will find the detail ci/cd obstruction there.
01:23:39 [W] All right, we are running out of time.
01:23:47 [W] So I will end my top now.
01:23:50 [W] I can see a few more questions there.
01:23:54 [W] Thank you for your joining.
01:23:55 [W] Please answer ask your question in the slack Channel and I will be a surrender and also there we have a few more other community members there.
01:24:06 [W] All right.
01:24:08 [W] Thank you for your listening.
