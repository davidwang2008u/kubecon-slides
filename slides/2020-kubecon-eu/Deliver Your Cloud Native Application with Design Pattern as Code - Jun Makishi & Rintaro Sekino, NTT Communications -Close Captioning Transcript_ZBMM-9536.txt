Deliver Your Cloud Native Application with Design Pattern as Code: ZBMM-9536 - events@cncf.io - Tuesday, August 18, 2020 7:00 AM - 454 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:00:06 [W] Hello everyone.
00:00:09 [W] My name is Jim Mackay. She and thank you for listening to our session deliver your Cloud native application with design pattern as code.
00:00:12 [W] So I was supposed to make a live spot to ask you some questions about how you take care of infrastructure as code.
00:00:24 [W] But because this is a recording session I will give some questions here is your infrastructure as code where organized.
00:00:32 [W] Do you share your code to other team or does your team spend a little time on infrastructure compared to application development?
00:00:42 [W] Our today's proposal will solve some of these questions.
00:00:47 [W] The takeaway of this session is infrastructure as code must solve consistency and reusability for infrastructure manifest and is delivery pipeline in other words infrastructure configurations, and
00:01:05 [W] State of the pipeline should be managed in a consistent manner.
00:01:09 [W] And our answer is design pattern as code which comes from our production experience.
00:01:18 [W] Again, my name is Jim Mackay. She senior architect at NTT Communications. And we also have rintarou tsukino whose site reliability engineer at NTT Communications as well and he will take care of the demo session later.
00:01:36 [W] So before describing design pattern as code, let me introduce our company to give you some context of our proposal.
00:01:47 [W] NTT Communications is a global ICT service provider which has a global footprint.
00:01:57 [W] to provide end-to-end ICT infrastructure service to customer
00:02:02 [W] these are some examples of our internal projects using the cognitive Solutions.
00:02:13 [W] We are 50 more to use software than before to meet customer needs.
00:02:26 [W] For example, our operation team is has built and Cloud architecture to monitor Network equipments.
00:02:27 [W] Also, there is a sorry team to manage containerless application and its release Pipeline and we are another SRE team to support any Theory and application development cycle.
00:02:40 [W] One of the software project window and I have worked on is flexible interconnect projects.
00:02:51 [W] which offers an API to let customer control private connectivity between their data center cloud and even SAS.
00:03:00 [W] Behind this API. We also use cloud knative Solutions. And also we use infrastructure as code practices.
00:03:09 [W] So the point was we have many projects and we use infrastructure as code at scale in terms of having multiple projects.
00:03:21 [W] But using infrastructure as code at scale we see some challenges.
00:03:28 [W] We try to codify everything about infrastructure following the best practice.
00:03:34 [W] We wrote many scripts. We have configuration managed by the gate and we expected the benefits of reusability consistency and transparency.
00:03:50 [W] But the reality is chaos.
00:03:54 [W] We see the more code base grows. The more called Gap got complicated and fragile.
00:04:02 [W] There are many projects specific specific batch scripts baked into the pipeline, which makes it harder to share.
00:04:11 [W] Parameter is also our pain point.
00:04:14 [W] And as a result, we are called got tangled.
00:04:20 [W] There are many dependencies between different tools, and we finally are scared to make any changes to a pipeline. So we don't see reusability inconsistency anymore
00:04:34 [W] Did we lacked discipline maybe?
00:04:37 [W] yes, but I believe it was not the only case.
00:04:41 [W] So what we wanted for infrastructure as code, we wanted to write code using software practice like making a module to share to others.
00:04:56 [W] We want to one interface for every infrastructure provider. If you want most importantly we want pipeline baked in into this architecture design.
00:05:09 [W] So we propose new way of infrastructure as code name design pattern as code.
00:05:18 [W] It is reusable and composable pattern of cloud native architecture written in a powerful language for a software developer.
00:05:28 [W] So what is design pattern as code the same pattern as code addresses questions about cognitive architecture how to deliver a cloud native application and how to integrate cognitive Solutions design
00:05:45 [W] Turn declares all of the infrastructure provider manifest and pipeline.
00:05:51 [W] It is a small portion of manifesting pipeline, which is composable with other design pattern.
00:06:01 [W] Specifically we use Q Lang for design pattern and it consists of infrastructure manifest and the DVD pipeline as shown.
00:06:13 [W] For the resource declaration. We allow an ummah dating all of the resource configurations for infra prob'ly infrastructure provider.
00:06:24 [W] And we also have design pattern declaring tasks to be executed in the pipeline.
00:06:31 [W] Those tasks will get a symbol to tekton pipeline.
00:06:38 [W] We chose tekton because it has a declarative API and each task is isolated from others as shown in this figure.
00:06:53 [W] We compose design pattern tasks into pipe tekton pipeline.
00:06:57 [W] Again, we use cues and for design pattern as code using Q leg. We compose multiple design patterns and generate infrastructure manifest.
00:07:13 [W] For example, we generate kubernative manifest TCP as you the best manifest.
00:07:17 [W] In addition. We also composed the patterns to generate tekton pipeline.
00:07:22 [W] Q then is a powerful typed language focusing on declaring data.
00:07:30 [W] It's designed for scale and it gives us a consistent results composing multiple patterns.
00:07:37 [W] So I just gave a basics of the same pattern as code.
00:07:44 [W] So let me give you one example.
00:07:48 [W] Assuming we have a pi server simple API server server running on DCP cloud.
00:07:59 [W] The resource configuration could be like this having Ingress service deployment kubernative manifest Cloud monitoring and Cloud SQL gcp resource.
00:08:08 [W] This resource configuration can be break into three patterns based pattern API pattern and DB pattern.
00:08:19 [W] When we show how we compose such patterns into a complete manifest.
00:08:28 [W] With bass pattern we could have a bare minimum manifest of deployment as shown here.
00:08:35 [W] On adding API pattern we need add Ingress and service resource.
00:08:48 [W] And also we need to compose some parameter parameters to deployment manifest to Route traffic to the containers.
00:08:54 [W] For this EP resource.
00:08:58 [W] need some up time check config to check the health of the API.
00:09:01 [W] On adding DB pattern we obviously need cloudbees Q instance config.
00:09:15 [W] And also we want to compose Cloud SQL proxy as a sidecar.
00:09:18 [W] Run inside the car proxy is a solution provided by Google Cloud documentation.
00:09:29 [W] So this is definitely a best practice a pattern to use cloud SQL.
00:09:33 [W] This means user just need to subscribe the DB pattern to start using Cloud SQL best practice.
00:09:41 [W] Next I will show how we compose pipelines having bass pattern.
00:09:51 [W] We only have this very basic pipeline building the image and deploy it to kubernative.
00:09:57 [W] On the right side figure you can see tekton pipeline definition.
00:10:03 [W] I highlighted the tasks generate manifest where we compose multiple patterns to genetic manifest as described before.
00:10:14 [W] On adding API pattern we may want to add a task to check API right after the deployed ask.
00:10:30 [W] And on adding DB DB pattern, we may want to add backup DB task before to deploy task.
00:10:42 [W] Such tasks will get composed into the original tekton pipeline definition as shown in the right figure.
00:10:49 [W] So I have showed design patterns for both for manifest and pipeline separately and the complete API pattern could be like this.
00:11:08 [W] It would have manifest and pipeline in the same context.
00:11:10 [W] So this is an example of a pi pattern implementation as mentioned.
00:11:18 [W] We use queue length. And in this definition, we declare resource configuration and test configuration.
00:11:26 [W] design pattern could have parameter such as domain name as shown and in this example, we use this domain name parameter for both up time check config and check API task
00:11:42 [W] This means on changing this parameter both up time check config and the task.
00:11:49 [W] check API would get updated automatically.
00:11:52 [W] This small example shows how design pattern has code help keeping consistency between configuration and pipeline.
00:12:02 [W] This is an approach of similar to a software development practice to make a small package.
00:12:11 [W] 2Pac resource and tasks in a single context
00:12:16 [W] So finally it's demo time.
00:12:27 [W] Let me take hand over this presentation to rintarou. Okay. Today. We're going to have a small demonstration to describe our design pattern as called core concept as John described
00:12:37 [W] In the previous right when we launch new micro service, we have to consider not only the kubenetes Manifest but also public Cloud layer resources monitoring functions or application delivery flow.
00:12:53 [W] So in this demo session, we will describe how tech leads deploys and application with design pattern.
00:13:01 [W] Okay.
00:13:06 [W] Okay, this I will show you two steps Demo First Step.
00:13:13 [W] just deploy an application and second step the pro application and Export API endpoint and create monitoring functions after this demonstration before that.
00:13:26 [W] me share my screen.
00:13:28 [W] I think
00:13:30 [W] okay.
00:13:34 [W] After them session, the AP application is working with this end points. This is not working right now and also add add the app time checks Google app time checks to this page.
00:13:50 [W] Okay, go to the simple application depository.
00:14:00 [W] This is the multiplication Depot. Then Target application is simple flask up this one. This just response hard word for the user
00:14:12 [W] API request
00:14:14 [W] this one
00:14:16 [W] and also I will show you upload queue file upload queue file is this is kind of manifest file to Define which design pattern you want to use in this file.
00:14:32 [W] You can decorate application specific input parameters like TCP project IDs and GK crust has information for application deployment.
00:14:47 [W] and also most important Point these
00:14:53 [W] You can see.
00:14:55 [W] Deployment kubernative manifest specs and also tekton pipeline specs for containerd build and deploy
00:15:11 [W] Jen tasks
00:15:13 [W] Okay. Anyway, let's generate tekton pipeline using this design pattern.
00:15:26 [W] Okay, let me follow this lead me.
00:15:28 [W] Copy and go to my screen.
00:15:36 [W] And anyway, just run generate tekton pipelines and apply it.
00:15:43 [W] And let me run first - grunts. Okay.
00:15:51 [W] Okay, then let me show you a little bit this generate tekton pipe wrench out.
00:15:58 [W] Okay, this is just simple shell script and toyokalon running container to run off self-image and specify which they Source type this type this time.
00:16:16 [W] Specify tekton Pipeline and specify application divisions and design pattern division as well.
00:16:27 [W] Okay.
00:16:29 [W] Okay, then I'll I will show you okay script and let me go to the
00:16:39 [W] tekton dashboard to show the what's tekton resources, right?
00:16:48 [W] Okay, I think you can see contain a bitter task.
00:17:04 [W] This task is optimized for our environment. So developers can build containers with children the container built environment.
00:17:09 [W] And actually we leverage the builder kit and using local cache.
00:17:14 [W] like this
00:17:16 [W] and also
00:17:20 [W] He's from Detroit kubenetes. Then I will show you the compile step.
00:17:31 [W] Okay, actually in this previous shell command.
00:17:37 [W] We generated tekton pipeline resources.
00:17:41 [W] Ever impact flying compare task generate kubernative manifest of application based on design pattern.
00:17:49 [W] I will show you all this one. I think this is actual tekton task step and specified.
00:18:00 [W] upload queue file and output llamo pipe after that generate
00:18:07 [W] Cuban artists namespace and also deployment
00:18:13 [W] This is very simple design for demo in actual design pattern. You can add the bonus and region has proof or adding annotations or specified correlations based on your application
00:18:29 [W] Mint. Okay.
00:18:36 [W] Let's move to the Second Step demo.
00:18:38 [W] Okay, according to my face does not deploy Ingress and the service so we have to update design pattern to expose API endpoint and monitoring functions.
00:18:52 [W] Okay, let me show you what to do.
00:18:59 [W] Okay, let me change the my our Branch. Okay at first generate tekton pipeline
00:19:15 [W] I'd same as previous version.
00:19:18 [W] And also sang it first.
00:19:25 [W] Okay, then pipeline just kicked em before I go to tekton dashboard and me show you a little bit what for new stuff.
00:19:43 [W] Okay. This is a beef you can see the import is not new design pattern DCP API and added new input parameters to specify the
00:19:55 [W] Robot IP name or domain name and also for this is just buying parameters.
00:20:05 [W] And a trust and it happened check config.
00:20:10 [W] Okay, then let's go to the tekton - were liking.
00:20:18 [W] This is the running.
00:20:28 [W] Actually the building image party is totally same with previous one and deploy kubenetes is now just started.
00:20:36 [W] Okay.
00:20:40 [W] Working okay, just comparing now.
00:20:47 [W] As you can see the compiler part is totally same.
00:20:55 [W] Actually division but version is has been updated then you can see generated new kubernative manifest.
00:21:09 [W] Okay, you can see new deployment new communities manifest. You can see the Ingress parts.
00:21:20 [W] and we start Asian kubernative Ingress and specify Global study guide be specified specification and the also the service part you can see service resources
00:21:35 [W] And around stations that Google Cloud Network in the point group.
00:21:42 [W] So as you can see that.
00:21:47 [W] You design pattern generate these kind of update and also you can see check the API task. So this means the new design pattern also.
00:22:02 [W] or update the tekton tasks as well and create up time checks resources and check API availability waiting
00:22:18 [W] API works fine, then it works. The this pipeline Works worked fine then let me check the application status.
00:22:32 [W] Okay.
00:22:34 [W] Hello world.
00:22:40 [W] This means new design program is working fine. And in the pointy rocks fine, and also check the uptime checks.
00:22:49 [W] They may be low.
00:22:50 [W] a holding
00:22:58 [W] Okay, you can see kubectl on them up actually check status is have run have not drawn yet, but I think this takes
00:23:17 [W] A few minutes I think maybe it's will be fine.
00:23:23 [W] Okay.
00:23:25 [W] This is one with the design pattern user scenario.
00:23:34 [W] I think that's all my that's all my demonstration as I shown at the API endpoint and create optimal checks Resources by just change design pattern.
00:23:43 [W] as you wish owned
00:23:46 [W] They're it. API endpoint is working fine.
00:23:53 [W] can see Hello World and also the you can check the uptime checks.
00:23:58 [W] OD load
00:24:01 [W] Okay, you can see Kuma count them up. Then all status.
00:24:11 [W] It's going okay.
00:24:13 [W] That's all from that all my demonstration, right?
00:24:19 [W] So thank you for the wonderful demo in Tarot.
00:24:22 [W] The point was that user just subscribed the API design pattern and then user can easily expose its applications API to customer
00:24:31 [W] This implies that design pattern could be written from written by different engineer like the one who is specialized in a Google Cloud Google Cloud specification because it requires some up jump up time check config and some other load
00:24:46 [W] Answer specifications and user just need came focus on the other flask application in this demo.
00:24:58 [W] So this means that we can apply this scenario to the many others cases.
00:25:02 [W] For example, we can apply this into the security scenario having a dedicated security team who can just focus on the design pattern for the security and enforce the security policy like having a
00:25:17 [W] Security check scanning a container but renewability check scanning and others
00:25:24 [W] In addition, we can also apply this design pattern to observability. We can have another team who can write a design pattern to establish a monitoring use case.
00:25:41 [W] Have some agent to collect the metrics telemetry's and send it to some back end.
00:25:49 [W] back-end. For example, we met we can have some design pattern / when turning back and like datadog or maybe stackrox Ivor Cloud watch and so on.
00:25:58 [W] And then in also we can use this design pattern to just swap the platform.
00:26:11 [W] We just need to prepare design pattern for platform.
00:26:19 [W] And if you want to just move your application, you can just you just need to swap the the pattern to the other platform.
00:26:20 [W] So I think the design pattern has many potential and let me add more about design pattern as cold.
00:26:29 [W] So design pattern has code is a new interface for maximizing product value stream.
00:26:39 [W] It is to right infrastructure as code with that software practice to scale and also includes pipeline to architecture design.
00:26:50 [W] And design pattern as code that developer reuse where architected patterns and reduce infrastructure management cost as a results developer can focus on its application business logic
00:27:05 [W] more before
00:27:07 [W] well design pattern is called is one of the implementation of the idea of configuration as data an approach to generate configuration in a pipeline.
00:27:25 [W] But design pattern is called is unique because it covers pipeline as well.
00:27:28 [W] I must leave note that the design pattern is called doesn't solve every problem set up around infrastructure as code design pattern is a new interface new to link, but it to use it in the production from I we believe
00:27:48 [W] That it requires another layer to do the State Management.
00:27:52 [W] So we entity Communications have built a new platform on top of design pattern as code State Management, which I described in the previous slide is already built in this platform.
00:28:14 [W] And we also automate all of the operations around using design pattern as code for example parameters handling.
00:28:22 [W] So our as a results our platform lead developer easily subscribe patterns and truly focus on their application development.
00:28:32 [W] Oh, and I need to mention that this platform is only used for the internal project for now.
00:28:45 [W] But if you guys are interested in please reach out to us.
00:28:45 [W] At the end we proposed design pattern as code.
00:28:56 [W] It is reusable and composable pattern of cloud native architecture design patterns code includes both manifest and Pipeline and solves consistency and reusability for those pipeline manifest.
00:29:08 [W] Thank you for listening our session and if you guys have any questions, feel free to reach out to us at Twitter.
00:29:21 [W] We are happy to have some discussion about infrastructure as code in general as well.
00:29:24 [W] Thank you.
00:29:27 [W] Okay, so it's live Q&A session now.
00:29:39 [W] Thank you for listening.
00:29:42 [W] Let me pick some of the questions we have here.
00:29:46 [W] Let me see this one.
00:29:52 [W] I'll first published the answer to the public.
00:29:52 [W] So that you guys know that all these are no the question.
00:29:57 [W] So the question is about the design pattern as a gold.
00:30:05 [W] Is it only for the kubernative is or maybe or it can take care of the other infrastructure in the question. The answer is I can take care of the infrastructure like TCP
00:30:18 [W] As in-toto showed in the demo though. The demo was they have was a huge today under the amount.
00:30:29 [W] So but there is a note that here that the our approach is currently only for the club declarative API.
00:30:39 [W] And as far as they has a declarative API, it should be doable to take care of those infrastructure deployment by deploy design pattern has called
00:30:48 [W] cuz we can just we just need to build the decorative API using the key language and compose it and then deploy.
00:31:03 [W] yeah, so the answer is we can take care of the other infrastructure and the DCP is the one use case. We already showed.
00:31:08 [W] Okay.
00:31:12 [W] that was the one question and let me pick another one and hand over to Winter. Oh.
00:31:17 [W] Okay.
00:31:19 [W] Okay, let me pick number 12 question.
00:31:28 [W] The Christian is not because you consider consider Argo over tekton.
00:31:30 [W] Yeah, actually, I know the Argo is great that this application but at this at this moment the the answer is no because arguably is the kind of
00:31:46 [W] Cool design the application deployment logic. I mean deployment logic is that I mean Kuma mirantis kubernative side has development project but our
00:32:02 [W] Approaches that we are leveraged tekton and we can Define and we can customize our or miss our specific development logic like taking the daily backup or loading up a grade based on
00:32:17 [W] An application requirement.
00:32:20 [W] that I think difference very different point.
00:32:23 [W] Okay.
00:32:26 [W] Thanks.
00:32:27 [W] Sorrow.
00:32:29 [W] Let me pick another one because we still have some time here is the other question I published two public. So the question is are the pipeline for deploying and
00:32:43 [W] Deploying infrared source code all for deploying app itself and this is a great question because the answer is both our approach is to take care of both the infrared generating the infrastructures code
00:32:58 [W] From this and pattern and deploy it to the communities.
00:33:03 [W] It means the point application itself.
00:33:09 [W] And as I mean, I answered before in the previous question, the design patterns code can take care of both kubernative in the other infrastructure layer.
00:33:20 [W] So there as a result our approach will take care of generating the infrastructure as code for both communities in and
00:33:28 [W] Cloud infrastructure layer and deploy the application on the cloud infrastructure
00:33:35 [W] And this is can be so using a cute and we generate the the declarative API for both deploying how to deploy the application how to configure the infrastructure.
00:33:50 [W] Ok, so that's the answer and rintarou. Would you like to go next?
00:33:56 [W] Okay, let me pick number 39.
00:34:04 [W] I think that's the last one.
00:34:05 [W] Okay, that question is does it support Keda Home Project?
00:34:11 [W] That's a very good question. Actually, we love telephone and we are actually still using Tara home but actually in our internal project we are using
00:34:24 [W] Promise me problem is I can I mean Premier can use be used telephone provider. Then the we are answer is we still using
00:34:39 [W] Tara home, but we want to migrate to prove me because it's more programmable interface adapter has more programmer interface.
00:34:51 [W] Okay, okay, hold on so I think it's time to finish this session and thank you for joining decision and feel free to jump into the select channel that we were we'll still online to answer the remaining questions.
00:35:10 [W] And thank you.
00:35:11 [W] Thank you.
00:35:13 [W] Bye.
