Where's My Container? Visualizing the GitOps Container Journey at Microsoft: GNZB-3600 - events@cncf.io - Thursday, August 20, 2020 12:46 PM - 62 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:03:10 [W] Hello everyone.
00:03:13 [W] Welcome to our talk on visualizing the gitops containerd journey at Microsoft.
00:03:15 [W] Let's get started.
00:03:15 [W] So a little more about us, my name is Samuel after I'm a software engineer at Microsoft based out of San Francisco.
00:03:27 [W] I work in the commercial software engineering team here at Microsoft.
00:03:32 [W] And this is where my journey with kubernative began.
00:03:36 [W] I'm passionate about open source and visualizing workloads that skill. My co-presenter is on rubrics.
00:03:42 [W] He is an engineering manager in the commercial software engineering team here at Microsoft as well. He spends most of his days helping Partners develop.
00:03:47 [W] Kubenetes space Solutions and sharing results as open source projects. So our team has worked on visualizing the gitops containerd journey, and we are very excited to share it with you all so let's get started.
00:04:00 [W] gitops is the idea that a version control system like it can store all code documentation and configuration for a kubenetes application and it includes the use of automated operator such as flux to sink changes to the cluster automatically
00:04:18 [W] The single source of Truth and kubernetes being declarative it tries to match the state in the git repository at all times developers are familiar with Git and they're able to use their knowledge to modify our infrastructure easily.
00:04:34 [W] So a very simple guitars process would look like this here in this diagram the developer pushes code to their git repository which kicks off a CI build that pushes the new image to The Container registry for this code change and then the cluster is saying to a
00:04:47 [W] Story and flux is able to put the new image and deploy the changes which by the developer.
00:04:55 [W] So what is the advantage of using gitops get all this is a simple mental model.
00:05:10 [W] It has a very easy learning curve because developers are making change get comets and pull requests to make configuration changes.
00:05:12 [W] just like how they would make good changes. It allows for consistent and standardized and to and workflows with strong security.
00:05:24 [W] It's also cost-effective and improves overall productivity of Engineers and operators. Lastly also allows for ease in monitoring because there
00:05:28 [W] An audit Trail the ability to roll back changes easily and ultimately a single source of truth of what is happening in terms of both software and infrastructure.
00:05:37 [W] Hi, I'm Audrey barracks and get UPS observability.
00:05:45 [W] We really have to be concerned with observing and validating your applications that are going to your cluster.
00:05:54 [W] Here. I have a quote from the CEO of weaveworks and gitops we must use continuous observation verification to enable app and cluster management and in our experience at Microsoft. We certainly believe in this.
00:06:09 [W] A lot of people ask what is gitops observability?
00:06:14 [W] Lease your observation your orientation around what you just released and then you go and make a decision you act and you continue in that cycle.
00:06:29 [W] In gitops observability.
00:06:32 [W] We're really concerned with the left side of this all about your acting and you're releasing being able to know how long something takes to get to your cluster being able to see how
00:06:46 [W] You're closer are all very important. This is the area that we want to focus on.
00:06:52 [W] In the industry.
00:06:56 [W] We've seen a lot of challenges around this particular area.
00:06:59 [W] All of them deal with complexity in devops or gitops which we considered to be a subset of devops.
00:07:15 [W] So what sort of complexity can we have?
00:07:16 [W] Well, the more microservices you have.
00:07:20 [W] We see there being a relationship with the with more complexity.
00:07:27 [W] There are different ways. You can have this complexity organizationally.
00:07:32 [W] Let's say you have lots of teams working on one cluster.
00:07:37 [W] All their microservices are going to end up on one cluster.
00:07:38 [W] In the real world team's work in branches often times. You will go and deploy your your applications from branches before you go to your main branch.
00:07:49 [W] If you're really embracing a micro service architecture, you most likely have many services across many branches.
00:07:57 [W] This coordination between developers and operations teams also include increases complexity.
00:08:04 [W] You can go one step further and if you're attempting a multi-tenancy solution now, you have even more complexity for instance.
00:08:16 [W] Or they might do some sort of flighting methodologies that will also increase the complexity of how you release your software.
00:08:26 [W] This can be something that one should watch out for in the organization.
00:08:32 [W] Another thing is around in consistent feedback Cycles.
00:08:43 [W] Let's say that you you have several teams working and a couple of them need to do some rollbacks.
00:08:46 [W] How's that look in your gitops view?
00:08:51 [W] How do you know what's going on?
00:08:53 [W] These are some of the challenges that we've seen various partners of ours deal with when dealing with microservices.
00:08:58 [W] I'm going to let Sami I talked about how a solution for this might work.
00:09:07 [W] Okay, so let's look at a few is this going to work?
00:09:14 [W] Fabrikam trivia is a small team building a trivial website.
00:09:24 [W] They would like to increase their usage by integrating several apis into their website which are being built by a separate teams.
00:09:32 [W] So here you can see a screenshot of what their trivia app currently looks like.
00:09:35 [W] They have the following team members.
00:09:39 [W] We will be talking about their developer is Tiny. Their product owner is Paul and their operations engineer Oliver. So let's see what their scenario looks like and how gitops can help them.
00:09:46 [W] So until now they had a monolith application and now they would like to modernize their setup to include include the deployment of microservices.
00:10:03 [W] So the main idea behind a micro service architecture is that applications are simpler to build and maintain when broken down into smaller pieces that work seamlessly together.
00:10:09 [W] So these are different apis they will be integrating into their infrastructure until now they had a moment application where they only had a front nsmcon.
00:10:17 [W] And back in component now, they're aiming for a micro service architecture where each of these teams build individual apis that are Incorporated in the cluster by using their Docker images on this architecture will allow them to have a reliable infrastructure
00:10:32 [W] Had a monitor application where they only had a front-end and back-end component now, they're aiming for a micro service architecture where each of these teams build individual apis that are Incorporated in the cluster by using their Docker images on this
00:10:34 [W] It will not take the entire system down because that service can be rolled back and the system restored it also allows for a better separation of concerns and clear ownership.
00:10:46 [W] They will be able to Define owners for each of these microservices.
00:10:47 [W] So fabrikam trivia Engineers learn about gitops and now they are starting to store Helm charts for these environments in a specific folder in there get repositories.
00:11:05 [W] The CD pipelines will generate these charts into kubernative manifests and flux is running on their clusters, which will think the generator manifest to their cluster.
00:11:16 [W] So as you can see in this diagram, there's quite a few developer teams pushing code into their proposed followed by CI bills which are triggered.
00:11:19 [W] Boat images and then they also have a group of approvers who approve changes to be deployed into the cluster using the CD pipelines.
00:11:28 [W] We generate the helm charts.
00:11:31 [W] So this architecture has finally allowed fabrikam Engineers to incorporate work from several teams together.
00:11:35 [W] Now Danny and Oliver run into a few problems.
00:11:43 [W] They're finding that managing multiple microservices pushing into the same cluster is starting to become complex.
00:11:53 [W] There are so many ci/cd pipelines and traffic tracking is difficult.
00:11:54 [W] Using the CD pipelines we generate the helm charts.
00:12:05 [W] So this architecture has finally allowed fabrikam Engineers to incorporate work from several teams together.
00:12:06 [W] Now Danny and Oliver run into a few problems.
00:12:06 [W] They're finding that managing multiple microservices pushing into the same cluster is starting to become complex.
00:12:07 [W] There are so many ci/cd pipelines and traffic tracking is difficult.
00:12:07 [W] For example, each micro service has a pipeline for their see I another further cd20 thing into and pipelines already developers are also having trouble debugging problems because each service has its own set of logs Oliver.
00:12:12 [W] Operator is lacking observability into what's getting deployed versions or it logs and has trouble fixing issues if bugs make it into production.
00:12:17 [W] So fabrikam trivia Engineers would also like to test their features in a single cluster to cut cost because there are small company.
00:12:34 [W] They learn about the concept of deployment rings that allow multiple environments to exist in a single cluster with the help of a servicemeshcon.
00:12:49 [W] production ring
00:12:50 [W] so here's a diagram showing her how a developer working on a new feature can first tests are changes in a ring with in the same cluster and then they can advance it to a header that's being used by early adopters of the application and finally when
00:13:08 [W] Deployment rings that allow multiple environments to exist in a single cluster with the help of a servicemeshcon.
00:13:11 [W] So here's a diagram showing how a developer working on a new feature can first tests are changes in a ring with in the same cluster and then they can advance it to a header that's being used by early adopters of the application and finally when
00:13:13 [W] All that is ready.
00:13:14 [W] They can advance this feature into production when it has been well tested.
00:13:19 [W] This feature is called flighting here at Microsoft and it's widely used in all the teams.
00:13:19 [W] Fabrikam trivia operator Oliver is often on call and one night.
00:13:30 [W] He receives a call at 3:00 a.m.
00:13:31 [W] He finds that there is a bug in production that needs to be addressed immediately and he needs help from the appropriate developer to fix this.
00:13:43 [W] He ideally wants to be able to glance at a page and find out the right contact who's feature recently made it into production.
00:13:50 [W] He would also like to know how long it would take for a deployment to go through approximately so he can update.
00:13:55 [W] A customer that's on the line.
00:13:56 [W] So let's talk about the ideal solution.
00:14:00 [W] We can build to address all of these issues.
00:14:01 [W] The ideal solution we want should have the following elements.
00:14:14 [W] First of all, we want it to be portable because developer teams use many many different ci/cd tools.
00:14:17 [W] So our Solutions are containerd Registries a tool that can be easily plugged into any of these is ideal second.
00:14:24 [W] We want the solution to be lightweight fast and that can be plugged anywhere by just launching an image.
00:14:28 [W] Third we want it to be secure.
00:14:33 [W] usually as developer teams grow and complexity increases
00:14:47 [W] v v want to support different deployment strategies several environment such as Dev staging prod and also deployment Rings within the same cluster to cut cost.
00:14:59 [W] And lastly we wanted to help predict time and success rate of future deployments by glancing at a page.
00:15:08 [W] Now I'm going to pass it back to my colleague Andrei.
00:15:12 [W] Thank you, soumya.
00:15:16 [W] So after learning about what gitops has our ability is what would be an ideal solution?
00:15:23 [W] From our experience.
00:15:27 [W] We thought of some ideas of how we can solve this from working with our partners.
00:15:29 [W] One thing that we created was a tool called spectate.
00:15:38 [W] It's a visualization tool.
00:15:43 [W] allows you to see all your microservices in your CI going from your build all the way to the cluster in the gitops fashion.
00:15:49 [W] would spectate you can go and look at multiple applications at once across multiple teams, even across multiple branches and rings
00:15:59 [W] and be able to find out if your PR is being blocked where it is and so on. Let me quickly show a demo.
00:16:09 [W] Going to be created was a tool called spectate.
00:16:14 [W] It's a visualization tool.
00:16:15 [W] allows you to see all your microservices in your CI going from your build all the way to the cluster in the gitops fashion.
00:16:17 [W] with spectate you can go and look at multiple applications at once across multiple teams, even across multiple branches and rings
00:16:19 [W] and be able to find out if your PR is being blocked where it is and so on. Let me quickly show a demo.
00:16:21 [W] So Danny from the fabrikam trivia team loads up the dashboard and glances at the recent activity that has made this way to the cluster. The image below is a screenshot of spectate.
00:16:29 [W] You see several rows.
00:16:31 [W] Yvonne one of the developers on the fabrikam trivia team has created a new build you see that road being in the top.
00:16:44 [W] Some columns are filled out on the left that several on the right are not filled out as time goes on and the buildpacks presses will see more columns be filled out once the docker image is created for instance the color changes.
00:17:00 [W] Trivia team has created a new build. You see that road being in the top.
00:17:01 [W] Some columns are filled out on the left that several on the right are not filled out as time goes on and the bill press has will see more columns be filled out. Once the docker image is created for instance the color changes.
00:17:02 [W] Egg has been updated.
00:17:05 [W] will see that column get updated and so on as time goes on more columns get filled up from left to right.
00:17:13 [W] Eventually what you see is that in the gitops fashion the kubenetes manifests are being pushed to a repository where a sinking agents such as flux can go and pick it up.
00:17:28 [W] once flux is picked it up will actually see the get tagged of that particular cluster in this example.
00:17:36 [W] We have an East u.s. Cluster.
00:17:37 [W] The Assumption here is that there is a multi multiple cluster setup.
00:17:42 [W] From there.
00:17:52 [W] We know that if we just go and look at the cluster and do a simple Cube CTL get pods will see all of our applications running for the fabrikam trivia application.
00:17:56 [W] Another tool that we created is called the Bedrock CLI.
00:18:08 [W] We actually can set up the spectate dashboard via the Bedrock CLI.
00:18:18 [W] This CLI is a tool for gitops allows you to go and create gitops pipelines easily and also hooks them up for observability this way your gitops pipelines, or
00:18:28 [W] The information they need to show up on spectate dashboard.
00:18:33 [W] I would say that Bedrock is our culmination of experience of how to run workloads on kubenetes from working with several teams internally and externally.
00:18:48 [W] Let's go through a very simple Bedrock scenario.
00:18:59 [W] Let's say our friend Danny from the fabrikam trivia team downloads the CLI and wants to get a spectator View.
00:19:04 [W] Danny can download the CLI enter in some information.
00:19:09 [W] And be able to go and get a gitops pipeline going in just a few minutes.
00:19:15 [W] From that initial run that gitops pipeline.
00:19:20 [W] Dan they can go and pull up the spectate dashboard with just one more command after running the initial set of commands.
00:19:30 [W] this really
00:19:32 [W] goes in demystifies gitops for a lot of people by going and giving you a booster rocket to get from point A to point B, and then you can have great observability of seeing what just happened.
00:19:45 [W] a typical Bedrock flow
00:19:51 [W] goes like this.
00:19:53 [W] That would go to the trivia app repository that would trigger a CI build which would go and push a Docker image to a container registry such as Azure containerd registry.
00:20:12 [W] From there. We might want to have some continuous delivery or deployment.
00:20:18 [W] We might want to go and do things such as update the docker image tag that perhaps our home charts going to use maybe we want to go and update a replica count or do some other operational tasks.
00:20:31 [W] If we're doing this correctly, we can actually go and automate a PR that will happen after we go and make a code change for our Docker image.
00:20:41 [W] This will be great.
00:20:44 [W] We have a concept of something called a high-level Repository.
00:20:47 [W] One of the concepts of bedrocks in the Bedrock family.
00:20:53 [W] We have a tool called fabricate, which is built on top of Helm fabricate really allows you to deal with higher level abstractions of llamo and is a great way to be able to deal with multi cluster multi-region setups.
00:21:07 [W] After this PR gets merged another CI would trigger that would use fabricate to be able to go and generate URI animal.
00:21:18 [W] Docker images from the container registry and your application starts running in your clusters.
00:21:36 [W] So what is bedrock exactly?
00:21:44 [W] How has it helped me?
00:21:45 [W] to achieve gitops observability and all else
00:21:50 [W] this graph shows what bet what Bedrock does in terms of helping you set up gitops pipelines allowing you to see more observability in your gitops process by calling Bedrock deployment.
00:22:07 [W] Um dashboard also shows some commands for fabricate another tool that we developed in the effort to have better gitops observability.
00:22:18 [W] So in the end today we talked about what is gitops and gitops observability. We talked about how we could make gitops more observable.
00:22:32 [W] And then we showed you some ways that we want wanted to address it.
00:22:37 [W] Thank you for joining today.
00:22:44 [W] and we're we will be happy to answer your questions.
00:22:46 [W] Thank you.
00:22:49 [W] The ends today we talked about what is gitops and gitops observability we talked about how we can make gitops more observable.
00:23:00 [W] And then we show these some ways that we want wanted to address it.
00:23:01 [W] Thank you for joining today.
00:23:02 [W] and we're we will be happy to answer your questions.
00:23:02 [W] Thank you.
00:23:02 [W] So I think we are answering some questions.
00:23:03 [W] I see one from Herman bankin just Bedrock also work without Azure.
00:23:08 [W] Yes some parts of it worked. The Bedrock CLI right now is targeted to Azure devops, but we know we recently saw the gitops toolkit by weaveworks at Targets GitHub actions and gitlab
00:23:20 [W] Mike also work with out as ER yes some parts of it worked. The Bedrock CLI right now is targeted to Azure devops, but we know we recently saw the gitops toolkit by weaveworks
00:23:21 [W] Some contributions there, but at the bottom happens in general, you don't have to use Azure. We have it running gitlab Jenkins and GitHub actions in terms of doing it
00:23:35 [W] So hopefully that helps.
00:23:40 [W] There's another question about does spectator and Bedrock work velvet gitlab Enterprise.
00:23:57 [W] I would say the same Bedrock can be extended to work with gitlab.
00:24:05 [W] Right now it's only set up to work with Azure devops Repose, but it can be extended easily. It's a it's a very extendable pattern.
00:24:13 [W] I'll take another one. How does how is this different from release pipeline? An Azure devops release pipeline will announce our devops in particular. There is a introduced multi multi stage pipelines.
00:24:34 [W] I think last year the year before and so I think that's a very general question.
00:24:43 [W] The difference is that you don't have to go to a separate pipeline.
00:24:44 [W] You can have everything in one so that creates a little bit less overhead for developers and operators.
00:24:49 [W] You want to take number 16 something?
00:25:01 [W] I just saw this one.
00:25:05 [W] If I'm using Jenkins or another service provider and Argo CD how much effort would it be to adopt the tools mentioned?
00:25:15 [W] So the very Bedrock works right now.
00:25:20 [W] it's a collection of patterns. You can build you can build the same gitops architecture and the same pipelines on any orchestrator. So Jenkins and you can extend it to use it on Argo City as well.
00:25:33 [W] So how much effort I would say is if you're skilled with Jenkins in Argo City. It's probably minimal effort.
00:25:41 [W] Well, I'm going to go quickly answer number 17 from Bergen convenient a great spectator with Azure devops.
00:25:56 [W] I'm not sure if you mean inside the house were devops currently spectate works really well with Azure devops.
00:26:04 [W] It just runs separately. And the reason for this is that sometimes you might want certain people to have access and if it runs for instance as a Docker image in the kubernetes cluster outside.
00:26:12 [W] You control you can easily control who sees it but you could probably technically create a web view inside the Azure devops if you really want to have it inside.
00:26:23 [W] another question we have is
00:26:30 [W] Is bedrock a replacement for release pipeline in measure devops?
00:26:35 [W] Drops in just run separately.
00:26:36 [W] And the reason for this is that sometimes you might want certain people to have access and if it runs for instance as a Docker image in the kubernative cluster outside, you can control you can easily control who sees it
00:26:37 [W] No police pipelines have already been replaced mostly by multi-stage pipelines in a shadow Ops.
00:26:43 [W] Bedrock is mainly offering you a more enhanced release experience.
00:26:51 [W] I'll take number 19.
00:27:01 [W] So how comfortable is the spectate dashboard for integrating with in-house pipelines?
00:27:03 [W] I'll say it's pretty extensible.
00:27:11 [W] One of the one of the things that we really want to go and do is make sure that you know, folks, you know different projects might have different needs for what appears on the pump the dashboard and so within your pipelines you can go basically
00:27:18 [W] No, our methodology right now is to send events from your pipeline to Central data store. And that way you can really like you can really go and choose what you want to display on the dashboard
00:27:34 [W] We're also adding is allowing you to choose what columns display since this is software.
00:27:43 [W] You should be able to easily go and change that to meet your own needs.
00:27:44 [W] And one other thing I want to say is that we will be sharing the slides. If you look on the slack channel for was a cube con ci/cd will post a link there in a moment.
00:28:02 [W] Then also there's some other questions.
00:28:06 [W] How does this help with terraform number 20 on the second page?
00:28:12 [W] So with terraform, I would say that our Focus has been little bit more on just a gitops pipelining. I think terraform has a as a huge community and toolset available
00:28:23 [W] Thought about is some folks like to go and have their infrastructure their terraform. And also there will be called high level definition of bedrock in one repository this way if you want to make a change in the gitops passion, that's across
00:28:38 [W] Our infrastructure and your applications you can do that all in one PR which is pretty great. So I'll say that, you know, we support things like that.
00:28:49 [W] You want take number 22
00:28:50 [W] So I mean yeah sure number 22. Do you spin up if you mural clusters for integration tests is flux to use there, too.
00:29:02 [W] I would say yes, we are using flux in the integration tests, but that really depends on how you set it up.
00:29:13 [W] And that's under if you would like to add to this. I'm not fully sure if I understand the Clusters.
00:29:24 [W] Yeah. So this technique is basically a what I think Tom is asking is that during a PR in order to sort of make sure that everything is correct you go and you spin up with the cluster and you actually do your integration tests as part of your PR know we don't
00:29:34 [W] In the what we've experienced we haven't had to go all the way to that that level of testing and having to do that.
00:29:46 [W] I've heard of people doing that but I think mostly we push things to the cluster and then we have basically a callback to make sure that things are reach the cluster and then we can run our integration tests.
00:29:53 [W] So it's a little bit simpler. Although that method is you know, that's a good way to do it, too.
00:29:59 [W] Stand up with the cluster and you actually do your integration tests as part of your PR know we don't in what we've experienced.
00:30:10 [W] We haven't had to go all the way to that that level of testing of having to do that.
00:30:12 [W] I've heard of people doing that but I think mostly we push things to the cluster and then we have basically a callback to make sure that things are reach the cluster and then we can run our integration tests.
00:30:13 [W] So it's a little bit simpler although that method is you know that
00:30:16 [W] That's a good way to do it, too.
00:30:17 [W] Um number 24, how does multipole look and spectate is it clear what the status is if there are 20 different non completed concurrent releases.
00:30:19 [W] Is if there are 20 different non completed concurrent releases.
00:30:21 [W] Yes. So actually Bedrock sorry spectate offers you to integrate multiple services and when you're using multiple Services, you could have multiple repositories and you are having the option to filter
00:30:28 [W] In suspecting dashboard itself. So the status is clear depending on how many roles you're seeing and that you can adjust in the in the URL itself.
00:30:39 [W] Let's go back up to the 23. Your Solutions is not take care of infrared as code, right?
00:30:52 [W] Yeah, I'll say that when it comes to infrastructure as code.
00:30:53 [W] You can treat that as gitops as well.
00:30:57 [W] I think that yeah, we're more focused on on the application Level rather than the first code because really in the future.
00:31:07 [W] I think that you know, as long like either main different ways to set up your infrastructure and Azure we have arm. I mean, there's infrastructure as code this telepresence.
00:31:11 [W] Form on the things that we have is something called as Iraq for kubenetes, which allows you to do on-prem and hook that up to the cloud.
00:31:26 [W] And so if people already have on-prem clusters, you know, we don't really want to get in that business with this solution as long as you have your infrastructure and then we think that are more terraform is a great way or if you have another way then we want to sort of get people
00:31:35 [W] Because oftentimes in many organizations the people who control the infrastructure are different than the developers because there's a cost factor with infrastructure.
00:31:46 [W] And so those are always going to be coupled together.
00:31:47 [W] Number 25, will it work with Docker registry instead of ACR?
00:31:58 [W] Yep.
00:32:00 [W] Answer is yes, it can work with its any Docker registry you can extend it to work with it.
00:32:04 [W] Number 26, how do you know when flux applied the new manifest to the kubermatic cluster?
00:32:16 [W] Oh, so I mentioned a call back. If you look at flux there actually is a some extensions you can do to flux.
00:32:25 [W] I think that for we've collaborated for something they provided by hook and so you can hand there are vents Now using Prometheus we can tell whether or not stuff was applied correctly.
00:32:30 [W] Just so that because we have two more pages.
00:32:42 [W] Maybe some are we can just go and look at some of the oh, actually, I think number 28. Maybe she'll answer.
00:32:45 [W] Sure.
00:32:50 [W] So what is the advantage of having both hld high-level repo and manifest repo?
00:32:54 [W] Out of room to make errors and it's very hard to use it in a multi environment multi-service scenario.
00:33:16 [W] So high level definition is something that helps you provide that easier interface for writing the Yammer and configuring your manifest and not making those errors that you would usually make.
00:33:25 [W] You may answer number 14, which was is worthy integration for flux and gitops with agar our cows Bedrock different from that.
00:33:36 [W] So with Azure Arc for kubenetes, all that does is provide the puts it goes and you provide it a what we call manifest repo. So this is the repository git repository that has your actual llamo going and getting your data to
00:33:50 [W] Great is very different than what has ER art for kubernative provides.
00:33:56 [W] I'm just going to quickly answer number 34.
00:34:04 [W] Does this two-port Helm three yet?
00:34:08 [W] our tool fabricate, which we do have Humphrey support. It's in our main branch right now, but it's not in our release branch.
00:34:12 [W] Number 30.
00:34:19 [W] I don't know if you answered that one.
00:34:20 [W] Do you have an end-to-end recorded demo for expected?
00:34:26 [W] Yes, we can we do we can share a link to that.
00:34:29 [W] Yeah, we'll share that on the side Channel.
00:34:31 [W] Please remind us if we don't.
00:34:32 [W] And we can move some of the discussion to the slack Channel as well for ci/cd.
00:34:38 [W] Maybe there's you see number 31. Are there any reference implementations or Workshop that walk through the setup of fabricate Bedrock inspected?
00:34:53 [W] Oops, I don't see that one here. Basically, I mean Jason Haley is asking that so with so we don't one of the I think one of the things that will like to do is actually give any after this we can give a little
00:35:10 [W] Um, so we don't want to be I think one of the things that will like to do is actually give an egg after this we can give a little bit more. We have plenty of internal recording demos, and maybe that's something we can actually share on our
00:35:17 [W] Each for Barack to give people of sort of a more concise understanding so I think also a place where - in the ci/cd group.
00:35:28 [W] I see number 35 real quick if developer wanted to create his own Helm charred package and publish.
00:35:38 [W] Is it possible using this tool?
00:35:40 [W] The answer is yes, you can create your own Helm chart and reference that in the in the high-level definition Repository.
00:35:47 [W] The difference between spectate and Bedrock the 36 is spectate is is a standalone Docker image that goes is a standalone Docker image Bedrock is more of a pattern that in cap and we have
00:36:05 [W] Which is a concrete implementation with that pattern in terms of create a standing up gitops pipelines.
00:36:14 [W] So spectate is its own thing for visualization and also for just the at visualizing sort of gitops observability.
00:36:23 [W] Number 32 quick are these open source projects?
00:36:32 [W] The answer is yes, they are. Yeah.
00:36:34 [W] definitely
00:36:38 [W] Number five.
00:36:43 [W] I thought I had answered this.
00:36:46 [W] Maybe it's just let me privately but our thoughts on managing kubenetes provision scripts.
00:36:50 [W] I think that that is something which is more in the realm of infrastructure as code which and we support that.
00:36:59 [W] So see you answer them on Slack.
00:37:10 [W] Yeah, I think we're probably just have one minute left.
00:37:13 [W] So is gitops the best way to deploy that's that's an opinion.
00:37:25 [W] I think that gitops is really something that's designed for operators.
00:37:29 [W] You know, we can continue this discussion, but I think that gitops has a lot of advantages compared to other otherwise.
00:37:40 [W] So I think we're probably done.
00:37:44 [W] So yeah, we'll have a link to the slide and in the slack Channel and please reach out to us to discuss anything more there.
00:37:54 [W] Thank you very much.
