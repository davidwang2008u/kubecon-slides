How We Migrated Our Monolith to K8s and Became a High Performing Team: YRMF-7883 - events@cncf.io - Tuesday, August 18, 2020 11:41 AM - 53 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:03:39 [W] Hi everybody.
00:03:44 [W] Welcome to Cuba can talk and we're going to be speaking today on how we migrated our Mana little k8s and became a high performing team, but first up, let's do some introductions.
00:03:52 [W] So first of all, hi everybody, I'm Tracy Miranda and I work at cloudbees and I'm also the board chair at the continuous delivery Foundation.
00:04:00 [W] Welcome everybody.
00:04:04 [W] I'm Maurice has a Latino. I'm at Sullivan Twitter and I work for a company called Chemin du and I'm learned Kate's instructor.
00:04:09 [W] Great, so sorry we couldn't be in person together, but this is going to be just as good.
00:04:20 [W] So what Maurizio and I will be talking about.
00:04:22 [W] So first up I will be covering the principles.
00:04:27 [W] What does it mean to be a high performing team? And when you bring that into the world of cloud native, what do you need to be thinking about then taking those principles? Mauricio is going to go.
00:04:40 [W] More specifically into an example and this is something based on his own experience taking a monolith and applying the different principles. And how do you get to a place where you can deal effectively
00:04:55 [W] With all the challenges that come up because there are many so I'll walk you through those a real world kind of example and and show you you know, how the different principles might apply in what you're doing.
00:05:11 [W] ink
00:05:12 [W] Okay, so that's what we have lined up.
00:05:16 [W] So let's kick it off with the principals.
00:05:18 [W] Okay, so when we talk about high performing teams, we're really fortunate in the industry today to effectively have a book about it.
00:05:37 [W] So accelerate book written by Nicole Foursquare and just humble and Gene Kim.
00:05:48 [W] Like I think for many of us we consider this like the Bible for high performing teams and how to build and scale your Tech organization.
00:05:52 [W] now this is the companion book that dives deeper into what many of you may have seen is the state of devops reports that have come out annually for the last number of years and these
00:06:07 [W] As a set of have a huge wealth of information and the best thing about them is it sold scientifically backed. So this is you know, real good research about
00:06:22 [W] He's to to do things.
00:06:28 [W] So it's you know, I think when we talk about books that kind of transform Industries, this is what we're talking about with the accelerate book.
00:06:41 [W] So if I were to summarize kind of some of the key things, so first of all high performers are at the very very top level they talk about Elite performers.
00:06:51 [W] And they are for quantifiable measures that are used to determine whether your team fits in you know, that Elite performer bucket and one of the key things about the research
00:07:08 [W] Two of the measures are all about speed.
00:07:17 [W] So first of all how quickly or how frequently do you do code deployments and then secondly, what is your lead-time from commit to deploy?
00:07:22 [W] How long does that take?
00:07:25 [W] So those are the speed measures then the other two are your stability measures?
00:07:35 [W] So what is the mean time to recover from when you have an incident and what is your change fail?
00:07:39 [W] Leah rate and so between these two these four sets of metrics in these two categories.
00:07:46 [W] This will give you an indication of you know, how you stack up and in the the door reports.
00:07:56 [W] They actually sort of group teams by their performance.
00:08:03 [W] So the big takeaway I thought of mentioning is that you do not have to compromise speed for stability so you can have them both
00:08:09 [W] And in fact, the research has found that the teams that do these things better keep getting better and better and the teams that aren't so good at these things, you know, just fall further and further behind.
00:08:23 [W] So these are the how you would measure your performance but this talk is not about kind of the outcomes.
00:08:34 [W] And have them both and in fact, the research has found that the teams that do these things better keep getting better and better and the teams that aren't so good at these things, you know, just fall further and further behind.
00:08:39 [W] Team, but what we're going to focus on today is going to be more the process.
00:08:46 [W] What are the things you need to do?
00:08:47 [W] And how do you go about getting to a good state with these metrics?
00:08:53 [W] So once again the book pretty much spelled this out for us. So in accelerate book, it refers to 24 capabilities to drive Improvement. Now, these capabilities are broken
00:09:11 [W] To about five different categories. So I don't know if you can see my color coding and the key up at the top but the first eight are what we call continuous delivery capabilities, then you have a couple
00:09:27 [W] Architecture capabilities for of them focused on things in your process another handful on lean management capabilities and finally the last five our cultural ones.
00:09:43 [W] So it's a pretty significant list.
00:09:46 [W] And I think you know we talked about these analogies of being able to walk and chew gum at the same time or spinning plates really it is all about bringing all these different things together in
00:10:02 [W] So with this talk we wanted to say, you know, what what can teams do to help themselves to get to a better place with all these different capabilities and also a big question is
00:10:20 [W] Can tools help you do this?
00:10:24 [W] So if we look at the list to me, there's definitely a whole set there where you can use tooling to simplify or to facilitate what you're doing certainly the first eight, but also
00:10:40 [W] Please as well and specifically in this talk.
00:10:49 [W] We're going to zoom in on a set of them.
00:10:50 [W] So here's kind of a list of different capabilities which will be referencing throughout the talk or in the demos will sort of talk about how this ties back to
00:11:04 [W] And I think the other dimension that we want to cover in the talk today is okay.
00:11:18 [W] First of all, you know, how can tools help us in this process to becoming High performing teams, but also acknowledge that in that Journey we are not old starting off from the same place.
00:11:32 [W] So if you think about it, if you were starting a project from scratch and you were taking advantage of all these amazing to Cloud native Technologies and tools. I'm sure you're learning about a good handful here at Cube
00:11:48 [W] In from scratch some things are going to be a lot easier because you don't have to contend with systems created beforehand.
00:12:00 [W] But often this is just not the case for many of us many of us have pre-existing systems typically monoliths and one on let's in themselves are not bad,
00:12:13 [W] Pre-existing systems typically monoliths and modern. Let's in themselves are not bad, but they are specific characteristics of a monolith, which can make some of these principles
00:12:19 [W] Sipc characteristics of a monolith which can make some of these principles much harder to do for example, you know being able to have the Loosely coupled architecture so different people can work on different things.
00:12:29 [W] It took just a different people can work on different things.
00:12:38 [W] So one of the things is talk tries to do is to pull in the fact that you're starting point might be with the monolith. So you're having to do some work there to bring to fix that situation.
00:12:43 [W] Can enable yourself to meet some of these capabilities?
00:12:51 [W] Okay. So let's go into specific example and using a tool that put more into and I work a lot with and that is Jenkins X.
00:13:03 [W] X. So for those of you familiar Jenkins X is not Jenkins. So Jenkins is is actually, you know, a monolith tool that you know, most popular one for ci/cd.
00:13:14 [W] but Jenkins X is a complete rewrite in go and it actually has this situation where it was able to start in a green field and create a brand new tool for ci/cd on kubernative and one of the advantages of that
00:13:29 [W] it's like Jenkins X was written after they accelerate book and the folks James rolling and James trackin wrote Jenkins Acts were huge fans of the work and deeply inspired to make sure the tool could help facilitate a set of those capabilities
00:13:47 [W] Darling and James Strachan wrote Jenkins X were huge fans of the working deeply inspired to make sure the tool could help facilitate a set of those capabilities and now going to hand over to Maurizio
00:13:51 [W] I'm not going to hand over to Maurizio who's going to walk us through a couple of examples.
00:13:54 [W] Yes, perfect.
00:13:58 [W] So when do you start when you talk about Jenkins?
00:14:08 [W] No matter if it's the old one or Jenkins X you it's all about pipelines right? Like continuous integration pipelines to start from source and then it up with something that it's been built right when you work in kubernative.
00:14:15 [W] That's a little bit more of things that you need to do in the pipeline you now need to take care of building containers and also packaging kubernative manifests into Helm charts. If you are into using Helm injecting sex what you get is a couple of pipelines that are provided by
00:14:26 [W] Default for different type of projects for different type of services using different Frameworks different languages and that allows you to go fast because you need to spend less time thinking about all the steps in the pipeline.
00:14:39 [W] You can spend more time.
00:14:39 [W] Just writing your code in Genting sex pipelines go a little bit beyond that because it's not only doing CI but it's a big part of Jenkins X is doing continuous delivery and continuous deployment.
00:14:54 [W] So after you run with your pipelines, what you do is you use continuous delivery could use deployment and gitops in order to
00:14:56 [W] To make sure that whatever you're building can be run inside the governor nice cluster and this is done using gitops.
00:15:09 [W] So basically when you install Jenkins X by default, you create two environments the staging environment on the production environment.
00:15:18 [W] Blind you can spend more time.
00:15:21 [W] Just writing your code in Genting sex pipelines go a little bit beyond that because it's not only doing CI but it's a big part of Jenkins X is doing continuous delivery and continuous deployment.
00:15:23 [W] So after you run with your pipelines, what you do is you use continuous delivery could use deployment and gitops in order to make sure that whatever you're building can be run inside the government is cluster and this is done using gitops.
00:15:25 [W] So basically when you install Jenkins X by default you create to and
00:15:26 [W] elements the staging environment on the production environment and when you run it by plan you use strong base development in order to create a release. So every time that you change master the master branch in your repository, you will just going to generate the release of your source code
00:15:32 [W] Me Docker image and henchard and that Helm chart will be basically deployed into into a namespace which represent which will contain your staging environment. And the only thing that you will need to do is you will need to send a pull request to the staging environment git repository that
00:15:36 [W] Eight of the cluster and drinking sex internally will use Helm in order to think that state and that basically in real life.
00:15:50 [W] What avoids you doing is to go into the live cluster and doing changes on deploying things that are very difficult to reproduce by using a git repository to hold the state of the cluster. You can easily revert back to the previous state by just reverting a comedian that repository
00:15:59 [W] After you can easily revert back to the previous state by just reverting a comedian that repository but I can keep talking about Jenkins X or I can show you an example that I've been working on. So I created a simple example just to represent this journey from going
00:16:08 [W] Hang on so I created a simple example just to represent this journey from going from a monolith into a cloud native application in running on top of coronaries. And that's basically a simple example of a conference site that it's being composed by for microservices.
00:16:18 [W] That it's being composed by for microservices the front end the call for proposals the agenda and the email service.
00:16:24 [W] Let's take a look at how the application looks like.
00:16:32 [W] I will be posting this link into the chat just so you can just play around with the application if you want to while this session is life. So let's take a look at that.
00:16:37 [W] So first of all, the application is again composed by for services that are running at the same time.
00:16:42 [W] This is how the application looks like and you can see that I'm linking to the versions of each of these different services. So we have a front end or API Gateway the agenda service I did.
00:16:50 [W] Has a different version and if I send the proposal it will be interacting with version 48 of the code for proposal service.
00:16:56 [W] I also have a back office for the committee of the conference to accept or decline proposals that we are receiving and as part of the normal flow.
00:17:05 [W] I will be sending emails about the approval of the red or the rejections of the of the proposals, right?
00:17:11 [W] So there's another service that basically we're going to be sending those emails and you can see that's version 27 in there. So now I have different servers running with different versions and they are all interacting on their work.
00:17:16 [W] So let's try just to submit their simple proposal in order to see, you know, the normal flow of the application by default. The application is basically communicating by Race by using by using rest calls, so we will talk a little bit about that later in the challenges
00:17:30 [W] We just send the proposal I get a thank you message in there for my submission.
00:17:40 [W] I will be notified if I get approved or rejected via email after the Board review, you know my proposal.
00:17:48 [W] So now I can go as the board and I can review my new proposal that I got there and I can accept or reject it.
00:17:48 [W] I will accept it for now just to see that I'm you know, sending an email saying that I was approved so I can see I can tell the locks of my email service and see that yes an email was sent approving my proposal right and
00:18:01 [W] As I would expect because my proposal was approved. I can see that it's posted there in the agenda for Monday 11 a.m.
00:18:08 [W] For the conference.
00:18:11 [W] So that's pretty much the normal and the happy path of the application.
00:18:13 [W] So that's how it should work.
00:18:14 [W] Now.
00:18:20 [W] Let's talk a little bit about what happens when you need to make a change right again. Now, you don't have a single application you have four different services.
00:18:24 [W] So let's say that I want to make a change into the front end, right?
00:18:27 [W] have the front end and the API Gateway were just which are hosted together and my application is running in this staging environment inside Jenkins.
00:18:36 [W] So what I'm clicking on this link, I can go exactly to the release that was created for my front-end application.
00:18:44 [W] So if I want to make changes I know exactly where to go in order to make those changes. And in this case, I have an issue that was created by my product manager that is asking me to make the website a little bit more friendly, right?
00:18:53 [W] JP I get away would just which are hosted together and my application is running in this staging environment inside Jenkins X.
00:19:02 [W] So what I'm clicking on this link, I can go exactly to the release that was created for my front-end application.
00:19:03 [W] So if I want to make changes I know exactly where to go in order to make those changes. And in this case, I have an issue that was created by my product manager that is asking me to make the website a little bit more friendly, right?
00:19:04 [W] I don't know what that means. But I will just try to do it and I will do that by cloning this repository and sending a pull request with
00:19:11 [W] My changes right so I will send a pull request with my changes. And as soon as I push the pull request janking sex by the fault provide me this concept of a preview environment where my pull request content is going to be built and it's going to be automatically published so you can see there that there is
00:19:17 [W] Fold provide me this concept of a preview environment where my pull request content is going to be built and it's going to be automatically published so you can see there that there is a new version of the UI that I can already test, right? I can test live in an environment
00:19:19 [W] I want or I can just instantiate new Services if I want to do that at that can be honest wall.
00:19:27 [W] So now I will send the test proposal to see if my website it's a little bit more friendly or not.
00:19:30 [W] And we will see if my manager is happy or not based on the results right? I can share this with all the teams as well for them to validate and comment on my poor Quest. So now I have a business card thanking me for my submission.
00:19:41 [W] So I think that they will be happy if they are happy what they can do now is they can you know review and merge the pull request which basically will trigger again the pie.
00:19:48 [W] Pipelines for building the new version of the service. So if I go there to the pull request in GitHub, March the poor Quest
00:19:56 [W] Now what I would expect is that because there is a new change in master. The pipeline's will run. They will generate now version 73.
00:20:04 [W] Yep.
00:20:07 [W] We have 772 before now we have version 73 and after the pipelines run I would expect to have that into my staging environment and we will take that we will take a look at that in the second.
00:20:20 [W] But let's go back a little bit to to accelerate right like let's think about more about the technical challenges that we will have and some of the business disability problems that
00:20:28 [W] May arise if we don't tackle them soon enough, so I decided to highlight to technical problems or challenges that I faced before because I think that they are time consuming and I don't have enough time to cover more in details problems.
00:20:40 [W] Different versions they are all being the deal whereby or created by different teams.
00:20:58 [W] So we want to empower teams to be able to release as many, you know changes as they can into the services as fast as possible. Right? And we Jenkins X, we achieve that by having them sin separated repositories and with different pipelines that are continuously
00:21:09 [W] Arm, but there is no application no concept of application anymore.
00:21:15 [W] We just have a bunch of services some solution that we found and we found it very very useful is to use Helm in order to aggregate these versions so we can have a parent to help chart that basically will contain these specific versions for the services and by
00:21:29 [W] you can quickly take one version of this application and deploy that in different clusters if we need to and we will have like all these sets controlled by that we can version those we can tag those and we can release those four people or another things to consume following
00:21:45 [W] It is related with this topic adding application infrastructure, right?
00:21:51 [W] How do you decide if you want to use Kafka or if you add to a data like data ways for your services.
00:22:01 [W] How do you decide if you want to run it inside your kubernative cluster or as a managed service? I saw a lot of teams spending a lot of time by switching and not having clear guidelines on how to do that.
00:22:10 [W] that. And for me, it's really really important that you streamline that decision. So the more clarity that you have around this or when do you maintain things inside your infrastructure?
00:22:16 [W] Our or use something that's provided by cloud provider. For example, it's an extremely important thing to do in order to go faster.
00:22:28 [W] Now, let's switch a little bit talk about from the business side. Right?
00:22:32 [W] Like how do we expose more information to the business side to the stakeholders?
00:22:37 [W] One of the main problems that I've seen people dealing with is understanding processes state right?
00:22:38 [W] Like how do you understand how many, you know proposals are pending how many proposals have finished the entire flow of the application and they are ready to go. They are ready to present your
00:22:49 [W] France and how do you deal with you know think when things goes wrong, right?
00:22:51 [W] That's the next one.
00:22:55 [W] So how do you avoid inconsistent states? Of course that we want to avoid inconsistent States and you can they're like terms of tools to do that to identify when something is going wrong.
00:23:02 [W] But how do we push that information to the stakeholders again using logs using tracing?
00:23:07 [W] That's all good.
00:23:11 [W] This is just asking a question of ok. How do you expose that to other teams?
00:23:14 [W] Many processes state right?
00:23:16 [W] Like how do you understand how many, you know proposals are pending how many proposals have finished the entire flow of the application and they are ready to go.
00:23:16 [W] They are ready to present in your conference.
00:23:16 [W] And how do you deal with you know think when things goes wrong, right?
00:23:17 [W] That's the next one.
00:23:17 [W] So how do you avoid inconsistent states? Of course that we want to avoid inconsistent States and you can they're like terms of tools to do that to identify when something is going wrong.
00:23:19 [W] But how do we push that information to the stakeholders again using?
00:23:24 [W] Logs using tracing that's all good.
00:23:26 [W] This is just asking a question of ok. How do you expose that to other teams?
00:23:27 [W] Let's say the marketing team or resources team, whatever.
00:23:27 [W] How do you do that?
00:23:28 [W] Usually in general think about?
00:23:28 [W] Again now more questions.
00:23:32 [W] How do you deal with changing something that it's big right? Like do you want to introduce a change that will impact all the services and it will involve multiple teams who owns that change.
00:23:32 [W] How do you coordinate that change?
00:23:39 [W] Those are super important questions to answers and the more procedures that you have around it. The better that the faster that you're going to be able to make these decisions.
00:23:43 [W] So in this case what I'm trying to highlight here is that instead of sending an email when you know when when they proposal was accepted or rejected what?
00:23:51 [W] On to do is we want to send an email with a confirmation link for the speaker that was accepted to confirm before publishing the proposal to the agenda.
00:23:57 [W] Right?
00:24:01 [W] So we want confirmation and we want the commitment from the speaker to move forward.
00:24:03 [W] forward. Think about how would you implement that change which team that you know owns the services is going to be in charge of applying that
00:24:10 [W] Dealing with the edge cases.
00:24:12 [W] It's also super important.
00:24:16 [W] So what we've seen so far, it's just a hobby part of the application.
00:24:23 [W] But what happens when things go wrong, right? You need to understand and make sure that every team understand how to deal with this exceptional cases.
00:24:29 [W] Let's say that we recognize that the speaker is not answering any of our emails or not meeting any deadlines.
00:24:33 [W] do you deal with that situation? Right one possibility might be sending a notification trying to get in contact with the speaker. And if he or she is not answering we will just remove them from the agenda, right? That might be
00:24:43 [W] That you know owns the services is going to be in charge of applying that.
00:24:46 [W] Dealing with edge cases.
00:24:46 [W] It's also super important.
00:24:46 [W] So what we've seen so far, it's just a hobby part of the application.
00:24:47 [W] But what happens when things go wrong, right? You need to understand and make sure that every team understand how to deal with this exceptional cases.
00:24:49 [W] Let's say that we recognize that the speaker is not answering any of our emails or not meeting any deadlines.
00:24:50 [W] How do you deal with that situation? Right one possibility might be sending a notification trying to get in contact with the speaker. And if he or she is not answering we will just remove them from the agenda, right? That might be
00:24:54 [W] One possibility. But again, how do you deal with these? How do you share this information across teams?
00:24:57 [W] And finally dealing with time-sensitive actions is something super important that we have seen many many many times in almost every application, right. Do you need to you need to have timers you need to have reminders?
00:25:00 [W] This is super super common requirement, but from an architectural point of view on four teams, usually to decide which mechanism to use it's complicated in this case. What I'm trying to show here is that we want to make sure that we you know review proposals in the first three days after
00:25:10 [W] Proposals in the first three days after we receive them right? And in this case, we need to send notifications if that's not happening.
00:25:19 [W] So we meet some kind of essays for our customers in this case the potential speakers.
00:25:23 [W] How do you how do you usually Implement that you know, how many new services do you need?
00:25:25 [W] What kind of infrastructure do you need?
00:25:26 [W] Do you want to use?
00:25:30 [W] How do you integrate your services with an existing, you know component at the start for you and how do you make sure that your garbage collect these things when they are not longer needed right? So let me talk a little bit about CV which is a workflow engine.
00:25:43 [W] basically for microservices orchestrations and it provides some answers to these questions and it basically push harder on that business visibility side to make sure that other stakeholders not only technical people can understand how your applications are behaving and when things go
00:25:54 [W] And also see that so let's take a look at that in the in the architect from the architecture point of view.
00:26:04 [W] It looks pretty similar to you know, changing Communications from breast to use some kind of like messaging or pub/sub mechanism where your service is now, we need to connect to the workflow engine which is a distributed work for engine that it's called CV and it's running this models that basically
00:26:17 [W] Right, like what are the steps that we need to go through in order to accept or reject the proposal in this case every time that we receive a new proposal will kick.
00:26:33 [W] We will create a new instance of this model that will be executed by CP and CV. Well, it's executing is sending data to elastic search this definitely by just having a model there. We are clear on the steps that we are executing and we can you know, share that information
00:26:42 [W] Well, that doesn't need to be a technical for set.
00:26:53 [W] So let's take a look at how C. We can have that first of all, let's take a look at the application. Now, we are version 73 that basically means that our business card is ready to say.
00:26:55 [W] thank you to us if we made a proposal and of course that's that's there already and I have two versions of the application. We're working with rest and the other one is using Community Cloud, which is running this workflow engine in the cloud as a managed Service as before I can decide to
00:27:08 [W] My own grenades cluster, or I can create it as a managed service in community Cloud.
00:27:17 [W] I created a CB cluster and now I communicating my services with that cluster in Kuma Cloud you have tools in order to visualize what's going on right like and understand exactly what's going on and as you can see here, there is a model that it's representing that and it's also highlighting the
00:27:28 [W] Something that and it's also highlighting the instances that are pending. If you remember I created one to test the business card and I can accept or reject this one and but in the dashboard we can see how many instances were created and how many instances have
00:27:41 [W] Completed in each of these paths how many were rejected now one and how many were completed now five, right if I reject the one that I've submitted for the business Gap there will be to reject it.
00:27:56 [W] Right and that's basically what I'm trying to demonstrate in here.
00:27:59 [W] So understanding processes State understanding where things are.
00:28:05 [W] It's extremely important and using these kind of tools will help you to understand almost in real time what's going on with your applications? And if you have more doubts you can of course drill down in each of these instances understand which path was
00:28:12 [W] Aiken how much time did it take to complete how much time do you take any like every step in the in the flow and also you can take a look at the data that are was used in order to make some decisions in this case about like if it was approved or not, right? That's the data.
00:28:27 [W] That's the payload that is you know instance has so this is a simple example, but let's talk a little bit about avoiding inconsistent States when things go wrong, right?
00:28:39 [W] Let's say that one service is down. And of course we will do our best to make sure that Services don't go down.
00:28:42 [W] This case we will simulate that they agenda service the one that is hosting. All they are accepted presentations is down, right.
00:28:53 [W] How do we how can we push something into it if it's down or if it's not responsive?
00:28:58 [W] Well, we can't and again I'm not saying that you need to replace tracing or logging or monitoring.
00:29:01 [W] I'm just saying that by adding tools like this on top of those tools will help you to propagate that information to the business side as well.
00:29:10 [W] On how cold they can deal with that as well while we deal on the technical side, right?
00:29:19 [W] So I have a way to make this fail and I can make it fail by sending a wrong payload just to simulate that that failure and that's basically what I will try to show now.
00:29:28 [W] I will just go to the application.
00:29:30 [W] I will create a new proposal with this wrong payload and I will need to make a decision so I can push it to the agenda and then the application will fail.
00:29:41 [W] So let's go ahead and create that Proposal with the fail payload. In this case. The title is fail.
00:29:42 [W] So it will fail.
00:29:45 [W] I'm just simulating that to show what the tool can give you and what how can you use the tool in order to share that information with other teams?
00:29:54 [W] You can see the business card in there is there so that's true.
00:29:55 [W] That's the new version up and running already.
00:30:07 [W] So let's go back to the to the back end to the back office so we can accept that and at this point if I accept that I will try to push it again to the agenda and that's where it's going to fail.
00:30:10 [W] So if we go to the dashboard again, we will see that now, you know.
00:30:12 [W] Are fetching the information and the decision was made already.
00:30:21 [W] And now I can see that there is an incident in there. Right and you might be wondering how my services are connecting to these tool again.
00:30:24 [W] They are using pub/sub mechanism to send messages between different services so I can see that there is an incident here. I can quickly have like this summary in the main screen with the that race where I can see the error so I can get the technical error and share with my
00:30:36 [W] to they probably have this already but there is a way to correlate between the logs and the tracing and the incidents in here and I also can see you know who was involved in this incident, right so I can see the email there inside the payload of the you know, the potential
00:30:52 [W] Affected by each this incident which basically means that I can you know, like marketing or HR or someone can get in touch with the speaker to say there is a problem with your proposal.
00:31:07 [W] We are trying to fix it bear with us. If you don't see it in the agenda, right? So again the whole idea of enabling other teams empowerus on your team's with the right data so they can do the work what I'm doing here in the in the terminal in the in the dashboard right now is to fix the data
00:31:18 [W] And retry the operation so I can continue the flow, right? If there is a technical error that you cannot recover from the UI. Of course you can there is not much that you can do if the service was down you can keep trying from this user interface, but in normal cases, at least you will have an
00:31:33 [W] From this user interface, but in normal cases, at least you will have an indication of what's going on.
00:31:37 [W] And if there is an incident and if the incident is still there or not, you can see that the incident was fixed.
00:31:41 [W] So now we can move forward. This was completed. This was published to the you know, this was published to the the agenda.
00:31:47 [W] So next step is to update flows, right?
00:31:59 [W] So let's talk a little bit about what happens when you need to update the flow. Like again, this will involve multiple services and it will change the behavior of the application workflow engines in general.
00:32:07 [W] They are built with the concept of handle dealing with multiple versions, right because we want to enable people to experiment and to change things because we know that reality changes and systems and software get more and more complex and software will evolve so we provide these tools
00:32:17 [W] Where you can just change this model and change the order of action, right?
00:32:24 [W] So in this case, we were publishing for us to the agenda and then sending an email. We will change that now to help the situation where we want to ask a confirmation from our speakers.
00:32:31 [W] So basically that's what I'm doing, you know sending an email maybe with a link for the speaker to confirm and commit to present and the next step is to wait for that speaker confirmation, right when the speaker clicks. Yeah.
00:32:45 [W] I confirm that I want to speak that confirmation.
00:32:47 [W] Nation will be received and then when we have the confirmation, we will probably start to the agenda. Right?
00:32:53 [W] So now we are changing the flow.
00:32:55 [W] Should right. So in this case we were publishing for us to the agenda and then sending an email we will change that now to help the situation where we want to ask a confirmation from our speakers. So basically that's what I'm doing.
00:33:05 [W] I am, you know sending an email maybe with a link for the speaker to confirm and commit to present and the next step is to wait for that speaker confirmation right when the speaker clicks.
00:33:06 [W] Yeah.
00:33:07 [W] I confirm that I want to speak that confirmation will be received and then when we have the confirmation
00:33:11 [W] We would bow, is that to the agenda? Right?
00:33:12 [W] So now we are changing the flow.
00:33:12 [W] We have a different behavior for the entire application. And finally the last thing that we need to do. Of course as you might expect is to Define. What kind of message are we waiting for? Right in this case?
00:33:16 [W] It's speaker confirmation and we will need to have some kind of correlation to say.
00:33:20 [W] Yeah, this message of a speaker confirmation is related to this proposal lady.
00:33:21 [W] lady. That's why I'm using proposal IV there in order to move the right flow forward when we receive that notification. So if I save this now we
00:33:30 [W] Now through different versions of their flow, right?
00:33:36 [W] And again, this will help us to explain to the business side of yesterday. The application was working in this way.
00:33:37 [W] Right on the application is currently using version 1 of the flow, but you know tomorrow we can decide to say okay we can try version 2 with this new flow with the speaker confirmation and we can enable our teams to experiment and doing
00:33:44 [W] That's why I'm missing proposal a be there in order to move the right flow forward when we receive that notification.
00:33:45 [W] So if I save this now we have now two different versions of the flow, right?
00:33:46 [W] And again, this will help us to explain to the business side of yesterday. The application was working in this way.
00:33:47 [W] Right on the application is currently using version 1 of the flow, but you know tomorrow we can decide to say okay we can try version 2 with this new flow with the speaker.
00:33:51 [W] Ian and we can enable our teams to experiment and doing a/b testing for example running different versions and see which version works better, right?
00:33:54 [W] If you have any problem we can always roll back to the previous version and you know, you can basically add more versions the more changes that you want to add this is promoting also like this idea of keep evolving keep improving all the time right and build
00:34:03 [W] Running different versions and see which version works better. Right? If you have any problem, we can always roll back to the previous version and you know, you can basically add more versions the more changes that you want to add.
00:34:06 [W] This is promoting also like this idea of keep evolving keep improving all the time right and build this guy like knowledge base of cases and that brings me to the next topic which is dealing with edge cases right in the same way that we are dealing with the normal happy path for
00:34:12 [W] Of cases and that brings me to the next topic which is dealing with edge cases right in the same way that we are dealing with the normal happy path for our you know proposals.
00:34:19 [W] We want to make sure that we document first of all, you know how to deal with things that are not as happy as the happy path, right?
00:34:28 [W] So in this case, what I'm representing is the use case that I mentioned before like speaker completely disappears and we need to recognize when that happens.
00:34:31 [W] So then we can trigger the following steps this case sending an email waiting for some kind of confirmation from the speaker and
00:34:38 [W] If the speaker after three days doesn't respond to that, you know request we will probably remove that he spreads his or her presentation from the agenda. If we get a confirmation we might booked up, you know meeting to just make sure that they are going to present or not.
00:34:49 [W] So by doing this we not only document how do we deal with this Edge case but we also have a list of edge cases that we are dealing with and finally dealing with time as I mentioned before it's quite a common requirement that workflow engines. They already provide tools
00:35:03 [W] So let's say that we want to make sure that we review a proposal in the first three days after we receive it that's quite a common thing to do, right? So if you see here in the model, we can even make it explicit like we can add that time, you know.
00:35:19 [W] Dimension into the model and we can have the no time-based actions.
00:35:28 [W] So in order to do that, what we can do here is we can use drag a timer note.
00:35:30 [W] That's what I'm doing now.
00:35:38 [W] So I'm going to drag a timer node into into the model and I will basically asked for the engine to trigger a notification when that timer is deal right?
00:35:42 [W] I can set the duration for a timer.
00:35:43 [W] Let's say three days.
00:35:45 [W] So if after three days the decision was not made this timer will be triggered and by triggering that timer icon the syseleven.
00:35:49 [W] Side to cancel the flow or just to keep it running and in this case because just it's just a notification.
00:35:56 [W] I will just keep it running. Finally. I just want to I just hope that with this quick overview about how to use the workflow engine and how to expose data to the business side.
00:36:06 [W] You have a like a clear idea why investing investing in business disability is important.
00:36:13 [W] I totally recommend you to streamline the answer between hosted and managed services and definitely use Jenkins X4 ci/cd in kubernative because it's a great tool it.
00:36:20 [W] Based on best practices in the industry, so please check it out now back to Tracy.
00:36:25 [W] Hey, yeah, thanks for that Mauricio and I are just going in as we conclude and yet we're happy happy to take any questions.
00:36:42 [W] In the list which is transformational leadership because regardless of what you've seen here at the end of the day.
00:36:58 [W] It's about bringing bringing about change to your team.
00:37:06 [W] So thank by the fact that you're attending this talk you already see the vision set out between accelerate and Cloud native tooling and transformational Leadership is all about, you know, I don't you don't have to be the manager or the top
00:37:15 [W] Visions are out between accelerate and Cloud native tooling and transformational Leadership is all about you know, I don't you don't have to be the manager or the top person but you just need to have these qualities where you can go Inspire
00:37:20 [W] But you just need to have these qualities where you can go Inspire others, bring them together to make the change and then just be supportive in the sense of empathy and personal recognition.
00:37:31 [W] So I encourage each of you listening to think about being that transformational leader and taking some of these principles and tooling and see what changes you can make to your organization and good luck everybody.
