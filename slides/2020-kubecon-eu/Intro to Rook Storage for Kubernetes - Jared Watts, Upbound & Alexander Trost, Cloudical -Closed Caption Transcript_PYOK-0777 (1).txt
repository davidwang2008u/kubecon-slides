Intro to Rook: Storage for Kubernetes: PYOK-0777 - events@cncf.io - Tuesday, August 18, 2020 6:51 AM - 93 minutes

Participant: wordly [W] English (US)
Participant: wordly [W0] English (US)
Participant: wordly [W1] English (US)

Transcription for wordly [W]

00:03:30 [W] Good afternoon, Cube, Connie you virtual.
00:03:46 [W0] Good afternoon, Cube, Connie.
00:03:50 [W0] you ver
00:08:27 [W1] Hi, good afternoon, Cube, Connie you virtual attendees.
00:08:32 [W1] This is going to be the introduction session to The Rook project and I have here with me my colleague Alexander trust who is currently a devops engineer at Cloud account and I
00:08:41 [W1] Summer founding engineer outbound in both of us are maintainers on the Rook project.
00:08:56 [W1] We got a couple links in the bottom left foot. If you can help you find The Rook project if you have been to it before so let's go ahead and move on to the agenda for today.
00:08:59 [W1] So also a high for me everyone our in a from a general point.
00:09:05 [W1] We're going to talk about storage challenges and communities.
00:09:09 [W1] We're going to talk about like what is Rook what like what it does it even solve we're going to look a bit into the architecture is it?
00:09:12 [W1] Very vital to understand like what is even going on under the hood there?
00:09:20 [W1] We're going to give a short demonstration as well and we are going to give you information on how you can get involved like even like, you know, slack and such things and if you want to learn more already, we have a deep dive
00:09:32 [W1] On the first day. Be sure to check it out if you want to learn even more about rope.
00:09:38 [W1] Okay, let's start talking about some of the challenges that we typically see with storage in kubernetes.
00:09:46 [W1] So normally especially through the early days of kubernative.
00:09:53 [W1] It was very typical to rely on storage that was outside of the cluster external storage, which comes along with a couple problems.
00:10:06 [W1] One of them is that it's not portable. Really I think about if you have a you know subset of storage appliances like Nats device and stands whatever they're not very portable to other Solutions so that can cause
00:10:15 [W1] not portable really think about if you have a you know, a subset of storage appliances like Nats device and stands whatever they're not very portable to other Solutions so that can cause some issues and there's
00:10:16 [W1] And there's also sort of deployment burden as well.
00:10:23 [W1] You have to physically go to the effort of setting those up plugging them in and all that sort of stuff. So not ideal.
00:10:28 [W1] We better software could do that for us, right?
00:10:31 [W1] And then also you can use cloud storage from the cloud providers Google persistent disk or EBS volumes Etc and other managed Services as well, which can typically lead to vendor lock-in
00:10:43 [W1] In Services, which which are good.
00:10:47 [W1] They're pretty valuable.
00:10:49 [W1] It does make it harder to move to another cloud and then there's this whole other element of day-to-day operations of you know backups for stores ongoing operations making sure it's healthy.
00:11:00 [W1] Somebody has to do that. Right?
00:11:09 [W1] So if we take a look at this visual here, this is just a quick sort of diagram of external storage for kubernative.
00:11:11 [W1] He's and so we see on the left. We have a kubernative cluster on the right. We have all sorts of different types.
00:11:14 [W1] Of storage cloud storage and storage appliances and such and volume plugins is what is serves as sort of a bridge between the cluster and the external storage to provision It On Demand to provide it to Applications.
00:11:28 [W1] So that's the typical way that you could do external storage and communities which brings us to what is Rook.
00:11:41 [W1] So Rook can be thought of as a set of storage operators for kubernative Xin this really brings storage into inside to the kubernative cluster you can think of operators is bof.
00:11:44 [W1] being a software for Automation and an API to do a whole bunch of operational tasks for running storage deploying it and configuring it and setting it up and provisioning and upgrading and backups and
00:11:59 [W1] His Rook The Rook can be thought of as a set of storage operators for kubernative Xin this really brings storage into inside to the kubernative cluster.
00:12:00 [W1] You can think of operators is being a software for Automation and an API to do a whole bunch of operational tasks for running storage deploying it and configuring it and setting it up and provisioning
00:12:01 [W1] Stuff like that and then provisioning storage to for when a application needs it to be able to dynamically provision that in cluster storage and have it ready to be consumed by applications.
00:12:15 [W1] So that's one way to think about what Rook is but it you know beyond those operators. It's also a framework to allow a lot of different storage fighters to my grades or make their way into Cloud native ecosystem
00:12:26 [W1] Environments and kubernative will talk more about that framework and a bit.
00:12:32 [W1] It's an open source project and it's was donated to the cloud native Computing Foundation a couple years ago, and it's incubation level right now, but the vote is on going for it to be moved to
00:12:46 [W1] Asian from the cncf so we're very excited about that. And hopefully by the time this recording is being played that the we will have made that vote will be complete and will be fully graduated.
00:12:58 [W1] So the you know quick shout out to the whole Community gosh to this community is so amazing.
00:13:08 [W1] That is absolutely the backbone of why the project is successful.
00:13:11 [W1] So we take a look at some of the more recent events in statistics here 1.4 released came out which is all sorts of new features and improvements to The Rook operators.
00:13:23 [W1] We have over 7,000 GitHub stars now a hundred sixty million downloads of the container image.
00:13:28 [W1] Her part though is how we almost have almost 300 contributors 275 or more people that have written code for rock, which is absolutely amazing to me and got the project where it is. And then as we mentioned to the project is currently being voted
00:13:43 [W1] GitHub stars now a hundred sixty million downloads of the container image. My favorite part though is how we almost have almost 300 contributors 275 or more people that have written code for rock, which is absolutely amazing to me
00:13:45 [W1] graduate and cncf
00:13:46 [W1] so little bit more about the framework.
00:13:53 [W1] So Rook is more than just a set of operators, right?
00:13:58 [W1] It's a whole framework and platform and libraries and Automation and functions and code and all sorts of stuff to make basically make it easier for a storage provider to come into kubernative.
00:14:06 [W1] He's in be running in cloudevents Iron minutes. So there's functions and and libraries to help normalize the way that storage resources are described, you know, a set of hard drives instead of TV's how much of them too.
00:14:18 [W1] Use filters patterns Etc to say basically say what storage do include in the cluster, you know, all sorts of the operator patterns and plumbing their first storage, you know, specific storage needs one of my favorite. So is
00:14:33 [W1] We have we have an entire framework around testing Storage Solutions in storage needs across a variety of kubernative clusters versions clouds Etc.
00:14:45 [W1] So all those things are available in a framework for new storage providers to come in be part of the Rook project in make it easier to reduce the burden that they have to be running and cloudevents varmints.
00:14:58 [W1] can see a whole series of sort of providers that The Rook project currently supports and we'll get into details on those on this slide. So we're going to
00:15:03 [W1] With the stable providers each one of these storage providers has been declared as stable.
00:15:18 [W1] So Seth was actually the first storage for better that Rook started with they would project is kind of founded around doing orchestration for Seth Seth provides, you know, three different types of storage file block and object but it's also really highly scalable, which
00:15:24 [W1] The nice properties because basically anyone in the cluster can figure out where a piece of data should go you don't have to centralize that information.
00:15:34 [W1] So that's a really nice kind of offloading from a central bottleneck to make it a very highly scalable solution Edge. If s is the second storage vendor that made it to a stable declaration ready to produce a production and
00:15:46 [W1] It's kind of this design is kind of similar to how get is designed where it's based on immutable blocks. And when you change a block modifications to blocks are globally unique and they give the buccaneer identity and those properties that are kind of set
00:16:02 [W1] Need of the design to be globally scalable, which is great this slide. We have both are alpha and beta providers.
00:16:16 [W1] So these ones are not quite two stable yet, but they are underway maturing and growing Cassandra is a distributed.
00:16:23 [W1] No SQL database. It's made for large amounts of data and I like this one, especially to because a contributor named Jonas actually did that for the initial implementation for his master's thesis when I was graduating from
00:16:35 [W1] Graduating with his master's degree. So that was really awesome cockroach TB is a highly resilient location-aware database which has really cool properties. When you have location awareness about where you're running you can make decisions about where to move data to
00:16:48 [W1] With his master's degree. So that was really awesome cockroach TB is a highly resilient location-aware database which has really cool properties. When you have location awareness about where you're running you can make decisions about where to move data to be closer to
00:16:50 [W1] It's where to move data to be, you know to have excellent availability and durability properties Etc.
00:17:01 [W1] So let's well-designed database and that's also running as a rook storage writer in FS the network file system.
00:17:09 [W1] You typically use this when you want to have multiple writers on a shared file system that was originally implemented as part of the Google summer of code project a couple years ago. And then this summer there's a new Google summer of code.
00:17:18 [W1] And his name is Ahmad and he is making lots of enhancements to in a festive summer.
00:17:24 [W1] So there's active contributions going on there.
00:17:32 [W1] And then yugabyte ZB. Use the newest storage for iter is it's a relational databases. Well, it's designed for multiple regions globally distributed as well. And it's set up for very low latency.
00:17:40 [W1] High build High availability and high steel as well.
00:17:44 [W1] So glad to have yugabyte part as part of Rook as a service provider as well.
00:17:47 [W1] So at the end of the day though the goal of rook and all these storage Fighters that it supports is for persistence Persistence of data for applications, right?
00:18:02 [W1] So, let's start to talk to you about the kubernative knative integration because Rook is a set of storage orchestrators in a framework for storage in kubernative.
00:18:07 [W1] So let's talk about how it knative ly integrates there which brings us to a visual here. This is an analogy we're setting up here so you can think about you see this little Tugboat here. It's pulling
00:18:17 [W1] The goal of rook and all these storage Fighters that it supports is for persistence Persistence of data for applications, right?
00:18:21 [W1] So, let's start talk to you about the kubernative knative integration because Rook is a set of storage rochus traitors in a framework for storage in kubernative.
00:18:22 [W1] So let's talk about how it natively integrates there.
00:18:22 [W1] Which brings us to a visual here's this is an analogy we're setting up here so you can think about you see this little Tugboat here. It's pulling or guiding the
00:18:23 [W1] big cargo boat there with lots of valuable cargo so you can think about the cargo boat being a the data plane the storage providers, you know, they have a ton of valuable cargo on there and the tugboat is the one that's kind of leading and guiding and
00:18:33 [W1] you can think about the cargo boat being a the data plane the storage providers, you know, they have a ton of valuable cargo on there and the tugboat is the one that's kind of leading and guiding and steering and were castrating and managing
00:18:35 [W1] Straining and managing some of the direction that the data plane that cargo ship is getting in. So keep that analogy in mind as we move forward to the operator pattern.
00:18:48 [W1] So the operator pattern is fairly common in kubernative is now and it's basically, you know, software automation that sits in a control Loop and Accent three phases the first is that observes the current state of the system the actual state
00:19:00 [W1] In the cluster and then it analyzes and says, okay.
00:19:05 [W1] How is this actual state that I found?
00:19:15 [W1] How is it different than the desired state that the user says they want for the storage system and it figures out the Delta between those and an axe the third phase on taking that Delta into continually driving the actual state of the cluster towards the desired
00:19:22 [W1] And then acts the third phase on taking that Delta into continually driving the actual state of the cluster towards the desired state so it'll keep in a loop and you know doing this observe analyze act and making sure that the users desired state is where the cluster
00:19:29 [W1] In a loop and you're doing this observe analyze act and making sure that the user is desired state is where the cluster is heading at all times.
00:19:31 [W1] So we take a look at this architecture diagram a little bit under the covers here about how Rook Works. Let's work left to left to right.
00:19:39 [W1] So keep control is, you know, the client interface to communities API it talks to the committee has a pi server there and you can do things like, you know, keep control create or get storage pools and file storage etcetera and then we
00:19:53 [W1] Is that are in the cluster also talking to the kubernative CPI?
00:19:59 [W1] And so they'll take that desired state of okay, you want any storage cluster?
00:20:07 [W1] I will turn that into a set of deployments and pods and services.
00:20:08 [W1] config Maps Etc. And that host the storage demons on the bottom right there.
00:20:17 [W1] The storage provider specific demons like this F monitors and osds and things like that or cockroach DB instances, so
00:20:24 [W1] no, this is a representation of in the communities cluster how it's based on the current is API and you have a set of operators watching listening for desired States and manipulating objects in the cluster to drive that
00:20:39 [W1] Is so you know, this is a representation of in the communities cluster how it's based on the current has a pi. You have a set of operators watching listening for desired States and manipulating objects in the
00:20:40 [W1] Stir in the storage demons, the storage provider or fabric towards the desired state that the user wants which brings us back to our analogy of the big cargo ship there later.
00:20:52 [W1] The you storage Fighter the data plane that's hosting are holding a lot of bits and bytes and important data and for the cluster and the The Rook operators the tug boats there that are guiding and steering, you know, managing our orchestrating the data plane
00:21:06 [W1] It's aligned with the desired state that the user is expressed.
00:21:11 [W1] So now that hurts a lot about what an operator is doing and we've already heard about customer sister Phoenicians.
00:21:26 [W1] Let's dive into what customer system engines even our and especially at the example of The Rook SEF operator the second look what they provide to the operator and in the end for you the user of an operator.
00:21:33 [W1] The pensions even our and especially at the example after you Rousseff operator.
00:21:35 [W1] Let's take a look what they provide to the operator and India and for you the user of an operator, so it's kind of like that. If you think of the operator like Esther, you know, like a murder
00:21:41 [W1] So it's kind of like that. If you think of the operator lie guest, you know, like a murder turning all the wheels in hand.
00:21:49 [W1] The customer sister Phoenician is basically the parameters for those Wheels, like as an example, let's say for Seth which version of ceph you want to have deployed it
00:21:58 [W1] Which version of ceph you want to have deployed?
00:22:00 [W1] that would be one parameter and it adds up in the end to the whole big thing of a being of a theft cluster and
00:22:12 [W1] we have those we have those custom objects there. Like if you would go to any kubernative closer, which does not have Rook so consult.
00:22:21 [W1] You don't have this type available on your curcumin is closed. So that's what the operator brings with it is bringing its custom times for that.
00:22:32 [W1] and I mentioned parametres with like the wheels and such, you know, like it's
00:22:38 [W1] And a customer assistive condition is basically nothing else. Like if s you think about maybe like a pot object like pot llamo.
00:22:47 [W1] it's in the end nothing different to that. It's a specification.
00:23:01 [W1] We're all parameters on how it should look like in case of part like what image does it have like Readiness lifeless probes?
00:23:06 [W1] How many are well if there are more than one container in it labels and all those things? Yes, it does it basically just parameters.
00:23:08 [W1] All in it for kubenetes to know what the whole thing will look like in the end for the whole pot.
00:23:16 [W1] Is there like a device Phil? Do you want to set any like morakot configuration possibilities and you know more and more like I'm not going into each parameter here to point being is basically big list of parameters, which you operator will take
00:23:45 [W1] That begin creating and or modifying the existing weaveworks FKS that which is running.
00:23:53 [W1] And to be a go a bit further into the pot with like a parameter styra, for example, you can specifically give a list of nodes you want to use and then that part what devices even to use
00:24:10 [W1] Cool thing thanks to kubernative styra.
00:24:14 [W1] We can simply specify our custom object.
00:24:17 [W1] There is no magic that we need to do there and it allows us to easily. Well provide users with a safe place down in Cuba natives based on those parameters.
00:24:31 [W1] And for Rousseff, especially there, it's not just a set of cluster object. Like there's some more around in self as well already there. For example, this F block Pro.
00:24:44 [W1] We have the API version.
00:24:51 [W1] It's not like version 1 or F / version 104 the those people that have run around with kubenetes already a bit.
00:24:54 [W1] The kind is not deployment or something.
00:25:05 [W1] It's F block pill. That's our custom object that The Rook operator to bring into which is normal like mayadata, which is the name of the object its the names with the object should be created in if we have two specifications in this case.
00:25:08 [W1] We Define the specifications.
00:25:09 [W1] This is a well failure mine host.
00:25:11 [W1] Replicated sighs free we require save replica size and so on there's our well, there's a specific parameters, but in the end, you know operator takes days it takes the specification.
00:25:26 [W1] Is the object should be created and for have two specifications.
00:25:27 [W1] And in this case we Define the specifications to say well, hey little mine host replicated sighs free or I cry. I'll save replicar size and so on do so.
00:25:29 [W1] Well, there's a specific parameters but in the end, you know operator takes days. It takes the specification works it out in terms to basically translated to SEF if you will.
00:25:34 [W1] So and take care of it for you as to do something.
00:25:36 [W1] To build up from a story.
00:25:50 [W1] They're basically we have Force F class object when we created it will want to take it will take a few minutes depending on how fast like pulling images and all those things. Are you have created a set of cluster and we have also gone ahead created this F block pool.
00:25:57 [W1] have created a soft cloth and we have also gone ahead created this F block pool object because that will instruct to the operator to create a pool a storage pool basically in
00:26:06 [W1] Yousef cluster just created.
00:26:09 [W1] so
00:26:13 [W1] that's is the part where we should learn how look into how can we consumer search and I can tell you it's it's pretty simple.
00:26:26 [W1] It's all pretty easy integratable things too like it with the customer sister Phoenicians not but the good thing is we don't need customers to the custom things for everything. There's for example like starch Klaus.
00:26:40 [W1] The it is an object of kubenetes, like often knative API support like that of the storage apis by default. Basically, we specify a name for the service cross.
00:26:55 [W1] Lock Rotella lets you know, some special parameter has some weight like where to even look for who's the provisional storageos all like all this fancy stuff.
00:27:08 [W1] We don't need to concern ourselves too much with that but we pointed to the like to the right cluster, which is the Rousseff closer.
00:27:16 [W1] We just created and that it should use the pool replica pool. If you remember we had created a safe Blackpool as a headed up as a animal and it would use this pool done for the storage.
00:27:27 [W1] So thanks to the storage glasses and Cuban is now the only thing a juicer or we need to do.
00:27:33 [W1] We could go ahead and create a persistent William King.
00:27:37 [W1] Recreate a persistent volume claim.
00:27:42 [W1] Well, we give it a cool name.
00:27:44 [W1] My crew lab is probably a well pretty cool name. So we got this color. We tell the Piston volume claim which starts class name in all cases the roof setblock one, which I looked was exes - I'm not going too far into that
00:27:57 [W1] Kubenetes, like what kind of storage it would need to look out for like for example block storage could normally can only be used as read/write one storage which basically means that the storage can only be mounted
00:28:13 [W1] there that we get anyone can only be mounted once on one node like not once in the whole life cycle of the volume, but meaning that if you have a pot running on node a and you start up a pot on second
00:28:29 [W1] Still to mount the same block as while you like a same persistent volume claim basically there it won't work unless it's role on the same note, but you know, it's those kind of edge scenarios
00:28:45 [W1] Where it wouldn't it wouldn't work out if it would be on different notes because the blocks block image normally can only be mounted on one server in read write mode. So that's about that blur.
00:29:01 [W1] There's also automotives like read/write many reach reach only many as well.
00:29:08 [W1] So but as it were not going to concern ourselves too much with that right now, we're going to set in a persistent persistent volume claim. Also the resources were going on in this case. We basically Rook
00:29:16 [W1] request 20 gigabytes of storage
00:29:19 [W1] And well after we have created the one.
00:29:24 [W1] We can go ahead and our deployment we have well named it's my cool app, obviously and in the list of volumes we go ahead and specify a little persistent volume claim.
00:29:37 [W1] There's well.
00:29:44 [W1] there's a few more tweaks. You would want to make to the deployment that you have a Flawless way of upgrading like you currently can only run this with a replica of one because if you would have the need to run an application where I like each replica so each
00:29:55 [W1] List of volumes we go ahead and specify a little persistent volume claim.
00:29:56 [W1] There's well.
00:29:57 [W1] there's a few more tweaks. You would want to make to the deployment that you have a Flawless way of upgrading like you currently can only run this with a replica of one because if you would have the need to run an application where I like each replica, so each
00:29:59 [W1] Own persistent volume claimed it would be necessary because you know spok storage can only be mounted once by one part. Basically you would need to go ahead and use the stateful set this
00:30:11 [W1] - empowerus year purpose you're disappointed.
00:30:19 [W1] This is how I like the volumes entry would look and in the end with you could simply in the container section and do it while you mount saint. Well the name data and say well Mount path down there. So yeah,
00:30:29 [W1] In the container section do it while you mounts on well the name data and say well Mount path down there. So yeah.
00:30:31 [W1] So we have our application.
00:30:32 [W1] They're basically running.
00:30:34 [W1] We have one Pond and now we're going to dive into the demo. Okay, dubbing.
00:30:37 [W1] Is it the devil now for first part Force F operator. We need to create the commandant.
00:30:48 [W1] Yeah mold all the objects which are in there in the community feels. So real simple dude by well and it will really create seared.
00:30:57 [W1] He's customer sisters nations are bar cluster which includes glycerol throw binding service comes in all those things as next part. We're
00:31:01 [W1] To create the operator deployment and the config of the operator.
00:31:06 [W1] After that, we'll move on to the class AML. I'll show it in a second, but just you know takes a bit of time for everything to spin up.
00:31:16 [W1] we'll go into that in a second. We're going to create it.
00:31:18 [W1] So let's just do a quick.
00:31:23 [W1] Okay containers already.
00:31:28 [W1] It's already pretty so that's good operator.
00:31:33 [W1] Well it you know just takes a bit in my canonical some you think and let's take a look at the class. They are.
00:31:36 [W1] Big note here. The cluster we are currently looking at is is a three node cluster.
00:31:49 [W1] All those things as next part we're going to create the operator deployment and the config of the operator.
00:32:01 [W1] After that, we'll move on to declaw cri-o.
00:32:02 [W1] I'll show it in a second, but just you know, it takes a bit of time for everything to spin up.
00:32:02 [W1] So we'll go into that in a second. We're going to create it.
00:32:03 [W1] So let's just do a quick.
00:32:03 [W1] Okay containers already.
00:32:03 [W1] It's already pretty so that's good operator.
00:32:04 [W1] Well, it's you know, it just takes a bit in my canonical some you think and let's take a look at the class. They are.
00:32:05 [W1] Big now, it's here. The cluster we are currently looking at is it's a free node cluster.
00:32:09 [W1] You have to have at least three nodes. If you try if you like well want to try it out with class to the animal. If you want to just play around in a network of we're like one node cluster, but please take a look at the
00:32:10 [W1] At a cluster cluster - test on the ammo for that and so let's Dive Right In To Dance.
00:32:15 [W1] So well, you know, we have a name name says it all that again.
00:32:17 [W1] We have to specification which Seth version it will use with some additional stuff like data they host path.
00:32:29 [W1] would recommend you to read up on like what each party or does in the documentation.
00:32:31 [W1] On Rook dot IO but you know as we had there's a bunch of parameters which need to be set in a certain way.
00:32:40 [W1] most of them have defaults but you should be able to lay off what the defaults are there, especially when you would work go ahead and run it and production at one point.
00:32:49 [W1] So just now all you know, we have two hole.
00:32:53 [W1] The whole structure of the surf class or object.
00:33:02 [W1] So let's just jump back and see how it's all stood lugging.
00:33:03 [W1] Okay, we have a bunch of components already having spot up.
00:33:08 [W1] Yeah parade in the background is creating all the components. We need we have two mans spinning out.
00:33:18 [W1] There are vital part of Seth and for production or is a side note here.
00:33:23 [W1] You should have at least three months.
00:33:27 [W1] If you run with less than three months, you're not going to have a quorum for the surf months.
00:33:30 [W1] So keep that in mind, but you know, if you want to know the more I would check recommend you check out the robot iot commentation and depending on
00:33:38 [W1] As we had there's a bunch of parameters which need to be set in a certain way.
00:33:42 [W1] Most of them have t Falls but you should be aware of what the defaults are there, especially when you would work go ahead and run it and production at one point. So just now well, you know, we have to hole.
00:33:44 [W1] The whole structure after Self class or object.
00:33:45 [W1] So let's just jump back and see how it's how's it looking?
00:33:45 [W1] Okay, we have a bunch of components already having spot up.
00:33:45 [W1] Yeah parade and the background is creating all the components. We need we have two mans spending our day are vital part of Seth and for production or as a side note here.
00:33:49 [W1] You should have at least three months. If you run with less than three months, you're not going to have a quorum for the surf months.
00:33:49 [W1] So keep that in mind. But you know, if you want to know the more I would check recommend you check out the Rook that iot commentation and the petabyte-scale.
00:33:50 [W1] Wants storage bag and you want to run like in case of ceph check out the ceph documentation as well to read up on how the architecture of surface looking.
00:33:52 [W1] Okay, so
00:33:52 [W1] we have two months now.
00:33:58 [W1] It is the operator has now started the so-called roofs fosdp repair parts.
00:34:05 [W1] They are just basically which are running on each node 2. Well create on.
00:34:05 [W1] Well, not necessarily create but prepare disks in a server for oh Steve's so that's what they're doing and let me just refresh the Amphitheatre.
00:34:16 [W1] It's has already finished for two of the notes we have for the master and for the Node 1 year, and we already have even we are it's already faster and anticipated right now.
00:34:32 [W1] We already have 230 STDs it was these short explanation here knows these are the pod which actually saved the data to disk there.
00:34:41 [W1] Let's run again that I get to update the output.
00:34:45 [W1] One prepared job here are still running, but we have our studies already. It will take depending on you know, what resources do know, it has a bit till I've everything is prepared on a node and as we can see we just got the
00:34:59 [W1] SEF documentation as well to read up on how the architecture of surface locking.
00:35:00 [W1] Okay, so
00:35:00 [W1] we have two months now.
00:35:00 [W1] It is the operator has now started the so-called roofs fosdp repair parts.
00:35:01 [W1] They are just basically which are running on each node 2 well create on.
00:35:01 [W1] on. Well, not necessarily create but prepare disks in the server for oh Steve's so that's what they're doing and let me just refresh the upper tier.
00:35:03 [W1] It's has already finished for to of the nodes we have for the master and for the Node 1 year, and we already have even we are it's already faster and and anticipated right now.
00:35:06 [W1] We already have 230 STDs there is these short explanation here knows these are the part which actually save the data to disk there. Now, let's run again that I get to update the output.
00:35:09 [W1] One prepared job here are still running, but we have our studies already. It will take depending on you know, what resources to know. It has a bit till off. Everything is prepared on a node and as we can see we just got the
00:35:13 [W1] Method may seem weird, but at least in for to talk about cheap odds here and listen to you about that. There's an option to say hey, this is unfounded and in the K classes, I've been setting up when like even though the
00:35:29 [W1] It was empty and it didn't work after that. It works when I've set them to unfermented.
00:35:36 [W1] So just a quick tip here. If you want to if you have some trouble getting your petition and or discs recognize even for just the testing, but okay, so we have our set of cluster running now.
00:35:51 [W1] Let me jump ahead to the application deployment in a second.
00:35:55 [W1] Okay. So now for the application deployment first wing
00:36:00 [W1] we still need to do is create a storage class and US F block pool as we learn from previous previous slides.
00:36:14 [W1] We hit that are some pretty convenient example in a CSI / R BD folder called storage class.
00:36:19 [W1] Llamo as you can see, we just created a self Black Pearl called replica pool and a storage class.
00:36:21 [W1] So we got that now save are running Cube CTL and get storage class.
00:36:26 [W1] will see there we go. We have a storage class now.
00:36:29 [W1] Okay. Now let's do quality application.
00:36:37 [W1] Okay. Now after we have created the storage class and with that also self block pool we can just run keep co-create on our application manifests which are also in this case as they are deployment objects and the persistent William claim objects.
00:36:47 [W1] Just going to create the everything that's needed for that and we can go ahead run at keep cuddle get hard and get PVC minus W so we can watch the whole thing.
00:37:02 [W1] You can't do it in the mulch Mount.
00:37:07 [W1] Well, let's just wait for the pots to be running and well there we have it.
00:37:12 [W1] If I go ahead and run QC tail Gaff PVC now, here we go.
00:37:16 [W1] Let me just zoom out a slight bit here.
00:37:19 [W1] Here we see we have to persist in volume claims, which we created.
00:37:22 [W1] And both of them are Bouncer they have been created a bacchanal and and provisioned and I'm now ready for use and as we have seen at the parts. Well, they're ready and there are already used in the past and well.
00:37:38 [W1] It from the devil or if he's been able to consume the search after we have creative staff cluster. Remember you even a testing environment needs to have certain amount of resources like discs or
00:37:53 [W1] You know something yeah, thanks for that.
00:37:59 [W1] Let's continue.
00:38:02 [W1] All right, Alex.
00:38:03 [W1] Thank you very much for that helpful demo there to showing us how some of the Rook project works with a little bit more hands-on experience there.
00:38:15 [W1] So now we can talk about since Rook is a completely open source project cncf project.
00:38:26 [W1] We have a pretty broad Community now and there's a lot of different ways that you can get more involved and become more more involved in the community as a whole. So the main site is Rook cri-o that has some more explanation.
00:38:30 [W1] About the project and all of our documentation user guide quickstarts.
00:38:40 [W1] Etcetera is all there. So it's a great place to go. If you want to start using the Rook project and then we are super active on slack is well, there's the link right there. If you have questions, you can come and find the right Channel and we're very welcoming Bunch.
00:38:48 [W1] So you come talk to us there.
00:38:50 [W1] you know, we have over a teenager almost 300 contributors now, we're always looking for more. So on github.com Rook / Rook, that is the repo and you can submit issues portworx.
00:39:00 [W1] Quest's have discussions there. And then of course, we're also on Twitter and we have Community meetings every other Tuesday.
00:39:12 [W1] The specific links for that is on the rebate in the approval.
00:39:14 [W1] So yeah.
00:39:15 [W1] thanks a lot for listening to us today and we can all just got wrap it up if I stirred.
00:39:19 [W1] Computers now we're always looking for more. So on github.com Rook / Rook that is the repo and you can submit issues pull requests have discussions there and then of course, we're also on Twitter and we have Community meetings
00:39:25 [W1] If you have any questions there, especially for Pure Conway for channel called conferences.
00:39:31 [W1] Well, feel free to ask questions.
00:39:34 [W1] And yeah, thanks for listening everyone.
00:39:37 [W1] Have a good day and we'll see you next time, hopefully.
00:39:38 [W1] So I really can do a couple of questions now from the from the chat here.
00:39:52 [W1] Thanks for all the super engaging questions that we're trying to trying to keep up with a quick note is that after the session is over here?
00:40:05 [W1] You can go to the slack that that cncf and Q Khan event has set up and there's a channel there where we will take questions.
00:40:10 [W1] Ins for another 15 minutes or so and it's called to cube con maintainer and so you can find us on there as well.
00:40:19 [W1] So one question I'll take real quick was there's a question about on eventual migration to other Cloud providers.
00:40:29 [W1] What does Rook provide to minimize lock in? And so to answer that question often when you run into problems with a vendor lock-in the problem that you're running into is that you have it at
00:40:40 [W1] And so what you can find us on there as well.
00:40:55 [W1] So one question.
00:40:55 [W1] I'll take real quick was there is a question about on eventual migration to other Cloud providers.
00:40:56 [W1] What does Rook provides a minimized lock in and so to answer that question often when you run into problems with a vendor lock-in the problem that you're running into is that you have a dependency
00:40:57 [W1] I bricks like Seth for edge of fast, whatever. It may be you can bring those up anywhere because there is no that's not special to Amazon.
00:41:06 [W1] That's not special to gcp.
00:41:09 [W1] You can run those anywhere on premises or in Cloud providers.
00:41:12 [W1] So you don't have any dependency on something that's specific to a cloud provider that you cannot then move to somewhere else some other environment, you know, the Rook storageos writers will run into any environment.
00:41:23 [W1] There's always the quote the problem with, you know, having to migrate the data out so you can set up like a
00:41:25 [W1] okay mirror to then start mirroring it from one cluster to another two then have it in the new cluster. But the key Point here is that there's no dependency on any particular services that only exist in one cloud.
00:41:39 [W1] Alex do you want to take the another kind of second question?
00:41:42 [W1] Um sure well one question that I've already answered, but just wanted to bring up there again, which goes into direction of the storage providers.
00:41:59 [W1] The question is does Rook provide metrics or metrics are provided independent. So the point there is that Rook itself doesn't offer Matrix like this.
00:42:11 [W1] It's the job of the surge back end. That's the point where root stays off today.
00:42:14 [W1] path of the storage back-end so that
00:42:18 [W1] there's like no downtime if like you Rook operator has some issues.
00:42:26 [W1] Alright point which show the just always provide our needs to take off.
00:42:36 [W1] .
00:42:36 [W1] Cool.
00:42:39 [W1] I'll take a another quick question here.
00:42:41 [W1] So there's a question about just Rook work with bare metal.
00:42:51 [W1] And yes, it definitely does and I would argue that that's actually probably one of the best scenarios for a rook.
00:42:58 [W1] I think that when you are on premises when you are managing your own machines your own nodes and you don't have access to any of these like cloud provider may need Services.
00:43:03 [W1] you need to kind of basically roll your own data services. That's where Rook shines the most.
00:43:07 [W1] I think so on bare metal, you know, you have a carbonated cluster installed there and that's all you need to do then use the Rook operators to deploy and set up an entire cluster of storage providers storage for a briquette
00:43:22 [W1] Roll your own data services that that's where Rook shines the most I think so on bare metal, you know, you have a kubernative cluster installed there and that's all you need to then use the Rook operators to deploy and set up an
00:43:24 [W1] Start consuming. So bare metal Rook works really well with I think.
00:43:26 [W1] And I think we're just about at the end of the session now.
00:43:33 [W1] So I guess we can go ahead and then and take this over to the the chats the in slack the 2 Cube Khan maintainer is the name of the channel.

Transcription for wordly [W0]

00:03:30 [W] Good afternoon, Cube, Connie you virtual.
00:03:46 [W0] Good afternoon, Cube, Connie.
00:03:50 [W0] you ver
00:08:27 [W1] Hi, good afternoon, Cube, Connie you virtual attendees.
00:08:32 [W1] This is going to be the introduction session to The Rook project and I have here with me my colleague Alexander trust who is currently a devops engineer at Cloud account and I
00:08:41 [W1] Summer founding engineer outbound in both of us are maintainers on the Rook project.
00:08:56 [W1] We got a couple links in the bottom left foot. If you can help you find The Rook project if you have been to it before so let's go ahead and move on to the agenda for today.
00:08:59 [W1] So also a high for me everyone our in a from a general point.
00:09:05 [W1] We're going to talk about storage challenges and communities.
00:09:09 [W1] We're going to talk about like what is Rook what like what it does it even solve we're going to look a bit into the architecture is it?
00:09:12 [W1] Very vital to understand like what is even going on under the hood there?
00:09:20 [W1] We're going to give a short demonstration as well and we are going to give you information on how you can get involved like even like, you know, slack and such things and if you want to learn more already, we have a deep dive
00:09:32 [W1] On the first day. Be sure to check it out if you want to learn even more about rope.
00:09:38 [W1] Okay, let's start talking about some of the challenges that we typically see with storage in kubernetes.
00:09:46 [W1] So normally especially through the early days of kubernative.
00:09:53 [W1] It was very typical to rely on storage that was outside of the cluster external storage, which comes along with a couple problems.
00:10:06 [W1] One of them is that it's not portable. Really I think about if you have a you know subset of storage appliances like Nats device and stands whatever they're not very portable to other Solutions so that can cause
00:10:15 [W1] not portable really think about if you have a you know, a subset of storage appliances like Nats device and stands whatever they're not very portable to other Solutions so that can cause some issues and there's
00:10:16 [W1] And there's also sort of deployment burden as well.
00:10:23 [W1] You have to physically go to the effort of setting those up plugging them in and all that sort of stuff. So not ideal.
00:10:28 [W1] We better software could do that for us, right?
00:10:31 [W1] And then also you can use cloud storage from the cloud providers Google persistent disk or EBS volumes Etc and other managed Services as well, which can typically lead to vendor lock-in
00:10:43 [W1] In Services, which which are good.
00:10:47 [W1] They're pretty valuable.
00:10:49 [W1] It does make it harder to move to another cloud and then there's this whole other element of day-to-day operations of you know backups for stores ongoing operations making sure it's healthy.
00:11:00 [W1] Somebody has to do that. Right?
00:11:09 [W1] So if we take a look at this visual here, this is just a quick sort of diagram of external storage for kubernative.
00:11:11 [W1] He's and so we see on the left. We have a kubernative cluster on the right. We have all sorts of different types.
00:11:14 [W1] Of storage cloud storage and storage appliances and such and volume plugins is what is serves as sort of a bridge between the cluster and the external storage to provision It On Demand to provide it to Applications.
00:11:28 [W1] So that's the typical way that you could do external storage and communities which brings us to what is Rook.
00:11:41 [W1] So Rook can be thought of as a set of storage operators for kubernative Xin this really brings storage into inside to the kubernative cluster you can think of operators is bof.
00:11:44 [W1] being a software for Automation and an API to do a whole bunch of operational tasks for running storage deploying it and configuring it and setting it up and provisioning and upgrading and backups and
00:11:59 [W1] His Rook The Rook can be thought of as a set of storage operators for kubernative Xin this really brings storage into inside to the kubernative cluster.
00:12:00 [W1] You can think of operators is being a software for Automation and an API to do a whole bunch of operational tasks for running storage deploying it and configuring it and setting it up and provisioning
00:12:01 [W1] Stuff like that and then provisioning storage to for when a application needs it to be able to dynamically provision that in cluster storage and have it ready to be consumed by applications.
00:12:15 [W1] So that's one way to think about what Rook is but it you know beyond those operators. It's also a framework to allow a lot of different storage fighters to my grades or make their way into Cloud native ecosystem
00:12:26 [W1] Environments and kubernative will talk more about that framework and a bit.
00:12:32 [W1] It's an open source project and it's was donated to the cloud native Computing Foundation a couple years ago, and it's incubation level right now, but the vote is on going for it to be moved to
00:12:46 [W1] Asian from the cncf so we're very excited about that. And hopefully by the time this recording is being played that the we will have made that vote will be complete and will be fully graduated.
00:12:58 [W1] So the you know quick shout out to the whole Community gosh to this community is so amazing.
00:13:08 [W1] That is absolutely the backbone of why the project is successful.
00:13:11 [W1] So we take a look at some of the more recent events in statistics here 1.4 released came out which is all sorts of new features and improvements to The Rook operators.
00:13:23 [W1] We have over 7,000 GitHub stars now a hundred sixty million downloads of the container image.
00:13:28 [W1] Her part though is how we almost have almost 300 contributors 275 or more people that have written code for rock, which is absolutely amazing to me and got the project where it is. And then as we mentioned to the project is currently being voted
00:13:43 [W1] GitHub stars now a hundred sixty million downloads of the container image. My favorite part though is how we almost have almost 300 contributors 275 or more people that have written code for rock, which is absolutely amazing to me
00:13:45 [W1] graduate and cncf
00:13:46 [W1] so little bit more about the framework.
00:13:53 [W1] So Rook is more than just a set of operators, right?
00:13:58 [W1] It's a whole framework and platform and libraries and Automation and functions and code and all sorts of stuff to make basically make it easier for a storage provider to come into kubernative.
00:14:06 [W1] He's in be running in cloudevents Iron minutes. So there's functions and and libraries to help normalize the way that storage resources are described, you know, a set of hard drives instead of TV's how much of them too.
00:14:18 [W1] Use filters patterns Etc to say basically say what storage do include in the cluster, you know, all sorts of the operator patterns and plumbing their first storage, you know, specific storage needs one of my favorite. So is
00:14:33 [W1] We have we have an entire framework around testing Storage Solutions in storage needs across a variety of kubernative clusters versions clouds Etc.
00:14:45 [W1] So all those things are available in a framework for new storage providers to come in be part of the Rook project in make it easier to reduce the burden that they have to be running and cloudevents varmints.
00:14:58 [W1] can see a whole series of sort of providers that The Rook project currently supports and we'll get into details on those on this slide. So we're going to
00:15:03 [W1] With the stable providers each one of these storage providers has been declared as stable.
00:15:18 [W1] So Seth was actually the first storage for better that Rook started with they would project is kind of founded around doing orchestration for Seth Seth provides, you know, three different types of storage file block and object but it's also really highly scalable, which
00:15:24 [W1] The nice properties because basically anyone in the cluster can figure out where a piece of data should go you don't have to centralize that information.
00:15:34 [W1] So that's a really nice kind of offloading from a central bottleneck to make it a very highly scalable solution Edge. If s is the second storage vendor that made it to a stable declaration ready to produce a production and
00:15:46 [W1] It's kind of this design is kind of similar to how get is designed where it's based on immutable blocks. And when you change a block modifications to blocks are globally unique and they give the buccaneer identity and those properties that are kind of set
00:16:02 [W1] Need of the design to be globally scalable, which is great this slide. We have both are alpha and beta providers.
00:16:16 [W1] So these ones are not quite two stable yet, but they are underway maturing and growing Cassandra is a distributed.
00:16:23 [W1] No SQL database. It's made for large amounts of data and I like this one, especially to because a contributor named Jonas actually did that for the initial implementation for his master's thesis when I was graduating from
00:16:35 [W1] Graduating with his master's degree. So that was really awesome cockroach TB is a highly resilient location-aware database which has really cool properties. When you have location awareness about where you're running you can make decisions about where to move data to
00:16:48 [W1] With his master's degree. So that was really awesome cockroach TB is a highly resilient location-aware database which has really cool properties. When you have location awareness about where you're running you can make decisions about where to move data to be closer to
00:16:50 [W1] It's where to move data to be, you know to have excellent availability and durability properties Etc.
00:17:01 [W1] So let's well-designed database and that's also running as a rook storage writer in FS the network file system.
00:17:09 [W1] You typically use this when you want to have multiple writers on a shared file system that was originally implemented as part of the Google summer of code project a couple years ago. And then this summer there's a new Google summer of code.
00:17:18 [W1] And his name is Ahmad and he is making lots of enhancements to in a festive summer.
00:17:24 [W1] So there's active contributions going on there.
00:17:32 [W1] And then yugabyte ZB. Use the newest storage for iter is it's a relational databases. Well, it's designed for multiple regions globally distributed as well. And it's set up for very low latency.
00:17:40 [W1] High build High availability and high steel as well.
00:17:44 [W1] So glad to have yugabyte part as part of Rook as a service provider as well.
00:17:47 [W1] So at the end of the day though the goal of rook and all these storage Fighters that it supports is for persistence Persistence of data for applications, right?
00:18:02 [W1] So, let's start to talk to you about the kubernative knative integration because Rook is a set of storage orchestrators in a framework for storage in kubernative.
00:18:07 [W1] So let's talk about how it knative ly integrates there which brings us to a visual here. This is an analogy we're setting up here so you can think about you see this little Tugboat here. It's pulling
00:18:17 [W1] The goal of rook and all these storage Fighters that it supports is for persistence Persistence of data for applications, right?
00:18:21 [W1] So, let's start talk to you about the kubernative knative integration because Rook is a set of storage rochus traitors in a framework for storage in kubernative.
00:18:22 [W1] So let's talk about how it natively integrates there.
00:18:22 [W1] Which brings us to a visual here's this is an analogy we're setting up here so you can think about you see this little Tugboat here. It's pulling or guiding the
00:18:23 [W1] big cargo boat there with lots of valuable cargo so you can think about the cargo boat being a the data plane the storage providers, you know, they have a ton of valuable cargo on there and the tugboat is the one that's kind of leading and guiding and
00:18:33 [W1] you can think about the cargo boat being a the data plane the storage providers, you know, they have a ton of valuable cargo on there and the tugboat is the one that's kind of leading and guiding and steering and were castrating and managing
00:18:35 [W1] Straining and managing some of the direction that the data plane that cargo ship is getting in. So keep that analogy in mind as we move forward to the operator pattern.
00:18:48 [W1] So the operator pattern is fairly common in kubernative is now and it's basically, you know, software automation that sits in a control Loop and Accent three phases the first is that observes the current state of the system the actual state
00:19:00 [W1] In the cluster and then it analyzes and says, okay.
00:19:05 [W1] How is this actual state that I found?
00:19:15 [W1] How is it different than the desired state that the user says they want for the storage system and it figures out the Delta between those and an axe the third phase on taking that Delta into continually driving the actual state of the cluster towards the desired
00:19:22 [W1] And then acts the third phase on taking that Delta into continually driving the actual state of the cluster towards the desired state so it'll keep in a loop and you know doing this observe analyze act and making sure that the users desired state is where the cluster
00:19:29 [W1] In a loop and you're doing this observe analyze act and making sure that the user is desired state is where the cluster is heading at all times.
00:19:31 [W1] So we take a look at this architecture diagram a little bit under the covers here about how Rook Works. Let's work left to left to right.
00:19:39 [W1] So keep control is, you know, the client interface to communities API it talks to the committee has a pi server there and you can do things like, you know, keep control create or get storage pools and file storage etcetera and then we
00:19:53 [W1] Is that are in the cluster also talking to the kubernative CPI?
00:19:59 [W1] And so they'll take that desired state of okay, you want any storage cluster?
00:20:07 [W1] I will turn that into a set of deployments and pods and services.
00:20:08 [W1] config Maps Etc. And that host the storage demons on the bottom right there.
00:20:17 [W1] The storage provider specific demons like this F monitors and osds and things like that or cockroach DB instances, so
00:20:24 [W1] no, this is a representation of in the communities cluster how it's based on the current is API and you have a set of operators watching listening for desired States and manipulating objects in the cluster to drive that
00:20:39 [W1] Is so you know, this is a representation of in the communities cluster how it's based on the current has a pi. You have a set of operators watching listening for desired States and manipulating objects in the
00:20:40 [W1] Stir in the storage demons, the storage provider or fabric towards the desired state that the user wants which brings us back to our analogy of the big cargo ship there later.
00:20:52 [W1] The you storage Fighter the data plane that's hosting are holding a lot of bits and bytes and important data and for the cluster and the The Rook operators the tug boats there that are guiding and steering, you know, managing our orchestrating the data plane
00:21:06 [W1] It's aligned with the desired state that the user is expressed.
00:21:11 [W1] So now that hurts a lot about what an operator is doing and we've already heard about customer sister Phoenicians.
00:21:26 [W1] Let's dive into what customer system engines even our and especially at the example of The Rook SEF operator the second look what they provide to the operator and in the end for you the user of an operator.
00:21:33 [W1] The pensions even our and especially at the example after you Rousseff operator.
00:21:35 [W1] Let's take a look what they provide to the operator and India and for you the user of an operator, so it's kind of like that. If you think of the operator like Esther, you know, like a murder
00:21:41 [W1] So it's kind of like that. If you think of the operator lie guest, you know, like a murder turning all the wheels in hand.
00:21:49 [W1] The customer sister Phoenician is basically the parameters for those Wheels, like as an example, let's say for Seth which version of ceph you want to have deployed it
00:21:58 [W1] Which version of ceph you want to have deployed?
00:22:00 [W1] that would be one parameter and it adds up in the end to the whole big thing of a being of a theft cluster and
00:22:12 [W1] we have those we have those custom objects there. Like if you would go to any kubernative closer, which does not have Rook so consult.
00:22:21 [W1] You don't have this type available on your curcumin is closed. So that's what the operator brings with it is bringing its custom times for that.
00:22:32 [W1] and I mentioned parametres with like the wheels and such, you know, like it's
00:22:38 [W1] And a customer assistive condition is basically nothing else. Like if s you think about maybe like a pot object like pot llamo.
00:22:47 [W1] it's in the end nothing different to that. It's a specification.
00:23:01 [W1] We're all parameters on how it should look like in case of part like what image does it have like Readiness lifeless probes?
00:23:06 [W1] How many are well if there are more than one container in it labels and all those things? Yes, it does it basically just parameters.
00:23:08 [W1] All in it for kubenetes to know what the whole thing will look like in the end for the whole pot.
00:23:16 [W1] Is there like a device Phil? Do you want to set any like morakot configuration possibilities and you know more and more like I'm not going into each parameter here to point being is basically big list of parameters, which you operator will take
00:23:45 [W1] That begin creating and or modifying the existing weaveworks FKS that which is running.
00:23:53 [W1] And to be a go a bit further into the pot with like a parameter styra, for example, you can specifically give a list of nodes you want to use and then that part what devices even to use
00:24:10 [W1] Cool thing thanks to kubernative styra.
00:24:14 [W1] We can simply specify our custom object.
00:24:17 [W1] There is no magic that we need to do there and it allows us to easily. Well provide users with a safe place down in Cuba natives based on those parameters.
00:24:31 [W1] And for Rousseff, especially there, it's not just a set of cluster object. Like there's some more around in self as well already there. For example, this F block Pro.
00:24:44 [W1] We have the API version.
00:24:51 [W1] It's not like version 1 or F / version 104 the those people that have run around with kubenetes already a bit.
00:24:54 [W1] The kind is not deployment or something.
00:25:05 [W1] It's F block pill. That's our custom object that The Rook operator to bring into which is normal like mayadata, which is the name of the object its the names with the object should be created in if we have two specifications in this case.
00:25:08 [W1] We Define the specifications.
00:25:09 [W1] This is a well failure mine host.
00:25:11 [W1] Replicated sighs free we require save replica size and so on there's our well, there's a specific parameters, but in the end, you know operator takes days it takes the specification.
00:25:26 [W1] Is the object should be created and for have two specifications.
00:25:27 [W1] And in this case we Define the specifications to say well, hey little mine host replicated sighs free or I cry. I'll save replicar size and so on do so.
00:25:29 [W1] Well, there's a specific parameters but in the end, you know operator takes days. It takes the specification works it out in terms to basically translated to SEF if you will.
00:25:34 [W1] So and take care of it for you as to do something.
00:25:36 [W1] To build up from a story.
00:25:50 [W1] They're basically we have Force F class object when we created it will want to take it will take a few minutes depending on how fast like pulling images and all those things. Are you have created a set of cluster and we have also gone ahead created this F block pool.
00:25:57 [W1] have created a soft cloth and we have also gone ahead created this F block pool object because that will instruct to the operator to create a pool a storage pool basically in
00:26:06 [W1] Yousef cluster just created.
00:26:09 [W1] so
00:26:13 [W1] that's is the part where we should learn how look into how can we consumer search and I can tell you it's it's pretty simple.
00:26:26 [W1] It's all pretty easy integratable things too like it with the customer sister Phoenicians not but the good thing is we don't need customers to the custom things for everything. There's for example like starch Klaus.
00:26:40 [W1] The it is an object of kubenetes, like often knative API support like that of the storage apis by default. Basically, we specify a name for the service cross.
00:26:55 [W1] Lock Rotella lets you know, some special parameter has some weight like where to even look for who's the provisional storageos all like all this fancy stuff.
00:27:08 [W1] We don't need to concern ourselves too much with that but we pointed to the like to the right cluster, which is the Rousseff closer.
00:27:16 [W1] We just created and that it should use the pool replica pool. If you remember we had created a safe Blackpool as a headed up as a animal and it would use this pool done for the storage.
00:27:27 [W1] So thanks to the storage glasses and Cuban is now the only thing a juicer or we need to do.
00:27:33 [W1] We could go ahead and create a persistent William King.
00:27:37 [W1] Recreate a persistent volume claim.
00:27:42 [W1] Well, we give it a cool name.
00:27:44 [W1] My crew lab is probably a well pretty cool name. So we got this color. We tell the Piston volume claim which starts class name in all cases the roof setblock one, which I looked was exes - I'm not going too far into that
00:27:57 [W1] Kubenetes, like what kind of storage it would need to look out for like for example block storage could normally can only be used as read/write one storage which basically means that the storage can only be mounted
00:28:13 [W1] there that we get anyone can only be mounted once on one node like not once in the whole life cycle of the volume, but meaning that if you have a pot running on node a and you start up a pot on second
00:28:29 [W1] Still to mount the same block as while you like a same persistent volume claim basically there it won't work unless it's role on the same note, but you know, it's those kind of edge scenarios
00:28:45 [W1] Where it wouldn't it wouldn't work out if it would be on different notes because the blocks block image normally can only be mounted on one server in read write mode. So that's about that blur.
00:29:01 [W1] There's also automotives like read/write many reach reach only many as well.
00:29:08 [W1] So but as it were not going to concern ourselves too much with that right now, we're going to set in a persistent persistent volume claim. Also the resources were going on in this case. We basically Rook
00:29:16 [W1] request 20 gigabytes of storage
00:29:19 [W1] And well after we have created the one.
00:29:24 [W1] We can go ahead and our deployment we have well named it's my cool app, obviously and in the list of volumes we go ahead and specify a little persistent volume claim.
00:29:37 [W1] There's well.
00:29:44 [W1] there's a few more tweaks. You would want to make to the deployment that you have a Flawless way of upgrading like you currently can only run this with a replica of one because if you would have the need to run an application where I like each replica so each
00:29:55 [W1] List of volumes we go ahead and specify a little persistent volume claim.
00:29:56 [W1] There's well.
00:29:57 [W1] there's a few more tweaks. You would want to make to the deployment that you have a Flawless way of upgrading like you currently can only run this with a replica of one because if you would have the need to run an application where I like each replica, so each
00:29:59 [W1] Own persistent volume claimed it would be necessary because you know spok storage can only be mounted once by one part. Basically you would need to go ahead and use the stateful set this
00:30:11 [W1] - empowerus year purpose you're disappointed.
00:30:19 [W1] This is how I like the volumes entry would look and in the end with you could simply in the container section and do it while you mount saint. Well the name data and say well Mount path down there. So yeah,
00:30:29 [W1] In the container section do it while you mounts on well the name data and say well Mount path down there. So yeah.
00:30:31 [W1] So we have our application.
00:30:32 [W1] They're basically running.
00:30:34 [W1] We have one Pond and now we're going to dive into the demo. Okay, dubbing.
00:30:37 [W1] Is it the devil now for first part Force F operator. We need to create the commandant.
00:30:48 [W1] Yeah mold all the objects which are in there in the community feels. So real simple dude by well and it will really create seared.
00:30:57 [W1] He's customer sisters nations are bar cluster which includes glycerol throw binding service comes in all those things as next part. We're
00:31:01 [W1] To create the operator deployment and the config of the operator.
00:31:06 [W1] After that, we'll move on to the class AML. I'll show it in a second, but just you know takes a bit of time for everything to spin up.
00:31:16 [W1] we'll go into that in a second. We're going to create it.
00:31:18 [W1] So let's just do a quick.
00:31:23 [W1] Okay containers already.
00:31:28 [W1] It's already pretty so that's good operator.
00:31:33 [W1] Well it you know just takes a bit in my canonical some you think and let's take a look at the class. They are.
00:31:36 [W1] Big note here. The cluster we are currently looking at is is a three node cluster.
00:31:49 [W1] All those things as next part we're going to create the operator deployment and the config of the operator.
00:32:01 [W1] After that, we'll move on to declaw cri-o.
00:32:02 [W1] I'll show it in a second, but just you know, it takes a bit of time for everything to spin up.
00:32:02 [W1] So we'll go into that in a second. We're going to create it.
00:32:03 [W1] So let's just do a quick.
00:32:03 [W1] Okay containers already.
00:32:03 [W1] It's already pretty so that's good operator.
00:32:04 [W1] Well, it's you know, it just takes a bit in my canonical some you think and let's take a look at the class. They are.
00:32:05 [W1] Big now, it's here. The cluster we are currently looking at is it's a free node cluster.
00:32:09 [W1] You have to have at least three nodes. If you try if you like well want to try it out with class to the animal. If you want to just play around in a network of we're like one node cluster, but please take a look at the
00:32:10 [W1] At a cluster cluster - test on the ammo for that and so let's Dive Right In To Dance.
00:32:15 [W1] So well, you know, we have a name name says it all that again.
00:32:17 [W1] We have to specification which Seth version it will use with some additional stuff like data they host path.
00:32:29 [W1] would recommend you to read up on like what each party or does in the documentation.
00:32:31 [W1] On Rook dot IO but you know as we had there's a bunch of parameters which need to be set in a certain way.
00:32:40 [W1] most of them have defaults but you should be able to lay off what the defaults are there, especially when you would work go ahead and run it and production at one point.
00:32:49 [W1] So just now all you know, we have two hole.
00:32:53 [W1] The whole structure of the surf class or object.
00:33:02 [W1] So let's just jump back and see how it's all stood lugging.
00:33:03 [W1] Okay, we have a bunch of components already having spot up.
00:33:08 [W1] Yeah parade in the background is creating all the components. We need we have two mans spinning out.
00:33:18 [W1] There are vital part of Seth and for production or is a side note here.
00:33:23 [W1] You should have at least three months.
00:33:27 [W1] If you run with less than three months, you're not going to have a quorum for the surf months.
00:33:30 [W1] So keep that in mind, but you know, if you want to know the more I would check recommend you check out the robot iot commentation and depending on
00:33:38 [W1] As we had there's a bunch of parameters which need to be set in a certain way.
00:33:42 [W1] Most of them have t Falls but you should be aware of what the defaults are there, especially when you would work go ahead and run it and production at one point. So just now well, you know, we have to hole.
00:33:44 [W1] The whole structure after Self class or object.
00:33:45 [W1] So let's just jump back and see how it's how's it looking?
00:33:45 [W1] Okay, we have a bunch of components already having spot up.
00:33:45 [W1] Yeah parade and the background is creating all the components. We need we have two mans spending our day are vital part of Seth and for production or as a side note here.
00:33:49 [W1] You should have at least three months. If you run with less than three months, you're not going to have a quorum for the surf months.
00:33:49 [W1] So keep that in mind. But you know, if you want to know the more I would check recommend you check out the Rook that iot commentation and the petabyte-scale.
00:33:50 [W1] Wants storage bag and you want to run like in case of ceph check out the ceph documentation as well to read up on how the architecture of surface looking.
00:33:52 [W1] Okay, so
00:33:52 [W1] we have two months now.
00:33:58 [W1] It is the operator has now started the so-called roofs fosdp repair parts.
00:34:05 [W1] They are just basically which are running on each node 2. Well create on.
00:34:05 [W1] Well, not necessarily create but prepare disks in a server for oh Steve's so that's what they're doing and let me just refresh the Amphitheatre.
00:34:16 [W1] It's has already finished for two of the notes we have for the master and for the Node 1 year, and we already have even we are it's already faster and anticipated right now.
00:34:32 [W1] We already have 230 STDs it was these short explanation here knows these are the pod which actually saved the data to disk there.
00:34:41 [W1] Let's run again that I get to update the output.
00:34:45 [W1] One prepared job here are still running, but we have our studies already. It will take depending on you know, what resources do know, it has a bit till I've everything is prepared on a node and as we can see we just got the
00:34:59 [W1] SEF documentation as well to read up on how the architecture of surface locking.
00:35:00 [W1] Okay, so
00:35:00 [W1] we have two months now.
00:35:00 [W1] It is the operator has now started the so-called roofs fosdp repair parts.
00:35:01 [W1] They are just basically which are running on each node 2 well create on.
00:35:01 [W1] on. Well, not necessarily create but prepare disks in the server for oh Steve's so that's what they're doing and let me just refresh the upper tier.
00:35:03 [W1] It's has already finished for to of the nodes we have for the master and for the Node 1 year, and we already have even we are it's already faster and and anticipated right now.
00:35:06 [W1] We already have 230 STDs there is these short explanation here knows these are the part which actually save the data to disk there. Now, let's run again that I get to update the output.
00:35:09 [W1] One prepared job here are still running, but we have our studies already. It will take depending on you know, what resources to know. It has a bit till off. Everything is prepared on a node and as we can see we just got the
00:35:13 [W1] Method may seem weird, but at least in for to talk about cheap odds here and listen to you about that. There's an option to say hey, this is unfounded and in the K classes, I've been setting up when like even though the
00:35:29 [W1] It was empty and it didn't work after that. It works when I've set them to unfermented.
00:35:36 [W1] So just a quick tip here. If you want to if you have some trouble getting your petition and or discs recognize even for just the testing, but okay, so we have our set of cluster running now.
00:35:51 [W1] Let me jump ahead to the application deployment in a second.
00:35:55 [W1] Okay. So now for the application deployment first wing
00:36:00 [W1] we still need to do is create a storage class and US F block pool as we learn from previous previous slides.
00:36:14 [W1] We hit that are some pretty convenient example in a CSI / R BD folder called storage class.
00:36:19 [W1] Llamo as you can see, we just created a self Black Pearl called replica pool and a storage class.
00:36:21 [W1] So we got that now save are running Cube CTL and get storage class.
00:36:26 [W1] will see there we go. We have a storage class now.
00:36:29 [W1] Okay. Now let's do quality application.
00:36:37 [W1] Okay. Now after we have created the storage class and with that also self block pool we can just run keep co-create on our application manifests which are also in this case as they are deployment objects and the persistent William claim objects.
00:36:47 [W1] Just going to create the everything that's needed for that and we can go ahead run at keep cuddle get hard and get PVC minus W so we can watch the whole thing.
00:37:02 [W1] You can't do it in the mulch Mount.
00:37:07 [W1] Well, let's just wait for the pots to be running and well there we have it.
00:37:12 [W1] If I go ahead and run QC tail Gaff PVC now, here we go.
00:37:16 [W1] Let me just zoom out a slight bit here.
00:37:19 [W1] Here we see we have to persist in volume claims, which we created.
00:37:22 [W1] And both of them are Bouncer they have been created a bacchanal and and provisioned and I'm now ready for use and as we have seen at the parts. Well, they're ready and there are already used in the past and well.
00:37:38 [W1] It from the devil or if he's been able to consume the search after we have creative staff cluster. Remember you even a testing environment needs to have certain amount of resources like discs or
00:37:53 [W1] You know something yeah, thanks for that.
00:37:59 [W1] Let's continue.
00:38:02 [W1] All right, Alex.
00:38:03 [W1] Thank you very much for that helpful demo there to showing us how some of the Rook project works with a little bit more hands-on experience there.
00:38:15 [W1] So now we can talk about since Rook is a completely open source project cncf project.
00:38:26 [W1] We have a pretty broad Community now and there's a lot of different ways that you can get more involved and become more more involved in the community as a whole. So the main site is Rook cri-o that has some more explanation.
00:38:30 [W1] About the project and all of our documentation user guide quickstarts.
00:38:40 [W1] Etcetera is all there. So it's a great place to go. If you want to start using the Rook project and then we are super active on slack is well, there's the link right there. If you have questions, you can come and find the right Channel and we're very welcoming Bunch.
00:38:48 [W1] So you come talk to us there.
00:38:50 [W1] you know, we have over a teenager almost 300 contributors now, we're always looking for more. So on github.com Rook / Rook, that is the repo and you can submit issues portworx.
00:39:00 [W1] Quest's have discussions there. And then of course, we're also on Twitter and we have Community meetings every other Tuesday.
00:39:12 [W1] The specific links for that is on the rebate in the approval.
00:39:14 [W1] So yeah.
00:39:15 [W1] thanks a lot for listening to us today and we can all just got wrap it up if I stirred.
00:39:19 [W1] Computers now we're always looking for more. So on github.com Rook / Rook that is the repo and you can submit issues pull requests have discussions there and then of course, we're also on Twitter and we have Community meetings
00:39:25 [W1] If you have any questions there, especially for Pure Conway for channel called conferences.
00:39:31 [W1] Well, feel free to ask questions.
00:39:34 [W1] And yeah, thanks for listening everyone.
00:39:37 [W1] Have a good day and we'll see you next time, hopefully.
00:39:38 [W1] So I really can do a couple of questions now from the from the chat here.
00:39:52 [W1] Thanks for all the super engaging questions that we're trying to trying to keep up with a quick note is that after the session is over here?
00:40:05 [W1] You can go to the slack that that cncf and Q Khan event has set up and there's a channel there where we will take questions.
00:40:10 [W1] Ins for another 15 minutes or so and it's called to cube con maintainer and so you can find us on there as well.
00:40:19 [W1] So one question I'll take real quick was there's a question about on eventual migration to other Cloud providers.
00:40:29 [W1] What does Rook provide to minimize lock in? And so to answer that question often when you run into problems with a vendor lock-in the problem that you're running into is that you have it at
00:40:40 [W1] And so what you can find us on there as well.
00:40:55 [W1] So one question.
00:40:55 [W1] I'll take real quick was there is a question about on eventual migration to other Cloud providers.
00:40:56 [W1] What does Rook provides a minimized lock in and so to answer that question often when you run into problems with a vendor lock-in the problem that you're running into is that you have a dependency
00:40:57 [W1] I bricks like Seth for edge of fast, whatever. It may be you can bring those up anywhere because there is no that's not special to Amazon.
00:41:06 [W1] That's not special to gcp.
00:41:09 [W1] You can run those anywhere on premises or in Cloud providers.
00:41:12 [W1] So you don't have any dependency on something that's specific to a cloud provider that you cannot then move to somewhere else some other environment, you know, the Rook storageos writers will run into any environment.
00:41:23 [W1] There's always the quote the problem with, you know, having to migrate the data out so you can set up like a
00:41:25 [W1] okay mirror to then start mirroring it from one cluster to another two then have it in the new cluster. But the key Point here is that there's no dependency on any particular services that only exist in one cloud.
00:41:39 [W1] Alex do you want to take the another kind of second question?
00:41:42 [W1] Um sure well one question that I've already answered, but just wanted to bring up there again, which goes into direction of the storage providers.
00:41:59 [W1] The question is does Rook provide metrics or metrics are provided independent. So the point there is that Rook itself doesn't offer Matrix like this.
00:42:11 [W1] It's the job of the surge back end. That's the point where root stays off today.
00:42:14 [W1] path of the storage back-end so that
00:42:18 [W1] there's like no downtime if like you Rook operator has some issues.
00:42:26 [W1] Alright point which show the just always provide our needs to take off.
00:42:36 [W1] .
00:42:36 [W1] Cool.
00:42:39 [W1] I'll take a another quick question here.
00:42:41 [W1] So there's a question about just Rook work with bare metal.
00:42:51 [W1] And yes, it definitely does and I would argue that that's actually probably one of the best scenarios for a rook.
00:42:58 [W1] I think that when you are on premises when you are managing your own machines your own nodes and you don't have access to any of these like cloud provider may need Services.
00:43:03 [W1] you need to kind of basically roll your own data services. That's where Rook shines the most.
00:43:07 [W1] I think so on bare metal, you know, you have a carbonated cluster installed there and that's all you need to do then use the Rook operators to deploy and set up an entire cluster of storage providers storage for a briquette
00:43:22 [W1] Roll your own data services that that's where Rook shines the most I think so on bare metal, you know, you have a kubernative cluster installed there and that's all you need to then use the Rook operators to deploy and set up an
00:43:24 [W1] Start consuming. So bare metal Rook works really well with I think.
00:43:26 [W1] And I think we're just about at the end of the session now.
00:43:33 [W1] So I guess we can go ahead and then and take this over to the the chats the in slack the 2 Cube Khan maintainer is the name of the channel.

Transcription for wordly [W1]

00:03:30 [W] Good afternoon, Cube, Connie you virtual.
00:03:46 [W0] Good afternoon, Cube, Connie.
00:03:50 [W0] you ver
00:08:27 [W1] Hi, good afternoon, Cube, Connie you virtual attendees.
00:08:32 [W1] This is going to be the introduction session to The Rook project and I have here with me my colleague Alexander trust who is currently a devops engineer at Cloud account and I
00:08:41 [W1] Summer founding engineer outbound in both of us are maintainers on the Rook project.
00:08:56 [W1] We got a couple links in the bottom left foot. If you can help you find The Rook project if you have been to it before so let's go ahead and move on to the agenda for today.
00:08:59 [W1] So also a high for me everyone our in a from a general point.
00:09:05 [W1] We're going to talk about storage challenges and communities.
00:09:09 [W1] We're going to talk about like what is Rook what like what it does it even solve we're going to look a bit into the architecture is it?
00:09:12 [W1] Very vital to understand like what is even going on under the hood there?
00:09:20 [W1] We're going to give a short demonstration as well and we are going to give you information on how you can get involved like even like, you know, slack and such things and if you want to learn more already, we have a deep dive
00:09:32 [W1] On the first day. Be sure to check it out if you want to learn even more about rope.
00:09:38 [W1] Okay, let's start talking about some of the challenges that we typically see with storage in kubernetes.
00:09:46 [W1] So normally especially through the early days of kubernative.
00:09:53 [W1] It was very typical to rely on storage that was outside of the cluster external storage, which comes along with a couple problems.
00:10:06 [W1] One of them is that it's not portable. Really I think about if you have a you know subset of storage appliances like Nats device and stands whatever they're not very portable to other Solutions so that can cause
00:10:15 [W1] not portable really think about if you have a you know, a subset of storage appliances like Nats device and stands whatever they're not very portable to other Solutions so that can cause some issues and there's
00:10:16 [W1] And there's also sort of deployment burden as well.
00:10:23 [W1] You have to physically go to the effort of setting those up plugging them in and all that sort of stuff. So not ideal.
00:10:28 [W1] We better software could do that for us, right?
00:10:31 [W1] And then also you can use cloud storage from the cloud providers Google persistent disk or EBS volumes Etc and other managed Services as well, which can typically lead to vendor lock-in
00:10:43 [W1] In Services, which which are good.
00:10:47 [W1] They're pretty valuable.
00:10:49 [W1] It does make it harder to move to another cloud and then there's this whole other element of day-to-day operations of you know backups for stores ongoing operations making sure it's healthy.
00:11:00 [W1] Somebody has to do that. Right?
00:11:09 [W1] So if we take a look at this visual here, this is just a quick sort of diagram of external storage for kubernative.
00:11:11 [W1] He's and so we see on the left. We have a kubernative cluster on the right. We have all sorts of different types.
00:11:14 [W1] Of storage cloud storage and storage appliances and such and volume plugins is what is serves as sort of a bridge between the cluster and the external storage to provision It On Demand to provide it to Applications.
00:11:28 [W1] So that's the typical way that you could do external storage and communities which brings us to what is Rook.
00:11:41 [W1] So Rook can be thought of as a set of storage operators for kubernative Xin this really brings storage into inside to the kubernative cluster you can think of operators is bof.
00:11:44 [W1] being a software for Automation and an API to do a whole bunch of operational tasks for running storage deploying it and configuring it and setting it up and provisioning and upgrading and backups and
00:11:59 [W1] His Rook The Rook can be thought of as a set of storage operators for kubernative Xin this really brings storage into inside to the kubernative cluster.
00:12:00 [W1] You can think of operators is being a software for Automation and an API to do a whole bunch of operational tasks for running storage deploying it and configuring it and setting it up and provisioning
00:12:01 [W1] Stuff like that and then provisioning storage to for when a application needs it to be able to dynamically provision that in cluster storage and have it ready to be consumed by applications.
00:12:15 [W1] So that's one way to think about what Rook is but it you know beyond those operators. It's also a framework to allow a lot of different storage fighters to my grades or make their way into Cloud native ecosystem
00:12:26 [W1] Environments and kubernative will talk more about that framework and a bit.
00:12:32 [W1] It's an open source project and it's was donated to the cloud native Computing Foundation a couple years ago, and it's incubation level right now, but the vote is on going for it to be moved to
00:12:46 [W1] Asian from the cncf so we're very excited about that. And hopefully by the time this recording is being played that the we will have made that vote will be complete and will be fully graduated.
00:12:58 [W1] So the you know quick shout out to the whole Community gosh to this community is so amazing.
00:13:08 [W1] That is absolutely the backbone of why the project is successful.
00:13:11 [W1] So we take a look at some of the more recent events in statistics here 1.4 released came out which is all sorts of new features and improvements to The Rook operators.
00:13:23 [W1] We have over 7,000 GitHub stars now a hundred sixty million downloads of the container image.
00:13:28 [W1] Her part though is how we almost have almost 300 contributors 275 or more people that have written code for rock, which is absolutely amazing to me and got the project where it is. And then as we mentioned to the project is currently being voted
00:13:43 [W1] GitHub stars now a hundred sixty million downloads of the container image. My favorite part though is how we almost have almost 300 contributors 275 or more people that have written code for rock, which is absolutely amazing to me
00:13:45 [W1] graduate and cncf
00:13:46 [W1] so little bit more about the framework.
00:13:53 [W1] So Rook is more than just a set of operators, right?
00:13:58 [W1] It's a whole framework and platform and libraries and Automation and functions and code and all sorts of stuff to make basically make it easier for a storage provider to come into kubernative.
00:14:06 [W1] He's in be running in cloudevents Iron minutes. So there's functions and and libraries to help normalize the way that storage resources are described, you know, a set of hard drives instead of TV's how much of them too.
00:14:18 [W1] Use filters patterns Etc to say basically say what storage do include in the cluster, you know, all sorts of the operator patterns and plumbing their first storage, you know, specific storage needs one of my favorite. So is
00:14:33 [W1] We have we have an entire framework around testing Storage Solutions in storage needs across a variety of kubernative clusters versions clouds Etc.
00:14:45 [W1] So all those things are available in a framework for new storage providers to come in be part of the Rook project in make it easier to reduce the burden that they have to be running and cloudevents varmints.
00:14:58 [W1] can see a whole series of sort of providers that The Rook project currently supports and we'll get into details on those on this slide. So we're going to
00:15:03 [W1] With the stable providers each one of these storage providers has been declared as stable.
00:15:18 [W1] So Seth was actually the first storage for better that Rook started with they would project is kind of founded around doing orchestration for Seth Seth provides, you know, three different types of storage file block and object but it's also really highly scalable, which
00:15:24 [W1] The nice properties because basically anyone in the cluster can figure out where a piece of data should go you don't have to centralize that information.
00:15:34 [W1] So that's a really nice kind of offloading from a central bottleneck to make it a very highly scalable solution Edge. If s is the second storage vendor that made it to a stable declaration ready to produce a production and
00:15:46 [W1] It's kind of this design is kind of similar to how get is designed where it's based on immutable blocks. And when you change a block modifications to blocks are globally unique and they give the buccaneer identity and those properties that are kind of set
00:16:02 [W1] Need of the design to be globally scalable, which is great this slide. We have both are alpha and beta providers.
00:16:16 [W1] So these ones are not quite two stable yet, but they are underway maturing and growing Cassandra is a distributed.
00:16:23 [W1] No SQL database. It's made for large amounts of data and I like this one, especially to because a contributor named Jonas actually did that for the initial implementation for his master's thesis when I was graduating from
00:16:35 [W1] Graduating with his master's degree. So that was really awesome cockroach TB is a highly resilient location-aware database which has really cool properties. When you have location awareness about where you're running you can make decisions about where to move data to
00:16:48 [W1] With his master's degree. So that was really awesome cockroach TB is a highly resilient location-aware database which has really cool properties. When you have location awareness about where you're running you can make decisions about where to move data to be closer to
00:16:50 [W1] It's where to move data to be, you know to have excellent availability and durability properties Etc.
00:17:01 [W1] So let's well-designed database and that's also running as a rook storage writer in FS the network file system.
00:17:09 [W1] You typically use this when you want to have multiple writers on a shared file system that was originally implemented as part of the Google summer of code project a couple years ago. And then this summer there's a new Google summer of code.
00:17:18 [W1] And his name is Ahmad and he is making lots of enhancements to in a festive summer.
00:17:24 [W1] So there's active contributions going on there.
00:17:32 [W1] And then yugabyte ZB. Use the newest storage for iter is it's a relational databases. Well, it's designed for multiple regions globally distributed as well. And it's set up for very low latency.
00:17:40 [W1] High build High availability and high steel as well.
00:17:44 [W1] So glad to have yugabyte part as part of Rook as a service provider as well.
00:17:47 [W1] So at the end of the day though the goal of rook and all these storage Fighters that it supports is for persistence Persistence of data for applications, right?
00:18:02 [W1] So, let's start to talk to you about the kubernative knative integration because Rook is a set of storage orchestrators in a framework for storage in kubernative.
00:18:07 [W1] So let's talk about how it knative ly integrates there which brings us to a visual here. This is an analogy we're setting up here so you can think about you see this little Tugboat here. It's pulling
00:18:17 [W1] The goal of rook and all these storage Fighters that it supports is for persistence Persistence of data for applications, right?
00:18:21 [W1] So, let's start talk to you about the kubernative knative integration because Rook is a set of storage rochus traitors in a framework for storage in kubernative.
00:18:22 [W1] So let's talk about how it natively integrates there.
00:18:22 [W1] Which brings us to a visual here's this is an analogy we're setting up here so you can think about you see this little Tugboat here. It's pulling or guiding the
00:18:23 [W1] big cargo boat there with lots of valuable cargo so you can think about the cargo boat being a the data plane the storage providers, you know, they have a ton of valuable cargo on there and the tugboat is the one that's kind of leading and guiding and
00:18:33 [W1] you can think about the cargo boat being a the data plane the storage providers, you know, they have a ton of valuable cargo on there and the tugboat is the one that's kind of leading and guiding and steering and were castrating and managing
00:18:35 [W1] Straining and managing some of the direction that the data plane that cargo ship is getting in. So keep that analogy in mind as we move forward to the operator pattern.
00:18:48 [W1] So the operator pattern is fairly common in kubernative is now and it's basically, you know, software automation that sits in a control Loop and Accent three phases the first is that observes the current state of the system the actual state
00:19:00 [W1] In the cluster and then it analyzes and says, okay.
00:19:05 [W1] How is this actual state that I found?
00:19:15 [W1] How is it different than the desired state that the user says they want for the storage system and it figures out the Delta between those and an axe the third phase on taking that Delta into continually driving the actual state of the cluster towards the desired
00:19:22 [W1] And then acts the third phase on taking that Delta into continually driving the actual state of the cluster towards the desired state so it'll keep in a loop and you know doing this observe analyze act and making sure that the users desired state is where the cluster
00:19:29 [W1] In a loop and you're doing this observe analyze act and making sure that the user is desired state is where the cluster is heading at all times.
00:19:31 [W1] So we take a look at this architecture diagram a little bit under the covers here about how Rook Works. Let's work left to left to right.
00:19:39 [W1] So keep control is, you know, the client interface to communities API it talks to the committee has a pi server there and you can do things like, you know, keep control create or get storage pools and file storage etcetera and then we
00:19:53 [W1] Is that are in the cluster also talking to the kubernative CPI?
00:19:59 [W1] And so they'll take that desired state of okay, you want any storage cluster?
00:20:07 [W1] I will turn that into a set of deployments and pods and services.
00:20:08 [W1] config Maps Etc. And that host the storage demons on the bottom right there.
00:20:17 [W1] The storage provider specific demons like this F monitors and osds and things like that or cockroach DB instances, so
00:20:24 [W1] no, this is a representation of in the communities cluster how it's based on the current is API and you have a set of operators watching listening for desired States and manipulating objects in the cluster to drive that
00:20:39 [W1] Is so you know, this is a representation of in the communities cluster how it's based on the current has a pi. You have a set of operators watching listening for desired States and manipulating objects in the
00:20:40 [W1] Stir in the storage demons, the storage provider or fabric towards the desired state that the user wants which brings us back to our analogy of the big cargo ship there later.
00:20:52 [W1] The you storage Fighter the data plane that's hosting are holding a lot of bits and bytes and important data and for the cluster and the The Rook operators the tug boats there that are guiding and steering, you know, managing our orchestrating the data plane
00:21:06 [W1] It's aligned with the desired state that the user is expressed.
00:21:11 [W1] So now that hurts a lot about what an operator is doing and we've already heard about customer sister Phoenicians.
00:21:26 [W1] Let's dive into what customer system engines even our and especially at the example of The Rook SEF operator the second look what they provide to the operator and in the end for you the user of an operator.
00:21:33 [W1] The pensions even our and especially at the example after you Rousseff operator.
00:21:35 [W1] Let's take a look what they provide to the operator and India and for you the user of an operator, so it's kind of like that. If you think of the operator like Esther, you know, like a murder
00:21:41 [W1] So it's kind of like that. If you think of the operator lie guest, you know, like a murder turning all the wheels in hand.
00:21:49 [W1] The customer sister Phoenician is basically the parameters for those Wheels, like as an example, let's say for Seth which version of ceph you want to have deployed it
00:21:58 [W1] Which version of ceph you want to have deployed?
00:22:00 [W1] that would be one parameter and it adds up in the end to the whole big thing of a being of a theft cluster and
00:22:12 [W1] we have those we have those custom objects there. Like if you would go to any kubernative closer, which does not have Rook so consult.
00:22:21 [W1] You don't have this type available on your curcumin is closed. So that's what the operator brings with it is bringing its custom times for that.
00:22:32 [W1] and I mentioned parametres with like the wheels and such, you know, like it's
00:22:38 [W1] And a customer assistive condition is basically nothing else. Like if s you think about maybe like a pot object like pot llamo.
00:22:47 [W1] it's in the end nothing different to that. It's a specification.
00:23:01 [W1] We're all parameters on how it should look like in case of part like what image does it have like Readiness lifeless probes?
00:23:06 [W1] How many are well if there are more than one container in it labels and all those things? Yes, it does it basically just parameters.
00:23:08 [W1] All in it for kubenetes to know what the whole thing will look like in the end for the whole pot.
00:23:16 [W1] Is there like a device Phil? Do you want to set any like morakot configuration possibilities and you know more and more like I'm not going into each parameter here to point being is basically big list of parameters, which you operator will take
00:23:45 [W1] That begin creating and or modifying the existing weaveworks FKS that which is running.
00:23:53 [W1] And to be a go a bit further into the pot with like a parameter styra, for example, you can specifically give a list of nodes you want to use and then that part what devices even to use
00:24:10 [W1] Cool thing thanks to kubernative styra.
00:24:14 [W1] We can simply specify our custom object.
00:24:17 [W1] There is no magic that we need to do there and it allows us to easily. Well provide users with a safe place down in Cuba natives based on those parameters.
00:24:31 [W1] And for Rousseff, especially there, it's not just a set of cluster object. Like there's some more around in self as well already there. For example, this F block Pro.
00:24:44 [W1] We have the API version.
00:24:51 [W1] It's not like version 1 or F / version 104 the those people that have run around with kubenetes already a bit.
00:24:54 [W1] The kind is not deployment or something.
00:25:05 [W1] It's F block pill. That's our custom object that The Rook operator to bring into which is normal like mayadata, which is the name of the object its the names with the object should be created in if we have two specifications in this case.
00:25:08 [W1] We Define the specifications.
00:25:09 [W1] This is a well failure mine host.
00:25:11 [W1] Replicated sighs free we require save replica size and so on there's our well, there's a specific parameters, but in the end, you know operator takes days it takes the specification.
00:25:26 [W1] Is the object should be created and for have two specifications.
00:25:27 [W1] And in this case we Define the specifications to say well, hey little mine host replicated sighs free or I cry. I'll save replicar size and so on do so.
00:25:29 [W1] Well, there's a specific parameters but in the end, you know operator takes days. It takes the specification works it out in terms to basically translated to SEF if you will.
00:25:34 [W1] So and take care of it for you as to do something.
00:25:36 [W1] To build up from a story.
00:25:50 [W1] They're basically we have Force F class object when we created it will want to take it will take a few minutes depending on how fast like pulling images and all those things. Are you have created a set of cluster and we have also gone ahead created this F block pool.
00:25:57 [W1] have created a soft cloth and we have also gone ahead created this F block pool object because that will instruct to the operator to create a pool a storage pool basically in
00:26:06 [W1] Yousef cluster just created.
00:26:09 [W1] so
00:26:13 [W1] that's is the part where we should learn how look into how can we consumer search and I can tell you it's it's pretty simple.
00:26:26 [W1] It's all pretty easy integratable things too like it with the customer sister Phoenicians not but the good thing is we don't need customers to the custom things for everything. There's for example like starch Klaus.
00:26:40 [W1] The it is an object of kubenetes, like often knative API support like that of the storage apis by default. Basically, we specify a name for the service cross.
00:26:55 [W1] Lock Rotella lets you know, some special parameter has some weight like where to even look for who's the provisional storageos all like all this fancy stuff.
00:27:08 [W1] We don't need to concern ourselves too much with that but we pointed to the like to the right cluster, which is the Rousseff closer.
00:27:16 [W1] We just created and that it should use the pool replica pool. If you remember we had created a safe Blackpool as a headed up as a animal and it would use this pool done for the storage.
00:27:27 [W1] So thanks to the storage glasses and Cuban is now the only thing a juicer or we need to do.
00:27:33 [W1] We could go ahead and create a persistent William King.
00:27:37 [W1] Recreate a persistent volume claim.
00:27:42 [W1] Well, we give it a cool name.
00:27:44 [W1] My crew lab is probably a well pretty cool name. So we got this color. We tell the Piston volume claim which starts class name in all cases the roof setblock one, which I looked was exes - I'm not going too far into that
00:27:57 [W1] Kubenetes, like what kind of storage it would need to look out for like for example block storage could normally can only be used as read/write one storage which basically means that the storage can only be mounted
00:28:13 [W1] there that we get anyone can only be mounted once on one node like not once in the whole life cycle of the volume, but meaning that if you have a pot running on node a and you start up a pot on second
00:28:29 [W1] Still to mount the same block as while you like a same persistent volume claim basically there it won't work unless it's role on the same note, but you know, it's those kind of edge scenarios
00:28:45 [W1] Where it wouldn't it wouldn't work out if it would be on different notes because the blocks block image normally can only be mounted on one server in read write mode. So that's about that blur.
00:29:01 [W1] There's also automotives like read/write many reach reach only many as well.
00:29:08 [W1] So but as it were not going to concern ourselves too much with that right now, we're going to set in a persistent persistent volume claim. Also the resources were going on in this case. We basically Rook
00:29:16 [W1] request 20 gigabytes of storage
00:29:19 [W1] And well after we have created the one.
00:29:24 [W1] We can go ahead and our deployment we have well named it's my cool app, obviously and in the list of volumes we go ahead and specify a little persistent volume claim.
00:29:37 [W1] There's well.
00:29:44 [W1] there's a few more tweaks. You would want to make to the deployment that you have a Flawless way of upgrading like you currently can only run this with a replica of one because if you would have the need to run an application where I like each replica so each
00:29:55 [W1] List of volumes we go ahead and specify a little persistent volume claim.
00:29:56 [W1] There's well.
00:29:57 [W1] there's a few more tweaks. You would want to make to the deployment that you have a Flawless way of upgrading like you currently can only run this with a replica of one because if you would have the need to run an application where I like each replica, so each
00:29:59 [W1] Own persistent volume claimed it would be necessary because you know spok storage can only be mounted once by one part. Basically you would need to go ahead and use the stateful set this
00:30:11 [W1] - empowerus year purpose you're disappointed.
00:30:19 [W1] This is how I like the volumes entry would look and in the end with you could simply in the container section and do it while you mount saint. Well the name data and say well Mount path down there. So yeah,
00:30:29 [W1] In the container section do it while you mounts on well the name data and say well Mount path down there. So yeah.
00:30:31 [W1] So we have our application.
00:30:32 [W1] They're basically running.
00:30:34 [W1] We have one Pond and now we're going to dive into the demo. Okay, dubbing.
00:30:37 [W1] Is it the devil now for first part Force F operator. We need to create the commandant.
00:30:48 [W1] Yeah mold all the objects which are in there in the community feels. So real simple dude by well and it will really create seared.
00:30:57 [W1] He's customer sisters nations are bar cluster which includes glycerol throw binding service comes in all those things as next part. We're
00:31:01 [W1] To create the operator deployment and the config of the operator.
00:31:06 [W1] After that, we'll move on to the class AML. I'll show it in a second, but just you know takes a bit of time for everything to spin up.
00:31:16 [W1] we'll go into that in a second. We're going to create it.
00:31:18 [W1] So let's just do a quick.
00:31:23 [W1] Okay containers already.
00:31:28 [W1] It's already pretty so that's good operator.
00:31:33 [W1] Well it you know just takes a bit in my canonical some you think and let's take a look at the class. They are.
00:31:36 [W1] Big note here. The cluster we are currently looking at is is a three node cluster.
00:31:49 [W1] All those things as next part we're going to create the operator deployment and the config of the operator.
00:32:01 [W1] After that, we'll move on to declaw cri-o.
00:32:02 [W1] I'll show it in a second, but just you know, it takes a bit of time for everything to spin up.
00:32:02 [W1] So we'll go into that in a second. We're going to create it.
00:32:03 [W1] So let's just do a quick.
00:32:03 [W1] Okay containers already.
00:32:03 [W1] It's already pretty so that's good operator.
00:32:04 [W1] Well, it's you know, it just takes a bit in my canonical some you think and let's take a look at the class. They are.
00:32:05 [W1] Big now, it's here. The cluster we are currently looking at is it's a free node cluster.
00:32:09 [W1] You have to have at least three nodes. If you try if you like well want to try it out with class to the animal. If you want to just play around in a network of we're like one node cluster, but please take a look at the
00:32:10 [W1] At a cluster cluster - test on the ammo for that and so let's Dive Right In To Dance.
00:32:15 [W1] So well, you know, we have a name name says it all that again.
00:32:17 [W1] We have to specification which Seth version it will use with some additional stuff like data they host path.
00:32:29 [W1] would recommend you to read up on like what each party or does in the documentation.
00:32:31 [W1] On Rook dot IO but you know as we had there's a bunch of parameters which need to be set in a certain way.
00:32:40 [W1] most of them have defaults but you should be able to lay off what the defaults are there, especially when you would work go ahead and run it and production at one point.
00:32:49 [W1] So just now all you know, we have two hole.
00:32:53 [W1] The whole structure of the surf class or object.
00:33:02 [W1] So let's just jump back and see how it's all stood lugging.
00:33:03 [W1] Okay, we have a bunch of components already having spot up.
00:33:08 [W1] Yeah parade in the background is creating all the components. We need we have two mans spinning out.
00:33:18 [W1] There are vital part of Seth and for production or is a side note here.
00:33:23 [W1] You should have at least three months.
00:33:27 [W1] If you run with less than three months, you're not going to have a quorum for the surf months.
00:33:30 [W1] So keep that in mind, but you know, if you want to know the more I would check recommend you check out the robot iot commentation and depending on
00:33:38 [W1] As we had there's a bunch of parameters which need to be set in a certain way.
00:33:42 [W1] Most of them have t Falls but you should be aware of what the defaults are there, especially when you would work go ahead and run it and production at one point. So just now well, you know, we have to hole.
00:33:44 [W1] The whole structure after Self class or object.
00:33:45 [W1] So let's just jump back and see how it's how's it looking?
00:33:45 [W1] Okay, we have a bunch of components already having spot up.
00:33:45 [W1] Yeah parade and the background is creating all the components. We need we have two mans spending our day are vital part of Seth and for production or as a side note here.
00:33:49 [W1] You should have at least three months. If you run with less than three months, you're not going to have a quorum for the surf months.
00:33:49 [W1] So keep that in mind. But you know, if you want to know the more I would check recommend you check out the Rook that iot commentation and the petabyte-scale.
00:33:50 [W1] Wants storage bag and you want to run like in case of ceph check out the ceph documentation as well to read up on how the architecture of surface looking.
00:33:52 [W1] Okay, so
00:33:52 [W1] we have two months now.
00:33:58 [W1] It is the operator has now started the so-called roofs fosdp repair parts.
00:34:05 [W1] They are just basically which are running on each node 2. Well create on.
00:34:05 [W1] Well, not necessarily create but prepare disks in a server for oh Steve's so that's what they're doing and let me just refresh the Amphitheatre.
00:34:16 [W1] It's has already finished for two of the notes we have for the master and for the Node 1 year, and we already have even we are it's already faster and anticipated right now.
00:34:32 [W1] We already have 230 STDs it was these short explanation here knows these are the pod which actually saved the data to disk there.
00:34:41 [W1] Let's run again that I get to update the output.
00:34:45 [W1] One prepared job here are still running, but we have our studies already. It will take depending on you know, what resources do know, it has a bit till I've everything is prepared on a node and as we can see we just got the
00:34:59 [W1] SEF documentation as well to read up on how the architecture of surface locking.
00:35:00 [W1] Okay, so
00:35:00 [W1] we have two months now.
00:35:00 [W1] It is the operator has now started the so-called roofs fosdp repair parts.
00:35:01 [W1] They are just basically which are running on each node 2 well create on.
00:35:01 [W1] on. Well, not necessarily create but prepare disks in the server for oh Steve's so that's what they're doing and let me just refresh the upper tier.
00:35:03 [W1] It's has already finished for to of the nodes we have for the master and for the Node 1 year, and we already have even we are it's already faster and and anticipated right now.
00:35:06 [W1] We already have 230 STDs there is these short explanation here knows these are the part which actually save the data to disk there. Now, let's run again that I get to update the output.
00:35:09 [W1] One prepared job here are still running, but we have our studies already. It will take depending on you know, what resources to know. It has a bit till off. Everything is prepared on a node and as we can see we just got the
00:35:13 [W1] Method may seem weird, but at least in for to talk about cheap odds here and listen to you about that. There's an option to say hey, this is unfounded and in the K classes, I've been setting up when like even though the
00:35:29 [W1] It was empty and it didn't work after that. It works when I've set them to unfermented.
00:35:36 [W1] So just a quick tip here. If you want to if you have some trouble getting your petition and or discs recognize even for just the testing, but okay, so we have our set of cluster running now.
00:35:51 [W1] Let me jump ahead to the application deployment in a second.
00:35:55 [W1] Okay. So now for the application deployment first wing
00:36:00 [W1] we still need to do is create a storage class and US F block pool as we learn from previous previous slides.
00:36:14 [W1] We hit that are some pretty convenient example in a CSI / R BD folder called storage class.
00:36:19 [W1] Llamo as you can see, we just created a self Black Pearl called replica pool and a storage class.
00:36:21 [W1] So we got that now save are running Cube CTL and get storage class.
00:36:26 [W1] will see there we go. We have a storage class now.
00:36:29 [W1] Okay. Now let's do quality application.
00:36:37 [W1] Okay. Now after we have created the storage class and with that also self block pool we can just run keep co-create on our application manifests which are also in this case as they are deployment objects and the persistent William claim objects.
00:36:47 [W1] Just going to create the everything that's needed for that and we can go ahead run at keep cuddle get hard and get PVC minus W so we can watch the whole thing.
00:37:02 [W1] You can't do it in the mulch Mount.
00:37:07 [W1] Well, let's just wait for the pots to be running and well there we have it.
00:37:12 [W1] If I go ahead and run QC tail Gaff PVC now, here we go.
00:37:16 [W1] Let me just zoom out a slight bit here.
00:37:19 [W1] Here we see we have to persist in volume claims, which we created.
00:37:22 [W1] And both of them are Bouncer they have been created a bacchanal and and provisioned and I'm now ready for use and as we have seen at the parts. Well, they're ready and there are already used in the past and well.
00:37:38 [W1] It from the devil or if he's been able to consume the search after we have creative staff cluster. Remember you even a testing environment needs to have certain amount of resources like discs or
00:37:53 [W1] You know something yeah, thanks for that.
00:37:59 [W1] Let's continue.
00:38:02 [W1] All right, Alex.
00:38:03 [W1] Thank you very much for that helpful demo there to showing us how some of the Rook project works with a little bit more hands-on experience there.
00:38:15 [W1] So now we can talk about since Rook is a completely open source project cncf project.
00:38:26 [W1] We have a pretty broad Community now and there's a lot of different ways that you can get more involved and become more more involved in the community as a whole. So the main site is Rook cri-o that has some more explanation.
00:38:30 [W1] About the project and all of our documentation user guide quickstarts.
00:38:40 [W1] Etcetera is all there. So it's a great place to go. If you want to start using the Rook project and then we are super active on slack is well, there's the link right there. If you have questions, you can come and find the right Channel and we're very welcoming Bunch.
00:38:48 [W1] So you come talk to us there.
00:38:50 [W1] you know, we have over a teenager almost 300 contributors now, we're always looking for more. So on github.com Rook / Rook, that is the repo and you can submit issues portworx.
00:39:00 [W1] Quest's have discussions there. And then of course, we're also on Twitter and we have Community meetings every other Tuesday.
00:39:12 [W1] The specific links for that is on the rebate in the approval.
00:39:14 [W1] So yeah.
00:39:15 [W1] thanks a lot for listening to us today and we can all just got wrap it up if I stirred.
00:39:19 [W1] Computers now we're always looking for more. So on github.com Rook / Rook that is the repo and you can submit issues pull requests have discussions there and then of course, we're also on Twitter and we have Community meetings
00:39:25 [W1] If you have any questions there, especially for Pure Conway for channel called conferences.
00:39:31 [W1] Well, feel free to ask questions.
00:39:34 [W1] And yeah, thanks for listening everyone.
00:39:37 [W1] Have a good day and we'll see you next time, hopefully.
00:39:38 [W1] So I really can do a couple of questions now from the from the chat here.
00:39:52 [W1] Thanks for all the super engaging questions that we're trying to trying to keep up with a quick note is that after the session is over here?
00:40:05 [W1] You can go to the slack that that cncf and Q Khan event has set up and there's a channel there where we will take questions.
00:40:10 [W1] Ins for another 15 minutes or so and it's called to cube con maintainer and so you can find us on there as well.
00:40:19 [W1] So one question I'll take real quick was there's a question about on eventual migration to other Cloud providers.
00:40:29 [W1] What does Rook provide to minimize lock in? And so to answer that question often when you run into problems with a vendor lock-in the problem that you're running into is that you have it at
00:40:40 [W1] And so what you can find us on there as well.
00:40:55 [W1] So one question.
00:40:55 [W1] I'll take real quick was there is a question about on eventual migration to other Cloud providers.
00:40:56 [W1] What does Rook provides a minimized lock in and so to answer that question often when you run into problems with a vendor lock-in the problem that you're running into is that you have a dependency
00:40:57 [W1] I bricks like Seth for edge of fast, whatever. It may be you can bring those up anywhere because there is no that's not special to Amazon.
00:41:06 [W1] That's not special to gcp.
00:41:09 [W1] You can run those anywhere on premises or in Cloud providers.
00:41:12 [W1] So you don't have any dependency on something that's specific to a cloud provider that you cannot then move to somewhere else some other environment, you know, the Rook storageos writers will run into any environment.
00:41:23 [W1] There's always the quote the problem with, you know, having to migrate the data out so you can set up like a
00:41:25 [W1] okay mirror to then start mirroring it from one cluster to another two then have it in the new cluster. But the key Point here is that there's no dependency on any particular services that only exist in one cloud.
00:41:39 [W1] Alex do you want to take the another kind of second question?
00:41:42 [W1] Um sure well one question that I've already answered, but just wanted to bring up there again, which goes into direction of the storage providers.
00:41:59 [W1] The question is does Rook provide metrics or metrics are provided independent. So the point there is that Rook itself doesn't offer Matrix like this.
00:42:11 [W1] It's the job of the surge back end. That's the point where root stays off today.
00:42:14 [W1] path of the storage back-end so that
00:42:18 [W1] there's like no downtime if like you Rook operator has some issues.
00:42:26 [W1] Alright point which show the just always provide our needs to take off.
00:42:36 [W1] .
00:42:36 [W1] Cool.
00:42:39 [W1] I'll take a another quick question here.
00:42:41 [W1] So there's a question about just Rook work with bare metal.
00:42:51 [W1] And yes, it definitely does and I would argue that that's actually probably one of the best scenarios for a rook.
00:42:58 [W1] I think that when you are on premises when you are managing your own machines your own nodes and you don't have access to any of these like cloud provider may need Services.
00:43:03 [W1] you need to kind of basically roll your own data services. That's where Rook shines the most.
00:43:07 [W1] I think so on bare metal, you know, you have a carbonated cluster installed there and that's all you need to do then use the Rook operators to deploy and set up an entire cluster of storage providers storage for a briquette
00:43:22 [W1] Roll your own data services that that's where Rook shines the most I think so on bare metal, you know, you have a kubernative cluster installed there and that's all you need to then use the Rook operators to deploy and set up an
00:43:24 [W1] Start consuming. So bare metal Rook works really well with I think.
00:43:26 [W1] And I think we're just about at the end of the session now.
00:43:33 [W1] So I guess we can go ahead and then and take this over to the the chats the in slack the 2 Cube Khan maintainer is the name of the channel.
