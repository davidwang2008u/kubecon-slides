Standardizing Applications For the Cloud at a Global Scale: KNSZ-2239 - events@cncf.io - Wednesday, August 19, 2020 10:38 AM - 1195 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:07:34 [W] Hello, welcome to the station of standardized application at global scale.
00:16:30 [W] My name is Li Zhong from Alibaba and my co-speaker Jared come from ABBA. So I will start from what problems we are facing and how we stop them, please. Oh and the cortex.
00:16:39 [W] So the whole story begins this 2018 by the team in Alibaba starting to heal one of the largest kubernative clusters in the world.
00:16:52 [W] The goal is to serve with developers and operators throughout the company and support is double eyelid and sales Festival, which is huge.
00:16:59 [W] outcome is pretty good. They even published a awesome blog which attract a lot of vacations and it gave a lot of confidence to the community because they proved that kubernative.
00:17:08 [W] It works for super large scale that's feedback from our users.
00:17:15 [W] However are unexpected.
00:17:17 [W] even ask us why why do you want to force them move to a new structure system, which clearly was no value from their perspective.
00:17:26 [W] So what's the problem here?
00:17:37 [W] We finally notice that there's a huge gap between love over users expecting and will be providing the over kubernative Costco.
00:17:38 [W] First of all API and The Primitives with our users workers old far code application and ci/cd pipelines.
00:17:49 [W] Conversation of standarized application global scale.
00:17:53 [W] My name is Li Zhong from Ali Baba and my co-speaker Jared come from Papa.
00:17:54 [W] So I will start from what problems we are facing and how we stop them, please. Oh and the cortex.
00:17:56 [W] So the whole story begins is 2018 by the team in Alibaba starting to heal one of the largest kubernative clusters in the world.
00:17:57 [W] The goal is to serve with developers and operators throughout the company and support is double eyelid and sales Festival, which is huge.
00:17:59 [W] The outcome is pretty good. They even published a awesome blog which attract a lot of vacations and it gave a lot of confidence to the community because they proved that kubernative works for super large scale.
00:18:03 [W] That's feedback from our users how they work are unexpected.
00:18:07 [W] They even asked us why why do you want to force them move to a new structure system, which clearly was no value from their perspective.
00:18:08 [W] So what's the problem here?
00:18:09 [W] We finally notice that there is a huge gap between what our users expecting and what we providing the over kubernative cost of first of all API and The Primitives with other users workers old bar code application
00:18:11 [W] Medical progress throughout but will that would be exposed to them how they work but kubernative service users permissive and is to Virtual service.
00:18:23 [W] Yes as kubernative / like us it's trip over to assemble them into route strategy or auto-scaling products, but these Primitives don't make any sense from application operators perspective.
00:18:37 [W] The last issue is actually the worst one.
00:18:42 [W] It is a user interface.
00:18:43 [W] Papal Builders. We think kubernative snyk, we think what is declarative API is they're powerful and extensible with our users density.
00:18:54 [W] Don't grieve it.
00:19:02 [W] They want to work with human readable interfaces like dashboard command line tool or infrastructure as code right here yellow files. However, I like right Assembly Language from their perspective and no one
00:19:09 [W] They soon realize that Zippy issues are not only problems that accompany the exist in the community for quite a long time.
00:19:19 [W] That's why we begin to build modern application platforms. For users.
00:19:24 [W] Yes.
00:19:26 [W] They are user-facing performs their user friendly and what's more important is they're all food invest on kubernative extension products crd s and operators. I mean, so do they solve our problem?
00:19:39 [W] Well Keda over users stop complaining about over kubernative anymore since now they have application platforms or even service platforms, which should be which are all great.
00:19:51 [W] For the dinner show happen. Is that whole this now they have too many problems.
00:19:58 [W] This is because at a big company the requirement from over users are hunting dinosaurs, for example, some applications are stable workloads.
00:20:10 [W] So we need to build them instead of our application path for which the value is getting policies.
00:20:12 [W] For example, or narrow roads challenges.
00:20:17 [W] However, there are also many applications are stateless.
00:20:21 [W] use the product and workloads Flagger to route and HPA for all the steering.
00:20:26 [W] Some other apps they just prefer to go to Services stop.
00:20:33 [W] So do this all over public?
00:20:40 [W] Well kind of over user stop complaining about over kubernative anymore since now they have application platforms or even service platforms, which should be which are all great.
00:20:41 [W] So do this all over public?
00:20:41 [W] Is that all this now
00:20:41 [W] for example, all of them requires night script service
00:20:44 [W] but at that will Builders we have to implement this functionality in different forms again, and again because every platform sticks different apis,
00:20:54 [W] we are creating more fragmentations more silos and more closed systems made in-house grpc. These don't feel good.
00:21:06 [W] So we stop here and begin to rethink what we've done the last whole year, especially big trying to build application label platforms for all our users.
00:21:19 [W] We want to make sure they are either friendly so the doc neuvector SQL system tools and defined our own actions and will it works?
00:21:27 [W] We also want to make sure that pack worms are extensible.
00:21:34 [W] This is an essential value growth factor analysis, right?
00:21:37 [W] So we supported you from kind of workloads different forms of operational capabilities and challenges and that's also why we build different platforms to focus on different scenarios.
00:21:48 [W] This also works.
00:21:48 [W] But was messed up here is follow the power forms became silos.
00:21:55 [W] This action raise a neutral and Applause. Can we build them in standard approach?
00:22:03 [W] This rethinking finally were called at the standard who feel application platforms which knative openfaas remodel.
00:22:10 [W] Is that that's also why video different platforms to perform some different scenarios. This also works.
00:22:13 [W] But was messed up here is followed these platforms became silos.
00:22:14 [W] This action raise a new Challenger for us. Can we build them in standard function?
00:22:15 [W] This rethinking finally work out as a standard review application platforms, which knative openfaas remodel.
00:22:17 [W] Oh and we open source this work based collaboration or Microsoft last year, essentially.
00:22:20 [W] Oh if I'd for application Level Primitives for kubernative near standardized approach firstly components.
00:22:29 [W] all about what workloads eventual decline in those cases. They are currently funding but the cows would be like functions or
00:22:33 [W] own companies operators
00:22:35 [W] The second concept is Chase which are you to defy how to operate the workers all the scaling rollout traffic actor are all perfect examples of chairs.
00:22:50 [W] Some of them are provided all the Box by kubenetes, but most of them come from the ecosystem the CRTs and operators. This is also where abstraction smoke it happen if you want to make your users like spanner
00:23:01 [W] The third concept is application configuration.
00:23:09 [W] This is a Yamaha valve who explicitly by Chase through certain components.
00:23:12 [W] So you clearly know the policy of your app instead of tracking them by labels or other unstructured and portraits.
00:23:17 [W] Last but most important the definitions they don't use two registers. They are D or any coordinates Eco resource and workloads or change. They will talk about this in be home soon.
00:23:29 [W] You can resource model, for example componentconfig station attendant object for your workers and is worship next if the developer modify these complement llamo file, for example, it can regenerate a new relation of a deployment
00:23:47 [W] Which is immutable.
00:23:50 [W] Note that the work of the section in the component.
00:23:56 [W] Yammer valve is fully clock. Oh, so you're free to defy any label of your abstractions in componentconfig kubernative element.
00:24:05 [W] Okay, knative service is all depends on you.
00:24:06 [W] Four chairs and application configurations.
00:24:12 [W] They are kubernative Ricky our resources at Mill the application configuration in this example it reference to two components the front end and the radius and it's bicep pulled all the scalar and EPA Gateway our chains for
00:24:24 [W] water
00:24:26 [W] So these application configuration could be used as the self-contained application date Nation file which includes every dependency and operational capability or workloads need to run?
00:24:40 [W] Last one technician this very interesting because for example is important for you to figure out which kubelet cpio crd is a capability. We want to expose our users.
00:24:53 [W] This means for the other if you wanna see artists, they are system level apis and we don't want to lick them already yours.
00:25:02 [W] That's why we need to register cri-o kubernative.
00:25:08 [W] Zp a resource and workloads or trades and expose them to users.
00:25:12 [W] They will become the user facing API for over platform which over platform speak.
00:25:14 [W] You can see here.
00:25:17 [W] The point is everything extensible because if the users need another workloads shade, for example, what we need to do is simply install the kubernative zrd and the controller and register it as a new capability the platform support.
00:25:31 [W] And expose them to users they will become the user facing API for over platform which over platform speak.
00:25:32 [W] You can see here.
00:25:33 [W] The point is everything is extensible because if the users need another workloads shape, for example, what we need to do is simply install the kubernative zrd and controller and registered it as a new capability the platform support.
00:25:35 [W] Are the workloads for our children?
00:25:36 [W] These example I demoed how we gesture is to worship service as the traffic management shaping our platform.
00:25:46 [W] We also divide that it conflicts with another servicemeshcon.
00:25:50 [W] The operator has been not make mistake in the future.
00:25:51 [W] Today with the help of oh things are getting much better inaudible by because we now have unified model layer for all application platforms over company.
00:26:02 [W] All of the platform's speak API such as component and application configuration is their unique workloads and cheese to serve different scenarios.
00:26:12 [W] And what's more important is for the common workloads and shades that we don't need to reinvent those bills anymore. All these platforms now share a common pool of the capabilities.
00:26:25 [W] So powerful Builders just pick what they want and assemble them into their their own tampons. It's so easy and it neat.
00:26:34 [W] Besides as a building block for creating standard platforms.
00:26:44 [W] Oh also enabled us to distribute software at global scale with collaboration of crows can project. This is really important now, I will let my friend Jared take from here. So it's going to Jared.
00:26:53 [W] All right.
00:26:57 [W] kids to serve people as the Narrows
00:27:06 [W] and what's more important is for the common workloads and Chase that we don't need to reinvent to those bills anymore. All these platforms now share a common pool of the capabilities.
00:27:08 [W] So travel Builders just pick what they want and assemble them into their their own platforms. It's so easy and it neat.
00:27:10 [W] Besides as a building block for creating standard platforms.
00:27:10 [W] Oh also enabled us to distribute software at global scale with collaboration of crows can project. This is really important now, I will let my friend Jared take from here. So it's going to Jared.
00:27:13 [W] All right.
00:27:15 [W] Thank you Harry for showing this little bit more about the standard application model and ohm and how we can use that to describe applications.
00:27:16 [W] So one of the interesting things about real life applications is often.
00:27:16 [W] They don't just live in a single place right? It's pretty common for applications to be spread out or the components of them to be spread out across different regions and zones different clusters and maybe even entire Cloud providers as well.
00:27:24 [W] The number of reasons you may want to do this probably the most popular Around The Villa bility in Brazilian. See where if one region goes down or one Cloud file or is down there application running in multiple areas.
00:27:40 [W] There makes it more resilient to those outages because they're still parts of your application that are running and accessible right cost is another reason to wear certain Services may be cheaper in other Cloud providers. So you're choosing the cheapest ones for the cheapest
00:27:54 [W] About real life applications is often.
00:27:55 [W] They don't just live in a single place, right? It's pretty common for applications to be spread out or the components of them to be spread out across different regions and zones different clusters and maybe even entire Cloud providers as well.
00:27:56 [W] Can reduce your overall operational costs and then another one is for new or unique Services.
00:28:04 [W] Say Amazon comes out with a brand new AI am L service or something like that.
00:28:08 [W] You want to take advantage of it?
00:28:10 [W] You might have your application running across multiple Cloud providers in order to use the latest and greatest services that make sense for your business.
00:28:18 [W] Of course that does come with some challenges though, and as with anything you really have to know.
00:28:26 [W] What are you building an active in tension there?
00:28:36 [W] Because if you just want to start putting application in different regions different places use a bunch of different services without actually knowing what you're trying to solve you're not going to end up in a good place with that.
00:28:42 [W] So understand what you're building and also understand the infrastructure needs grab the patient understand, you know.
00:28:50 [W] where you need to reduce latency or what services need to be accessible to what components in your application and you have to factor all that in when you have the Copernicus running in various places around the globe right when we start using a lot of different providers of different platforms
00:29:03 [W] It's like see there with every cloud but or having their own dashboard their own console their own CLI tools Etc and then different skill sets as well.
00:29:19 [W] So you kind of think about how much complexity do you want to take on in order to get the benefits out of being able to buy multiple places.
00:29:27 [W] you might even need to hire for new skill sets to be able to match what your application needs and where needs to needs to run.
00:29:36 [W] Of course all the operational stuff that comes along with the application that gets a little more complicated to when you're running multiple places. You want to be able to monitor it manager. Make sure the policy is applied all that operational stuff running across a lot of
00:29:49 [W] What complicated?
00:29:51 [W] So one solution here that we believe to be pretty efficient.
00:30:00 [W] is Patrol plane solution, you know, we've seen control planes before or kubernative is itself right for the ladies is a control plane.
00:30:09 [W] It is able to run a bunch of components like pods and say across a Sith series are set of nodes so you can think of the same thing for a troll plane that is running and
00:30:22 [W] Edging a global application. So outside of the scope of this one cluster. You can have a centralized control plane that puts all of our decision-making in our orchestration and scheduling etcetera into a single centralized place with
00:30:37 [W] A provides access it as well.
00:30:50 [W] So you put that logic then the complexity into the control plane to manage This Global application and deployments and infrastructure for us and it can greatly simplify the burdens that we put on ourselves as humans, right?
00:30:55 [W] So one particular control plan that meets this description here is a open source project is called cross plane.
00:31:08 [W] And so it is a cncf Sandbox projects now just recently as in the last month, but it is a open source control plane. It is really focused on being able to provision linkerd structure
00:31:19 [W] Project. It's now just recently as in the last month, but it is a open source control plane. It is really focused on being able to provision make the structure and get it ready for the applications
00:31:22 [W] Ready for the applications be able to connect them together.
00:31:26 [W] So that applications have everything they need to be running and successful.
00:31:33 [W] And so there's three main parts to the design and feature set here for cross between the first one is to be able to provision infrastructure itself.
00:31:43 [W] You can use that do that declaratively using activities API like with your control. You can bring up an Amazon RDS database or Google Cloud SQL or whatever you want do.
00:31:52 [W] Actually using the prettiest API but more power here actually comes in the ability to be able to create your own infrastructure API without writing any code so you can build your own brand new definitive guide that kind of
00:32:05 [W] What it means to be an application or set of infrastructure in your organization will get into more details on that. But essentially, you know capturing the configuration policy best practices in putting that all behind.
00:32:21 [W] the eye that your application skin self-service on-demand use to get the infrastructure that they need and then the third feature area here is around running and deploying applications to use that infrastructure that we're bringing up some
00:32:37 [W] Um open application model implementation for kubernative.
00:32:47 [W] we see a big guy in here with cosplaying as a control plane and ohm for having a standard normalized way of declaring their applications.
00:32:54 [W] So as we've been talking about the standardized applications, they'll need infrastructure.
00:33:05 [W] It's on point with you know, databases or buckets some networking Primitives all that sort of stuff in this control Point API that we've been talking about is a perfect place and I centralized place to view the provisioning and getting the infrastructure setup
00:33:15 [W] It's apps to consume and so a little bit more details about this API this infrastructure API that we've been talking about.
00:33:30 [W] So when you have the ability to Define your own API your own infrastructure API, you can put all of the important details of what it means to be.
00:33:38 [W] That's a a postgres database in your organization. What policy what could be Grecian you want all this complexity around the standard way.
00:33:48 [W] A or best practices ways to do infrastructure for your organization.
00:33:53 [W] You can capture that in encode that in this API here so that when applications want to consume infrastructure, they had this easy to use API and it's a safe secure way of getting infrastructure on demand
00:34:05 [W] Patients that need it but making sure that it's aligned with the policy and configuration the best practices that is important to your organization.
00:34:16 [W] And the last slide here, we have a diagram of what this looks like for a centralized control plane providing an infrastructure API to Global applications.
00:34:32 [W] So we see in the blue box here the crossplane control plane and this infrastructure API that you had designed and declared their so the control plane is spanning. I'm going to give it a spanning across multiple Cloud providers
00:34:44 [W] The blue box here the cross when you control plane and this infrastructure API that you have designed and declared their so control plane is spanning we can think of it as spanning across multiple Cloud providers.
00:34:47 [W] So it's has connections to them and bring up we needed or provision in the infrastructure in any of the cloud by terms that you have acquainting at and then this infrastructure API that you have declared will be published
00:34:59 [W] Sure, any of the cloud by there's that you have acquaintances and then this infrastructure API that you have declared will be published to all the various clusters where you want to be running your applications.
00:35:05 [W] So this is a bit of a new design here for the gospel and project where we have this application operator running inside each one of the Clusters that you want to run your applications and where those applications were needs
00:35:18 [W] So basically you can think about it as the application needs something like that a face in it will look at the API the infrastructure a guy that you have published and the clear of the state.
00:35:34 [W] Hey, I need a database from this instruction API and it will that request will be sent off to the centralized control plane where your infrastructure API lives and it will turn that simple request of okay.
00:35:48 [W] need a database and it will turn that in-toto.
00:35:49 [W] Do well. What is the database mean for my organization and our policy of the configuration?
00:35:56 [W] that's practices. All that stuff will be enforced when the actual database gets provisioned in one of the cloudbees there.
00:36:05 [W] So that's a bit of a picture of it. And that's actually see it all in action now with the demo.
00:36:10 [W] In this demo, we're going to walk through how to build a global control plane API and use that API to provision for structure and deploy standardized applications all in a global
00:36:25 [W] So let's go ahead and get started on that back at the command line here.
00:36:33 [W] So just want to get you up to speed on what I already have set up.
00:36:35 [W] Basically all I have set up is the global control plane itself.
00:36:40 [W] So I've got crossplane installed Crosswinds little package manager some support for oh Min for Alibaba, and that's basically it. I haven't defined my infrastructure API yet.
00:36:50 [W] I don't have the applications running. So let's go ahead and start defining the infrastructure API.
00:36:56 [W] I as the very first step. So I'm going to need to do three things here to basically Define and publish my API.
00:37:08 [W] So let's start with the infrastructure definition that I'm going to create.
00:37:15 [W] Basically I am saying or start as the first step of starting to Define my infrastructure Epi.
00:37:19 [W] I'm going to say, okay one kind of type that you can create from my infrastructure. API is going to be postgres and
00:37:27 [W] Going to provide a schema of things that you're allowed to set things that you can configure when you're asking for postgres when an application is requesting postgres.
00:37:36 [W] Basically, all we're putting in here is the amount of storage the size of the database. So an application could say I need a hundred gigabyte postgres and that's really all that they get to say the next phase is publishing this API,
00:37:50 [W] For publication object that will ensure that this API is published to the application clusters where the actual containers and pods Etc that have the application logic will be running the ones that need this infrastructure.
00:38:06 [W] Final part of the infrastructure API that I'm creating is that we've defined postgres as part of the API, but we haven't really said what it means underneath. So in this particular infrastructure API that I'm building as the
00:38:22 [W] I'm going to say that when an application requests postgres, what they're actually going to get is an Ali Baba Cloud RDS instance for postgres.
00:38:35 [W] And then remember how we said that a application developer.
00:38:41 [W] They just get to say how big the storm out of storage for it. But me as the infrastructure owner gets to say a lot more than that.
00:38:52 [W] I'm going to specify all the configuration the policy the best practices all that sort of stuff.
00:38:54 [W] Is what I have control over and it's underneath the API line, right?
00:39:00 [W] It's not exposed to the user and they don't get to control that sort of stuff.
00:39:02 [W] So I have some more details configuration of policy Etc about this postgres instance that an application can request and that basically is what makes up my infrastructure Epi my custom infrastructure.
00:39:14 [W] API that I am publishing and providing for applications in my organization. So when they request postgres they can just say how big it is.
00:39:26 [W] But then all of my important policy will be applied to it underneath. Okay. So those are the three things that we need to create.
00:39:34 [W] So I'm going to go ahead and just use my cheat sheet here to copy and paste them into the command prompt.
00:39:42 [W] And so we're creating our infrastructure definition.
00:39:45 [W] Infrastructure API is now published and defined and ready.
00:40:00 [W] So let's move on to a totally different role so so far.
00:40:03 [W] I've been the infrastructure owner. I've been defining and creating and Publishing this infrastructure API for my applications my application teams, but I haven't actually done anything with the application yet.
00:40:16 [W] So now I'm going to switch roles to be an application developer. I have you know, I'm spending my time writing code.
00:40:22 [W] I'm creating container images that contain my code and so for me in this application that I'm writing.
00:40:32 [W] I'm just going to define a set of components for it.
00:40:32 [W] Right? It's you know, what makes up. My application is a postgres database, right? So I need postgres.
00:40:41 [W] I have a requirement in my application for postgres.
00:40:46 [W] And then I have a number of containers that I want to run to sue access the postgres database to show some
00:40:53 [W] Flights that are currently running some earthquake information from the database, you know, just a couple other components like showing weather as well and a UI for at all. So that is all the components that make up my
00:41:08 [W] You know, I'm the application developer here and this is what I produce.
00:41:14 [W] So let's go ahead and create those two.
00:41:15 [W] So I'm going to go ahead and apply my application components.
00:41:22 [W] And those are all now all created and then let's go on to the Final Phase here of we've seen two roles so far.
00:41:34 [W] We've seen the infrastructure owner who defines the infrastructure API, we've seen the application developer who defines the components that make up their application and now this third Persona or this rule, that is the application operator who's in charge of actually putting the application
00:41:46 [W] In a away at runtime that makes sense.
00:41:55 [W] So there's a couple of traits that we're going to apply to the components that are application developer developer created.
00:42:06 [W] So we're going to apply a scalar trait so that you know, the various some of the components of the application are going to run with the higher replica count.
00:42:11 [W] So I'm going to scale those up for them and we're also going to specify some information about
00:42:17 [W] out where the data can be picked up from so, you know, the application developer said they need postgres that came from the infrastructure API that we created and we're going to tie it all together here.
00:42:31 [W] So let's go ahead and create this application configuration as well.
00:42:34 [W] Okay, and once this front here this basically kicked everything off.
00:42:42 [W] So this starts the process of you know, we've modeled all this stuff where they open application model and then cross plane is going to take those General ways of describing the application like components and workloads
00:42:55 [W] things like that that we've talked about and it's going to start turning those into real Primitives that can actually run and deploy and use sorry to put, you know, run the application itself and provision
00:43:11 [W] I and kind of get everything up and running all together.
00:43:18 [W] So we should start seeing this come together.
00:43:20 [W] Let's take a quick look of you know, what's actually running right now. This is a small command. I don't think I needed to copy paste that one, but I did for my cheat sheet.
00:43:29 [W] So basically we can see that we have a number of our containers are now up and running and the data API one is not ready yet.
00:43:40 [W] So this is the one that wants to talk to postgres and most likely postgres isn't quite ready yet because it does take a while to spin up in out of ovhcloud and you know on-demand bring a brand new database in the cloud like manage
00:43:53 [W] Cloud up and running.
00:44:00 [W] So let's get a little more details about that Alibaba RDS instance.
00:44:03 [W] It's in the creating state.
00:44:05 [W] So we're going to need to wait for it to finish creating and then the rest of our application will be able to pick it up and start talking to it. And the rest of the application will just start working. So let's go ahead and wait for that just a second.
00:44:18 [W] Okay, let's check in on the database instance.
00:44:27 [W] And it looks like it's now ready and in the running state. So if the AL about Alibaba Cloud database instance is up and running and we should check on our application pods that are running in gke and they are all now running
00:44:36 [W] He is able to connect that Alibaba postgres.
00:44:44 [W] And so everything looks like it's up and running and so now let's try to get into the UI for this application.
00:44:51 [W] Let's look at the load balancer for my gke cluster. And so let's go ahead and go to that and find the dashboard here basically, so the application that I brought up is up and running.
00:45:05 [W] talking to the database. It's got data from bol.com.
00:45:08 [W] Postgres and so we could start looking at you know in this application some of the data that was captured for us and held in our Alibaba postgres database so we can see various flights that are up and running right now.
00:45:22 [W] We can see the latest earthquake information know this is all real Time That's picked up for various services and stored in a postgres.
00:45:32 [W] That's a big earthquake up near Alaska or sorry a British Columbia. That's
00:45:35 [W] Hopefully that's something to be concerned about and you know various weather and stuff too.
00:45:42 [W] So basically everything looks to be up and running which is great.
00:45:47 [W] So let's try to wrap all this up here.
00:45:49 [W] So basically we did three different things where we defined an infrastructure API for a my applications to consume. We gave them some knobs to configure such as the size of it will be published it for them.
00:46:03 [W] You know as part of that infrastructure he is specified.
00:46:08 [W] What does it mean to be postgres?
00:46:10 [W] It's means in my environment that I'm going to pick up that database from Ali Baba.
00:46:14 [W] It's going to have this particular configuration in policy and then my application developers to find all the components for their application the fact that they need postgres how big they want that postgres and then the application
00:46:28 [W] And all the components for their application the fact that they need postgres how big they want that postgres and then the application operator took the components of the application and
00:46:34 [W] Took the components of the application and specified some traits for them to make them more skilled put everything together in gke so that we ended up with a live service.
00:46:44 [W] that's up and running and running in gke but we've got infrastructure provisioned from our custom declarative infrastructure API and our Global control plane that resulted in infrastructure.
00:46:58 [W] The database the postgres instance being provisioned in Alibaba.
00:47:03 [W] So all these things got put together with a standard way to define our applications a global control plane with an API to safely on demand self-service consume infrastructure in a way that has been you know, blessed and
00:47:17 [W] All the best practices and policy and configuration that our infrastructure owners fuel is important thing about all this together in a very standardized way at a global scale.
00:47:32 [W] So let's head back to our slides real quick to finish this all off.
00:47:38 [W] So basically, you know, ohm is an open-source back a you know, Cross Plains an open source project as well.
00:47:47 [W] So we have communities around those and we love everyone's get involved happy to jump in and help you get started.
00:47:50 [W] Here are some helpful links on where to find the QuickStart documentation are active on Twitter and slack and everything.
00:47:57 [W] So, you know, if you want to learn more contributes open issues anything like that. We are a happy community and we're growing and we'd love to have you.
00:48:05 [W] So I think that pretty much wraps everything up and Harry and I will be here to answer a couple of questions at the end of this recording, but otherwise, thank you very much for attending and we're happy to share this information with you today.
00:48:19 [W] All right.
00:48:28 [W] Thanks everybody for listening to The Talk today will take a couple of questions real quick.
00:48:33 [W] We don't have too much time left.
00:48:35 [W] So it's the scrap a couple questions.
00:48:38 [W] I'll take one first real quick Harry.
00:48:44 [W] So there's a question about crossplane recover from host kubernative temporarily going down.
00:48:45 [W] That really are important there one is that there's a separation of the control plane in the data plane where you know crossplane running as a global control plane is not on the data path for services.
00:49:01 [W] So, you know parts are application are managed by crossplane and it'll provide infrastructure and get things deployed, but it can go down for a temporary amount of time and then come back and be perfectly fine because the control plate separate from the data plane
00:49:14 [W] Explain it in general provide infrastructure and get things deployed.
00:49:16 [W] But if you go down for a temporary amount of time and then come back and be perfectly fine, because the control plate separate from the data plane and then secondly Act of reconciliation, which crossplane is a set of kubernative controllers, basically, and so they'll actively
00:49:22 [W] Reconciliation it's your cross plane is a set of kubernative controllers.
00:49:23 [W] basically and so they'll actively reconcile and you know, Edge triggered verse level triggered that when the you know, if it goes down it comes back it'll try to reconcile active actual State and desired State and then pick up where it left off with the real state of the world here.
00:49:35 [W] You can grab a question before we run out of time here got a minute and a half left.
00:49:39 [W] Yeah, I can over there in the other question, which is asking Bob.
00:49:46 [W] Yeah, actually sometimes feel like it works like compromise and ciardi. I mean on the server side so but as a question, how can you trick ahead of time and fix so actually only did not design a customized own server side.
00:50:01 [W] My kind of framework for you to feel tired.
00:50:10 [W] I will have tractions but sometimes you're Hannah Welch actions will be for example decompose or split it existing API resource into multiple ones that case is feels kind of like
00:50:19 [W] It's feels kind of like customizing doing that is just one case for you to build your objection.
00:50:31 [W] And of course as we are actively thinking and working on a om command line tool so you can definitely do a dry wrong do everything you want only client side.
00:50:39 [W] But again, it's not designed as how customized work and splitting the existing object is only one.
00:50:48 [W] They have tractors you want to feel maybe just a four separate concerns motivation. He said such a pathetic.
00:50:57 [W] Cool. So like we got like 15 more seconds here.
00:51:11 [W] So there's a couple questions real quick about the relation between crossplane and oh man the difference and a good way to think about that is that open application model is really focused on how to run applications themselves at the top layer there and then cross main focus is on infrastructure
00:51:15 [W] Form that they would need the applications need to be able to run on top of so owns four applications Cross Plains for infrastructure and they kind of meet in the middle there in place together very harmoniously. So that is all the time that we had in the session.
00:51:31 [W] It's ending and then please go to will be continuing QA in DC and CFS slack channel on number 2 - Cube Khan - app Dev.
00:51:43 [W] So thanks a lot everybody.
