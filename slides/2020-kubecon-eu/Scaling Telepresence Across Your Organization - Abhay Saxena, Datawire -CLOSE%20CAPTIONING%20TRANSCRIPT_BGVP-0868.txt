Scaling Telepresence Across Your Organization: BGVP-0868 - events@cncf.io - Thursday, August 20, 2020 8:18 AM - 379 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:05:33 [W] Hello, my name is have a saxena.
00:05:37 [W] Hello, my name is have a saxena and I'm a developer at data wire and the lead developer of telepresence today.
00:11:32 [W] Hello, my name is have a saxena and I'm a developer at data wire and the lead developer of telepresence today.
00:11:34 [W] I will be presenting scaling telepresence across your organization. In essence this talk aims to answer the question.
00:11:42 [W] Well, I'm using telepresence to develop my application that runs as a series of microservices in kubernative and I enjoy using telepresence to work on those microservices and I would like to gain those same.
00:11:54 [W] If it's when working on this application across a team that is sharing a cluster or an instance of the application for development purposes not so long ago.
00:12:09 [W] We were developing our first big application and kubernative data wire was doing this for the first time and we followed the typical Journey that any company might when we started developing this
00:12:21 [W] All right, we wrote to microservices. We figured out how to get them to talk to each other how to get data in from the outside etcetera.
00:12:31 [W] So we ran into this problem pretty early on where we want to answer this basic question.
00:12:40 [W] I have this piece of code.
00:12:41 [W] It does something and I want to change that code and see what happens.
00:12:45 [W] Right?
00:12:47 [W] what happens if I change this code and so we would do that we would edit the code.
00:12:52 [W] And follow the process that you use to get this code running in kubernative, right?
00:13:07 [W] So we build a code then we build our container then we push the container to a container registry. And then we Telco Burnett he's to turn the pods over so that the new image gets pulled down into the grenade. He's cluster and
00:13:11 [W] And then we can start sending inputs to our application and see what the new code does doing this. We realized the first problem that we see when using kubernative the developer will poop right the developer
00:13:27 [W] This idea that you want to be able to change your code and see what happens for normal software.
00:13:43 [W] You have this process of you change your code and then maybe depending on the language and system you're using you might have to run a compiled or build stage and then you can launch the code and see what it does in kubernative
00:13:52 [W] our little more complicated you have to take that executable put into a container image and then somehow get kubernative stool owed that containerd mention that typically means pushing it into a container registry and then bringing it back down into your kubernative
00:14:07 [W] On continue our story the next question we would often want to answer while developing the microservices that comprise our application is.
00:14:19 [W] Well, I made a change and that didn't do what I expected it to do that didn't achieve the goal.
00:14:25 [W] I wanted or now led to a crash or the behavior is completely different from what I had predicted or it's just subtly different or in summary.
00:14:34 [W] Why didn't that work the way I expected it to software is opaque, right?
00:14:38 [W] It software writing software is hard and debugging software is even harder than that software doesn't give you access to its internals unless you use specialized tools to look inside like a debugger
00:14:53 [W] Tracing system or profiler etcetera and so being software Engineers over the over the decades. We have developed these tools to let us look inside running software to try to understand what's going on.
00:15:09 [W] But when your software is running in a kubernative cluster, it's far away. It is the OPA the opacity of your software is magnified by the fact that it's not even running on your own computer that you're using to write and debug this off where it's running
00:15:26 [W] Is magnified by the fact that it's not even running on your own computer that you're using to write and debug the software that's running somewhere else.
00:15:33 [W] And so the net effect is you're sort of stuck with using Coop control logs and adding effectively adding print statements to debug your code.
00:15:41 [W] So we were not happy with this situation a data wire.
00:15:47 [W] We developed the swap deployment workflow to help address these problems.
00:15:49 [W] in essence what telepresence does is replace the deployment or the pods created by the deployment in your kubernative cluster with haproxy poddisruptionbudgets modifies your
00:16:03 [W] Machine your laptop's networking so that it's directly connected to that proxy pot. The net effect is when other microservices in your cluster connect to the pots for this deployment.
00:16:18 [W] They instead connect to the proxy poddisruptionbudgets.
00:16:24 [W] come down to your laptop and the software on running on your laptop can respond to those requests when the software running on your laptop needs to talk to other microservices in the cluster it can do so directly as
00:16:33 [W] as if it were literally running in the cluster, but it is in fact running on your laptop.
00:16:39 [W] Let's take a look at a quick demo.
00:16:43 [W] So on the right hand screen, you can see I have the Hello World Service checked out and there's a copy of the full text of the service right in front of you including the message.
00:16:56 [W] Hello world, of course.
00:16:59 [W] And on the left, you can see that could control shows you that hello world has been deployed into the cluster as hello.
00:17:10 [W] So now I'm going to run.
00:17:14 [W] A shell in the cluster just to demonstrate how from within the cluster we can access services in the classroom.
00:17:27 [W] This is no surprise.
00:17:29 [W] There's your hello world now.
00:17:31 [W] Let's launch telepresence.
00:17:32 [W] So I'm saying telepresence swap the hello deployment expose the appropriate port and run the local copy of the server on my machine.
00:17:44 [W] Let's wait for telepresence to spin up.
00:17:48 [W] Okay, we can see that the flask server has started and it is serving and now let's see what happens when we try this curl.
00:18:07 [W] Well, we still see hello world, but we do see a request show up here in this window indicating that the request actually hit my laptop instead of hitting the Pod running in the cluster.
00:18:22 [W] So let's go one step further and
00:18:25 [W] Scene at the flask server has started and it is serving and now let's see what happens when we try this curl.
00:18:27 [W] Well, we still see hello world, but we do see a request show up here in this window indicating that the request actually hit my laptop instead of hitting the Pod running in the cluster.
00:18:29 [W] So let's go one step further and edit this. Hello service.
00:18:29 [W] Okay on the right hand side.
00:18:38 [W] You see my editor is now open to the low service and I will change the contents of this message.
00:18:44 [W] It's safe and flask is going to reload the file.
00:18:52 [W] And now if I do this curl once more boom, hello Cube con. I have live edited the code and without having to build and push an image.
00:19:02 [W] We can see the change right from the cluster and finally, let's hit control C to quit our telepresence session.
00:19:09 [W] Telepresence brings things back to their original state in the cluster and if we run this curl again, we see the original code is being hit.
00:19:18 [W] Telepresence swap deployment does a good job for one developer who owns a cluster?
00:19:25 [W] We've been very happy with how telepresence has performed for us.
00:19:32 [W] But let's look at the statement a little more closely.
00:19:34 [W] Telepresence swap deployment does a good job for one developer who owns a cluster and by a good job? I mean that both of the main problems that I highlighted earlier are addressed.
00:19:50 [W] Having to build and push an image we can see the change right from the cluster and finally, let's hit control C to quit our telepresence session.
00:19:57 [W] Telepresence brings things back to their original state in the cluster and if we run this curl again, we see the original code as being hit.
00:19:59 [W] Telepresence swap deployment does a good job for one developer who owns a cluster?
00:19:59 [W] We've been very happy with how telepresence has performed for us.
00:20:00 [W] But let's look at the statement a little more closely.
00:20:03 [W] Telepresence swap deployment does a good job for one developer who owns a cluster and by a good job? I mean that both of the main problems that I highlighted earlier are addressed.
00:20:04 [W] We get a fast development Loop because we don't have to push and pull build and push and pull images for every change.
00:20:06 [W] We make to see what happens. We can simply run the code on our own machine.
00:20:07 [W] And access it using the cluster as we might in any other case and see what happens.
00:20:09 [W] We can very quickly make a change and try it in the context of the entire application as opposed to trying to run a unit test of just our own micro service and secondly because the code is running on your laptop.
00:20:22 [W] See what happens we can simply run the code on our own machine and access it using the cluster as we might in any other case and see what happens.
00:20:24 [W] We can very quickly make a change and try it in the context of the entire application as opposed to trying to run a unit test of just our own micro service.
00:20:25 [W] And secondly because the code is running on your laptop all the tools that you're used to using from your days developing a normal application now are applicable to your kubernative application as well.
00:20:34 [W] So in other words, you can run your micro service through your IDE and step through each individual line of code in your debugger. Just as you always would because it's running on your laptop and yet it still works just as it would if it were running in the cluster because it has
00:20:48 [W] Are applicable to your kubernative application as well.
00:20:49 [W] So in other words, you can run your micro service through your IDE and step through each individual line of code in your debugger.
00:20:49 [W] Just as you always would because it's running on your laptop and yet it still works just as it would if it were running in the cluster because it has network access to and from the cluster.
00:20:51 [W] Telepresence swap deployment does a good job for one developer who owns a cluster now what I mean by for one developer basically comes down to this when using the swamp deployment workflow all the pods for you deployment have been replaced by the proxy
00:21:07 [W] Now what I mean by for one developer basically comes down to this when using the swamp deployment workflow all the pots for your deployment have been replaced by the proxy pot that's ends connections and requests down to your laptop.
00:21:12 [W] This is how telepresence works because every connection and every request to the microservice you swamped goes down to your laptop effectively that microservice is now owned by the one developer who's running telepresence
00:21:25 [W] Hopper's can't work on that microservices at the same time.
00:21:29 [W] Telepresence swap deployment does a good job for one developer who owns a cluster when I say who owns a cluster what I really mean is who owns the particular instance of the application that's been deployed to the cluster.
00:21:45 [W] So maybe you can deploy your application into a single name space and there are other deployments of that application in other names faces other instances of that application and other names faces, but essentially what I'm saying is the
00:21:59 [W] Shannon into a single name space and there are other deployments of that application in other namespaces other instances of that application and other names faces, but essentially what I'm saying is the developer who's running swap deployment now owns
00:22:01 [W] Climate now owns the application and why do I say that again every request and connection that goes through this micro service is now being served by code running on your laptop. If you're stepping through the application in your debugger.
00:22:14 [W] That means the one request that you're looking at is the only request that's in play.
00:22:28 [W] Any other request that comes in is also going to get routed to your laptop, but your laptop is sitting the code running on your laptop is sitting in the debugger waiting for you.
00:22:28 [W] So in practice, once you're running swap deployment other users can't use the application.
00:22:37 [W] It's simply owned by you.
00:22:40 [W] So let's see what that means in practice.
00:22:44 [W] Let's say you're given the directive to debug a problem in a particular microservice.
00:22:47 [W] You think to yourself?
00:22:48 [W] Well, this is fine.
00:22:49 [W] I can step through this code in telepresence in my debugger using telepresence and we'll figure this out and we'll get it debugged a nice and quickly.
00:22:58 [W] So how do you proceed to do this?
00:23:02 [W] Well, one approach is you can say well I'll simply grab the staging cluster or I'll simply grab the developer staging installation this instance of the application if anybody else wants to use the application at the same time.
00:23:16 [W] while they'll just have to wait and you do this you you do whatever you talk to your fellow developers and you say hey I'm using the staging application right now. So, please don't do anything there.
00:23:29 [W] You so let's see what that means in practice.
00:23:31 [W] Let's say you're given the directive to debug a problem in a particular microservice. You think to yourself?
00:23:32 [W] Well, this is fine.
00:23:32 [W] I can step through this code in telepresence in my debugger using telepresence and we'll figure this out and we'll get it debugged nice and quickly. So how you proceed to do this.
00:23:33 [W] Well one approach is you can say well I'll simply grab the staging cluster or I'll simply grab the developer staging installation this instance of the application if anybody else wants to use the application at the same time while they'll just have to wait
00:23:37 [W] And you debug your problem well at a small enough scale. This is fine.
00:23:38 [W] You might be able to debug your problem in an hour or two and the other developers can keep working but they won't be able to use the staging cluster to try out their changes because they won't be able to use the application another way to approach this is to say let me spin up the app in a brand new cluster
00:23:51 [W] up in a brand-new namespace or however that might work for your application in essence you're saying let me create an entire duplicate instance of the application just so I can own it and I can run small
00:24:06 [W] Look at instance of the application just so I can own it and I can run swap deployment and do what I need to do.
00:24:08 [W] So this is fine if your application is small if your application is easy to spin up if it's not using resources that are not just microservices in the cluster but say persistent data bases and things like that.
00:24:23 [W] Not using resources that are not just microservices in the cluster, but it's a persistent data bases and things like that.
00:24:28 [W] Basically if it's easy to spin up another instance of the app and it's not too expensive to do so, then go ahead and do things this way.
00:24:35 [W] You have the entire cluster to yourself or the entire instance of the app to yourself and you can use telepresence in this works.
00:24:38 [W] Great.
00:24:43 [W] now if your application is too big or too complicated to spin up its own copy and there.
00:24:44 [W] Too many developers to Simply say hey everybody.
00:24:49 [W] stop using the staging cluster. Then you've got a bigger problem.
00:25:01 [W] And so the third approach that you might want to try is I can make this work and staging somehow make it work without disrupting everybody else.
00:25:02 [W] And so how do you do that?
00:25:10 [W] Well, you start by taking the microservice you want to debug and you replicate it you make a copy of the deployment and now you can use telepresence on that copy because
00:25:15 [W] Well, nothing's going to be talking to it.
00:25:21 [W] But then well, how do you use this copy?
00:25:22 [W] How do you test this copy?
00:25:23 [W] Okay, so there's some sequence of microservices that I request my go through where it eventually reaches the microservice you're debugging so just make a copy of all of those and construct an entirely new chain of connections
00:25:38 [W] That you can insert a request in to your application or this sort of partial copy of your application and that request will only go through this partial copy of sequence of microservices and eventually reach the copy of
00:25:53 [W] Care about so you can debug it goes without saying this is a lot of work and it's essentially the same as spinning up a new copy of your application, except you're only spending up a subset of the pieces and you have to make sure all the plumbing works
00:26:09 [W] You're never going to reproduce this one. You need to debug something else in this microservice few months from now.
00:26:17 [W] So what's the problem that we've identified here?
00:26:20 [W] This is the shared clustered problem.
00:26:22 [W] And this is what I mentioned right at the start of the talk.
00:26:24 [W] I like using telepresence to debug my problem or to work on my microservice, but I can't really do it easily anymore because I'm sharing a cluster or I'm sharing an instance of my application with other Developers.
00:26:38 [W] and I don't want to take over ownership of this microservice and keep other people from working on it and I don't want to stop other developers from using the application in the shared environment because I've now
00:26:53 [W] Location effectively by pausing one micro service in my debugger.
00:27:01 [W] So what's the core of the shared cluster problem? What I really want to do is get the same swamp deployment experience, but I don't want to send all requests down to my laptop.
00:27:11 [W] I just want to send my request. What I really want is some agent standing in front of the micro service that I'm trying to debug basically saying is this request one of my requests that I'm sending to try to debug this
00:27:26 [W] Code in that case send it down to my laptop.
00:27:29 [W] is this request something else?
00:27:34 [W] Well, then just send it to the deployment as it continues to run in the linbit cluster and business.
00:27:38 [W] it will be business as usual for all other users. So let's think about that this agent some house somehow has to figure out the nature of a given connection or request is this connection or request mine for my debugging process or something else?
00:27:51 [W] To do this.
00:27:55 [W] We're going to need to impose some restrictions and requirements on our problem domain, right?
00:27:59 [W] This is too broad to solve generally the theoretical agent that sits in front of your micro service needs to be able to make decisions about the requests coming into the micro service so that it can do something smart.
00:28:14 [W] Charles on the hdp family of protocols and so that includes http/2 and if you're willing to let your agent terminate TLS for you, then it can even include http.
00:28:39 [W] Link to let your agent terminate TLS for you than it can even include HTTP because again if this agent needs to understand the request of course has to be able to decrypt it.
00:28:48 [W] So if we now ourselves to just HTTP requests, we now have the possibility for an agent to stand in front of your microservice understand the requests that are coming in and do some sort of redirecting in an intelligent
00:29:00 [W] It matter and that brings us to our requirement for the agent to decide that a particular request is one of my requests that I want redirected.
00:29:14 [W] We're going to need to require a special header that tells the agent.
00:29:15 [W] This is a debugging request.
00:29:17 [W] It needs to be sent down to the laptop.
00:29:23 [W] Now that seems like a simple enough requirement right pearl has a - eh - that lets you specify a header.
00:29:24 [W] No big deal, right, but let's think this through this is a little bit more of a serious requirement than just a command line.
00:29:30 [W] Egg in some cases when I'm trying out the changes I've made to my micro service.
00:29:36 [W] I'm not necessarily just going to be curling that microservice directly.
00:29:41 [W] It's likely that I'll need to talk to a different micro service and then it will make a request and then that other thing will make a request and so forth and they will be a chain of requests that eventually leads to the micro service on debugging when
00:29:54 [W] your request I will include the header that I need to mark this as a Wordly bugging request and then every intermediate microservice must pass that header along unchanged so that when the request finally reaches the microservice on debugging
00:30:10 [W] Will present and the agent can act on it.
00:30:15 [W] This is not just a simple curl command line flag.
00:30:21 [W] We have to be sure that every micro service in the chain passes along this header.
00:30:27 [W] Now the suddenly seems like a fairly onerous requirement, but it's really not that uncommon if you're using distributed tracing in your application.
00:30:34 [W] You are already doing this for the tracing header dynatrace ID header.
00:30:37 [W] Most Frameworks include middleware that lets you do this without having to make sure you
00:30:40 [W] you handle it in your code directly with that restriction and requirements in place can now present The Intercept workflow.
00:30:55 [W] The essence of The Intercept workflow is that we are redirecting a subset of requests down to the developers laptop all other requests flow through to the existing deployment running in the cluster business as usual
00:31:03 [W] Consequences. First of all, everyone can continue to use the application as is without any disruption when a developer adds an intercept to the agent only the requests marked with the debug header will flow down to the developers laptop
00:31:19 [W] Requests will continue to flow to the deployment running in cluster second because the agent has the ability to make decisions about individual requests based on the headers.
00:31:35 [W] It becomes possible for multiple developers to intercept the same service developer. Jane can add a new feature developer Bob can add instrumentation or metrics and I can go in and fix the bug I introduced in the last release.
00:31:47 [W] All three of us can intercept the same microservice and have different subsets of requests flow down to our respective laptops.
00:31:59 [W] Meanwhile, all the other developers can continue to use that micro Service as it exists in the cluster.
00:32:04 [W] We have implemented this intercept workflow in service preview service preview is a part of the Ambassador Edge stack and it is available right now at get Ambassador dot IO
00:32:11 [W] Now service preview uses Envoy proxy to process and redirect HTTP request as you may know on by proxy is very good very fast and very stable service preview does not do everything that telepresence
00:32:27 [W] It doesn't have offer some of the advanced features such as access to config maps and secrets and other file system volume mounts nor does it offer environment variables, but it does offer the core features of letting the code running on your laptop.
00:32:43 [W] Two other microservices in the cluster and letting other microservices in the cluster talk to the code running on your laptop. Now with the additional feature of only a subset of requests coming down to your laptop based on the intercepts that you've set up
00:33:00 [W] you as I said uses on by proxy for its HTTP management, and it uses other telepresence technology under the hood to achieve the rest of its features while there isn't a direct integration yet integration between servers preview and telepresence
00:33:15 [W] One more very quick demo of service preview this time.
00:33:26 [W] So on the left, we have the same setup as before.
00:33:32 [W] There's a hello service we can curl it from within this Pond.
00:33:35 [W] This is just a coupe control exec on the right.
00:33:40 [W] You can see I have set up an intercept.
00:33:44 [W] I have looked that I've seen that hello is available for intercept.
00:33:46 [W] I have set up an intercept and the header I'm matching is the dev header.
00:33:49 [W] Needs to be set to this value a rk3288 one that header value combination is seen the agent is going to redirect that traffic to my own machine on Port 8000.
00:34:03 [W] And then you can see the I have started the application on my own machine and it is running and these curls which I can run repeatedly do not cause anything to happen there. However, if I run a curl oops
00:34:19 [W] If I run a curl with the special header, then we see Hello coupon since I made that change to the code earlier and you can see as I run these curls we get requests showing up on the right side.
00:34:36 [W] Meanwhile regular curls without the header continue to go through to the existing pot.
00:34:42 [W] Updated and sent to my laptop.
00:34:48 [W] So in summary telepresence does a great job and whenever you have the opportunity to use it, it is a complete solution and it offers great features and you should use it.
00:35:03 [W] Service preview is brand-new.
00:35:07 [W] It's part of the Ambassador Edge stackrox.
00:35:16 [W] Check it out at get Ambassador dot IO finally if you'd like to get in touch learn more our slack channel is on the screen as it's my email address and my Twitter handle. Thank you very much for your time. I hope this was of Interest.
00:35:31 [W] Let's move on to questions.
00:35:33 [W] All right. So look.
00:35:47 [W] What exactly telepresence does so so let me just summarize that again essentially telepresence lets you run your code your application consists of a series of micro services that run in
00:36:17 [W] That's the the combination of kubernative services and deployments altogether and config maps and secrets and all the other things in your cluster together that whole set of things makes up your application. So you're working
00:36:35 [W] Service which exists in the cluster as a deployment a kubernative deployment that creates a set of PODS, right?
00:36:49 [W] So when you use telepresence you replace that set of pods with a single proxy poddisruptionbudgets ends all messages all requests down to your laptop.
00:37:00 [W] So anything in the cluster that talks to you or to your what would be talking to your deployment Now talks to the code running on your laptop then at the same.
00:37:05 [W] Same time telepresence modifies the network on your laptop.
00:37:10 [W] So that your code can access the other services running in the cluster telepresence also brings down the file system and the environment variables from the cluster so that your code can access
00:37:24 [W] And secrets and other configuration information and might need to run properly.
00:37:33 [W] So that's the that's the telepresence part.
00:37:37 [W] I regret not having made that more clear up front at the beginning of the talk now to get to the questions.
00:37:43 [W] The first question is let's see.
00:37:49 [W] Okay.
00:37:51 [W] First question is about the service preview agent.
00:37:55 [W] can the agent understand and direct traffic for other protocols example being Kafka. So service previews implementation of the agent is built on top of envoy and so at the moment we
00:38:07 [W] And and Friends Envoy does support directing other protocols. And so futurewei work could Implement things like that.
00:38:22 [W] Now we have we have been talking to a company that wants to use service preview and they are using Kafka as a as a an intermediary sort of an event bus in some ways to store requests so they come into an
00:38:34 [W] And they get stored in Kafka and then another set of services and other set of microservices pulls these requests out of Kafka.
00:38:46 [W] So we are working with them to support a particular use case, whereby the service between you.
00:38:52 [W] In summary to to work around to work on protocols other than HTTP, there are a couple of options and we're you know, we're looking into it and working with our customers as these things come up next.
00:39:32 [W] I see support for Windows. Okay telepresence the open-source product does not work on Windows, but it does work on.
00:39:56 [W] Act method works on Windows as well Windows is definitely it sounds like I've lost we've lost my audio.
00:40:13 [W] Do I need to switch to the phone?
00:40:17 [W] Can I switch to the phone for audio?
00:40:23 [W] Okay, let's see.
00:40:30 [W] What I was saying was I'm just going to keep the phone nearby just in case what I was saying was Windows support works with WSL to for telepresence with WSL for telepresence
00:40:41 [W] The container method which is specifically modifying the network of one container rather than trying to modify the network of your entire laptop.
00:40:50 [W] About the differences between the functionality of intercept or service preview and telepresence as I mentioned in the Talk service preview doesn't Implement all the features of telepresence yet.
00:41:14 [W] So as an example telepresence makes the effort to capture all the environment variables that your particular deployment puts in place for the pods that it creates
00:41:30 [W] Support that feature yet.
00:41:39 [W] We're looking at doing that in the future with the integration the direct integration of telepresence and service preview.
00:41:41 [W] Let's see.
00:41:42 [W] There's a question you question came in.
00:41:45 [W] Can tell presents work with a Docker compose command that results in some exposed ports telepresence does not support Docker compose.
00:42:00 [W] They're sort of two angles to this question, right?
00:42:04 [W] So there's using Docker compose in place of kubernative.
00:42:07 [W] Telepresence is very much a kubernative focused product same with service preview.
00:42:16 [W] Then there's Docker compose as a way to spin up more than one container at your end. This is a feature that
00:42:17 [W] Telepresence could use but does not have right now. So in other words if your pod and deployment spins up has let's say three containers telepresence is only able to swap one of them and
00:42:32 [W] There is there are flags in place to let the one container that you've swapped the code running on your laptop talk to the other containers in the Pod, but it it does not
00:42:49 [W] Port using Docker compose or something along those lines to swap all the containers that's potential future work for telepresence.
00:42:59 [W] See I have another question just telepresence handle L4 L7 only.
00:43:07 [W] How about TLS? Okay, well for is TCP and UDP right telepresence supports TCP only. There's no UDP support telepresence doesn't understand L7.
00:43:21 [W] So if you have a TLS connection coming into your deployment coming into your micro Service as it runs in the cluster.
00:43:30 [W] Proxy pot will convey exactly that TCP connection down to your laptop and you would terminate TLS on your laptop and your own running code.
00:43:39 [W] Now, this is different what service preview with service preview the the the agent needs to understand what to do with each and every request that comes in.
00:43:49 [W] So what service preview were restricted to L7 specifically the HTTP family and if you want to use TLS, for example, if you use em, TLS between your microservices, that's a
00:44:00 [W] Hannibal configuration then the agent needs to terminate TLS for you.
00:44:10 [W] Will terminate TLS and analyze the contents of that request to decide where to send it and then if necessary, it will originate TLS again to send that request down to your laptop so that you're running code sees what it would otherwise see.
00:44:33 [W] Beyond that I think I covered everything for that question.
00:44:41 [W] I mean, let me setting aside the question of L4 L7. I think the core of the question is do these do these Technologies deal with TLS?
00:44:58 [W] And as I said telepresence is blind to TLS.
00:45:00 [W] TLS. It sends TCP connections down to your laptop and the agent the service preview implementation is aware of TLS and can handle TLS both from a termination perspective and from an origination to
00:45:13 [W] death, okay next question
00:45:16 [W] Can't telepresence use a container running on my machine to swap for a container in the Pod telepresence can do something like that because telepresence needs to modify
00:45:35 [W] Laptops Network to achieve connectivity with basically to achieve outgoing connectivity to the cluster.
00:45:48 [W] There are two approaches you can take so it can either modify the network of your entire Club laptop so that every program running including say your web browser can talk to your cluster or
00:45:58 [W] Work of one container that it launches.
00:46:14 [W] So of course modifying the network of a single container is much more robust and much more reliable. It basically works on every System including as I mentioned earlier works on Windows works on very solidly on Mac OS and of course it works
00:46:16 [W] If you're modifying the network of your entire machine, there are more cases where Things fall down.
00:46:25 [W] For example, if you need to use a VPN telepresence doesn't really coexist well with that if you're trying to modify the network of the entire laptop, so we tend to recommend that you use the container method because it's
00:46:38 [W] Of the entire laptop. So we tend to recommend that you use it the the container method because it's super robust.
00:46:43 [W] That being said when you use the containerd method telepresence has to launch your container for you because it needs to set up that Network before it can launch your container.
00:46:54 [W] So if you specifically want to have a container that's already running on your laptop connect to the cluster that way.
00:47:00 [W] That's more tricky. Now. Let's service preview.
00:47:05 [W] We don't support containerd functionality yet.
00:47:06 [W] So service preview always modifies the network of your entire laptop, which means that it is also not very compatible with v PM s-- but if you're using service preview and you still want to run your code in a
00:47:20 [W] It works service preview modifies the network of your laptop you launch your container and your container will talk to the network to will talk to the cluster as as needed.
00:47:35 [W] Let's see next question.
00:47:42 [W] what security policies very good question what security policy should be in place using telepresence or service preview?
00:47:45 [W] So this is an important question telepresence and service preview work in different ways.
00:47:53 [W] So telepresence relies on being able to modify the cluster, right? And in particular it does a coupe control scale to remove the pods. The existing parts for the deployment are swapping
00:48:08 [W] Apply to create that proxy poddisruptionbudgets austere to capture your request and send them to your laptop.
00:48:24 [W] So essentially Coop telepresence needs to be able to almost arbitrarily mess with your cluster.
00:48:31 [W] And so it's important to make sure that users of telepresence have both have the permissions necessary to make it work and then also are not ever going to use it.
00:48:39 [W] Just something that is use it against a cluster Target that is not appropriate for arbitrarily messing up the application temporarily you can run telepresence and launch broken code.
00:48:53 [W] Right? And then every user of that cluster is going to be temporarily broken.
00:48:56 [W] Well telepresence is running.
00:48:58 [W] So it's important to make sure that's locked down on the service preview side of things the deployment scenario is a little different you would expect every
00:49:09 [W] Every microservice every deployment that's running in the cluster to have an agent next to it and the vast majority of the time the agent is doing nothing other than passing requests directly through to the running application service preview is a lot safer in that respect.
00:49:24 [W] Arbitrarily messing up the application temporarily you can run telepresence and launch broken code. Right? And then every user of that cluster is going to be temporarily broken what telepresence is running so it's important to make sure that's locked down on the
00:49:25 [W] It will only send requests down to your laptop that meet the certain set of conditions.
00:49:32 [W] Now, of course, you can make those conditions unreasonably Broad in which case you can still break the application, but the scope for that is a lot smaller and one key point is service plate preview is deployed as part of deploying your application
00:49:45 [W] Application by making a git commit and then having see I do some work service preview is compatible with that the edge control intercept command doesn't need to mess with your deployments or your services or your pods.
00:50:01 [W] So that's a key difference there and it makes it makes how you manage the usage of these tools telepresence or service preview different with regards to keeping your staging cluster
00:50:15 [W] They're deployed developers.
00:50:19 [W] This is a good question.
00:50:20 [W] We should follow up in the slack Channel.
00:50:24 [W] So I'm being told that we need to wind down. So as I just said, in fact, these are some great questions.
00:50:40 [W] We're going to follow we're going to continue in the coop con app Dev slack Channel, and I will continue to answer questions there and thank you all for your time and your questions.
00:50:48 [W] I hope you've enjoyed and learned from this talk as I definitely learned from giving it our best wishes and thank you.
