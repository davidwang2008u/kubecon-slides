Towards a Standardized Application Definition Model for Kubernetes: EQAJ-1216 - events@cncf.io - Tuesday, August 18, 2020 11:43 AM - 51 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:01:36 [W] Hey everybody.
00:01:40 [W] We have a lot of material to cover.
00:01:43 [W] So we're just going to dive in I'm Phil from up bound and I'm working on the cross plane project and I'm joined today by Sudan VII from Microsoft who among other things is a contributor to the home spec, which is a collaboration between Ali Baba and Microsoft and up-bound.
00:01:54 [W] Open application model for kubernative use and other platforms which makes it easier to get your apps from Dell laptop into production in a team environment in this move this way possible.
00:02:07 [W] So we're super excited to talk to you today about different approaches to modeling Cloud native apps some of the limitations and trade-offs involved in different approaches and some of the desirable properties. You might look for in and out model.
00:02:18 [W] So what's in a model typically it starts off with, you know, an app Dev creating some container images for the front end the backend microservices in a nap and then getting that into kubernative use but finding some workloads which are basically deployments Services Ingress config.
00:02:35 [W] And then you have a question of do I want to run in cluster State full services, or do I want to use cloud services?
00:02:43 [W] So I'm not getting a page at 3:00 a.m.
00:02:44 [W] For things like databases and Cashes in buckets.
00:02:49 [W] And then there's the configuration of the app whether it be an environment variables or config Maps or secrets to get access to the endpoints that your app needs to use.
00:03:01 [W] then you take it out in combination with the Ops behavior is going to be like auto-scaling Ingress config security groups.
00:03:08 [W] Health monitoring and logging all that kind of stuff.
00:03:09 [W] So that's really what goes into an application definition and then you can take that content and package it up.
00:03:23 [W] However, you like using tools like how mm which is great for you know bundling up a bunch of llamo and templating that you can you know take Helm template output and pipe it into customized for you know, customizing the configuration there. You can bundle
00:03:29 [W] to assume that bundle so lots of ways of packaging up the app model content and then you'll deploy it via typically imperative pipelines gitops workflows or even workloads scheduling if you're using something like kubeflow NV 2 or similar projects
00:03:45 [W] Onto one or more Target application clusters.
00:03:50 [W] So what does it look like taking a nap from the dev laptop into prod typically as an app data once I have my container images on my reach for something like Docker compose. And so that'll get me up and running on my local Dev laptop pretty quickly.
00:04:07 [W] I'll probably be pulling in some in cluster stateful services like postgres or redis and you know, I might even be able to sneak that onto my Dever test cluster depending on you know, the environment that I'm running in but at a certain point somebody is going to say, you know, hey, look we really
00:04:21 [W] Staging and prod looking very similar to each other. We want to use cloud services and prod all this needs to be in kubernative sand.
00:04:37 [W] So you'll typically have like an a pops person helping out to get all the deployments and the services and the package and you know, the delivery and the deployment pipelines configure gluing everything together including the I see tooling whether
00:04:44 [W] Farmer cloud formation or the you know Cloud SQL is and and then basically getting all the cloud services provisioned and then you have to get you know the secrets for accessing those cloud services for like your database
00:05:00 [W] climates, there's a lot of like intertwined, you know collaboration that needs to go on and then you need to layer on top of that, you know kind of auto-scaling behavior Ingress, you know, the security groups the the health configs and all that kind of stuff and so
00:05:16 [W] A lot of the folks that we work with and kind of medium and larger companies is that there's often like a platform Ops Team or an infrastructure Ops Team that's responsible for kind of putting together like the organizational best practices and security policies and kind of
00:05:32 [W] Cloud platform that the app teams can use to more efficiently deliver those apps, but if you're creating bespoke infrastructure configurations often times, just getting this whole process working can take days or weeks often
00:05:47 [W] Sure configurations often times.
00:05:48 [W] Just getting this whole process working can take days or weeks often times.
00:05:49 [W] Just shy of like a whole month to get all the app config going into production in a stable way. So it can be a huge time sink and definitely not as efficient as it could be.
00:06:01 [W] So, you know in addition for it just being difficult for Deb's to get the apps into prod and having these things glued together in the imperative pipelines is that you're really going together multiple tools and they have multiple management models and multiple representations
00:06:16 [W] And often times these are inconsistent across the different environments. And so it becomes increasingly difficult to master the interactions and the failure modes across all these tools and that typically results in you know, error-prone deployments
00:06:32 [W] Your modes across all these tools and that typically results in, you know, error-prone deployments and difficulty and just being able to understand what's going on.
00:06:39 [W] So it creates a lot of friction in the pipeline on top of that.
00:06:44 [W] There's often no clear ownership in terms of the various aspects of the app config and the cloud services and all the interactions between them. And so when a change is made in one aspect of the configuration it can often cause unintended
00:06:56 [W] Consequences and override behavior and other aspects of the configuration and often time.
00:07:03 [W] These issues are only found in deployed time.
00:07:09 [W] And so hopefully most of the time this is caught like in the staging environment where you just keep turning the crank over and over until you know, you get a successful deploy and then, you know roll it out to prod and most of the time that cash is most of the issues are but
00:07:18 [W] It's not so I'm definitely some limitations with this approach.
00:07:24 [W] So so what are we looking for in and out model?
00:07:32 [W] You know, if you're just running on your local laptop using Docker compose is great.
00:07:36 [W] It's a self-contained at model. You can use in cluster State full services and you know life is good.
00:07:41 [W] Then you need to get it into kubernative.
00:07:44 [W] So, you know, you can use compose with the K as a tool to convert the docker compose into kubernative core resources, you know, that's an option but really you want to have, you know, kind of an authoritative desired State and kind of
00:07:55 [W] Your changes in get to those those resources.
00:08:06 [W] And so, you know, then when you go beyond, you know having in cluster stateful Services you cloud services you'll bring in your eyes. I see tools your infrastructure as code tools to reform and cloud formation and so forth and that does give you more
00:08:12 [W] Signs, but it doesn't give you a case native clear to management experience.
00:08:24 [W] And so sometimes you know, we'll see companies spinning up GUI portals for provisioning infrastructure. And that that does you know, it kind of as an alternative to using the infrastructure as code tools and the pipeline's that does provide a separation of concerns,
00:08:33 [W] Really give you something that you can automate very easily and it doesn't give you that that kubernative knative experience.
00:08:46 [W] So what we've seen come onto the scene here in the last year to our service operators here towards the center and this includes, you know gcp config connector AWS service operator as your service operator
00:08:57 [W] Providers and what these do is they bring in the individual cloud services as kubernative CR bees and their the low-level manage resources that provide a high fidelity representation of that cloud service so you can drop a kubernative.
00:09:13 [W] He's cri-o custom resource, which is just a llamo file for a database or a cache and it will go out and provision that for you and some of the service operators do a good job of letting you just drop an entire config of
00:09:27 [W] Want a secure database that's production-ready and monitored and all these things. I might need, you know, 5 or 10 or even 15 different resources.
00:09:38 [W] And so I want to keep control apply that entire directory of config.
00:09:40 [W] And so it does give me a kubernative knative declared of experience, but the separation of concerns is still pretty low level.
00:09:53 [W] So, you know, if we kind of move up to the top another option is just to say I don't want to deal with infrastructure at all.
00:09:55 [W] Just give me a platform as a service.
00:09:55 [W] Give me a pass, you know Heroku Style.
00:09:57 [W] You know kind of experience and most of these passes are you know built on kubernative use these days and some aren't I mean you have like Cloud Foundry and you know, they I guess it migrated over to kubernative he's and you know, you have openshift and then some more, you know modern ones, you know that are
00:10:12 [W] focus with Cloud Runner far gate or you know as your container instances, but at some point, you know, the confines of the past don't satisfy our requirements and
00:10:28 [W] does a really great job of providing like a highly opinionated way of building apps and a great developer experience for doing that but when you run into one of those boundaries passes aren't typically as extensible
00:10:44 [W] A new capability to the Past it's kind of going outside of its boundaries and it's difficult to get that extensibility to kind of get exactly the type of platform that needs your organizational needs.
00:10:59 [W] So what we see in a lot of kind of the the medium to larger companies that we work with is, you know, kind of a internal Cloud platform team or a cloud platform or platform Ops Team
00:11:11 [W] With the charter of you know, providing these organizational best practices security policies and running platform.
00:11:23 [W] That just makes it easier for app teams to use and then go and get that running out of the gate and so wouldn't it be cool if you could as a platform team composed from the service operators all of your, you know, kind of
00:11:34 [W] Of infrastructure that took those, you know, I want a secure database and just made it available as a building block to an application and that the app devs could take their container images and publish those so that those could be used as building blocks and we had this team
00:11:50 [W] It allowed us to compose together all these building blocks and then it would just go through from developer laptop into production in a much more frictionless way.
00:12:02 [W] So so that's what we're after and if we look at some of the desirable properties that you might be interested in when you're looking for an out model it. I mean it obviously has to model the entire
00:12:14 [W] Shouldn't we want that kubernative style declared of management so that it keeps trying on our behalf to kind of achieve that desired State and ideally that should be done with idiomatic kubernative use. So when you have things like labels selectors and things that you
00:12:30 [W] Present on a kubernative is a resource and following the kubernative patterns that that's available in this in this app model and we want a clean separation of concerns so that the different aspects of the application are in
00:12:46 [W] So that the team can make those changes without having unintended consequences and having one configuration change override the behavior and another and ultimately we really want extensibility via the kubernative API.
00:13:02 [W] We don't want a limiting pass abstraction.
00:13:04 [W] that's too abstract and not extensible or GUI portal that doesn't allow us to extend it. We want something that says hey if I want to, you know use a new technology in my platform and I'm going to make that available for use within my app.
00:13:17 [W] Model I should be able to compose and use any kubernative c Rd any kind in my a little definition and ultimately we want to get this stream line path from Dell laptop production.
00:13:31 [W] So it probably goes without saying but you know, we want to be able to use the app model with get as a source of truth going to be able to use existing tools like Helm customized flux and we want to be able to use our existing deployment we're closed so we don't have to
00:13:45 [W] Thing that we've done to date and replace it with you know, the new way of doing it.
00:13:57 [W] So if we look at what you know modern application looks like and this is the simplest possible, you know modern application with our PHP web app here and a red us back end. But those are effectively two components of this simple
00:14:05 [W] Different you know aspects and characteristics in terms of by want auto-scaling manual scaling. You know for my Ingress route through my API Gateway.
00:14:16 [W] How do I want that configured?
00:14:18 [W] which Security Group do I want to kind of control?
00:14:20 [W] you know who has access to what and on what networks and so forth.
00:14:34 [W] And and so that basically defines, you know the app and so if we were to separate those aspects into what I want to run and how I should run it, we basically
00:14:38 [W] Basically get the separation of concerns and so we have the components the building blocks on the left hand side that the what to run and then we have the operational configurations on the right hand side and this can include you know how I want to go and group and reason about things or
00:14:51 [W] For you know how I want to upgrade or how I want to scale.
00:15:04 [W] So if we look at this in combination with you know what we have with the open application model there are five kinds or resource types.
00:15:09 [W] So there's a workloads talked about which is basically what I want to run there's a component which is an instance of a workload that I can compose into an application and then there are traits and Scopes which are operational behaviors that I can apply.
00:15:22 [W] It to a component so I can apply a trait to a component of modifies the behavior and effectively overlays configuration on to that and who defined way and then I have Scopes that can basically group resources together and I can use that for
00:15:36 [W] our house Scopes and these types of things and I can put all of that into an app config and application config and then just deploy that and so what we'll see is that you know with our PHP app here, you know, we have the PHP
00:15:52 [W] closed container image we have lettuce which is are you know, Acme Corp, you know secure, you know scalable redis that we've defined that might have, you know, a handful of resources bundled into it because we've composed those together using crossplane for example,
00:16:08 [W] You know traits and Scopes and our app config that are bound to those components that Define the operational behavior of the application.
00:16:17 [W] And the great thing is that these are all kubernative API resources. And so I can you know Version Control I can use gitops. I get all the benefits of you know, being able to use all the tooling that works with the kubernetes API
00:16:33 [W] You control or you know customized you know and kind of modifying those resources but even things like the terraform kubernative operator, right?
00:16:45 [W] I mean I can use any existing tooling that I want since it's based around the kubernative API.
00:16:49 [W] And so when we look at the separation of concerns across these different roles, you know the app Dev can create their building blocks the container images for their you know web UI their service, you know apis, the platform Ops Team can create their infrastructure
00:17:05 [W] Our stuff in missions. I want to secure postgres, you know one a scalable redis and then I'm going to go ahead and compose those so that they're easy to consume building blocks that in a pops person or you know role can compose into an application configuration
00:17:21 [W] And components in there and then associating traits and Scopes to those components.
00:17:26 [W] So I'm going to hand this off to sit on but who's going to walk us through using crossplane and ohm to deploy a kubernative zap with cloud services entirely from the kubernative API.
00:17:39 [W] Thanks, Phil.
00:17:46 [W] So what I'm going to show is how we're going to deploy these this micro service based application that's backed by postgres SQL to accrue mirantis cluster using oh man crossplane. So we're going to use crossplane to deal with all things infrastructure.
00:17:56 [W] So across Plains going to manage the connection to our back-end Azure cloud provider.
00:18:02 [W] It's going to be responsible for exposing the infrastructure resources that are available to the application developers and operators. And then we're going to layer. Ohm on top of cross.
00:18:10 [W] And so that the developers and a pops people can just deal with the application constructs and I'm going to try to do this all in the live demo.
00:18:20 [W] So I'm just going to share my screen and we're going to run through things.
00:18:23 [W] So first, I'm going to run through what it looks like from an infrastructure operators perspective.
00:18:36 [W] So I've cheated a little bit and I've already got a career in each cluster on my machine powered by kind and on it.
00:18:42 [W] I have installed crossplane and Cross Plains going to be the control plane that's going to manage all of my infrastructure for me.
00:18:49 [W] So that the developers and a pops people can just deal with the application constructs and I'm going to try to do this all in the live demo.
00:18:52 [W] So I'm just going to share my screen and we're going to run through things.
00:18:53 [W] So first I'm going to run through what it looks like from an infrastructure operators perspective.
00:18:54 [W] So I've cheated a little bit and I've already got a career in each cluster on my machine powered by kind and on it. I have installed across plane and Cross Plains going to be the control plane that's going to manage.
00:18:58 [W] All of my infrastructure for me.
00:19:01 [W] So if I do a career and he's get cross flane, I can look at and see that I have configured the back end as your provider already next my goal is to expose the infrastructure definitions that I want my application operators and developers
00:19:04 [W] Expose the infrastructure definitions that I want my application operators and developers to use now because I know the micro service application uses postgres.
00:19:05 [W] I'm going to go ahead and create something called an infrastructure definition which is the thing that acts as the schema for the Postcard SQL instance. So here I'm defining the schema for what the postgres SQL instance looks like and what needs to be
00:19:17 [W] For the postgresql instance. So here I'm defining the schema for what the postgres SQL instance looks like and what needs to be declared when I'm creating postgres.
00:19:23 [W] So to apply this because it's a community resource. I can apply it apply this just like I would any other kubernative sweets or so I go ahead and do Coop cuddle apply.
00:19:31 [W] And it gets created next the schema is created, but I still want to expose this to developers and operators. And that's where the infrastructure publication comes in. The infrastructure publication makes sure that the infrastructure definition I
00:19:47 [W] Available to The Operators and developers and likewise. This is also something that I can just do a coop cuddle apply to
00:19:56 [W] the third bit of infrastructure and the part that I find the coolest and we're crossplane really kicks in is something called a composition a composition is the thing that takes different infrastructure components and puts them together into one unit.
00:20:14 [W] So in this case because I'm using the Azure provider.
00:20:20 [W] I know that Azure has a few things that I need to declare in order for me to get postgres.
00:20:23 [W] I need to create something called a resource Group the actual postgresql server itself and the postgres firewall rules.
00:20:29 [W] Instead of dealing with all of these separately.
00:20:37 [W] I can create something called a composition which puts all of these together and applies labels.
00:20:38 [W] So this is easily available to my developers and operators when they declared as a requirement.
00:20:48 [W] So I'm going to go ahead and do the same thing, which is apply this particular composition.
00:20:49 [W] Now at this point this is available for operators and developers to use and they can declare a postgresql instance as a requirement in their apps and cross finds going to go ahead and ensure the right things are provisioned in the backend provider which in this case is
00:21:05 [W] The last step for the application of the infrastructure operators is to expose the necessary workloads F additions and trade definitions. Now, these are own Concepts in ohm a workload definition is something that the
00:21:22 [W] Expose for app devs to actually run an instance of something in this case.
00:21:29 [W] Those are containerized workloads and the postgresql instance.
00:21:38 [W] So the infrastructure operator saying hey on this particular environment, you can run containers and you can run postgres SQL instances.
00:21:40 [W] Traits in ohm augment the way certain workloads run and in this case, the only pray I'm exposing is something called as a manual scalar tray.
00:21:50 [W] And we'll go ahead and see what that does when we get to the actual components in home.
00:21:56 [W] So this is the last step for the infrastructure operator is making sure that the necessary workloads are actually exposed.
00:22:03 [W] Next we're going to transition and look at what the application developer has to do as Phil mentioned.
00:22:12 [W] The application developer is responsible for prescribing what needs to run so because I'm running five microservices.
00:22:20 [W] I'm going to declare each of those as a gnome component within those components you'll notice that I have a kind here for the workload. So this is a kind postgres SQL instance requirement which tells cross buying that in order to run this
00:22:32 [W] To go ahead and actually create something in Azure.
00:22:37 [W] that is a postcard SQL instance. If you look at all the other components that I'm creating there are all of type containerized workloads.
00:22:58 [W] The other thing I want to call out is there are certain parameters that the application developer exposes in a component. And these parameters are something the Operator Operator can take an override so they can configure how certain things run.
00:23:13 [W] So in this case you want to make sure that things like the database secret are something that you absolutely need so you can connect to the database but the operator probably knows that which secrets to use in various environments.
00:23:23 [W] So as a developer, you're still going to apply this particular aspect to the cluster.
00:23:32 [W] So these components are available to actually create an application.
00:23:33 [W] now at the start I didn't get k8s cross plane, which showed what Cross Plains managing you could take a look at this command now, you'll see that there's a lot more things that Crosswinds looking after instead of just the provider all of the infrastructure publication the definition and
00:23:49 [W] Constructs from create definitions to components are things that Cross Plains actually managing.
00:23:55 [W] If I do a cake at pods, you'll notice that there's still nothing running. Everything is declared but nothing is actually running at quite yet.
00:24:02 [W] To get things running we shift over to the a pops Persona these personas don't necessarily need to be different people but there are separate tasks that are streamlined for each Persona.
00:24:18 [W] So in the application configuration, I'm creating instances of each component providing the necessary parameters that were exposed by the developer and applying any traits that I want to do.
00:24:29 [W] to do. So remember that the infrastructure operator expose the manual scalar trade definition. That means that an operator canonical
00:24:33 [W] Fighters to configure how many replicas each components running in staging environment? You might not care about the number of replicas but in priority probably want to set it to something that is safe.
00:24:44 [W] So when I go ahead and apply this configuration, we should start seeing all of the pods being up on our kind cluster.
00:24:54 [W] But we're just going to put a walked on this that data API micro service connects the back end post press which in Azure takes some time to come up.
00:25:07 [W] So while that spins up I'm just going to stop sharing my screen and run through the rest of the slides. This should take around four minutes. So we'll come back in four minutes for this.
00:25:15 [W] It is something that is safe.
00:25:19 [W] So when I go ahead and apply this configuration, we should start seeing all of the pods spitting up on our kind cluster.
00:25:20 [W] But we're just going to put a walked on this that data API micro service connects the back end post press which in Azure takes some time to come up.
00:25:22 [W] So while that spins up I'm just going to stop sharing my screen and run through the rest of the slides.
00:25:23 [W] This should take around four minutes. So we'll come back in four minutes for this.
00:25:24 [W] So I'm going to go ahead and talk about the the kubernative zap model and what the ecosystem looks like.
00:25:31 [W] We're created a magic quadrant based on what Phil mentioned earlier where the y axis is really the separation of concerns and the x is talking about how kubernative knative the tools are we have Docker compose, which is a fantastic tool for entry-level developers and also just
00:25:43 [W] So I'm going to go ahead and talk about the kubernative zap model and what the ecosystem looks like.
00:25:44 [W] We're created a magic quadrant based on what Phil mentioned earlier where the y axis is really the separation of concerns and the x is talking about how kubernative knative the tools are we have Docker compose, which is a fantastic tool for entry-level developers and also just
00:25:46 [W] Entry into the container and kubernative ecosystem here.
00:25:49 [W] There's not much of a separation of concerns.
00:25:54 [W] But if you're coming into the Koran is ecosystem Docker compose is probably something you're going to use initially.
00:25:55 [W] next we have tools such as care reform cloud formation and arm which are all infrastructure as code tools and here you can describe it kubernative score resources, and it's a step towards having a separation of concerns and it's not quite kubernative knative
00:26:11 [W] Cleared up.
00:26:13 [W] If you go further down the x axis, this is where you get the kubernative w**** resources and the service operators that Phil mentioned earlier.
00:26:28 [W] So here everything is a core kubernetes resource, whether it's stuff that the clouds are representing as kubernative.
00:26:31 [W] CR DS or current is for resources themselves the small problem with this is that there's no separation of concerns.
00:26:42 [W] So everything here is exposed for anybody. So this is where you level up into tools such as the kubernative the cross playing composition.
00:26:44 [W] Which looks like combining a bunch of infrastructure together to create compositions.
00:26:50 [W] What crossplane does with composition is gifts an abstraction for platform Ops people to interact with compositions instead of a bunch of infrastructure with various providers when you layer Oman top of crossplane, it creates a natural
00:27:03 [W] crossplane does with composition is gifts an abstraction for platform Ops people to interact with compositions instead of a bunch of infrastructure with various providers when you layer Oman top of crossplane, it creates a natural abstraction layer
00:27:06 [W] between infra Ops a pops and active
00:27:08 [W] I want to touch a little bit on where the community started and what's coming up next.
00:27:19 [W] So when Microsoft initially kick started this project, I think it was at the beginning of last year.
00:27:22 [W] We partnered with Ali Baba Cloud to create the spec and soon after upbound joined with this cross find folks to actually contribute to the specification.
00:27:35 [W] We've been very involved in the cgroup delivery Sig which is part of the cncf and crossplane was recently submitted as a cncf Sandbox project.
00:27:40 [W] When Cross by and joined we quickly recognized the powers of these two projects together and we made crossplane the kubernative implementation of ohm. Ohm is definitely in its early stages.
00:27:56 [W] And one thing I want to call out is when Crosspoint joined us.
00:27:57 [W] us. We actually change the spec a large amount from what it was before they joined to what it was after so there's still a long ways to go and there's still a lot more contribution that we can take from people across the ecosystem and really just the calls.
00:28:10 [W] To action to come join the community and help us improve app development in the ecosystem.
00:28:17 [W] I want to quickly check on the demo and and put a wrap on it before I move on with the slides.
00:28:23 [W] You'll see the cross plane has now provisioned a postcard SQL instance in Azure for me.
00:28:45 [W] The demo steps that are followed were right from the crossplane doc. So it's nothing magical.
00:28:49 [W] I'm going to do a port forward to make sure that things are listening.
00:28:52 [W] Yeah, open it from earlier demo.
00:29:02 [W] So now if I hit that localhost:8080, you'll see that the service comes up. I can just do a Refresh on the flights data see what kind of flights are running across the states and the world right now.
00:29:16 [W] think this is the service that takes the longest to pull she they're done weathers 441 that was quicker.
00:29:20 [W] Switch to other section.
00:29:30 [W] So if you can take a look at the weather across the states and the world, it's very hard across the u.s.
00:29:41 [W] Also that just puts a wrap on the demo.
00:29:44 [W] So what we saw there was how you can compose a micro service based application using crossplane to abstract the infrastructure Concepts away from the platform team and then home to create that division between a pops and abdabs.
00:29:56 [W] From the flights data see what kind of flights are running across the states and the world right now.
00:30:07 [W] I think this is the service that takes the longest to pull she they're done weathers 441 that was quicker.
00:30:08 [W] switch to others
00:30:08 [W] So if you can take a look at the weather across the states and the world, it's very hard across the u.s.
00:30:08 [W] So that just puts a wrap on the demo.
00:30:09 [W] So what we saw there was how you can compose a micro service based application using crossplane to abstract the infrastructure Concepts away from the platform team and then home to create that division between a pops and at depths
00:30:13 [W] Here are some links to get involved with us on that Deb is a great length that has the rest of the links like the community sessions.
00:30:19 [W] Our email list are slack channels Cross plant has its own Community with its own slack at has it has its GitHub page.
00:30:22 [W] And the last thing I want to call out is that there are two other talks that are happening at pucon Europe or coupon virtual.
00:30:24 [W] I don't know what to call anymore. One of them is a panel that's being
00:30:30 [W] And by the folks who created home and some of the folks who created a lot of the contributions to create is ecosystem. And then we also have an Adder 1 by abound and Ali Baba talking about and crossplane there as well
00:30:43 [W] Sessions our email list are slack channels Cross plant has its own Community with its own slack at has it has its GitHub page.
00:30:45 [W] And the last thing I want to call out is that there are two other talks that are happening at pucon Europe or coupon virtual. I don't know what to call anymore.
00:30:47 [W] One of them is a panel that's being ran by the folks who created home and some of the folks who created a lot of the contributions to create is
00:30:51 [W] System and then we also have an Adder 1 by abound and Alibaba talking about and crossplane there as well and its partnership with Ali Baba.
00:30:54 [W] And with that I want to kick off the Q&A session and Phil and I are happy to answer any questions you folks have on either.
00:30:55 [W] Ohm crossplane the partnership or anything around apps across the ecosystem.
00:30:59 [W] Thanks for the talk and look forward to questions.
00:31:03 [W] Great.
00:31:11 [W] Thanks to Don buck. So we do have a ton of questions on the on the TOC here.
00:31:18 [W] So the first one is, you know for services to leverage the operator.
00:31:21 [W] Do they need a host services in kubernative use and so Cross Plains from the creators of rook and so, you know, we do support like in cluster, but we mainly focus on
00:31:31 [W] on managed services or cloud services that you want a provision for maybe a be us or Azure Ali Baba mgcp.
00:31:42 [W] And so we have providers for all of those and there's more on the way and that basically enables you to provision those managed services or those cloud services from the kubernative API.
00:31:53 [W] And so you can just drop in, you know, like a simple animal declared a BMO file and I'm in provision alongside your applications, whatever infrastructure your applications need and then that will go
00:32:02 [W] Is so great question there.
00:32:22 [W] There was another one about saw that crossplane is a controller operator project.
00:32:26 [W] So have you thought about providing it the operator Hub?
00:32:30 [W] And yeah, so if you go to blog dot crossplane dot IO, it's the third block down and we talked about how crossplane has been published operator have already and there's an integration with openshift there that makes some of them managed services available so you can you know use
00:32:42 [W] Your managed services from your cloud provider and so I definitely recommend checking that out for more detail. But when I think about crossplane is really like three layers, there's the base layer that provides The Primitives.
00:32:57 [W] Those are the crossplane providers and then there's crossplane composition which sits on top which allows you to compose without writing any code all of those Primitives into your own infrastructure abstractions your own platform apis, and then you can publish those is OHM
00:33:10 [W] which sits on top which allows you to compose without writing any code all of those Primitives into your own infrastructure abstractions your own platform apis and then you can publish those is OHM open application model workloads that
00:33:15 [W] Open application model workloads that can then be consumed and composed into a gnome application. And this is all designed to be layered.
00:33:25 [W] So and you can mix and match whatever you want. So you can just use the providers at the base layer.
00:33:29 [W] You can use composition you can use on by itself or you can use all of them in combination with each other.
00:33:31 [W] So yeah, good question.
00:33:34 [W] How would you version the component templates the developers can use and have to fill in and need to be updated regularly.
00:33:46 [W] That's when that that's what's the benefit over using cdk2 Define applications from some fold templates functions.
00:33:55 [W] Yeah, so it's a great question about cdk and there's also a kind of an offshoot called CD kade's and so we're actually working with a lot from see Kate's to look at providing more than just like the Yellow base composition that we support today, but actually being able
00:34:03 [W] Functions.
00:34:04 [W] Yeah, so it's a great question about cdk and there's also a kind of an offshoot called CD kade's and so we're actually working with a lot from cdk. It's to look at providing more than just like the Yellow base composition that we support today, but actually being able to run
00:34:05 [W] Types of compositions from behind the kubernative API line.
00:34:11 [W] It's that allow you to use like a CD Kate's program that would compose, you know, your infrastructure resources and then basically have that output the kubernative resources directly there that would be made up of
00:34:23 [W] You can basically use those and then a really beautiful thing about being behind the kubernative API is is that if one person, you know writes a great composition and cdks and then publishes that that you can then compose it, you know using the standard llamo composition or other tooling.
00:34:40 [W] And so definitely, you know having this automation run behind the kubernative API line makes it open to the entire kubernative ecosystem.
00:34:53 [W] That's something that's fairly unique to how cross plan approaches the problem. And then also if you go to the blog Dot crossplane iot
00:35:10 [W] and of crd docks there from from hashtag an and a lot of great info there when we'll cross plane own be ready for production.
00:35:25 [W] both care reform across planar. These are about 12, but in terms of functionality Transformations an ecosystem Cloud providers, the difference is huge.
00:35:27 [W] Yeah. So this is a great question when we get a lot there are some folks that are starting to use crossplane and production now and we're rapidly going towards 100 and so we'd like to get a couple more, you know production deployments under the belt before we
00:35:44 [W] I know but we're basically moving from alpha 1 V 1 Alpha 1 to V 1 beta 1 for composition.
00:35:55 [W] So that's basically ready ready for use now kind of in an evaluative mode and then in the next month or so we're basically going to get that to be 1 beta 1 and so 4. Ohm,
00:36:03 [W] We'll definitely by end of the year.
00:36:14 [W] I'm expecting to be 100 but potentially sooner. So yeah, that's kind of where we're at with with that and definitely encourage everybody to join across Plains slack. So it just and there's the OM channel in Cross Plains lack that if you have questions about um,
00:36:21 [W] It's from Microsoft and Ali Baba.
00:36:25 [W] Are there along with the folks from up down?
00:36:26 [W] So yeah, definitely if you have additional questions about specific things or like when support is going to be added in for like scopes for networking and whole Scopes and stuff like that on them.
00:36:39 [W] You can definitely drop in there.
00:36:42 [W] So let's go ahead I'm on it.
00:36:48 [W] think there's one from the sticky around. I really good question actually around how operators are different from Developers.
00:36:53 [W] In this case, but the industry is moving towards you know, these two folks being the same Persona in such tears scenario.
00:36:58 [W] How does this help?
00:37:00 [W] I did respond to the question in the chat.
00:37:03 [W] So check that out because you only have like 30 seconds but super quick. I think ohm doesn't necessarily say that these two personas you to be different.
00:37:17 [W] They could be the same person just the tasks are different and kind of clearly delineated so they can focus on the right things and also this these two technologies kind of set up the platform for you know,
00:37:25 [W] Services in the cloud or third party where the infrastructures headings and at that point, you're only dealing with the application constructs.
00:37:34 [W] So that's how it's supposed to help developers and kind of this whole devops Persona that's being created.
00:37:36 [W] Yeah, exactly. That wraps it up after work.
00:37:40 [W] Okay over time.
00:37:42 [W] Okay.
00:37:42 [W] Great.
00:37:43 [W] Thanks.
00:37:44 [W] Well, thanks for joining and we'll see you all online.
00:37:48 [W] So go ahead on on the chat.
00:37:54 [W] I think there's one from a sticky around.
00:37:55 [W] I really good question actually around how operators are different from developers in this case, but the industry is moving towards, you know, these two folks being the same Persona in such tears scenario.
00:37:56 [W] How does this help?
00:37:56 [W] I did respond to the question in the chat.
00:37:57 [W] So check that out because you only have a 30 seconds but super quick. I think ohm doesn't necessarily take that these two personas eat.
00:38:00 [W] Different it could be the same person just the tasks are different and kind of clearly delineated so they can focus on the right things. And also this these two technologies kind of set up the platform for you know services in the cloud or third party
