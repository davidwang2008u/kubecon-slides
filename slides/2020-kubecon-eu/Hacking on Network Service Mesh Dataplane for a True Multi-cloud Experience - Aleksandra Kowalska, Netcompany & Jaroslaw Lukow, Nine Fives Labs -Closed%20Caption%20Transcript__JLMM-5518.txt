Hacking on Network Service Mesh Dataplane for a True Multi-cloud Experience: JLMM-5518 - events@cncf.io - Tuesday, August 18, 2020 8:14 AM - 84 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:10:30 [W] Hi, my name is Ola and I'm Eric greetings from Warsaw.
00:10:42 [W] We are no books engineers and we have developers in optimizing build and deployment processes on different environments.
00:10:43 [W] Mostly kubernative.
00:10:48 [W] We would like to tell me about two great pieces of Technology namely Network servicemeshcon the tungsten fabric.
00:10:51 [W] Hi, my name is Ola and I'm Eric greetings from Warsaw.
00:15:40 [W] We are no books engineers and we have developers in optimizing build and deployment processes on different environments.
00:15:41 [W] Mostly kubernative.
00:15:46 [W] We would like to tell me about two great pieces of Technology namely Network servicemeshcon the time soon fabric virtual network controller and how to make them work together to form a nice multi-cloud set up if you have ever
00:15:56 [W] Mission in a kubernative environment.
00:16:00 [W] There is a high chance that you encountered some problems when trying to connect to the outside world. Everything works perfectly as long as all your dependencies are contained inside a single kubernative cluster, but when you start to integrate with
00:16:14 [W] Services you need to deal with stuff like routers firewalls security policies as different VPN applications that don't really fit into the cloud knative automation provided by kubernative and they actually shouldn't be
00:16:30 [W] Application that works servicemeshcon tool that aims to solve this exact Cloud native networking problem and be a game changer in this field.
00:16:46 [W] It brings cloudbees ATIV to the networking World by exposing an API that allows you to dynamically create and attach your workloads to Services inside and outside of your deployment environment and thanks and fabric appears to be a
00:16:55 [W] technology for Network servicemeshcon
00:17:04 [W] We will start with a brief introduction about Network servicemeshcon.
00:17:34 [W] Forwarder with open star cluster and kubernative cluster. Okay.
00:17:42 [W] So let's start with a question.
00:17:44 [W] What is Network servicemeshcon?
00:18:04 [W] Sample parts from different cluster.
00:18:11 [W] Basically, you can think of it as a way to dynamically attach a digital network interface to a pod.
00:18:21 [W] Let's take a look at few Network servicemeshcon ponents relevant for this presentation.
00:18:24 [W] So network service registry.
00:18:25 [W] And it contains all the available virtual networks. In this case. It's Alice and Bob and network service manager.
00:18:37 [W] It is a control plane component.
00:18:41 [W] It is a demon set deployed on each node in a plaster. It accepts network service request from pots verifies network service presence in network service registry and forwards the request to the forwarder and Network servicemeshcon warders.
00:18:54 [W] So far there is data plane component.
00:18:59 [W] It provides the connectivity requested by the manager. And this is a pluggable component of official Network servicemeshcon repository provides implementation for VP and Colonel, but we want to show you
00:19:12 [W] implementation can be done on tungsten fabric example
00:19:17 [W] So let's talk now about how Network servicemeshcon used to establish connectivity between a kubernative sport and an external service.
00:19:28 [W] So we have kubenetes node with a pot put a inside and how can we connect with an external network from the pod?
00:19:43 [W] So first we need to install Network servicemeshcon the cluster so this part and it will provide network service manager and for other models and that works as manager
00:19:53 [W] first we need to install The Rook servicemeshcon the cluster since this part and it will provide network service manager and for other models and that works is manager maintains a list of available for
00:19:56 [W] Available foreigners and Network Services and it's called that Rook service registry.
00:19:59 [W] And in this example, we have to follow orders.
00:20:04 [W] and two networks already registered.
00:20:09 [W] So what happens next put a creates network service request to network service manager to attach to a new service to a new network service in request it specifies to which service it wants to
00:20:24 [W] And which mechanism should should be used with which for water so it wants to be connected to Alice and it wants to use VP for water in this case.
00:20:36 [W] And this request can be sent whenever application needs to connect to the network.
00:20:44 [W] So yeah, now manager takes over and manager verifies if Alice network is available in the registry.
00:20:55 [W] So yes, it is available.
00:20:58 [W] The response positive response goes back and now network service manager forwards the request to the for order to the VB before the because this is what put a requested.
00:21:09 [W] And for water adds an interface to put a and enables collect connectivity to Alice Network and that's it.
00:21:24 [W] We have bought a connect to the external service through newly created network service network interface.
00:21:25 [W] Sorry, but of course default kubernative spok network is still available.
00:21:32 [W] So this is how network servicemeshcon has and each for water has its own mechanism for providing connectivity to the services today.
00:21:48 [W] Forwards the request to the four order to the VP for the because this is what put a requested.
00:21:55 [W] And forwarder adds an interface to put a and enables collect connectivity to Alice Network. And that's it. We have both a connect to the external service through newly created
00:21:57 [W] spoke about dancing fabric first
00:21:57 [W] So what is thanks in public?
00:22:02 [W] Thanks.
00:22:03 [W] The fabric is networking back and forth kubernative openstack and for public clouds, for example, it allows to create virtual networks to provide connectivity between virtual machines on openstack and put some communities
00:22:17 [W] The demo will show interoperability between kubernative and openstack but the same approach can be used to connect pods to any other environment supported by tanks and fabric. So it gives you an opportunity to create
00:22:32 [W] cheers
00:22:34 [W] So on this slide, we have an example of prankster fabric installed on openstack environment and thanks fabric is a main network provider in this cluster.
00:22:50 [W] So thanks and fabric connects virtual machines in private Networks.
00:22:53 [W] It provides overlay networking in the picture you have for virtual machines on to openstack hosts with tanks and fabric V routers installed Within
00:23:04 [W] And thanks in fabric.
00:23:08 [W] Mayadata is a global routing table and keeps it synchronized between the parameters.
00:23:17 [W] So now we like to connect this word to a kubenetes cluster.
00:23:21 [W] So here comes Network servicemeshcon water for tax and fabric. So first, let's get back to the setup of kubernative cluster with network servicemeshcon ready installed.
00:23:30 [W] And let's add the text and fabric luster to the picture.
00:23:34 [W] So first, let's get back to the setup of kubernative cluster with network servicemeshcon ready installed.
00:24:03 [W] And let's add the text and fabric Caster the picture.
00:24:04 [W] So what we need to do is to install two new components tanks and fabric router and thanks the fabric forwarder for network service meshmark.
00:24:05 [W] Okay.
00:24:07 [W] So again pulled a was to connect to the network.
00:24:10 [W] So it creates a request to network service manager to attach to a network.
00:24:19 [W] But this time it says it wants to use tax a fabric for water and it still wants to connect to our Network.
00:24:20 [W] Okay, so network service manager at takes over and it asks network service Registries as there and yes, it is. So response come back and now thanks the fabric for takes over.
00:24:35 [W] So thanks the fabric for water links put a to Alice Network by adding an interface to a pod interface is plugged into V router.
00:24:47 [W] And entry is added to the tungsten fabric writing table with a new IP address associated with kubenetes node.
00:24:57 [W] And in result we have configuration setup in the router and virtual Network routing table and that enables Pate to have two-way communication with virtual hosts in the tanks and fabric Network.
00:25:13 [W] So now thanks the fabric controller and ensures that all the routers have a consistent view of the network all the routing table entries are continuously synchronized among all the hosts.
00:25:26 [W] That in this way virtual machines can talk to the Pod and vice versa. Our example covers connectivity to openstack, but it's not the only cloud computing platform supported.
00:25:41 [W] So yeah, that's it.
00:25:48 [W] That's it what it comes to the theory, but now I'm giving the floor to addict who will show you how it works in practice.
00:25:56 [W] Okay.
00:25:57 [W] Thanks and welcome back.
00:26:01 [W] I will now show you a short demo of the integration between a kubernative cluster and an open star cluster.
00:26:07 [W] I will connect a pod to network L3 Network.
00:26:11 [W] With virtual machines using a network servicemeshcon the text and fabric virtual network controller.
00:26:20 [W] So let's start with our environment.
00:26:23 [W] We have a plain empty openstack cluster over here.
00:26:29 [W] We view it using the graphical interface horizontal and we also have a working kubernative cluster.
00:26:35 [W] with the nsmcon stelae ssion already provisioned and we can see the network service manager and the network servicemeshcon asks and fabric forwarder already registered over here so we can use it
00:26:52 [W] Service network servicemeshcon where applications? Okay, and we also have the our data plane which will be the toxin fabric virtual network controller.
00:27:08 [W] And Tyson fabric is already connected to the openstack cluster as a neutron plug-in. So it's servicing all the interfaces all the network interfaces for virtual machines in the cluster.
00:27:21 [W] What configured as a cni-genie kubernetes and it's just to show you that you don't need you may use it as a cni-genie cuz it has the feature are you don't have to use it as a cni-genie can use a totally different cni-genie
00:27:37 [W] It has the future.
00:27:38 [W] Are you done have to use it as a cni-genie can use a totally different cni-genie or kubernative Blaster and at the same time use TF as a networking back end as a data plane back and forth Network servicemeshcon, which Eve the
00:27:47 [W] It's servicemeshcon achieve the connectivity for for the multi-cloud architecture.
00:27:55 [W] Okay. So right now we don't have any any networking configured in our environment.
00:28:04 [W] let's start with creating our infrastructure on the openstack side and I will create two networks red and blue to demonstrate the connectivity and to show you that we can use different.
00:28:16 [W] We can use different networks and choose them using network servicemeshcon.
00:28:23 [W] West's so we'll create first a red subnet with a ten point one point one addresses.
00:28:29 [W] and Dan blue Network
00:28:32 [W] With a subnet of ten point to point to point. Oh
00:28:43 [W] Okay, and with both the Network's configured we can see that time some fabric is synchronized with the open star cluster and it already shows the networks with proper.
00:29:01 [W] With a subnet of ten point to point to point. Oh
00:29:02 [W] Okay, and with both networks configured we can see that time some fabric is synchronized with the open star cluster and it already shows the networks with proper.
00:29:03 [W] Proper configuration and let's go ahead and create.
00:29:08 [W] two virtual machines in the red Network
00:29:15 [W] This will be our first experiment.
00:29:20 [W] Okay. We are choosing the red Network.
00:29:27 [W] So you want the virtual machines to be attached to the red Network?
00:29:29 [W] Okay, they are running.
00:29:30 [W] And on the tanks and fabric side, we should see them.
00:29:37 [W] The interface is attached to the Virtual Router.
00:29:41 [W] Okay, here we are. We can see the two interfaces in the red Network 1 Point 3 + 1 .4 and just for the sake of this presentation just and just for the
00:29:56 [W] Should we will use the Virtual Router internal interface to connect to them? So SSH?
00:30:05 [W] Okay, go cups go and we are in and we can see that we are on the first virtual machine 1.3 and from here. We can SSH
00:30:24 [W] one point one point four
00:30:27 [W] Okay, and this is 1.4 virtual machine, and I'm going back.
00:30:42 [W] There's a two-way connectivity.
00:30:47 [W] So I did it just to check if everything's working.
00:30:48 [W] Okay, and it's obvious that the openstack virtual machines in the same network can communicate with each other.
00:30:56 [W] Okay.
00:31:00 [W] So now it's time for the network servicemeshcon.
00:31:03 [W] will use Padma vests.
00:31:06 [W] They are located over here and they are adapted from the official Network servicemeshcon samples and here you can see a pod with BusyBox container
00:31:21 [W] The deployment with an annotation Network servicemeshcon and what's called the fully qualified name of the network inside.
00:31:37 [W] and fabric database. So we have a default domain the project name which is admin and then the network name. So let's create. This part is deployment.
00:31:46 [W] By Red deployment, okay.
00:31:53 [W] Now, let's see what's happening inside our namespace. The red part is initializing and
00:32:05 [W] you can see that there is something unexpected going over here because we see that it's running some in it containers while our original deployment has got just only a single
00:32:20 [W] Explain this in a minute, but for now, it's already running.
00:32:25 [W] So we can see what's inside.
00:32:29 [W] and
00:32:32 [W] Okay, and we can see that we have two interfaces.
00:32:40 [W] First.
00:32:41 [W] One is the default Port Network poor cluster pot at work.
00:32:47 [W] This is default interface.
00:32:52 [W] And then we have interface with a random name which is a member of the red Network and we can see if we are able to connect to the virtual machines and openstack and yes
00:33:02 [W] for our Ritual from our pod
00:33:07 [W] so the tax my fabric forwarder successfully bridged us to do the red Network and openstack.
00:33:22 [W] Okay, and now let's explain how it all happened as you can see here.
00:33:23 [W] We have a network servicemeshcon web hook part over here and it's a nice piece of nsmcon is listening to all the objects that are on
00:33:39 [W] the namespace and if it detects Network servicemeshcon tation, it will modify the Pod manifest and it will add sidecar containers that will configure the
00:33:55 [W] Their face and it with they will handle the communication with the nsmcon pi.
00:34:02 [W] So let's see how the modified specification of the of the red part looks like.
00:34:11 [W] Okay, so we have the the container the base container that we we've seen inside the original manifest and then we have additional nsmcon être container and then the important part.
00:34:32 [W] We've seen inside the original manifest and then we have additional nsmcon être container and then the important part in it containers DNS and it container and the nsmcon IT container and
00:34:38 [W] It container and the nsmcon IT container and nsmcon it container.
00:34:43 [W] there's responsible for talking to the network servicemeshcon and creating the interface according to this network service requests. And in our case the network service is the the network itself.
00:34:55 [W] So we are requesting connectivity.
00:34:59 [W] We are requesting to be joined to this particular tungsten fabric Network.
00:35:02 [W] Okay, so you can see that there is a pretty nice separation of concerns in the application manifest.
00:35:18 [W] The application is just this part like it's a regular application.
00:35:21 [W] That is totally unaware of any nsmcon.
00:35:25 [W] rewrite and while using the deployment while creating the deployment, we are adding Network servicemeshcon.
00:35:32 [W] Annotation that tells the orchestrator to connect us to some specific Network.
00:35:43 [W] So we have we have nice layered nice layers.
00:35:45 [W] we have the application running on a cluster that is equipped with nsmcon.
00:36:02 [W] Schindler is totally unaware of any nsmcon rewrite and while using the deployment while creating the deployment, we are adding Network servicemeshcon notation that tells the
00:36:10 [W] On Target deployment, okay, and to see that the tension fabric forwarder is flexible.
00:36:19 [W] I will now create a second third instance in the blue Network blue Dimo network with the same configuration except for the network.
00:36:32 [W] It's creating.
00:36:39 [W] Let's wait for it.
00:36:40 [W] And it acts and fabric interface we can see.
00:36:47 [W] Okay and create.
00:36:52 [W] the blue part
00:36:58 [W] Okay, this is this going through the same sequence that the red pot.
00:37:09 [W] Okay, it's finished and
00:37:15 [W] Let's go inside.
00:37:21 [W] And see that we have ten point two point two point four interface.
00:37:30 [W] So we are inside the blue Network and we can in the same way see the interface in a blue Network on the tanks and fabric side.
00:37:38 [W] and that accent fabric interface we can see
00:37:41 [W] okay and create.
00:37:41 [W] the blue part
00:37:41 [W] Okay, this is this going through the same sequence that the red part.
00:37:42 [W] Okay, it's finished and
00:37:42 [W] Let's go inside.
00:37:44 [W] And see that we have ten point two point two point four interface.
00:37:45 [W] So we are inside the blue Network and we can in the same way see the interface in a blue Network on the X and fabric side.
00:37:46 [W] Okay.
00:37:46 [W] So this is it for this part we created the taxon fabric for were there as a POC.
00:37:49 [W] So it has the basic functionality of creating interfaces and hooking them up to the view router and there's much more to do but I think that it's a nice way to first show you how
00:38:02 [W] So this is it for this part we created the tax on fabric for were there as a POC.
00:38:03 [W] So it has the basic functionality of creating interfaces and hooking them up to the view router and there's much more to do but I think that it's a nice way to first show you how
00:38:04 [W] How the times and fabric is a nice fit to the network servicemeshcon, its philosophy of cloud native network connectivity.
00:38:18 [W] And one of the one of the nice appealing features of tanks and fabric is also that it is able to connect different workloads into service chains.
00:38:27 [W] So for example, Cloud native Network functions running as parts and kubernative with virtual Network functions.
00:38:33 [W] Running and as instances on openstack for example and physical Network functions and physical appliances because it is able to bridge them to Overlay
00:38:48 [W] The switches that are vxlan capital and a second part.
00:38:57 [W] is that our source code may serve as as an example for for other forwarders and for other people that want to customize
00:39:07 [W] four four four other forwarders and for other people that want to customize the network service imagine at their own functionality or at their own data plane support so you can go ahead and
00:39:15 [W] So you can go ahead and see the code in our repo and I will so I would like to mention that this idea was inspired by rather's laughs talk as the open networking
00:39:28 [W] Here when he talked about his caring and forwarder, which was also meant as a similar saying to inspire other people to write their own plugins for the network servicemeshcon.
00:39:51 [W] Okay, so we have a couple of questions and we already answered some of them in the text mode and let's see what's left.
00:40:22 [W] Okay.
00:40:29 [W] So can you use Network servicemeshcon connect a single pot to red and blue Network.
00:40:45 [W] So yes, this this is not a part of the of our POC but basically multiple service requests would create
00:40:54 [W] Basis I actually did it by accident during the preparation for the demos.
00:41:01 [W] So I saw it. So it working.
00:41:03 [W] Okay.
00:41:07 [W] And another one.
00:41:13 [W] And how can Network servicemeshcon snyk fabric be used for a multi-cloud scenario in this presentation.
00:41:27 [W] It was mostly about openstack.
00:41:29 [W] And yes, so our our example was based on openstack, and we wanted to show and a separate environment is not kubernative based to show that we can
00:41:43 [W] Activity be cool between between different workloads on different environments.
00:41:53 [W] But basically we also mentioned that during the presentation that tax and fabric has a very nice folio of supported environments, like kubernative is open shift openstack VMware
00:42:04 [W] Also, you can treat it as a as a tunnel endpoint. So the V router is just a component that can establish tunnels using TLS or UDP.
00:42:19 [W] So anywhere, you can install the view router you can you can place the the other side of the connection.
00:42:28 [W] So this is this is our idea about about being multi-cloud and multi environment.
00:42:34 [W] and
00:42:38 [W] can we run tax and fabric in a host at kubernative like gke and connect to on-prem network?
00:42:53 [W] of course, so
00:42:57 [W] So the the tax in fabric overlay Network can be spread over multiple multiple networks and all it needs is just L 3 connectivity between the
00:43:13 [W] Tunneling components, so it it also provides encryption features.
00:43:28 [W] So with or without a VPN as long as you can get the underlay tunneling endpoints in the reachable using an L-3 Network it will work.
00:43:38 [W] This was answered life. Okay.
00:43:45 [W] Yes.
00:43:47 [W] so venkatesh asks, if
00:43:59 [W] in simple terms tekton fabric is sdn overlay, which uses nsmcon to interconnect orchestrators, like openstack managing any of these and kubernative managing containers is my understanding, correct?
00:44:16 [W] Yes.
00:44:20 [W] I would only reward this as Network servicemeshcon.
00:44:32 [W] Working back and to realize this connectivity.
00:44:35 [W] so venkatesh asks, if
00:44:45 [W] in simple terms tekton fabric is sdn overlay, which uses nsmcon to interconnect orchestrators, like openstack managing any of these and kubernative managing containers is my understanding, correct?
00:44:46 [W] Yes.
00:44:46 [W] I would only reward this as Network servicemeshcon.
00:44:48 [W] working back into realize this connectivity
00:44:49 [W] and is taxed and fabric over public internet and what about latency?
00:44:53 [W] So yes, it can work over over any L3 Network.
00:44:59 [W] and what about latency than your mileage may vary didn't defense.
00:45:02 [W] Okay, I think that.
00:45:09 [W] That we are found out there is another page of the questions.
00:45:15 [W] What is the licensing and support model of tanks and fabric, so maybe I will follow up this on slack with you because this may be a longer answer.
00:45:31 [W] and
00:45:34 [W] and is there a way to run any cost over nsmcon?
00:46:06 [W] At and what about latency?
00:46:14 [W] so
00:46:14 [W] Yes, it can work over over any L3 Network.
00:46:15 [W] And what about latency? Even your mileage may vary depends?
00:46:15 [W] Okay, I think that.
00:46:15 [W] That we are only out. There is another page of the questions.
00:46:16 [W] What is the licensing and support model of tanks and fabric, so maybe I will follow up this on slack with you because this may be a longer answer.
00:46:18 [W] and
00:46:18 [W] and is there a way?
00:46:18 [W] to run any cost over nsmcon
00:46:21 [W] I can also point you to documentation on slack afterwards.
00:46:22 [W] And okay, I think that we are we are good with the questions if you want to follow follow up with us or maybe some some other questions comes up to your mind.
00:46:37 [W] Let's go ahead to the coupon networking channel and slack and will be waiting there for for any other afterthoughts after our presentation.
