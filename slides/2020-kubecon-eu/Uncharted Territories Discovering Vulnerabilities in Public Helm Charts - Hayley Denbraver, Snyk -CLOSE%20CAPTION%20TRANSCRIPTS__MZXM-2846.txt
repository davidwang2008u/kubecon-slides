Uncharted Territories: Discovering Vulnerabilities in Public Helm Charts: MZXM-2846 - events@cncf.io - Thursday, August 20, 2020 8:27 AM - 370 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:02:27 [W] Hello and welcome to my talk for Coop con Cloud knative Con Europe 2020.
00:02:36 [W] Thank you so much for joining me for Uncharted territories discovering vulnerabilities in public Helm charts.
00:02:42 [W] So Ahoy welcome.
00:02:43 [W] Thank you for coming and my name is Haley done braver and you can reach out to me on Twitter. My handle is on the screen.
00:02:54 [W] Now, it's Haley Denby and I would love to hear from you.
00:03:00 [W] I am a developer and a developer Advocate and I love creating technical educational content.
00:03:10 [W] I am coming from my home in Seattle and I live there with my husband and my super cute puppy and as much as I love it here, I wish we could be together in Amsterdam
00:03:21 [W] My home in Seattle and I live there with my husband and my super cute puppy and as much as I love it here, I wish we could be together in Amsterdam and last year.
00:03:23 [W] I actually had the pleasure of going to a different conference at the same venue.
00:03:33 [W] We were supposed to be at so I thought I would bring some of the weird conference venue weird statue vibe.
00:03:38 [W] To at this virtual event. So it's almost like we're in Amsterdam right now.
00:03:48 [W] This talk is part of the beginner track. It is for people who are new to the cloud native ecosystem and you know cloudevents really fairly
00:03:59 [W] And in a way, we're all new but every Kook on there are tons of people who it's their first Coop Khan, and I'm just here to tell you if you're a beginner if you're new at this.
00:04:15 [W] Okay, and I have the TOC for you.
00:04:22 [W] I also really classify myself in this category, too.
00:04:28 [W] I'm fairly new to the ecosystem. But I got a chance to take a look at some interesting vulnerabilities that were in public Helm charts.
00:04:41 [W] so even though I'm new I'm hopeful that this project will be interesting to you and that weaveworks.
00:04:46 [W] We can all go away from the top having large something.
00:04:49 [W] now
00:04:51 [W] this talk is going to be in about five parts.
00:04:58 [W] first.
00:04:59 [W] I'm going to cover the cncf and their General approach to security.
00:05:05 [W] Secondly.
00:05:08 [W] I'm going to talk about Helm as a project and about the security posture that Helm has and from there were going to move on to helm charts security Now Helm charts security is distinct from
00:05:21 [W] In about five parts first.
00:05:21 [W] I'm going to cover the cncf and their General approach to security.
00:05:22 [W] Secondly.
00:05:22 [W] I'm going to talk about Helm as a project and about the security posture that Helm has and from there were going to move on to helm charts security Now Helm charts security is distinct from
00:05:23 [W] Because what we're going to do is really look at the charts themselves and the images contained within them and after spending a bit of time there.
00:05:33 [W] I'm going to step back a little bit and really bring it down to an individual level and discuss what everything we've talked about means for an individual user.
00:05:46 [W] Really bring it down to an individual level and discuss what everything we've talked about means for an individual user.
00:05:48 [W] What does it mean for you?
00:05:50 [W] And how can you up your security game?
00:05:52 [W] So I'm excited.
00:05:53 [W] It's going to be fun now.
00:05:55 [W] First up is the cncf and their approach to security what I really like about how they approach security is that they've been thoughtful and methodical about it.
00:06:09 [W] And the first thing I want to show you is it is an image from their website and you may or may not have seen it this image really tells
00:06:22 [W] Seen it this image really tells a story of how a project matures through the cncf ecosystem and really what sorts of users.
00:06:33 [W] Are going to be interacting with a project at a particular maturity level and why I think this is interesting from a security perspective is that it Maps pretty closely and pretty well with your risk tolerance.
00:06:48 [W] We are going to be interacting with a project at a particular maturity level and why I think this is interesting from a security perspective is that it Maps pretty closely and pretty well with your risk tolerance.
00:06:50 [W] Basically as a project matures, it's going to meet security milestones.
00:06:58 [W] And so depending on your risk tolerance if your risk tolerance is higher if it's not a super critical project, if you're not it's not live to the world that sort of thing you're going to be comfortable
00:07:12 [W] It's not live to the world that sort of thing.
00:07:12 [W] You're going to be comfortable with the project earlier.
00:07:20 [W] But if you're more conservative if your risk risk tolerance is lower than you're going to want to hold off perhaps until something has graduated and so you
00:07:28 [W] How a project evolves and how it interacts with the users at different stages and I just really like this image.
00:07:38 [W] Now what's extra exciting for Helm today as I talk to you is that Helm has completed this process earlier this year.
00:07:53 [W] they graduated and they are now a graduated project within the cncf ecosystem and so congrats to the maintainers.
00:08:05 [W] They worked really hard in a lot of different aspects including security. Just what we're going to talk about.
00:08:08 [W] And their hard work paid off and it was just really nice to see it promoted to a graduated project.
00:08:18 [W] So Helm joins other cncf projects that you know and love in the graduation category and it was just really nice to see the project be promoted. Now.
00:08:31 [W] How does a project get to the graduation stage with respect to security?
00:08:38 [W] And that question you can find the answer to in the cncf GitHub.
00:08:45 [W] I'm going to show it to you now.
00:08:46 [W] Checks in I believe 2018 and 2019 and it was a success and so it has now rolled out to all graduated projects.
00:09:15 [W] So I really encourage you to read more about this.
00:09:19 [W] I think it's really interesting.
00:09:22 [W] They have open sourced their security Audits and you can learn more about the projects and their approach to security.
00:09:28 [W] T in the following slide.
00:09:32 [W] there we go.
00:09:40 [W] So I'm going to Tweet out a link to these slides and you'll be able to click through and read something I published last year about how kubernative open source their security
00:09:49 [W] Um, it also covers a bit about the pilot program which included the core DNS Envoy and Prometheus projects and how its rolled out to other projects in the
00:10:04 [W] Additionally I have links here for the specific.
00:10:09 [W] Helm security Audits and further security assurance that they did a few months back and I think it's just really interesting reading and great to see from the cncf that they
00:10:24 [W] Security in this way and hold their member projects accountable and it's just been really great to see so
00:10:35 [W] we are talking primarily about the helm project though today and Helm I want to give you kind of a an overview of it. And again this may seem simplistic.
00:10:52 [W] Not brand new but you know, it's important to say anyway, and that's okay.
00:11:01 [W] So we're going to talk about Helm and the first question you may ask is what is Helm. Well Helm is the package manager for kubernative.
00:11:13 [W] He's and Helm it helps you manage your application and it's maintained by the cncf through a partnership with Microsoft.
00:11:22 [W] Soft Google bit Nami and the open source.
00:11:27 [W] Helm contributors. So if Helm is the package manager of the ecosystem then what is the packages where the packages?
00:11:41 [W] What are they and the answer to that is Helm charts.
00:11:48 [W] So a Helm chart is a pound package and they describe a related set of kubernative.
00:11:53 [W] Use resources and they help you define an install and upgrade even really complicated things.
00:12:06 [W] Now Helm charts are things that you can put together your own or you can certainly use public Helm charts that have been shared with the community
00:12:16 [W] These public Helm charts they come in a couple of different varieties. And the ones that I'm going to focus on are called stable Helm charts and a stable Helm chart
00:12:32 [W] Thought to be mature.
00:12:37 [W] So if we think back to that image from earlier where cncf project goes through maturity levels and graduates we can kind of think of a
00:12:50 [W] as having graduated it may it meet some requirements that the community sets and
00:13:01 [W] I wouldn't go to say that it's like a stamp of approval but it's just an indication that the chart has been tested by the community that it's trusted generally and they also have
00:13:16 [W] Surrounding security vulnerabilities and that the images should be generally free of severe ones.
00:13:30 [W] All right, so we have these stable Helm charts and these charts are they incorporate container images and the image is the level at which
00:13:41 [W] Vulnerability is actually present.
00:13:49 [W] So a container image is an executable package of code in it has everything you need to run an application.
00:13:54 [W] So a given chart can contain or it can make use of a number of images or none, but you'll find that most charts use one or more of these
00:14:08 [W] The vulnerabilities we're going to talk about are at this level.
00:14:15 [W] This is where they're introduced at this container Image level.
00:14:18 [W] all right, so we have Helm the project which has you know completed this security audit and Helm this package manager has
00:14:33 [W] Art's some of which are Community trusted and you know somewhat approved by the community in these stable chart versions and these charts contain.
00:14:49 [W] It's and the images are where vulnerabilities occur.
00:14:55 [W] so that's the broad landscape of
00:15:02 [W] what we're talking about and of where problems might be introduced and let's dig a little bit deeper into the security of these charts.
00:15:15 [W] All right.
00:15:18 [W] So Helm chart security. And the first thing to say is that this is definitely distinct from
00:15:28 [W] Helm security so these security report the audit that Helm went that Helm went through is really about their process the project itself
00:15:44 [W] Wood for that project.
00:15:47 [W] It didn't really incorporate charts because charts are things that you and I can make their the community.
00:15:55 [W] They're not the project itself.
00:16:09 [W] So even though we have this security audit for the tool of Helm, we do really need to think about whether there are vectors and problems
00:16:10 [W] Tool of Helm we do really need to think about whether there are vectors and problems Within These charts.
00:16:16 [W] So last year. I had the pleasure of looking into this in more depth and I wrote a report that we called Uncharted territories The Untold
00:16:26 [W] looking into this in more depth and I wrote a report that we called Uncharted territories The Untold tale of Helm chart security and this was really exciting because
00:16:33 [W] you know, I wrote it but I worked with some people within snake who really really know the ecosystem and we were communicating with some maintainers and that sort of thing and
00:16:48 [W] With some people within snake who really really know the ecosystem and we were communicating with some maintainers and that sort of thing and just going back and forth
00:16:51 [W] Worth about these things and finding vulnerabilities and being surprised at what's there and it's just really exciting. I encourage you to read it and I'll have a link at the end of the presentation for you
00:17:04 [W] Mesh so what are we talking about here?
00:17:08 [W] We're going to talk specifically about vulnerabilities Within These images and a vulnerability for the purpose of this talk is an exploitable issue present in a container image and these vulnerabilities
00:17:25 [W] Divided into different classes you can kind of sort them by type and each of these types.
00:17:41 [W] They correspond roughly to cwe's which is a common web and numeration.
00:17:45 [W] It's a community developed list of software security problems, basically, so I'm not necessarily going to talk about an individual vulnerability.
00:17:55 [W] but the sorts of vulnerabilities that we see most often in these public Helm charts and
00:18:03 [W] what implications they have for the community, so
00:18:09 [W] just real quick, too.
00:18:19 [W] If images are interesting because you can kind of think of them as like building blocks or
00:18:22 [W] you know, you're putting together something and you may think that if I have in a vulnerable T in a given chart that it's in one place, but really if
00:18:37 [W] Just real quick, too.
00:18:38 [W] If images are interesting because you can kind of think of them as like building blocks or
00:18:39 [W] you know, you're putting together something and you may think that if I have in a vulnerable T in a given chart that it's in one place, but really if
00:18:40 [W] That you're using to build. This has a problem in it. And then you use that block in several places.
00:18:48 [W] The vulnerability is going to crop up.
00:18:49 [W] Multiple times. So this is good because you know, you're dealing with fewer unique problems. But if you eradicate or remediate a problem from a single location
00:19:05 [W] You're not necessarily taking care of the entire problem.
00:19:15 [W] It could be elsewhere in your image that sort of thing.
00:19:19 [W] And so I just wanted to put this up here.
00:19:21 [W] So it's clear that we're not double counting if that makes sense.
00:19:28 [W] Even though the vulnerabilities May match their present in multiple places. So let me show you the tools I used.
00:19:35 [W] To find these vulnerabilities first off.
00:19:41 [W] I used an open source Helm plug-in that was written and maintained by some of my teammates at sneak and you can use this to all you need is a free sneak account.
00:19:55 [W] Follow the instructions that are provided on the read me.
00:20:01 [W] I'll also have a link for this later in the presentation. If you are curious to test your own charts, so I have this plug-in and this plugin what it basically does is for a given chart it
00:20:14 [W] which images are being used and those images are you know, they have operating system dependencies and those are checked against a vulnerability database that sneak maintains and
00:20:30 [W] the plug-in gives back a bunch of information about the vulnerabilities present their severity where they're found how often they occur in the image or in the chart
00:20:46 [W] You're able to get a holistic a wide-ranging view of the security of this chart.
00:20:55 [W] So it's really interesting.
00:21:00 [W] I encourage you to try it out and to dig into the data that's provided by this plug-in. And again, it's open source.
00:21:05 [W] All right.
00:21:14 [W] So so I used the tool we talked about earlier this snyk plugin for Helm and I ran it against every chart that is available in the helm charts
00:21:21 [W] Within their stable folder and had some Python scripts that do this and it would go through and find all the stable charts and run this test right and
00:21:37 [W] And find all the stable charts and run this test right and load that up into a database got some data and took a look into it and see what we can see basically
00:21:47 [W] Could see basically now the following are some basic Helm chart landscape.
00:21:56 [W] just basic things we learned about what are in the public Helm charts and then I have some more specifics about the types of vulnerabilities and
00:22:12 [W] Most often that kind of thing. So General General thoughts is that most of the stable Helm charts are using an
00:22:28 [W] Image so all of these are they have the potential for vulnerabilities, right?
00:22:36 [W] And then the majority of the charts that use a Associated container image actually have an image with a high severity vulnerability and
00:22:49 [W] Probably one of the more surprising things that I learned during this report.
00:23:01 [W] It was higher than I thought it would be but we also found that there are a total of more than 30,000 operating system package dependencies.
00:23:15 [W] So we're really talking about a lot of different dependencies and in-toto.
00:23:20 [W] More than 40,000 vulnerabilities have been found now.
00:23:27 [W] These are unique vulnerabilities. So you see
00:23:31 [W] so to continue in that vein the sorry the average chart contains two images and all of the charts were like if you
00:23:48 [W] Is are used throughout the these public stable Helm charts, and the answer to that is around 416 for an average chart. You're going to have about 80 81 operating system package
00:24:04 [W] Per image. So if you're using two images you'll have twice that generally and
00:24:13 [W] An image could have anywhere between zero operating system dependencies to more than 500 and this will correspond to anywhere between nobl9 abilities and nearly a thousand.
00:24:29 [W] He's to more than 500 and this will correspond to anywhere between nobl9 abilities and nearly a thousand vulnerabilities per image.
00:24:34 [W] And those numbers can seem kind of intimidating or at least I thought so, but when we really look at it, it gets a little bit cheerier.
00:24:44 [W] And one thing I would say that surprised me is that we found that
00:24:48 [W] six images were could account for nearly half of or so six images accounted for nearly half of the vulnerable images that were used Within These charts
00:25:04 [W] Within These charts and that was really interesting to me.
00:25:08 [W] It's not to say that these images are the most insecure or the worst or anything like that.
00:25:16 [W] Don't don't take that away from it.
00:25:21 [W] What did just means is these images are used frequently and they do have some vulnerabilities and because of that those vulnerabilities crop up more frequently
00:25:31 [W] Perhaps more severe vulnerabilities found in more obscure images, so it's not necessarily to say that like these are bad offenders or anything like that.
00:25:47 [W] We just want to understand where the share of the vulnerabilities are found and what we can do about it. So to continue
00:25:57 [W] I also was able to break down the vulnerabilities by type which was really exciting and you'll see here. This is by type and by severity so the thing is
00:26:13 [W] I also was able to break down the vulnerabilities by type which was really exciting and you'll see here. This is by type and by severity so the thing is,
00:26:15 [W] You will find some pretty severe problems and they're really things that we're going to want to look at and consider how we might remediate or how
00:26:30 [W] Things that we're going to want to look at and consider how we might remediate or how we might further protect ourselves.
00:26:40 [W] So the highest in this chart would be a nine point eight for a particular access restriction bypass vulnerability and some credentials management stuff.
00:26:47 [W] All right.
00:26:47 [W] so
00:26:50 [W] I also wanted to point out this chart which is it'll show us the share each kind of vulnerability has within the landscape
00:27:06 [W] I have picked the top three to discuss just a little bit further and we'll be able to basically know what sorts of things you could do to protect yourself.
00:27:21 [W] That now so the first I want to talk about is an out-of-bounds vulnerability. Now, these are really interesting. They come in two flavors.
00:27:37 [W] They could either be out of bounds read or out of balance, right and in either case, it involves accessing data outside of the intended buffer and in this case
00:27:49 [W] Solve a lot of these issues and protect yourself with careful handling of input data, so it may include a whitelist system.
00:28:04 [W] You may check buffer length, so you can be sure you're not getting data. You're not expecting that sort of thing.
00:28:16 [W] Even if these are present there are things that you can do to help protect your project against this so of the two types out of bound right is more
00:28:32 [W] One because in addition to accessing data, you may find someone who is able to execute some code and the possibility of this malicious code execution
00:28:47 [W] Execute some code and the possibility of this malicious code execution.
00:28:51 [W] It makes this one worse than the out of bounds read. This vulnerability can be managed by checking your buffer size to make sure you don't have anything unexpected.
00:29:02 [W] You can also make sure that the destination buffer size is equal to source and truncate anything that doesn't make sense.
00:29:11 [W] If you do these sorts of things it it'll help you be more secure and you'll have to worry less about this kind of vulnerability.
00:29:22 [W] Alright, so after out of bounds, we're going to talk about access restriction bypass now access restriction bypass vulnerabilities are the second most common type that
00:29:38 [W] In our charts and an access restriction bypass can occur a number of different ways.
00:29:49 [W] You can think about it as like basically someone is able to get past a check of their identity in some way.
00:30:00 [W] So in real life, this may be like being at a club and instead of going through the front door and getting verified by the bouncer you found a side door propped open and got in the building that way so that's that's
00:30:08 [W] It's a real life kind of version of that. But you may also be able to do things that the Creator
00:30:23 [W] Open and got in the building that way so that's that's a real life kind of version of that.
00:30:25 [W] But you may also be able to do things that the Creator may not wanted to have given you that permission, so
00:30:27 [W] I had to have given you that permission.
00:30:28 [W] So maybe someone in the club is able to charge a drink to a tab that they should have access to that kind of thing for the real life example, so
00:30:41 [W] Finally the accountability might be bypassed.
00:30:50 [W] So what this means is that generally you're going to do some logging of user Behavior.
00:30:57 [W] And if you're intending to do this, but you don't someone could be doing malicious things and it's not getting recorded and it's flying under your radar.
00:31:05 [W] So when you approach these sorts of problems,
00:31:07 [W] do it on two fronts specification and enforcement specification involves being thoughtful and deliberate about how your permissions are assigned and enforcement occurs
00:31:23 [W] These sorts of problems do it on two fronts specification and enforcement specification involves being thoughtful and deliberate about how your permissions are assigned and
00:31:24 [W] Program fails to adhere to the guidelines that an admin sets.
00:31:35 [W] So if there's a known enforcement problem, you'd be well it would just serve you well to write some tests and run them and ensure that you're highly sensitive data
00:31:45 [W] Data, and you're highly sensitive functionality are protected a null pointer dereference occurs.
00:32:01 [W] When a pointer with a value null is treated as though it pointed to something valid and basically you can get a stack trace and people can potentially exploit it but maybe not and
00:32:07 [W] Just you can do a lot with like are handling and that sort of thing.
00:32:15 [W] So what this means for you is remediation fix the images choose images.
00:32:27 [W] Well, if you can use your tools with open eyes and consider all of your vectors, so what I mean by that is you may feel good about using Helm and you should
00:32:38 [W] As they have invested in security, right? But you want to use the tool with open eyes knowing that there could be problems and knowing that problems could come from different factors like the charts.
00:32:54 [W] Could be problems and knowing that problems could come from different factors like the charts.
00:32:56 [W] Also, I would say that you should test your charts and you can do so with the with the plug-in that I mentioned earlier.
00:33:06 [W] finally, I would say you can up your security game by using Helm best practices, which I will link later in the presentation migrated to helm three if you haven't already lose what you don't
00:33:22 [W] In case you basically you want to minimize the surface area that is vulnerable to attack if you're not using an image or a chart or if you don't really need it. Don't use it.
00:33:38 [W] And finally, I would say to consider your configuration.
00:33:44 [W] This is a big deal and all all graduated projects should use secure by default configurations, but you want to be thoughtful about this and be good
00:33:57 [W] Someone if you're unsure, so I do want to say thank you.
00:34:03 [W] Thank you for having me.
00:34:04 [W] It's been a pleasure.
00:34:07 [W] Thank you to the helm maintainers.
00:34:12 [W] You've done excellent work, and I'm so happy for you that you're project graduated.
00:34:14 [W] Thank you to the folks listed here who are on my team at sneak.
00:34:20 [W] You are very helpful and and great and thank you to growth Labs.
00:34:24 [W] is responsible for some of the images.
00:34:29 [W] shown in this
00:34:29 [W] In this talk, here's the link to the resources, and I hope you take a second to check it out. And finally, I just want to give you my contact info. I would love to hear from you and we'll go to
00:34:45 [W] Great. Thanks.
00:34:48 [W] I think we're live.
00:35:08 [W] I'm not totally sure. But hopefully that's true and you can hear me.
00:35:19 [W] I wanted to thank you all for coming today.
00:35:21 [W] And I just wanted to say thanks for coming to the session.
00:35:30 [W] It's very early here dark outside that kind of thing.
00:35:36 [W] There were a few questions in the chat that might be relevant for more of you one was a question about where my slides are and for that.
00:35:47 [W] You can go to my Twitter which is on a previous slide.
00:35:56 [W] I believe it's here.
00:35:59 [W] I don't know.
00:36:03 [W] It's Haley Denby haym Ellie.
00:36:04 [W] Whoever changed that the other question that might be relevant.
00:36:21 [W] two more folks in the audience involved questions about where Helm charts are hosted and about changes to helm in general and what
00:36:37 [W] Stations are to those changes or where they find their charts, etc. Etc. And
00:36:44 [W] I think regardless of any changes the thesis of the talk stays the same which is basically know what you're using test it.
00:36:58 [W] However, you can and make an informed decision as to whether your risk tolerance and what you're seeing through your tests is a good match and
00:37:12 [W] basic principle but it's something that will take you far and that's going to be a good outlook for you regardless of how the project changes so
00:37:28 [W] Going to be a good outlook for you regardless of how the project changes so that was really the only one
00:37:35 [W] Really?
00:37:35 [W] The only one the only ones I saw that might be relevant and there's also a question about Helm sneak and it's a good option. If you want to test your images, I imagine it's not the only
00:37:46 [W] and I'd encourage folks to explore their tools see which one works right for them and
00:37:57 [W] And yeah, anyway, thank you so much for coming.
00:38:03 [W] I really appreciate it.
00:38:05 [W] I'd love to hear from you either on Twitter or on my Dev dot to page.
00:38:13 [W] I'm fine.
00:38:14 [W] I really like that community.
00:38:18 [W] So please feel free to reach out and I hope you all have had a really excellent kuchen regardless of the crazy circumstances that we find ourselves in and just think yugabyte.
00:38:28 [W] For letting me be part of that.
00:38:33 [W] There is a kook on slack Channel where I'll be hanging out for a little bit if you want some more information and I believe they're pushing out
00:38:44 [W] Now it's two coupon seccomp.
