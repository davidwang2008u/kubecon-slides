Using Kubernetes Secrets in GitOps Workflows Securely: RFPR-6057 - events@cncf.io - Thursday, August 20, 2020 11:59 AM - 150 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:05:53 [W] Hi everyone, and welcome to kubernative secrets and gitops workflows.
00:05:59 [W] I'm Seth and I'll be joined by my colleague Alex shortly.
00:06:00 [W] This isn't the first time that Alex and I have given a talk together. But before we dive in I want to take a step back and talk about the problem.
00:06:10 [W] We have a problem and that problem is best summarized in three simple words Kuma cuttle create secret.
00:06:21 [W] That's right.
00:06:24 [W] Alex and I are talking about kubernative Secrets again.
00:06:26 [W] But this time we're not talking about their security properties, but rather focusing on the secrets management.
00:06:30 [W] Specifically, how do you get your secrets in and out of kubernative?
00:06:36 [W] Why is Kudo creates secret such a problem? Well, it leaves a lot of questions unanswered without investment in other tooling and Technology like who created that secret.
00:06:50 [W] When did they create? It was the value updated or is this a brand-new secret? Why did they do it and who approved it?
00:06:57 [W] More so was the secret even tested which application version or versions is it known to work with.
00:07:11 [W] How do we roll back in the event of failure? And ultimately, what is the source of Truth for this Secret?
00:07:14 [W] And that's really what we want to zoom in on today in this talk.
00:07:18 [W] Lot of questions unanswered without investment in other tooling and Technology like who created that secret.
00:07:22 [W] When did they create? It was the value updated or is this a brand-new secret?
00:07:23 [W] Why did they do it and who approved it more? So was the secret even tested which application version or versions is it known to work with?
00:07:26 [W] How do we roll back in the event of failure?
00:07:27 [W] And ultimately, what is the source of Truth for this Secret?
00:07:29 [W] That's really what we want to zoom in on today in this talk.
00:07:30 [W] Alex and I are going to attempt to answer all of those questions by focusing on just one.
00:07:32 [W] What is the source of Truth for your kubernative secrets now, let's switch gears for a second.
00:07:33 [W] kubernative gitops uses git repository as the source of Truth for your kubernative cluster configurations, many of you may already be using gitops to manage your kubernative workflows and manifest but either intentionally or unintentionally
00:07:43 [W] What is the source of Truth for your kubernative secrets?
00:07:44 [W] Now let's switch gears for a second.
00:07:44 [W] kubernative gitops uses git repositories as the source of Truth for your kubernative cluster configurations, many of you may already be using gitops to manage your kubernative workflows and manifest but either intentionally or unintentionally
00:07:46 [W] Enables Version Control history peer reviewing and easy rollbacks all through versioning in get and best of all we can keep our application code right alongside our kubernative manifest,
00:08:00 [W] gather and maintain a history
00:08:03 [W] so this begs the question that if our code is already in get and our kubernative manifests are already in get well, why not put our secrets in get
00:08:15 [W] And now I know you might be thinking to yourself.
00:08:18 [W] You're probably thinking that's crazy.
00:08:22 [W] You've given so many talks before Seth.
00:08:26 [W] Why would you ever tell us to What plaintext secrets in a git repository?
00:08:27 [W] This is just a disaster waiting to happen.
00:08:29 [W] And you're right, but nobody said anything about plaintext secrets and that's really the core of our talk here. Today.
00:08:40 [W] We're going to be focusing on workflows that enable you to use gitops without exposing the plaintext secrets inside your repositories.
00:08:48 [W] And then before we jump into the meat of it, I just want to address one issue.
00:08:50 [W] You might be thinking if we don't use get this talk is totally useless for me and that's simply not the case while Alex and I are using git is the example here. These concepts are not
00:09:00 [W] Vic to get they would work with SVN or Mercurial or performance or any other source control technology that you have today.
00:09:11 [W] So when we say get just replace that with whatever you're using if it's not get today, the core of our design is rooted in asymmetric cryptography.
00:09:21 [W] So let's have a quick overview of how asymmetric crypto Works before diving in even more.
00:09:23 [W] And we don't use get this talk is totally useless for me.
00:09:31 [W] And that's simply not the case while Alex and I are using git is the example here. These concepts are not specific to get they would work with SVN or Mercurial or performance or any other source control technology that you have today.
00:09:32 [W] we say get just replace that with whatever you're using if it's not get today.
00:09:34 [W] The core of our design is rooted in asymmetric cryptography.
00:09:36 [W] So let's have a quick overview of how asymmetric crypto Works before diving in even more.
00:09:36 [W] With asymmetric cryptography, we generate an asymmetric key and that asymmetric key has two parts a public part and a private part.
00:09:39 [W] Data that is encrypted with the public key can only be decrypted with the private key.
00:09:45 [W] So in this example we have Joe is retrieving Alice's public key.
00:09:50 [W] He's using Alex Alice's public key material to encrypt a message and then giving that ciphertext to Alice Alice then uses her private key portion to decrypt that Cipher text and receive the plain text which if everything
00:10:00 [W] Data that is encrypted with the public key can only be decrypted with the private key.
00:10:02 [W] So in this example we have Joe is retrieving Alice's public key.
00:10:02 [W] He's using Alex Alice's public key material to encrypt a message and then giving that ciphertext to Alice Alice then uses her private key portion to decrypt that Cipher text and receive the plain text which if everything
00:10:04 [W] And we created unlike symmetric cryptography asymmetric cryptography requires the private key to decrypt public key to encrypt information and the public key to decrypt private key encrypted information.
00:10:18 [W] This means that even though Alice's key is public when Joe and Crips a message using that public key that same key cannot be used to decrypt that data decryption is only possible using the private key
00:10:31 [W] Our secure exchange hinges on a common format or standard for the serialization of these encrypted or signed messages.
00:10:40 [W] We chose the Json web encryption format or jwe, but other message standards might work as well.
00:10:55 [W] We pick jwe because there's an ecosystem of tools including the popular go Jose library for kubernative that revolve around jwe. There's no reason you couldn't use a different algorithm or standard, but that's what we're focusing on here today.
00:11:03 [W] Our wedding corruption format or jwe, but other message standards might work as well.
00:11:05 [W] We pick jwe because there's an ecosystem of tools including the popular go Jose library for kubernative that revolve around jwe.
00:11:05 [W] There's no reason you couldn't use a different algorithm or standard but that's what we're focusing on here today. So just like earlier we said, you know, if you're using SVN replace get with SVN when we say it the same thing is true with jwe. If you have a different message standard that
00:11:12 [W] I said, you know if you're using SVN replace get with SVN when we say it the same thing is true with jwe. If you have a different message standard that you'd prefer feel free to drop that in again. These principles apply largely regardless of the technology choice.
00:11:18 [W] You might be asking yourself. Why even use jwe at all?
00:11:27 [W] Why not just use a key management service directly to encrypt and decrypt this data.
00:11:29 [W] Well, there's two main reasons the first and a little bit more practical.
00:11:32 [W] is that kubernative Secrets can be up to one megabyte in size but most Key Management Systems restrict data to 64 kilobytes in size. So by talking directly to the KMS, we would be severely limiting the size of kubernative Secrets objects.
00:11:47 [W] On the security front moreover giving the secret directly to a key management system may be undesirable or not available in certain situations depending on your jurisdiction or organizational policies.
00:12:02 [W] So depending on your trust model, it may not be acceptable to give the secret directly to a key management system by using the envelope the jwe envelope.
00:12:12 [W] We are giving an encryption key to the KMS not the secret itself. So if someone were to compromise that communication webassembly
00:12:16 [W] Never actually sending the secret over the network.
00:12:19 [W] In this workflow, we're going to be talking about three unique people now in a small organization like a startup one person might actually perform all of these roles, but in a larger organization like an Enterprise, these are usually separate teams and separate
00:12:36 [W] An encryption key to the KMS not the secret itself. So if someone were to compromise that communication we're never actually sending the secret over the network.
00:12:37 [W] In this workflow, we're going to be talking about three unique people now in a small organization like a startup one person might actually perform all of these roles, but in a larger organization like an Enterprise, these are usually separate teams and separate
00:12:40 [W] The first Persona is the key admin or key administrator. This person is responsible for creating and managing cryptographic keys.
00:12:48 [W] Usually in some Central Key Management System. There are unlikely to be familiar with kubernative tools and Technologies.
00:12:52 [W] Our next Persona is the secret admin the secret.
00:12:58 [W] Admin is responsible for managing sensitive data, like passwords and API Keys.
00:13:06 [W] They're also unlikely to be familiar with kubernetes or the kubernative API at our third Persona is the cluster admin in the cluster.
00:13:13 [W] Admin is responsible for deploying managing and configuring the kubernative cluster and any workloads that run on it. Hopefully, they are familiar with kubernetes tools since that's really what they do every day.
00:13:23 [W] Just like we have 3 personas.
00:13:30 [W] personas. There are actually three steps to this process that we described here today.
00:13:30 [W] In the first step the key admin creates an asymmetric key pair usually in a key management system.
00:13:40 [W] they then download and extract the public key and put it in a git repository or give it to someone else to put in the git repository.
00:13:50 [W] This key will be used to encrypt the secrets.
00:13:54 [W] But remember this is the public key portion. The secret is encrypted with the public key, but it can only be decrypted using the private key, which is still stored in the key management system.
00:14:01 [W] Train or approvals through out this workflow, but we're just showing kind of the Bare Bones most basic steps that you may need to take.
00:14:18 [W] Next our secret admin uses that public key in the git repository to create a jwe envelope with the secret contents.
00:14:35 [W] This envelope becomes the value of the kubernative secret file or the value that goes into the kubernative Manifest again, just like before depending on your setup. You can add more customization points like automation ci/cd.
00:14:44 [W] approvals
00:14:46 [W] and then finally our cluster administrator pulls the kubernative secret file or the Manifest that contains the kubernative secret with the encrypted secret from the repository and pushes it to the kubernative.
00:15:02 [W] say Pi server. The API server leverages a mutating webhook, which decrypts the secret before storing in an STD now kubernative pods and services, which have proper permissions to access the plaintext secret are able to
00:15:16 [W] the other kubernative API
00:15:18 [W] Let's take a look at what this looks like in a little bit more of a flow diagram.
00:15:24 [W] There's a lot of moving Parts the key piece here is actually the mutating web hook the mutating webhook receives the encrypted jwe and decrypts it before writing it to Ed CD all of this happens inside of kubernative
00:15:37 [W] The never needs to see the plaintext secret.
00:15:41 [W] Now you might be thinking to yourself Seth.
00:15:51 [W] Didn't you and Alex give an entire talk about storing secrets and plain text and NCD and to that I would say yes, and they'll be a link in the show notes at the end.
00:15:55 [W] We don't advocate for storing secrets in plain text and add CD you should use application layer encryption with a KMS plug-in, but that's a totally different topic and a talk all on its own.
00:16:03 [W] So Alex, why don't you show us a little bit?
00:16:08 [W] What about what this might look like in real life.
00:16:08 [W] Hey everyone. I'm Seth.
00:24:01 [W] Hi everyone.
00:24:01 [W] I'm Alex.
00:24:12 [W] Looks like we have a few questions in the queue a but feel free to jump some questions in the Q&A and we will try to answer them to the best of our ability.
00:24:17 [W] So the first question says I feel like sometimes there's a chicken and egg scenario where I'm not sure if an encryption key for kubernative a secret should be kept in a vault like hashicorp.
00:24:25 [W] Hey everyone, I'm Seth.
00:24:39 [W] Hi everyone.
00:24:39 [W] I'm Alex.
00:24:41 [W] Looks like we have a few questions in the queue a but feel free to jump some questions in the Q&A and we will try to answer them to the best of our ability.
00:24:43 [W] So the first question says I feel like sometimes there's a chicken and egg scenario where I'm not sure if an encryption key for kubernative secret should be kept in a vault like hashicorp volt for this kubernative.
00:24:46 [W] Should I have a whole separate key management system dedicated to a particular name space Alex.
00:24:47 [W] What do you what are your thoughts on separation of keys?
00:24:48 [W] Well, I think it's a very actually it's a very interesting question.
00:24:53 [W] I think ultimately ultimately this is comes down to this for secret problem the term that Seth coined at the end of the day no matter what you do, you will end up with some sort of initial
00:25:08 [W] No matter what you do, you will end up with some sort of initial secret initial key that on top of which you bootstrap the rest of your keys and encryption decryption.
00:25:20 [W] So I think I would be fairly comfortable was any approach.
00:25:26 [W] We as long as the initial first secret for secret is stored in some sort of Hardware device for example HSM or TPM.
00:25:35 [W] As long as we can trace that initial pass initial key to the hardware device and you have good assurances around how the rest of the keys of bootstrapped.
00:25:50 [W] I think any solution would work.
00:25:56 [W] You know, it really depends on sort of you are specific six specific requirements, but that's what I would watch out for a look for that first secret like and where does it come from because every all problems typically
00:26:06 [W] Art from attackers figuring out how to get that first Secret.
00:26:09 [W] Thanks Alex. So the next question is what do you think about the sealed Secrets project? I'm assuming that's the bit Nami.
00:26:21 [W] I'll add my intake and then Alex if you want to add more I think the key difference is an art architecture. We really wanted to assume that the person who was generating these passwords or certificates in these third-party systems didn't
00:26:32 [W] With kubernetes and the same would be true of the the key administrator, right?
00:26:45 [W] So when we were going through the personas we talk pretty heavily about you know, this person might not use kubernative is they might not be familiar with the kubernative API, whereas the sealed Secrets project basically automate it's the those first two personas that we
00:26:53 [W] These itself so it does require that the person creating the secrets also has familiarity with kubernetes and we just didn't want to push that requirement on to people but largely they use like the same, you know, asymmetric cryptography.
00:27:09 [W] It's really just about how is your organization set up? And where do your expertise lie?
00:27:13 [W] Yeah, absolutely.
00:27:16 [W] I would just only add I think I think there is a slight advantage of what Seth and I are proposing is because bit not me relies on creating a custom object for storing
00:27:30 [W] Just absolutely nothing wrong with that and there are process of doing that.
00:27:46 [W] but what we demonstrated is just basically using plain kubernative secret. So your existing application can be completely unaware of all this additional Machinery that was introduced.
00:27:50 [W] So that's I think the entry to production would be would be lower with just using JW encryption and external commands, but we love that project.
00:28:00 [W] So so the idea is absolutely ideas that sort of the idea the process what it will get you are very similar.
00:28:15 [W] So next question is how do you ensure that the secret admit and crepes with the correct public key, for example, how do you ensure that? This isn't an attacker that has replaced the public key with their own so that they can easily decrypt the secret that the
00:28:32 [W] We encrypted with the attackers key Alex.
00:28:38 [W] Do you want to write right? So this is the so that yeah, this is this is a good point. I think what needs to happen here. Is that basically the secret secret administrator.
00:28:51 [W] I think what needs to happen here is that basically the secret secret administrator the sorry the secret administrator and the key administrators.
00:28:57 [W] are we need to do another sort of handshake and basically the secret the key administrative would need to ensure that they can administer is aware of the hash of the public key that they need to use.
00:29:10 [W] So so yeah, that's a very very good point. There are also some you know, obviously the facility
00:29:16 [W] is available like in a system like GitHub where you can you can apply Access Control lists, so that attackers, you know can just simply replace the public key without compromising gitops security system, but absolutely right.
00:29:29 [W] It's basically like was using any public key cryptography everything comes down to basically trust that you can place in the public key.
00:29:37 [W] yeah, there is a maybe we should have made it more clear in the presentation that in there's a little bit more.
00:29:44 [W] Interaction between the key administrative.
00:29:55 [W] Yeah, and then there's probably some level of like establish trust there. Right? Like they are communicating over a secure work Channel or they know one another this is this is part of a larger classification of attack called in band key negotiation and it applies to public
00:30:03 [W] Symmetric cryptography or asymmetric and symmetric cryptography where if you you know, we always worry about an attacker decrypting a secret, but what if they could just encrypt a secret with her own key and then somehow get it into our system.
00:30:19 [W] So yeah, definitely having some level of trust particularly using the signatures of the keys and having some out-of-band negotiation.
00:30:27 [W] Cool, Alex. Do you want to read off the next one?
00:30:31 [W] Yep.
00:30:35 [W] Okay.
00:30:42 [W] I don't understand how customer.
00:30:47 [W] I'm not sure.
00:30:51 [W] I understand that second question, but I don't understand how customized by example Helm chart to be able to use it. Ideally.
00:30:59 [W] how would an apple and then question number six in question number seven are the same it says I understand how you encrypted store passwords inside get and secret but I don't understand how to customize by example like using a Helm chart to be able to use
00:31:14 [W] I think it's really like, how do you get started with this?
00:31:19 [W] Right?
00:31:28 [W] So as long as actually I'm not too familiar with Helm unfortunately, but I'm going to assume that somehow Helm can consume a kubernative secret and if it is if it is true then then you already done our solution
00:31:34 [W] Require you to customize your existing applications. If you are using a secret today, you can continue your applications.
00:31:42 [W] Do not need to change in any way shape or form.
00:31:44 [W] Assuming I understood your question because I'm not familiar with Helm operations. So the next question is how do you support key rotation in this model?
00:31:55 [W] Right. So so this is the the key rotation and this model is actually
00:32:06 [W] So so there are two components to this. So so first component is you need to have a process to basically
00:32:17 [W] so I think
00:32:22 [W] the challenge here is around basically the
00:32:28 [W] ensuring that the timing is right between your change your password or rotate your secret and basically the secret being developed delivered at the right time to the applications so that you basically
00:32:44 [W] Don't have the opportunity.
00:32:50 [W] You don't have the situation where you rotated your secret on the system, but the application is still using the old all secret.
00:32:58 [W] So the the idea and this requires a little bit more like a question, we won't be able to cover this in detail. But we believe that the correct approach here is to basically provide sort of a backup secret.
00:33:10 [W] Because it's very difficult to time everything to the point where application just starts using the right Secret at the right time.
00:33:25 [W] We're basically we're looking at the ideas where we would send sort of the old secret and the new secret through you know, you get workflow and application.
00:33:34 [W] Basically we try if you know, like if the old secret fails then we just basically try the new one.
00:33:36 [W] So that's sort of our current thinking about this but it is a it is not a simple problem and there's also issues around like how would they Secrets secret admin basically initiate the change so which
00:33:51 [W] Bands on the kind of the system they using etcetera but but the idea of overlapping Secrets, I think that's kind of what we would recommend today.
00:34:00 [W] Cool, Alex. Do you wanna read off the next one? Is it number 11?
00:34:09 [W] Yeah, how how would you City secret manager playing this both cheeky based and ochre or GC scenario things?
00:34:19 [W] So, yeah, you can just basically replace.
00:34:25 [W] So so yeah, I mean gcp secret is gcp Secrets is another way to externalize your secrets configuration.
00:34:39 [W] So I think the decision you would have to make for yourself as if you are comfortable with if you are comfortable with externalizing Secrets manager, like basically not storing secrets and get like basically you have
00:34:49 [W] Your to of the to the secret and basically essentially if you are interested in using gcp Secrets, I think the right approach is to use the CSI CSI driver which into like there is a
00:35:05 [W] To the for the slides, but basically you can easily configure your cluster to pull the secret from GC GC P secrets and that plays nicely with gitops gitops mentality because
00:35:20 [W] Everything in git repository is just simply that the actual secret is externalized.
00:35:35 [W] So essentially you still kind of achieving your goals of having you get as a as a source of truth, but the approach would be different. You would need to look at CSI driver.
00:35:42 [W] That would be my recommendation.
00:35:43 [W] Yeah, I was just time in like there are some architecture differences between Google secret manager and kubernative secrets. The biggest of which is the data format and the versioning so by default kubernative secrets are not versioned whereas you can manage your secrets are
00:35:59 [W] Secrets are key value pairs.
00:36:10 [W] Whereas Google cgroup manager cgroup SAR, just a slice of bites like arbitrary characters. So there are some architectural differences but to Alex's fight about like externalization if you choose to use Google secret manager
00:36:17 [W] Not use kubernative secrets and then you would either consume them directly from your application using like a library or an SDK or you would Leverage The CSI Trevor, which I posted a link to in the answer to the question that basically Maps the secrets from
00:36:32 [W] All system or an in-memory virtual file system so that your applications can just read their secrets from disk.
00:36:39 [W] Next question is what are the pros and cons of JW E versus Mozilla stops?
00:36:48 [W] I don't know Alex.
00:36:50 [W] I will need to look it up.
00:36:53 [W] It's trollee.
00:36:54 [W] Yeah, I don't know.
00:36:57 [W] I'm not familiar with Mozilla salts. We did explore multiple formats.
00:37:00 [W] We look at various encryption civilization standards.
00:37:08 [W] And essentially the reason we chose jwe is because GWT is extensively used in kubenetes.
00:37:10 [W] With a kubenetes itself, like for example, we use it for encrypting to Arkansas and sterilizing tokens.
00:37:19 [W] So it's already a LinkedIn is basically a lot of kubenetes developers already familiar with this framework and it has nice goal language support.
00:37:32 [W] that was the primary reason. I think if you prefer if you have strong preference for other serialization formats, it will be pretty straightforward to sort of just swap them out and the solution so we are not particularly tied to any particular format.
00:37:41 [W] So the next question is why not just use Vault instead.
00:37:49 [W] I can take that I guess is this two ways I could read this question.
00:38:01 [W] Press already familiar with this framework and it has nice goal language support.
00:38:05 [W] So that was the primary reason. I think if you prefer if you have strong preference for other serialization formats, it will be pretty straightforward to sort of just swap them out and the solution so we are not particularly tied to any particular format.
00:38:06 [W] So the next question is why not just use Vault instead. I can take that I guess is this two ways I could read this question.
00:38:08 [W] The first is why not just use Vault to store the secrets directly and to that. I think that the answer is very similar to the Google cgroup manager question that we just answered which is you can totally do that. But there are some architectural differences that CSI driver that I
00:38:12 [W] There are some architectural differences that CSI driver that I linked to in. The other question is actually the same interface by which you could consume hashicorp volt secrets from inside kubernative.
00:38:16 [W] He's and you could also call the API directly another way I could interpret this question is why not use vaults Transit back end, which is the key management system built into the vault.
00:38:30 [W] Like Alex said in his person like we're using clock PMS is an example, but you can use any key management system that supports asymmetric.
00:38:33 [W] Geography so like there's no reason you couldn't use vaults Transit back-end to also do this like signing operations. We just chose to use clock PMS because it's what we're familiar with.
00:38:44 [W] Do you see any problems when running of the web hook inside the same cluster where decryption is happening?
00:39:01 [W] It's an interesting question.
00:39:07 [W] I'm not sure.
00:39:21 [W] I I think I think I think at the the question depends on I think the answer depends on again. This comes down to the first secret problem.
00:39:29 [W] How would basically how would the web hook identikit the cloud came as so obviously you need some sort of token or some other mechanism for for webhook to authenticate o'clock, Ms.
00:39:42 [W] Do you see any problems when running of the web hook inside the same cluster where decryption is happening?
00:39:43 [W] It's an interesting question.
00:39:44 [W] I'm not sure.
00:39:45 [W] I I think I think I think at the the question depends on I think the answer depends on again. This comes down to the first secret problem.
00:39:46 [W] How would basically how would the web hook?
00:39:46 [W] I think decayed the clock a mess.
00:39:48 [W] so obviously you need some sort of token or some other mechanism for for webhook to authenticate o'clock, Ms. Or any other kind of system for that matter.
00:39:51 [W] And that may represent a problem like you for example, if you dropped a secret on the disk and attacker managed to compromise the disc of the control plane of kubenetes control plane.
00:39:57 [W] We're presumably running that webhook then it is a problem.
00:40:04 [W] So I think it is important to look at the the authentication mechanism between the club between the web hook and Cloud KMS and I alluded in my presentation. I alluded to the fact that
00:40:13 [W] We are recommending to you is underlying security mechanisms provided by your for example cloud provider or you are virtualization provider. Like for example, I showed that we could use service account which is exposed by the hypervisor
00:40:28 [W] And that may represent a problem like you for example, if you dropped a secret on the disk and attacker managed to compromise the disc of the control plane of kubenetes control plane.
00:40:31 [W] We're presumably running that webhook then it is a problem.
00:40:33 [W] So I think it is important to look at the the authentication mechanism between the club between the web hook and Cloud KMS and I alluded in my presentation. I alluded to the fact that
00:40:34 [W] That we are recommending to use underlying security mechanisms provided by your for example cloud provider or you are virtualization provider. Like for example, I showed that we could use a service account which is exposed
00:40:38 [W] to authenticate Applause Kim s is only available in memory and it is only available when the VM is running in other words, like attacker would actually need to compromise complete gain root access on the on the control plane which by that
00:40:52 [W] The game is over. Anyway, so in other words the it's important to consider how you set up with education between the web program Cloud KMS, and if you manage to ensure that trust is based either in Hardware.
00:41:08 [W] Or at least it is externalize to the underlying platform like verse hypervisor. Then I think it is safe to do. So. Otherwise certainly there are some risks involved in in writing them and basically on the same on the same box.
00:41:25 [W] So I think we're out of time. I'll defer to the moderators if we have time for one more knot.
00:41:33 [W] They said sure okay.
00:41:40 [W] So in this scenario described as a number 17 the surgery discover, the secret is available unencrypted on the cluster which is a weaker position compared to the sidecar and it container approach to decrypting at runtime
00:41:51 [W] contrast this over runtime decryption, which is preferred so
00:41:57 [W] The the point we're making is that in this world.
00:42:03 [W] The secret is stored in plain text in at CD.
00:42:12 [W] So what we would recommend is that you go watch the talk that Alex and I have linked on the slide on the screen where there's actually a solution by which we can do application layer encryption.
00:42:18 [W] So the secrets are never in plain text and at Sea and in that case, the only difference is we're like who owns the secret does the application on the secret in which case you want to do runtime decryption or does kubernative is on the secret and do you trust the
00:42:27 [W] Red is a pi server at which point the kubernative API server runs the secret and this presentation because we're doing I don't know.
00:42:36 [W] I'll call it schedule time decryption the kubernative API server owns the secret and you're relying on like are back and the apples to make sure that only the right pods and services have access to it.
00:42:50 [W] Whereas if you do runtime decryption, you're basically saying that the application or the poddisruptionbudgets something like workloads Identity or potting to authenticate and provide that
00:42:57 [W] At first secret to access the rest of the secrets Alex you have anything to add?
00:43:03 [W] No.
00:43:04 [W] Absolutely.
00:43:04 [W] Yeah.
00:43:05 [W] No you answer that perfectly. Well perfectly correctly.
00:43:08 [W] I think architecture Ali if you think about the I believe the approach suggests then the question is to to delay decryption up until the delay delay the last Point possible basically keep the secret encryption
00:43:23 [W] Until the last basically millisecond before it actually is needed.
00:43:30 [W] So we definitely think that's that that's a good approach the probate and if you are willing to change your applications and basically introduced a site basically take the web hook like the going to the GitHub take the MacBook and basically
00:43:42 [W] Create a sidecar for out of this like using the same logic if you're willing to make that change to the application, then that would have better security property.
00:43:51 [W] I think because of the delayed because you basically delaying the encryption key of the last the last possible Point.
00:43:59 [W] Yeah.
00:44:02 [W] I think I think what we've just kind of seen from customers at the the people writing the code might be different than the people who are writing the Pod spec definition which might be different than the ci/cd system that's ci/cd system. That's deploying it. That's why
00:44:11 [W] Why we focused a lot on personas to try to really iron out exactly what we're talking about.
00:44:17 [W] And who does what, you know in a world where your the kubernative admin and the cluster admin and the software developer then by all means like run.
00:44:24 [W] this is a sidecar. But if you imagine that you're at a larger or or talk directly to the secret manager, if you're in a large organization where you know, your job is to just write code and you don't even know that it's being deployed on kubernative use, right. You're just writing Ruby code or some go code and eventually gets
00:44:38 [W] Plan on kubernetes.
00:44:41 [W] It's a lot to ask that software developer to understand that complexity and you know, right all of the gamelan configuration, whereas, you know this approach that we've outlined here kind of meets in the middle of like security and developer experience.
00:44:55 [W] Cool.
00:45:00 [W] Well, I think that's all the time that we have for questions.
00:45:02 [W] Thank you all so much and thank you.
