Cloudstate—Towards Stateful Serverless: PLNZ-4418 - events@cncf.io - Wednesday, August 19, 2020 6:48 AM - 65 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:06:46 [W] Hello, everyone.
00:06:49 [W] Welcome to this session title.
00:06:50 [W] Cloud straight towards State.
00:12:11 [W] Hello everyone.
00:12:13 [W] Welcome to this session type little Cloud State towards stateful serverless.
00:12:25 [W] I'm gonna spoon are from the CTO and the at like bed and I'm joined by James Roper senior architect at Lightman and we will try to give you a little glimpse into what we believe will be the future of the cloud
00:12:32 [W] Come sit here and act like bed and I'm joined by James Roper senior architect at Lightman and we will try to give you a little glimpse into what we believe will be the future of the cloud at least part of
00:12:34 [W] The future of the cloud and through through the serverless experience.
00:12:39 [W] See, so I'm just want to start by saying that a lot of people talk about serverless + S the same thing as function as a service and but for me, that's not really true.
00:12:54 [W] I think certain flaws I think function is the service fast in short.
00:13:07 [W] a really good first step was it was really groundbreaking when they when it came about and it's really been showing the way showing what's possible but it's only the first step on a long journey towards this, you know neuvector.
00:13:12 [W] Vana is this amazing cloudbees perience that we all hope to get to one day for me?
00:13:22 [W] So serverless is really all about an experience an experience for developer for operations for deployment.
00:13:31 [W] that is completely new, you know, in order the one that sort of removes as much as possible from the essence and moving it away to the runtime to the back end. So you as a developer who we as developers can focus on
00:13:41 [W] only the essence
00:13:43 [W] You know and what I would you know what I would like in my sort of vision Grand Vision for the future for the future of the cloud I would like to build this Earth to build any type of application builder for general-purpose application full applications in this new
00:14:00 [W] Well functions and services tackle.
00:14:09 [W] He's currently sort of tackling one subset of the use cases in a non trivial application.
00:14:12 [W] Sometimes a large portion sometimes a small portion but it's just really hard hard to tackle the, you know, everything that we need in a non-trivial real world application in just function as a service. So we
00:14:24 [W] Something more. So the question is then what is the missing piece? What is missing here?
00:14:30 [W] And you know, I believe that it's state.
00:14:36 [W] It's you know, it's good ways of working with State solid models for abstracting overstate to essentially, you know, having good ways of abstract member states for the runtime can manage it for us effectively.
00:14:49 [W] And so are some of the technical requirements that I see that we need in such sort of new way of writing any type of application in this new experience is first report from
00:15:05 [W] For long-lived addressable components components that can be virtual as well.
00:15:16 [W] It means that we have stable reference is stable addresses, but they can still make it still move move around maintaining their data Integrity in their state while the adversary remain stable.
00:15:26 [W] So even if they relocated, you know passivated activated you can still trust the reference talking to it and don't want don't need to worry if it fails and is responsible.
00:15:36 [W] Vaughn etcetera, we need a wider range of options for of tools in the toolbox.
00:15:45 [W] So essentially for distributed coordination and communication, you know pub/sub like we have in fractions of service is great, but it's only one way of communicating. I believe we also need support for point-to-point for broadcast and and
00:15:57 [W] Looks like you like modeling orchestration or workflows you using things like Saga of process managers Etc.
00:16:05 [W] We also need you know options for managing distributor state to reliably at scale, you know, and and not just having one size fits all not saying that everything is to be strong the consistence or everything is eventually consistent but having, you know options ranging from
00:16:20 [W] ensure through call so consistency so you can fit fit served at the weakest model that gives the gets the job done, you know, because if you add layers of safety of guarantees on top
00:16:35 [W] That you actually don't need that wastrel, you know, so you actually want the minimum guarantees that gets the job done that liberates the runtime to do even more things in terms of scale and availability.
00:16:47 [W] Okay.
00:16:54 [W] We also want intelligent adaptive placement of objects of stage will function seems like sharding having a physical colocation of state and processing as well as sticky routing.
00:17:01 [W] These are very important things in order to manage data at scale performance Lea scale.
00:17:07 [W] You know function as a service is really good at abstracting / / communication.
00:17:17 [W] So you have you have to use the function and you have your sort of message in you need to worry how it ended up there.
00:17:20 [W] It's just is it sort of ends up on your mailbox or EQ to your function and and passed into your into you for processing and the same thing message out you only use your own Limitless remit the event and
00:17:33 [W] Don't need to worry about how it work.
00:17:38 [W] We'll end up who's going to pick it up the cetera and the Mechanics for doing so well defined interfaces for messaging and messy chakra event. Dean independent back down.
00:17:45 [W] No only just work towards those but the problem is that you know, sometimes you need to manage state. But if you talk to the to the data to the database directly, you know, you sort of moving a lot of these operational concerns
00:17:59 [W] You just work towards those but the problem is that you know, sometimes you need to manage state. But if you talk to the to the data to the database directly, you know, you sort of moving a lot of these operational concerns the things
00:18:00 [W] Just a service or portworx serverless rather right?
00:18:03 [W] I will say it's meant to manage for you.
00:18:09 [W] Is it supposed to abstract away all these hard things but by managing, you know, so data access and usage from within your function yourself you serve eliminates that option from from the table
00:18:21 [W] Usage from within your function yourself, you serve eliminates that option from from the table essentially and the problem is that now the function, you know, sort of black box to the runtime if the function
00:18:28 [W] Did miss that now the function, you know, sort of black box to the runtime if the function managed to State its himself the function can't mr. See and understand what's called.
00:18:37 [W] what's really going going on here and it's a it's a fact that sort of unconstrained database access which sounds like good thing and then willpower is good. Right? It's actually not always the case, but it does it makes it really hard for the runtime to automate operations on behalf of the function,
00:18:48 [W] It's a fact that sort of unconstrained database axis, which sounds like good thing and then willpower is good. Right?
00:18:50 [W] It's actually not always the case, but it does it makes it really hard for the runtime to automate operations on behalf of the function.
00:18:52 [W] So it's really hard to understand sort of the intention of each axis for example is the operation to read or is it a right can it be cached can consistent to be relaxed or or strong consistency always needed, you know can operations proceed during
00:19:03 [W] Store or strong consistency always needed, you know can operations proceed during partitions and failures Etc.
00:19:09 [W] Right? It's understand if they had runtime understands these things can make intelligent sort of decisions to more effectively and also, you know see broadly across all of your entities and making and making things, you know collectively
00:19:21 [W] And you know as T is Timothy Keller is you know once said that freedom is not so much the absence of this of restrictions as finding the right restrictions the liberating restrictions.
00:19:37 [W] So the question is then what are those liberating restrictions, you know, and I said the function service is really good abstract dig over communication. We have messaging a message out as we just talked about.
00:19:51 [W] The question is and the question. We asked ourselves that life meant was is it possible to abstract overstate the same way that functions the service abstracts over communication.
00:20:04 [W] So instead of just message in the message out.
00:20:07 [W] out. You also have stay clean and stay doused. So it's sort of an inversion of control layer instead of the function manages himself and state gets passed to him and he can just omit State and all the boarders are all this room hard things around man.
00:20:23 [W] It should be that how of the state is handled in the back end. Is Sir delegated now to the runtime in the true serverless fashion, you know, the problem is that this that crud doesn't always fit this
00:20:35 [W] New models and new ways of thinking about the state now.
00:20:40 [W] I'll get to that Justin second.
00:20:45 [W] So that's that's what sort of the premise when we started Klaus be trying to answer the question.
00:20:48 [W] Can we abstract overstate in this way?
00:20:51 [W] And can we provide you know a stateful addition to function as a service?
00:20:55 [W] That's great for a state less workloads, you know, so the joint thinking gives us a you know, the platform we need for general purpose applications.
00:21:02 [W] So what is Cloud State you can you can if you can you can find out more after this talk if you go to Cloud State of Ohio, but the overview is that you know first is open source fully apache2 is available on GitHub.
00:21:18 [W] Go check it out and mess around with the code and contribute. Ideally. If you like this sort of the disturbs short one sentence is really that it's distributed State Management for the cloud in a serverless experience as I told you about.
00:21:33 [W] Serves short one sentence is really that is distributed State Management for the cloud in a serverless experience as I told you about and it's really it's really two things first is a reference implementation, but it's also
00:21:40 [W] And it's really it's really two things first is a reference implementation, but it's also standards or a protocol in a specification.
00:21:45 [W] So this is possible to create more than one implementation these people feel inclined but the essence is that it lets you focus on your business logic your data model and your workflow.
00:21:53 [W] That's it essentially and how to cut configured declaratively these things, you know, it's sort of leveraging akka to do some lot of the heavy lifting the cluster.
00:22:04 [W] Sharding and and and you know and persistence and things like this across across, you know, the nose the kublr that is called something like that all the hard things around State both long-term durable State as well as
00:22:19 [W] And you know and persistence and things like this across across, you know, the nose the kubelet is called something like that all the hard things around State both long-term durable State as well as select more short-term
00:22:21 [W] We'll stay tuned or coordination type of State scratch data, and these things are managed by akka it leverages grpc as a protocol, you know between the backend and the client I'll get to that just in second.
00:22:34 [W] You can Aid in kubernetes and all four rounds and crawly and this allows us to compile it down to Nathan.
00:22:42 [W] Oh Siddhartha rounds from the jvm is very important to minimize. This is the memory overhead and the start of times the integral DM really helps us with that.
00:22:52 [W] So it's really polyglot often hears her.
00:22:54 [W] Here's where Mr. Leverage grpc grpc sits right in between.
00:23:00 [W] You know, it's the protocol how clients is our make make make make use of these of these of this.
00:23:05 [W] Serve didn't didn't distribute Estate Management and essentially any any language that has support for grpc can be supported by Cloud State because you know, essentially all these clients are grpc clients, and we currently have support for
00:23:20 [W] Darth and altmed Russ Swift and scholar not all our them are complete that a lot of them are being worked by the community as we speak.
00:23:33 [W] So it's really exciting to see the community pick these up and sore and sore cracking these these these client libraries out.
00:23:38 [W] It also supports like Paulo State, you know, as I said, you know crowds not always the best and best, you know answer to the should to sort of the serverless state serverless story, but you know other models that I
00:23:53 [W] Is that that we support now classed adhesive and sourcing I want to go on to talk to go through with that is really and how it works. But the best sources really really cool cri-o duties like a certain essentially conflict-free replicated data types and allow it to share State freely
00:24:08 [W] You select this was intentionally conflict-free replicated data types and allow could just share State freely of the cluster without worrying about you and the race conditions and an inconsistent data.
00:24:17 [W] It's eventually consistent while event sourcing is strongly consistent. So it gives you two models for that.
00:24:19 [W] We also key value store and it supports that across a wide range of databases, you know, SQL no SQL new SQL and all same number replication.
00:24:29 [W] So if you just going to do it's going to end by sirs zooming out a little bit what it what it what it looks like is that you can see on the on the right hand side that you know that we can write, you know fungus or of these entities or or
00:24:42 [W] Functions in any language like we didn't look like for example the python type of shopping cart. We can do Java implementation of an order and we can have a JavaScript function Implement do the inventory this in this simple example, but the interesting thing is that for all the clients
00:24:58 [W] Function implemented inventory this in this simple example, but the interesting thing is that for all the clients web clients Archie clients know they communicate over grpc to these entities, but they do that through the through the clouds haproxy and the
00:25:06 [W] Through the through the clouds haproxy and the clouds through proxy. Is there a managing all the data on behalf of all these entities?
00:25:15 [W] It's for its for populates them as needed, you know during as they are requested, you know, so so all of these entities are always fully hot.
00:25:23 [W] They're always have the latest data available that sort of truly really endpoints, you know, and the database sits in front of it again having this inversion of control.
00:25:31 [W] Where each entity is just you know, sort of sent the the things he needs at this at each moment.
00:25:46 [W] So to speak and the class haproxy looks Crooks across all of these entities and optimizes the data storage for all of these State models across all the entities you have.
00:25:48 [W] So that's all I had as an intro.
00:25:55 [W] So now James going to give us a little demo here and go into more details about how things look and how you can get this get started with Cloud State.
00:26:05 [W] State. Thanks Janice. Now. I'm going to be creating a demo application. So you can see clouds died in action this demo application is going to be a Q&A app. It's going to allow participants.
00:26:19 [W] Of a conference to ask questions and vote on those questions for a speaker to answer.
00:26:25 [W] Unfortunately.
00:26:30 [W] Sorry to prepare for this presentation.
00:26:43 [W] I've already got a few things in place.
00:26:46 [W] I've I'm going to use JavaScript for this Cloud State supports a range of different languages. But JavaScript is a language that many people know. So I've set up a package.json.
00:26:58 [W] I've got a Docker file so that I can build this and deploy it and the first important thing that we're going to look at is the Prototype file for the QA servicemeshcon.
00:27:08 [W] So here's our grpc service here.
00:27:11 [W] So this Q&A there are two RPC calls.
00:27:15 [W] ask and watch so ask allows asking a question and it's also used to vote on questions.
00:27:24 [W] So you send an Ask request with the same question that's already there that will register as a vote for that question.
00:27:27 [W] watch allows us to get the current questions and votes and will also push new messages whenever there's new votes so that we can update the display real-time to see the voting in real time
00:27:43 [W] Of saying this before in a grpc interface. This is these HTTP transcoding annotations.
00:27:57 [W] This will allow us to consume the the the service as a rest interface and Cloud State for the watch actually has support for service and events and allows and so the watch will be done using the service and events.
00:28:06 [W] So another thing to look at both of these requests are requests and watch request have a field on them called presentation and that field has an annotation on it saying what the entity key use so a single Cloud State service
00:28:22 [W] entities H with a unique key and this is how Cloud State knows when it proxies the calls going to the service what the key of the entity that it's currently been served is so that it can enrich those calls with the current state and be able to
00:28:38 [W] In surveys so that it can enrich those calls with the current state and be able to provide the user function with everything it needs to to be able to serve the calls.
00:28:48 [W] So we have that on both ask request and watch request and you can see the questions that we return from the watch request.
00:28:53 [W] It's a stream of questions is just a map of questions to the count of people that have voted for that question.
00:29:01 [W] So let's go down to implementing it.
00:29:04 [W] So I'm going to start by requiring the cloud stage module and I'm going to create a new entity in this I pass the path to this Q&A Proto file as well as the fully qualified
00:29:20 [W] Implementing it. So I'm going to start by requiring the cloud stage module and I'm going to create a new entity in this side pass the path to this Q&A profile
00:29:22 [W] Service that this entity is going to implement now to implement this service.
00:29:28 [W] I'm using a say at 80 cri-o.
00:29:32 [W] They tell you stands for conflict-free replicated data type and what's the a data is allow is for state to be shared between many nodes so we can deploy this to meet many notes and those many nodes can can
00:29:44 [W] State independently with no coordination and they are guaranteed to all Converge on the same state eventually. So we'll see this a bit more as we go through.
00:29:56 [W] One other bit of setup.
00:30:01 [W] I'm going to set a default value for this entity.
00:30:12 [W] So when a request comes in for an entity that hasn't yet had a state created this callback is used to say which cri-o TT.
00:30:13 [W] We're going to use and in this case.
00:30:14 [W] We're using something called observe removed map, which is a map that that can be multiplied that could that could be modified at things added and things removed from multiple nodes at a time and is guaranteed to converge on a single stackrox.
00:30:27 [W] So let's get right into implementing. Our service will implement the ask call.
00:30:34 [W] So here's our function ask we take the request Fest the the ask request with the question in it.
00:30:42 [W] And we also take a context variable and the context is what holds the state so I can then check does the state have the question that is being asked if it doesn't have the question that's been asked I will
00:30:54 [W] Something called observe removed map, which is a map that arm that can be but multiple back that could be modified things added and things removed from multiple nodes at a time and is guaranteed to converge on a single state.
00:30:56 [W] So let's get right into implementing. Our service will implement the ask call.
00:30:57 [W] So here's our function ask we take the request.
00:30:57 [W] That's the the ask request with the question in it. And we also take a context variable and the context is what holds the state so I can then check does the state have the question that is being asked if it doesn't
00:31:00 [W] 2 Nu J counter now Jay counter is another ci/cd T.
00:31:01 [W] It's a counter Jake. Allen is a stands for grow only counter.
00:31:06 [W] They're great because you can have a hundred nodes incrementing these counters all symbol taneous lie with no coordination and you're guaranteed that every single increment that you will do will be counted.
00:31:18 [W] Nothing's going to overwrite each other.
00:31:19 [W] There's no coordination.
00:31:21 [W] looks G counters are really great. Cri-o Duty and we're going to use that to count votes.
00:31:25 [W] The final thing that will do so after we've ensured that for that question, we have a jake counter set in the map will increment the counter for that question by one and finally we just
00:31:42 [W] the final thing that will do so after we've ensured that for that question, we have a g counter set in the map will increment the counter for that question by one and finally we just
00:31:44 [W] So that's the asked called on. The next thing that we want to implement is the watch call.
00:31:50 [W] So similar to ours, we take a request and context parameter.
00:31:56 [W] We're not Grant actually use the request parameter.
00:31:59 [W] And one thing I'm going to do here is create a helper function to copy the questions from the ci/cd T map into a straight Json object.
00:32:11 [W] So there's the keys of this object to going to be the questions themselves and the values will be the current count at the current value of the counter.
00:32:17 [W] Sorry, Willie iterate through the current.
00:32:22 [W] Oh our map and 4-H counter and question.
00:32:25 [W] We will then update that counter and finally returned the questions. So now we can use that method to get the questions.
00:32:35 [W] And I will then.
00:32:38 [W] Return those questions. And so when this watch call this first invoked those that those questions will be returned.
00:32:53 [W] But we also want to push a new value for the questions every time the state is updated.
00:32:58 [W] And so to do that.
00:33:01 [W] we're going to register on stage to change callback and on state change allows us to take the state and return a new message. That should be sent to the client.
00:33:09 [W] and return them but this is inefficient because it means we're its own sending each every question with its votes each time, even if it hasn't changed since last time so I'm going to write another helper function here
00:33:30 [W] Change since last time so I'm going to write another helper function here that's going to update the questions map with the new value for with with anything that's change as well as produce a
00:33:39 [W] if anything let's change as well as produce a and updated Json object with just the changed values so similar to before I iterate through the map and if
00:33:50 [W] Shannon in the map doesn't exist on our existing questions or if the counter value is different then I'll update both the questions map as well as the updated map that we're keeping
00:34:06 [W] And finally return that and now I can use that that map that that helper function here to create to both update my questions map that I'm keeping a track of as well as
00:34:22 [W] How about that helper function here to create to both update my questions map that I'm keeping a track of as well as return the updated get the updated field.
00:34:27 [W] And so then we'll just quickly check if the if there are any fields that have updated. So if they're ever the number of keys in there is greater than zero then we'll return the updated questions.
00:34:40 [W] And now we're almost finished.
00:34:49 [W] We just register those command handlers on the entity. So we asked the function will be used to handle the ask command.
00:34:53 [W] This is from here that will handle that and watch method will handle the watch grpc method.
00:34:57 [W] And finally, we'll stop the entity and now I've implemented my q and a stateless function.
00:35:06 [W] So let's have let's now build that.
00:35:12 [W] So I'm going to run npm run Docker buildpacks.
00:35:23 [W] So this is a helper function that I created before.
00:35:25 [W] And while that's running I'm going to quickly show you this UI that I created.
00:35:38 [W] So this is a separate deployment. This obviously is not part of Cloud State, but it's going to use that staple service that we just created. So it will let us select a presentation from here and be able to ask questions on it.
00:35:48 [W] So we've now built the docker image.
00:35:52 [W] I'm going to run npm run.
00:35:53 [W] This is a helper function that I created before.
00:35:54 [W] And while that's running I'm going to quickly show you this UI that I created.
00:35:55 [W] So this is a separate deployment. This obviously is not part of Cloud State, but it's going to use that stateful service that we just created.
00:35:56 [W] So it will let us select a presentation from here and be able to ask questions on it.
00:35:56 [W] So we've now built the docker image.
00:35:58 [W] Let's take a look at the descriptor for deploying a stateful service as you can see.
00:35:58 [W] It's a kubernative descriptor kind of staple service and we have the the user function container here with the image. That's the image that we just built and published.
00:36:08 [W] So let's now deploy that.
00:36:12 [W] Who control apply - F or under dot llamo?
00:36:19 [W] And just because just for fun.
00:36:27 [W] I'm going to scale that up manually to six rubber case. Obviously.
00:36:29 [W] I've got no load on it at the moment.
00:36:33 [W] So it's not going to order scale up. So old manually scale it up to six replicas. If we do kuchen troll get pods we can see some of them already running and they're starting and with before long they should all be running
00:36:44 [W] A curve control get pods. We can say some of them already running and they're starting and with before long.
00:36:45 [W] They should all be running and in a cluster now one of the reasons why I've scaled up here is because I want to demonstrate that this is truly distributed state. If I had scale this just work run one note, then it wouldn't be that interesting because
00:36:58 [W] It's very easy to get State consistent on one note, but because it's running on six nodes and because anything can when a request comes in it could go to any of those nodes if those nodes aren't sharing their state and the CRT TVs
00:37:13 [W] Working then this time. I won't work.
00:37:15 [W] So it's all running now.
00:37:17 [W] Let's go to a presentation and I'm going to
00:37:23 [W] ask a question and it appears there.
00:37:27 [W] There's a little bit of a delay there.
00:37:33 [W] That's because I haven't done anything to try and update the state locally and in the client when I ask a question, it actually relies on this on the the update of the ci/cd T which then we'll get gossip to the other nodes and then get pushed
00:37:42 [W] Sorry, can I ask another question?
00:37:49 [W] And that worked.
00:37:52 [W] Why don't we try from another browser?
00:37:54 [W] Does it work across browsers?
00:38:02 [W] Here we can see yes indeed. It does if I vote in this one. I should say that go up so we can see voting works.
00:38:19 [W] We can vote all over the place and just click vote and all all these things should eventually Converge on the same state as all the nodes and I don't know actually which nodes these are connecting to its use in a load balancer that would randomize it so they're probably not
00:38:28 [W] Connecting to to all the same notes, but what we can see here is our demo is working.
00:38:38 [W] Now. You can visit this this at this this presentation is pre-recorded.
00:38:40 [W] It would have been kind of cool if you could all visit this now and and we could see everyone updating it but a few in my presentation, but if you go now you can see with the other participants in this presentation voting and and have a play with it.
00:38:53 [W] Sarah Nats SQ and I don't hap.
00:38:56 [W] So that's the end of the demo. Thanks, Janice.
00:39:01 [W] Thanks a lot James.
00:39:07 [W] There were there was a there was a great demo now.
00:39:10 [W] I think I think we have time for some questions.
00:39:15 [W] So if you have any far away.
00:39:23 [W] I hope you can hear me first.
00:39:31 [W] I just want to apologize for the really, you know, bad quality of the abyss of the streaming.
00:39:33 [W] It was all recorded in HD, but that didn't make it through all the way to to you as viewers of unfortunately.
00:39:41 [W] We will do our best to to publish a version on YouTube as soon as possible. So you can look there.
00:39:49 [W] can also publish the link to the actual demo so you can write yourself.
00:39:51 [W] That was one of the one of the questions were actually quite a few of the questions related to that.
00:39:58 [W] North Sea
00:40:03 [W] Can you hear me Janice?
00:40:19 [W] Yeah, I can hear you.
00:40:23 [W] Once I went to this one.
00:40:25 [W] Sorry, if a serverless function.
00:40:29 [W] If it said was function needs to States permit state and Warehouse of a product State how should this function wait for this multiple state to start working.
00:40:44 [W] So there's multiple ways that this can be addressed.
00:40:51 [W] I mean obviously you can have another stateless function that calls out to both entities to get there are states simultaneously.
00:40:55 [W] It's a another way to do it is to to create a projection.
00:41:00 [W] where the events from one from both engine he's a published and then consumed by another entity that is able to combine them together or or perhaps some
00:41:14 [W] A few so projection zone is something that's that's coming to Cloud State very soon.
00:41:23 [W] Yeah, that's the answer to that question.
00:41:26 [W] Did you want to take another question we notice here we have another one from are still Lance.
00:41:37 [W] The question is how do you see the path from migration of a classic Gorka texture to serverless architecture, you know, of course, I mean if this is the two models are quite different and it's
00:41:48 [W] So, you know migrations of this kind is of course always very dependent on the application is really hard to give any any any general advice but in you know, if I will try to do that anyway, you know that will sort of try to try to find a service they can
00:42:03 [W] Lies, you know all the way down to the database through sir, slice it off and almost view that service subsystem or an external system and then Implement that from top to bottom.
00:42:18 [W] So what we used to call the Tracer bullet, you know in when I when I got started, you know, the Practical pragmatic programmer is or a pat pattern that unites. It's really good that you that you do it top down and
00:42:27 [W] and you migrate back to the cloud and and if you're running hybrid, you know, you you know, you can you can probably even do that and then seamlessly users slice off, you know in a vertical chunks service by abide by service on
00:42:42 [W] Until you have old have it all you know migrated.
00:42:49 [W] Yeah, but I said it's usually more tricky than just that you know, so but that's at least the approach that will look at first.
00:42:53 [W] Okay, I'll take this one is Hendrick asks is clad steel only designed for relatively small messages that need to be kept or also for larger amounts of data. For example binary blobs.
00:43:08 [W] I would say it's more designed for a small for a small messages for for things that can be represented as as single entities in memory as events particularly.
00:43:22 [W] Your kind of business entities.
00:43:33 [W] There's no reason why you can't store binary blobs in it, but that's but you know, there's plenty of solutions out there for when you just want to stall a binary blob Cloud State doesn't really need to replicate that.
00:43:40 [W] Okay.
00:43:46 [W] Yeah, I can I can I can ask the next one.
00:43:50 [W] It's Alexandra.
00:43:51 [W] Ask how many implementations of the Cloud State specification into this ssize as I hinted at in the in the talk we have well, you know quite a few implementations or of the of the of the of the grpc
00:45:12 [W] Say I should be transcoding specification which allows you to specify annotations in your in your grpc.
00:45:26 [W] If files to say how this grpc in and point should be exposed as rest. In fact in the demo.
00:45:35 [W] Unfortunately was hard to see that but in the demo I was actually using that because that's how the cas Q&A app from the browser communicates using rest. So yes.
00:45:41 [W] Yes rest is is absolutely supported via the rest transcoding for grpc.
00:45:48 [W] Yeah, okay.
00:45:52 [W] Thanks James. Another one from from Ahmed. It's about Flint give stateful functions.
00:46:06 [W] That was a that was a talk by Justice Avenue. And in the I think it was in the serverless summit, but I think is giving it again actually tomorrow if I'm work today, even I'm not sure and how we differentiate ourselves from from from that.
00:46:14 [W] You know, I'd say, you know, if you squint a bit, you know the with they can be look quite similar.
00:46:19 [W] But I think I think you know, they have quite different user of at least three objectives, you know stateful function is really sort of fling state for functions of it's really all about, you know, it's a all about but it's reproaches. The
00:46:35 [W] Almost from a streaming site in the coming from Flink naturally and and it's in my if I'm not mistaken.
00:46:45 [W] It's a parentless fourth one through State model, you know, there's more of key value based, you know, sort of stories dating rocks DB and it's and it's not really made for polyglot, you know, since it's sort of has this job I Heritage, you know it coming from from job. It's not
00:46:57 [W] Attracting things over over over grpc while in a cloud state is it's really about exposing this as many languages as possible through Europe you see and this as men and also giving you know, the options of as many state models that fits the serverless
00:47:12 [W] Model as possible.
00:47:15 [W] We currently have three to talk about but I don't see em, and you can definitely add more if they move they make sense.
00:47:25 [W] So it's really really about abstracting over State and making that available to many languages.
00:47:28 [W] So this is a little bit different, you know, go face a but you know, I can definitely see, you know options for for composition here since since we're tackling things in slightly different ways.
00:47:42 [W] I don't know if we have time for any more questions.
00:47:47 [W] It's five. Is this 135 now do we?
00:47:51 [W] Okay, I can ask right after one more here.
00:48:03 [W] Then Alex is asking did you did I get it right by understanding the closet essentially helps helps helping seeing function serves in the more in the more and more pure functional Way by abstracting away side effects.
00:48:14 [W] I say that's really no no think not the goal.
00:48:15 [W] I think in the functions of services is really, you know, side-effect free in the sense that it that it that it really reacts to that's coming in and it sends out, you know,
00:48:25 [W] It's really it's really about that sort of classic event driven model and and across States simply try to extend that by having it.
00:48:38 [W] State in the same ole love, you know, you know a protocol for State coming in and protocol for State going going out the side.
00:48:56 [W] still need to become a - if you have them in a city in a safe way that said, you know things like event sourcing can give you solid model for actually managing side effects in the more predictable fashion, so to speak so
00:49:01 [W] Could help.
00:49:03 [W] So I think that's that's that's it.
00:49:16 [W] Right James. Do you have did you see any other ones you want to answer not accept somebody's I like testing they say it's Q&A app with some very nice amount of votes and you can say the say IDT is a it's
00:49:28 [W] Across six nodes are able to handle that that rate of votes pretty quick look pretty nicely.
00:49:37 [W] So demonstration of Cloud State working. It's only a figure to Nate to node 4 node connected Pastor here. I mean I see
00:49:49 [W] More questions coming in.
00:49:58 [W] Well, we've been answering them and and please go to the slack Channel and post them there and we'll try to stick around for a few minutes and answer them their story. If you're at if your question wasn't destined here in the in the talk, but I think we have to
00:50:05 [W] Move off this broadcast now.
