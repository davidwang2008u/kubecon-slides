Building a Distributed API Gateway with a Service Mesh: ZNQO-2708 - events@cncf.io - Tuesday, August 18, 2020 7:38 AM - 136 minutes

Participant: wordly [W] English (US)

Transcription for wordly [W]

00:07:07 [W] to Cynthia and I'm here with
00:07:13 [W] my name is racing is ooh, and we're going to be talking about building a distributed API Gateway with the servicemeshcon taking API Gateway functionality and moving it into a servicemeshcon.
00:07:44 [W] Because it means a lot of different things to a lot of different people, you know, the name is sort of going through an identity crisis next.
00:07:54 [W] We'll be talking about Envoy which is a particular implementation of a proxy that we will be using in the stock. So we just want to give sort of a quick forward about what it is next.
00:08:07 [W] We'll be talking about using wasm in Envoy as well as why we would want to use wasm at all in order to build extensibility into these proxies and last will give a demo of adding a PID
00:08:17 [W] Is you know what it provides next?
00:08:38 [W] We'll go over what an API Gateway is and sort of D generalize that term because it means a lot of different things to a lot of different people.
00:08:39 [W] It's you know, the name is sort of going through an identity crisis next.
00:08:39 [W] We'll be talking about Envoy which is a particular implementation of a proxy that we will be using in the stock. So we just want to give sort of a quick forward about what it is next. We'll be talking about using wasm in Envoy as well as why we would want you.
00:08:42 [W] Use wise mm at all in order to build extensibility into these proxies and last will give a demo of adding API Gateway functionality into a servicemeshcon.
00:08:44 [W] You have 20 different Services may be written in three different languages.
00:08:47 [W] Right and they and you want to apply a a policy across all of your services at once. It can be very hard to do that without any sort of layer there. For example, if you wanted to enforce encryption between all of your services because let's say
00:08:56 [W] Services may be written in three different languages, right? And they and you want to apply a policy across all of your services at once.
00:08:57 [W] It can be very hard to do that without any sort of layer there.
00:09:00 [W] For example, if you wanted to enforce encryption between all of your services because let's say you had a new requirement pop up, right? It may be very hard to actually achieve that because you have to you know Implement a library each in the three languages and then you have to wait for all of
00:09:06 [W] Is to adopt it and then you have to test in each of the 20 services that they're all doing.
00:09:15 [W] What they're supposed to do IE. The encryption is working the way you expect it to with his with the servicemeshcon sprawl.
00:09:25 [W] Mm is actually much easier because the idea is you have a single slide car that sits next to every single service that actually does all of that complex Logic for you.
00:09:34 [W] So this sidecar figures out how to do in TLS or service to service encryption in your
00:09:37 [W] visual Services don't have to figure it out themselves.
00:09:42 [W] This makes it really easy to add in new services.
00:09:55 [W] So if you want to add in a new service, perhaps written a new language, you don't have to go build, you know a library to do transport encryption. The way your company does it you just let it talk to the sidecar in the site car handles it all for you write. This also
00:09:57 [W] Way to be able to query policies the across the whole meshmark is again. You have one configuration source for how you do all your networking.
00:10:10 [W] This can be really useful also because it sort of abstract networking logic away from application logic.
00:10:17 [W] So let's say you're moving a service into a new cloud provider to a different cloud provider.
00:10:19 [W] Maybe you're adopting Cloud.
00:10:26 [W] You don't have to go, you know, read to play all of your applications anytime. You do play a new service into the cloud. You can just send a configuration update that says
00:10:28 [W] hey, you know route all of your traffic to this new service in the cloud and it's just a single configuration update.
00:10:36 [W] You don't actually have to deploy a new version of your app or deploy an app configuration update right because they're decoupled so it's much lower risk and much easier to make changes as time goes on.
00:10:48 [W] This is why I servicemeshcon really useful and why would you would want one?
00:10:53 [W] So an API Gateway is actually very similar to a servicemeshcon our minds write an API Gateway just is going to be providing those consistent set of policies or
00:10:58 [W] Is that you want to happen on the front door?
00:11:01 [W] Right?
00:11:02 [W] So they're going to be doing rate limiting and maybe protocol translation or maybe authentications for users, right? So they're handling they're giving you that consistency at the front door right there.
00:11:16 [W] They're giving you one front door that X the same way. So that way every single service behind it, you know doesn't have to figure out how to do like user authentication.
00:11:25 [W] Your front door is also very useful, but it got us to thinking, you know, if his servicemeshcon API Gateway are all about providing consistency at the networking layer there just at two different networking points.
00:11:43 [W] Would it be possible to combine these two things into the exact same system so that way you don't have to maintain two separate systems. For example, if you want to change how authentication is done you change it in one place and you don't have to go change, you know user authentication at
00:11:56 [W] Service the service authentication for your psyche our implementation for your servicemeshcon having one place to change that if you get an influx of traffic you no longer have to scale up your API Gateway and your actual Services behind the
00:12:11 [W] You just scale up your service and your services site car is handling all of that front door traffic as well as the service to service communication. Meaning there's a lot of exciting things that can happen here. And this is what an API Gateway truly is it's not something that is like combining.
00:12:27 [W] That's getting into feature creep territory where it can be really hard to make changes because the API gateways just doing too much.
00:12:38 [W] But when you think about an API Gateway like mistake, yeah gateways are where they're just providing this consistent set of policies on the networking front door.
00:12:45 [W] It can also work really really well as just being part of your service Miss I car for the sidecars are just handling all of that transparently because they're doing a lot of the same things, you know, they're rerouting. The logic is exactly the same from routing from a service in as well as
00:12:57 [W] Community right the routing is exactly the same and an authentication, although it may be different, you know, you're validating a JWT instead of a certificate, you know, it's the exact same procedure.
00:13:10 [W] It's just authentication.
00:13:17 [W] You're just authenticating something different right but these two things can be combined without introducing too much feature creep.
00:13:25 [W] So what is Envoy for those of you who haven't heard of envoy before just know it's a very very common proxy that is used in a lot of servicemeshcon.
00:13:28 [W] Today in this session.
00:13:33 [W] we're going to be using Envoy has the sidecar for our servicemeshcon of you may be more familiar with something like SEO which Builds on top of envoy and adds a new set of Concepts that can help, you know, integrate Envoy into a service message system for Simplicity.
00:13:45 [W] We're just going to be using Envoy if you're wondering why Envoy is so popular, right?
00:13:56 [W] It's it's very performant from the ground up and it's very easy to introspect with first in class logging and monitoring. It's very very easy to see what is going.
00:13:58 [W] On next it's also very sensible.
00:14:03 [W] So it's very easy for us to add in new functionality without too much work.
00:14:10 [W] It's got this idea of filters that will talk about more here in a second and it's also got this great Dynamic configuration system, which is called X DS which will allow us to not only push updates very easily. But also track the progress of when they get applied.
00:14:20 [W] As well as a pi gateways today in this session.
00:14:28 [W] We're going to be using Envoy has the sidecar for our servicemeshcon of you may be more familiar with something like SEO which Builds on top of envoy and adds a new set of Concepts that can help, you know, integrate Envoy into a service message system for Simplicity.
00:14:30 [W] We're just going to be using Envoy if you're wondering why Envoy is so popular, right? It's it's very performant from the ground up and it's very easy to introspect with first and class logging and monitoring.
00:14:32 [W] It's very very easy to see what is going on next.
00:14:35 [W] It's also very sensible.
00:14:35 [W] So it's very easy for us to add in new functionality without too much work.
00:14:35 [W] It's got this idea of filters that will talk about more here in a second and it's also got this great Dynamic configuration system, which is called X DS which will allow us to not only push updates very easily. But also track the progress of when they get applied. So
00:14:37 [W] Applied in his being used and and this works great. So
00:14:38 [W] Oh, it's light.
00:14:38 [W] It's an updating.
00:14:38 [W] So if you're curious about building a distributed API Gateway, my slide is an updating.
00:14:50 [W] The the idea is Envoy has this idea of filter chains.
00:14:54 [W] So an Envoy is going to be it has a listener.
00:14:56 [W] is listening on a port and is going to have traffic coming on the inbound, right and that that listener is that morning to pass off the traffic to a series of finops.
00:15:04 [W] sir chains and a filter chain is kind of a dense concept but the basic idea is it's a series of filters and each filter is going to do one thing to the request or or response and then move on so for example, it may be parsed the request
00:15:18 [W] Vaughn so for example, it may parsec the request as HTTP and then, you know, let the router now match on HTTP level things right? So it's going to validate that it's valid HTTP traffic and then continue on maybe
00:15:30 [W] That then takes an HTTP header and validates the JWT and then passes it on right? So you have these series of operations that are filters and they get put in a chain, right?
00:15:46 [W] And so once that chain completes on the request it's going to be sent to a router the router is then going to Route the traffic to and up a particular Upstream that Upstream is then going to respond and it's responses again
00:15:57 [W] Route the traffic to and up a particular Upstream that Upstream is then going to respond and it's responses again going to go through a series of filters all the filter chain that are each going to be new to you. One thing to the response.
00:16:04 [W] Maybe it's just adding a metric.
00:16:06 [W] Maybe it's actually changing the response.
00:16:11 [W] It is up to you and then it's going to go back through the listener and send a response to the user.
00:16:14 [W] So while some extensibility and Envoy, so Envoy has reached recently announced that it is going to you know, support being extended through wasm.
00:16:25 [W] I will talk about why we chose whereas I'm here in a bit, but this is a very good thing. There are official sdks out there for C++ and rust.
00:16:36 [W] So if you're developing with C++ and rescue will have a very well Worn Path for development and hopefully it will be very easy to do. They're also unofficial sdks for go and Assemble.
00:16:44 [W] A script so, you know again a bit more of not as well warn of a path but a path that you can still hopefully easily hop onto and then because we're developing wasm, you know, there are many other languages that can compile down to webassembly you can add support for yourself.
00:16:59 [W] Rosen filters are going to be time delivered dynamically to Envoy with the XDS configuration system.
00:17:09 [W] So this means it's possible to update the actual filters, you know that are doing operations on a request such as authorization without ever restarting Envoy.
00:17:19 [W] So we don't have to worry about you know, losing any connections or losing any traffic.
00:17:21 [W] We're just going to deliver configuration updates exactly as we would deliver configuration updates normally without house them.
00:17:28 [W] them. We would normally have to build our extensions as C++ into the envoy.
00:17:33 [W] Hurry, which means any time we wanted to update that particular extension. We would have to rebuild Envoy, you know from the ground up.
00:17:39 [W] This is what things like SEO have done, right?
00:17:45 [W] They've maintained their own build of sto. And that's quite a high bar. In order to be able to do that. There is also low extensions.
00:17:51 [W] However, they're generally not as fully featured a C++.
00:17:52 [W] There are some things that they can't do whereas wasm is a fully featured right ABI that you can build against
00:18:00 [W] So what is wasm while some is actually kind of similar to Java bytecode right where it's this generic typed binary that multiple languages can compile to it was originally built for the browser to sort of be an
00:18:13 [W] Solution to JavaScript rate. However, it's generally much faster than JavaScript because it has those strict types that are very easily optimize as well as there's no parsing time, right? So it's very lightweight to deliver and then start executing.
00:18:29 [W] Again, very similar to Java right where it's this generic bytecode very easy to execute and continue.
00:18:35 [W] So, why would we even choose wasm if it was built for a browser is sort of another version of JavaScript?
00:18:45 [W] Why would we even want to to use this to extend our proxies?
00:18:46 [W] Well, there are a lot of benefits first off.
00:18:49 [W] It's a very isolated environment.
00:18:54 [W] So if the wasm filter, you know panics it's not going to panic the entire Envoy proxy, right?
00:18:59 [W] So the entire proxy is not going to crash just because this particular rasim filter crash. That's a very nice property, especially when you're an API Gateway and you're dealing with untrusted traffic and you
00:19:06 [W] You have a bug in your code, right?
00:19:15 [W] We all make bugs so not having to worry about bugs coming in and crashing the entire proxy and only affecting that one request is very useful.
00:19:16 [W] Not only that but we can also limit CPU and memory consumption so we can validate you know, that one person can't take up all of the CPU and prevent code from being executed that normally would be executed because one person is taking up all of the CPU and
00:19:30 [W] Adding filters and say C++ which is you know has a long history of memory corruption bugs.
00:19:39 [W] You can sandbox the runtime to prevent these malicious operations from happening on the host environment.
00:19:45 [W] So it's a bit safer than just writing a normal C++ filter.
00:19:50 [W] There are also many languages that can be compiled down to azzam write C++ rust go typescript, right and a long list of others. So we get support for all of these languages out the out of the box so you don't have to go and learn a new language in order to
00:20:04 [W] develop a wasm filter.
00:20:04 [W] This makes it very easy to extend forever.
00:20:07 [W] Not only that but it gives us a chance to be portable.
00:20:19 [W] Right so we can validate that. You know, your code isn't just going to work on Envoy or your code isn't just going to work on another proxy, but it'll work across all of the proxies. So as your as your infrastructure evolves and as you have you needs you will be able to
00:20:22 [W] These with zero downtime right in without having to rewrite any of your code because you can just import these filters from one to the next.
00:20:32 [W] This is a really nice property that we really want to ensure.
00:20:43 [W] So what is proxy was some well proxy was some is that consistent interface between proxies right? Now? There are two proxies that implement this particular interface rate this ABI, right? And this is Envoy and Apache traffic servers.
00:20:49 [W] You write using proxy wasm for Envoy will also just work with Apache traffic server and the any Apache traffic server products iwas and we'll just work with Envoy. Right and hopefully as time goes on more and more proxies the top this so again as your infrastructure revolves, right you will
00:21:04 [W] Same code with you as you move to different infrastructures.
00:21:13 [W] So the basic architecture sort of connecting it back to that Envoy architecture we talked about right is there's just going to be a wesen filter inside the filter chain, right? The envoy worker thread is going to come along.
00:21:24 [W] It's going to hit the wisdom filter and it's going to be it's going to talk to a proxy wasm sort of Shem layer.
00:21:31 [W] This is implemented by Envoy then Envoy is going to pass to your code, which is implemented using
00:21:38 [W] Seeing the SDK your code is going to do something right and then return back to this sort of Shem layer that will then continue the filter chain. So the describe that in a bit more detail, right, you know Envoy is going to fire its specific. You know.
00:21:50 [W] Hey, I've had request headers come in and procs and that little shim layer is actually going to normalize it to something that is consistent across all of the proxies, right? And again, there are official sdks for C++ and rest if you want to write it in either of those two languages you get this nice.
00:22:09 [W] interface across all of the proxies that implement it
00:22:10 [W] So this is an example filter that sort of goes over what we're going to do, right?
00:22:24 [W] So we're going to match on a path right that contains private and if there is private in the path, we are going to check the authorization header and then we're going to validate it and if not, we're going to respond with a 401 and this code is going to work across
00:22:30 [W] Well as Envoy it's written rust and can be dynamically updated.
00:22:38 [W] Right? So it's going to be that middle part that sits there. And again all of those benefits that we talked about of wasm it's going to be using node.js is V8. So it's going to be isolated.
00:22:51 [W] It's not going to crash Envoy if it crashes and it's going to have those nice security boundaries that VA provides.
00:22:54 [W] So I assume this demonstration is conducted on Docker compose best environment to run services from proxy and control play as the container. I developed a simple control frame to
00:23:15 [W] Both best environment to run services from proxy and control play as the container. I developed a simple control frame to the table with some code to data brains for this demonstration, which is
00:23:19 [W] Mayadata brains for this demonstration, which is built on the top of God control play and which is a library to build control plane.
00:23:26 [W] It develops from Android community.
00:23:34 [W] This control brain is using LDS capability to apply wasn't filter to studies and void by specifying wasn't pass which is a product to stretch in advance.
00:23:41 [W] This is called PCP and it is open source. This tool is assumed to share the joke about Liam.
00:23:48 [W] as wasn't storageos
00:23:49 [W] This is not for production.
00:23:52 [W] We is get em boy to prepare the demonstration environment this third provides the easiest way to get em, boy binary we can start and boy wizard installing binaries by using package manager.
00:24:16 [W] For example, we can start rather enable the invoice with this single line command.
00:24:22 [W] This feature is very useful to divide your invoice environment.
00:24:27 [W] In today's demonstration.
00:24:35 [W] We is this tiny servicemeshcon inning and green services that have authentication required contents authentication Service that return Json web token.
00:24:46 [W] Extensibility by providing authentication way R we can in webassembly with internal man who said rastislav que tu Brute and green services to preserve authentication required contents.
00:25:04 [W] Them boys provided by get em boy.
00:25:09 [W] Okay, all right start to demonstration.
00:25:14 [W] So a simple altercation capability, but I hope that you understand that combination with voice.
00:33:26 [W] I wasn't extensibility to construct a be a Gateway functionality such as a later in think.
00:33:29 [W] Thank you.
00:33:30 [W] Okay.
00:33:39 [W] thank you for listening. Recently. We released our get to enjoy which has abilities to accelerate our webassembly filter development.
00:33:54 [W] It provides a boiler plate with internal manufactured proxy wasn't SDK.
00:33:59 [W] It supports on last the internal body temperature was T.
00:34:03 [W] Okay.
00:34:05 [W] thank you for listening. Recently. We released our get to enjoy which has abilities to accelerate our webassembly filter development.
00:34:06 [W] It provides a boiler plate with internal manufactured proxy wasn't SDK.
00:34:08 [W] It supports on last the internal body temperature was T.
00:34:08 [W] CK is built on the top of shall prophesy was mm last ack with some communities and the easiest way to
00:34:09 [W] Build and test webassembly filter with Docker container to run developed wasn't filter with a boy without importing a complex commands in this section.
00:34:23 [W] We didn't use this to but we wants to tear that digital is a great choice to build your own wasn't filter.
00:34:29 [W] Thank you for listening.
00:34:33 [W] Thanks everyone. So we've got some questions here that that will go through.
00:34:48 [W] So the first question I see is can we build into play Wesson filters to extend Envoy in an sto servicemeshcon answer is yes is there was actually been was actually one of the first adopters of proxy welcome.
00:35:01 [W] They have an entire page set on their documentation site if you just search is fear wasm it should pop right up.
00:35:08 [W] And there you're continuing to do work to make it easier to integrate Wesson filters as user including introducing new sorts of XDS apis that make it very easy to distribute wezen filters specifically.
00:35:23 [W] Your to integrate Wesson filters as user including introducing new sorts of XDS apis that make it very easy to distribute wezen filters specifically.
00:35:36 [W] The next question I see is is development and maintenance of the servicemeshcon Gateway something all developers in a company end up supporting or is it handled by a specialized team?
00:35:40 [W] You know, I think that depends effectively on the organization right?
00:35:43 [W] It's very much an organizational structure. I think most people though end up adopting sort of a hybrid where there is one team that runs sort of the servicemeshcon making sure it gets upgraded and maintained and then developers are configuring.
00:35:54 [W] Air Services for the servicemeshcon. So you have one team who's actually managing the infrastructure of the servicemeshcon Gateway and then you have teams that are program and that's sort of why we brought up in the beginning sort of reducing those two
00:36:09 [W] I think developers have to go configure the API Gateway and servicemeshcon.
00:36:14 [W] The next question I see is high if I understand correctly with some support is not yet officially available in Envoy machine Matt Mainline Master version.
00:36:30 [W] Do you build an Envoy with wasm on your own or maybe use this Kyoto which I understand uses a custom Envoy for so it is not in the main Runway proxy or the special Envoy repository. That being said Envoy. It does provide
00:36:40 [W] For Envoy haproxy / Wesson.
00:36:47 [W] So if you search that you should be able to find official builds of envoy it is up to in right now.
00:36:50 [W] It's not part of main line.
00:36:53 [W] That's hopefully it will be merged in soon.
00:36:55 [W] Yeah, the next one is how does envoy communicate to the west and binary HP grpc TP TCP. I assume radio want to answer that one.
00:37:07 [W] Okay. Next question. Is there a git repo with this sample code?
00:37:19 [W] We don't have a property crippled public repository. It deployed at this sample codes.
00:37:27 [W] Sorry.
00:37:27 [W] Yeah, it may be soon. But right now it's dependent on that internal rest SDK, which is planning to be open but not yet and into sort of circle back to the the wesen binary communicates with on voiceover. Just
00:37:44 [W] All function calls, there's effectively in it and ffi standard, which is how how languages can communicate with different calling standards and there's some semantic that goes on behind the scenes, but it's effectively a function call
00:38:00 [W] Standards and there's them some magic that goes on behind the scene, but it's effectively a function call with just a little bit more overhead, but it's not any sort of networking or anything like that.
00:38:05 [W] Next question is would you agree that API gateways are still relevant reasons like the following API gateways can be region aware and Route traffic to multiple message.
00:38:22 [W] Api gateways immature and API management functionality like publishing openfaas.
00:38:23 [W] I based documentation supporting automatic SDK generation providing mock in points.
00:38:31 [W] I think, you know, those are certainly useful features of an API Gateway. That being said, I don't I don't think they are.
00:38:37 [W] Necessarily the same problems right? Because ideally, you know combining those two things. I think sort of gets you into feature creep territory where you sort of have one thing doing a bit too much.
00:38:51 [W] Those are all incredibly useful things to have.
00:38:55 [W] I don't know if they necessarily belong in an API Gateway.
00:38:59 [W] It just feels like a little bit too much to manage it one layer for me that being said obviously a you know, I think there are plenty of products that are doing that and I
00:39:06 [W] I don't think they're going away anytime soon, but that's sort of what I think.
00:39:13 [W] Looks like another high priority one came in.
00:39:22 [W] Those are all incredibly useful things to have.
00:39:31 [W] I don't know if they necessarily belong in an API Gateway.
00:39:31 [W] It just feels like a little bit too much to manage it one layer for me. That being said obviously a you know, I think there are plenty of products that are doing that and I don't think they're going away anytime soon, but
00:39:32 [W] Yes, they can be so if you remember in the tuck we talked about filter chains filter chains can happen / route.
00:39:41 [W] So what you can do is you can have a specific filter and I felt such pain that only happens on a specific route.
00:39:47 [W] The wasm code will only activate on that specific route.
00:39:50 [W] A discovered using when some to implement filters are there servicemeshcon teachers that you need to implement with something else and filters or can we do it everything we want from a servicemeshcon using that?
00:40:24 [W] I think I think in servicemeshcon divides more than than just filters. There's a lot of management that it makes easier, right?
00:40:28 [W] So servicemeshcon about controlling all of those sidecars, which you ideally don't want to do from within the sidecar itself. That being said, you know, I don't think it's feasible.
00:40:39 [W] Bull for a any particular servicemeshcon Implement all of the functionality for every single person ever and so having a way to extend it to fit your specific use case with wasm. I think this is a
00:40:54 [W] It's more than than just filters.
00:40:55 [W] There's a lot of management that it makes easier, right? So servicemeshcon about controlling all of those sidecars, which you ideally don't want to do from within the sidecar itself.
00:40:56 [W] That being said, you know, I don't think it's feasible for a any particular servicemeshcon Implement all of the functionality for every single person ever and so having a way to extend it
00:40:57 [W] Or and so hopefully more servicemeshcon.
00:41:02 [W] Ray do you wanna answer looks like question number 10?
00:41:09 [W] And how do you regret the webassembly how project to simplify the way you create and the debris filter?
00:41:19 [W] Yes.
00:41:21 [W] I watched this project we can use this product to write down wasn't code by using typescript know what Adam received.
00:41:31 [W] And it is it has a webassembly have and we can deploy the webassembly filter to the webassembly for help with using this too.
00:41:42 [W] Yeah, and as we mentioned sort of our internal rest SDK earlier there has been some thought about how we can integrate with webassembly Hub there to give me that experience either. We definitely like webassembly HUD.
00:41:59 [W] Is it possible for a filter to use an external service if it's sandboxed in wasm? Yes, the the sandboxing is, you know, not something like a firewall or something that would prevent access.
00:42:15 [W] Obviously.
00:42:18 [W] Sort of our internal rest SDK earlier there has been some thought about how we can integrate with webassembly Hub there to give me that experience easier.
00:42:29 [W] We definitely like webassembly HUD.
00:42:30 [W] Is it possible for a filter to use an external service if it's sandboxed in wasm?
00:42:30 [W] Yes, the the sandboxing is, you know, not something like a firewall or something that would prevent access.
00:42:31 [W] Leslie I'm sure you could configure the sandbox in a way that it did block network access if you didn't want it to communicate out but yes by default filters can talk to external services.
00:42:34 [W] Have you tested this approach to scenarios like rate control?
00:42:35 [W] For instance?
00:42:38 [W] My doubt is latency cost of running.
00:42:39 [W] I'll steps of an API Gateway as remoted call services Ray. Do you want to talk about any work that we've done there before?
00:42:48 [W] No. Yeah.
00:42:50 [W] Okay.
00:42:51 [W] That's what I thought.
00:42:52 [W] I just want to make sure I'm okay though.
00:42:58 [W] Yeah, we haven't done any extensive testing on rate-limiting itself.
00:43:01 [W] Our main focus has been Authentication.
00:43:03 [W] Inside with rate limiting as we mentioned.
00:43:08 [W] We think it can also provide benefit because not only are you removing it's not necessarily the network step. But you're removing an extra piece of infrastructure that you have to you have to scale because your rate limiting usually takes a second to
00:43:19 [W] We haven't done any extensive testing on rate-limiting itself.
00:43:20 [W] Our main focus has been authentication that being said with rate limiting as we mentioned.
00:43:21 [W] We think it can also provide benefit because not only are you removing it's not necessarily the network step. But you're removing an extra piece of infrastructure that you have to you have to scale because your rate limiting usually takes a second to
00:43:22 [W] So that's that's where those lengths from.
00:43:30 [W] I think we can do maybe one or two more.
00:43:31 [W] What do you think about the risk of having any networking concern handled by one component that may fail especially when playing with Envoy filters that can have a wide impact in case of Miss configuration.
00:43:45 [W] You know, I think that's a totally fair concern right any particular piece of technology handling too much I think can be dangerous.
00:43:53 [W] I think the I think the best answer there is making sure I sort of brought it up earlier feature creep is making sure you don't push too much to the networking layer.
00:44:09 [W] Ideally the networking layer should realistically be you know, like it it should effectively handle the actual giving the user identity and putting in a consistent place retrying and then authorization right
00:44:20 [W] Is making sure I sort of brought it up earlier feature creep is making sure you don't push too much to the networking layer.
00:44:21 [W] Ideally the networking layer should realistically be you know, like it it should effectively handle the actual giving the user identity and putting in a consistent place retrying and then authorization
00:44:22 [W] Retrying and rate limiting you really don't want too much more than that.
00:44:27 [W] And so I don't necessarily and obviously I think you may still have some some code in your app that does a little bit but most of the functionality should be handled by that servicemeshcon, then you don't want to grow it.
00:44:40 [W] So I see a lot of people doing, you know, like combining responses and API Gateway of servicemeshcon, and that's where I personally get a little bit of a sick stomach because I worry about changing that code right hand having it handed.
00:44:50 [W] Yelling too much and having it fail.
00:44:55 [W] So I think the answer there is, you know, the the network is going to fail anyway, so having one place where you have a consistent failure policies good, but at the same time, I totally create I think you need to be careful and how much you push to that
00:45:08 [W] You know authentication authorization are already there.
00:45:14 [W] So, you know, we're not adding anything but you definitely don't I think want to go crazy with resin filters where everything is handled third of in the cycle.
00:45:20 [W] So we are going to wrap up now for time, but you can reach out to us in the pound 2 Cube con service message handle myself, and Ray will be there for a few more minutes, and I hope you have a great rest of your Kube gun.
00:45:37 [W] Khan. Thank you.
